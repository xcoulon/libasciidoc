// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DefaultDocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 420},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 420},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 7, offset: 436},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 450},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 467},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 489},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 510},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 532},
						name: "ListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 7, offset: 550},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 7, offset: 574},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 31, col: 7, offset: 601},
						name: "AttributeReset",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinParagraph",
			pos:  position{line: 36, col: 1, offset: 808},
			expr: &choiceExpr{
				pos: position{line: 37, col: 5, offset: 855},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 37, col: 5, offset: 855},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 38, col: 7, offset: 871},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinDelimitedBlock",
			pos:  position{line: 43, col: 1, offset: 1081},
			expr: &choiceExpr{
				pos: position{line: 44, col: 5, offset: 1133},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 44, col: 5, offset: 1133},
						name: "BlankLine",
					},
					&actionExpr{
						pos: position{line: 46, col: 9, offset: 1159},
						run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock3,
						expr: &seqExpr{
							pos: position{line: 46, col: 9, offset: 1159},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 46, col: 9, offset: 1159},
									label: "delimiter",
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 20, offset: 1170},
										name: "BlockDelimiter",
									},
								},
								&andCodeExpr{
									pos: position{line: 47, col: 9, offset: 1194},
									run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock7,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 59, col: 1, offset: 1634},
			expr: &actionExpr{
				pos: position{line: 60, col: 5, offset: 1663},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 60, col: 5, offset: 1663},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 60, col: 5, offset: 1663},
							run: (*parser).callonAttributeDeclaration3,
						},
						&litMatcher{
							pos:        position{line: 64, col: 5, offset: 1807},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 9, offset: 1811},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 15, offset: 1817},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 64, col: 30, offset: 1832},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 65, col: 5, offset: 1841},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 65, col: 11, offset: 1847},
								expr: &ruleRefExpr{
									pos:  position{line: 65, col: 12, offset: 1848},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 66, col: 5, offset: 1881},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 75, col: 1, offset: 2234},
			expr: &actionExpr{
				pos: position{line: 75, col: 18, offset: 2251},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 75, col: 18, offset: 2251},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 75, col: 18, offset: 2251},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 75, col: 28, offset: 2261},
							expr: &charClassMatcher{
								pos:        position{line: 75, col: 29, offset: 2262},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 79, col: 1, offset: 2318},
			expr: &actionExpr{
				pos: position{line: 79, col: 30, offset: 2347},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 79, col: 30, offset: 2347},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 79, col: 30, offset: 2347},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 30, offset: 2347},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 79, col: 37, offset: 2354},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 79, col: 46, offset: 2363},
								expr: &ruleRefExpr{
									pos:  position{line: 79, col: 47, offset: 2364},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 83, col: 1, offset: 2486},
			expr: &actionExpr{
				pos: position{line: 83, col: 37, offset: 2522},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 83, col: 37, offset: 2522},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 83, col: 37, offset: 2522},
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 38, offset: 2523},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 2532},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 85, col: 9, offset: 2550},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 85, col: 10, offset: 2551},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 85, col: 10, offset: 2551},
											expr: &charClassMatcher{
												pos:        position{line: 85, col: 10, offset: 2551},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2646},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 89, col: 12, offset: 2679},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 89, col: 12, offset: 2679},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 96, col: 1, offset: 2816},
			expr: &choiceExpr{
				pos: position{line: 96, col: 19, offset: 2834},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 96, col: 19, offset: 2834},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 96, col: 19, offset: 2834},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 19, offset: 2834},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 24, offset: 2839},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 30, offset: 2845},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 96, col: 45, offset: 2860},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 96, col: 49, offset: 2864},
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 49, offset: 2864},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 56, offset: 2871},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 98, col: 5, offset: 2931},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 98, col: 5, offset: 2931},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 98, col: 5, offset: 2931},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 98, col: 9, offset: 2935},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 15, offset: 2941},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 98, col: 30, offset: 2956},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 98, col: 35, offset: 2961},
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 35, offset: 2961},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 98, col: 42, offset: 2968},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 105, col: 1, offset: 3150},
			expr: &actionExpr{
				pos: position{line: 106, col: 5, offset: 3174},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 106, col: 5, offset: 3174},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 106, col: 5, offset: 3174},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 110, col: 5, offset: 3312},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 110, col: 16, offset: 3323},
								expr: &choiceExpr{
									pos: position{line: 112, col: 9, offset: 3390},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 112, col: 10, offset: 3391},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 112, col: 10, offset: 3391},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 112, col: 10, offset: 3391},
														label: "anchor",
														expr: &ruleRefExpr{
															pos:  position{line: 112, col: 18, offset: 3399},
															name: "ShortHandAnchor",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 112, col: 35, offset: 3416},
														expr: &ruleRefExpr{
															pos:  position{line: 112, col: 35, offset: 3416},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 116, col: 12, offset: 3533},
											run: (*parser).callonBlockAttributes13,
											expr: &seqExpr{
												pos: position{line: 116, col: 12, offset: 3533},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 116, col: 12, offset: 3533},
														label: "title",
														expr: &ruleRefExpr{
															pos:  position{line: 116, col: 19, offset: 3540},
															name: "ShortHandTitle",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 116, col: 35, offset: 3556},
														expr: &ruleRefExpr{
															pos:  position{line: 116, col: 35, offset: 3556},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 120, col: 12, offset: 3643},
											run: (*parser).callonBlockAttributes19,
											expr: &seqExpr{
												pos: position{line: 120, col: 12, offset: 3643},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 120, col: 12, offset: 3643},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 120, col: 24, offset: 3655},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 120, col: 44, offset: 3675},
														expr: &ruleRefExpr{
															pos:  position{line: 120, col: 44, offset: 3675},
															name: "Space",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 128, col: 1, offset: 3849},
			expr: &actionExpr{
				pos: position{line: 129, col: 5, offset: 3873},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 129, col: 5, offset: 3873},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 129, col: 5, offset: 3873},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 130, col: 5, offset: 3881},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 130, col: 16, offset: 3892},
								expr: &actionExpr{
									pos: position{line: 131, col: 9, offset: 3902},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 132, col: 13, offset: 3916},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 132, col: 13, offset: 3916},
												expr: &litMatcher{
													pos:        position{line: 132, col: 14, offset: 3917},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 133, col: 13, offset: 3949},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 133, col: 24, offset: 3960},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 133, col: 24, offset: 3960},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 133, col: 46, offset: 3982},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 138, col: 5, offset: 4065},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 143, col: 1, offset: 4193},
			expr: &actionExpr{
				pos: position{line: 144, col: 4, offset: 4215},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 144, col: 4, offset: 4215},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 144, col: 4, offset: 4215},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 145, col: 5, offset: 4225},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 146, col: 9, offset: 4238},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 146, col: 9, offset: 4238},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 146, col: 18, offset: 4247},
										expr: &choiceExpr{
											pos: position{line: 147, col: 13, offset: 4261},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 147, col: 14, offset: 4262},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 147, col: 14, offset: 4262},
														expr: &charClassMatcher{
															pos:        position{line: 147, col: 14, offset: 4262},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 150, col: 15, offset: 4428},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 151, col: 15, offset: 4461},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 152, col: 16, offset: 4498},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 152, col: 16, offset: 4498},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 158, col: 5, offset: 4684},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 163, col: 1, offset: 4785},
			expr: &actionExpr{
				pos: position{line: 163, col: 19, offset: 4803},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 163, col: 19, offset: 4803},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 163, col: 19, offset: 4803},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 23, offset: 4807},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 164, col: 5, offset: 4819},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 164, col: 5, offset: 4819},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 164, col: 5, offset: 4819},
											expr: &charClassMatcher{
												pos:        position{line: 164, col: 6, offset: 4820},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 165, col: 5, offset: 4932},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 165, col: 14, offset: 4941},
												expr: &choiceExpr{
													pos: position{line: 166, col: 9, offset: 4951},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 166, col: 10, offset: 4952},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 166, col: 10, offset: 4952},
																expr: &charClassMatcher{
																	pos:        position{line: 166, col: 10, offset: 4952},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 169, col: 11, offset: 5049},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 170, col: 11, offset: 5078},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 171, col: 12, offset: 5111},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 171, col: 12, offset: 5111},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 182, col: 1, offset: 5511},
			expr: &actionExpr{
				pos: position{line: 183, col: 5, offset: 5537},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 183, col: 5, offset: 5537},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 183, col: 5, offset: 5537},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 183, col: 9, offset: 5541},
							expr: &litMatcher{
								pos:        position{line: 183, col: 10, offset: 5542},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 5712},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 185, col: 31, offset: 5738},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 32, offset: 5739},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 186, col: 5, offset: 5771},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 186, col: 21, offset: 5787},
								expr: &choiceExpr{
									pos: position{line: 186, col: 22, offset: 5788},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 186, col: 22, offset: 5788},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 186, col: 44, offset: 5810},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 187, col: 5, offset: 5831},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 200, col: 1, offset: 6359},
			expr: &actionExpr{
				pos: position{line: 201, col: 5, offset: 6393},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 5, offset: 6393},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 5, offset: 6393},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 201, col: 10, offset: 6398},
								expr: &ruleRefExpr{
									pos:  position{line: 202, col: 9, offset: 6408},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 5, offset: 6438},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 204, col: 12, offset: 6445},
								expr: &choiceExpr{
									pos: position{line: 205, col: 9, offset: 6456},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 205, col: 9, offset: 6456},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 206, col: 11, offset: 6488},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 207, col: 11, offset: 6523},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 208, col: 8, offset: 6556},
							expr: &seqExpr{
								pos: position{line: 208, col: 9, offset: 6557},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 208, col: 9, offset: 6557},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 208, col: 13, offset: 6561},
										expr: &ruleRefExpr{
											pos:  position{line: 208, col: 13, offset: 6561},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 209, col: 5, offset: 6575},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 225, col: 1, offset: 6991},
			expr: &actionExpr{
				pos: position{line: 225, col: 25, offset: 7015},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 225, col: 25, offset: 7015},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 25, offset: 7015},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 29, offset: 7019},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 33, offset: 7023},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 229, col: 1, offset: 7097},
			expr: &actionExpr{
				pos: position{line: 229, col: 23, offset: 7119},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 229, col: 23, offset: 7119},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 229, col: 30, offset: 7126},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 234, col: 1, offset: 7252},
			expr: &actionExpr{
				pos: position{line: 234, col: 30, offset: 7281},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 234, col: 30, offset: 7281},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 234, col: 30, offset: 7281},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 34, offset: 7285},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 40, offset: 7291},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 239, col: 1, offset: 7413},
			expr: &actionExpr{
				pos: position{line: 239, col: 29, offset: 7441},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 239, col: 29, offset: 7441},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 239, col: 29, offset: 7441},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 239, col: 33, offset: 7445},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 41, offset: 7453},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 244, col: 1, offset: 7566},
			expr: &choiceExpr{
				pos: position{line: 245, col: 5, offset: 7598},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7598},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 7, offset: 7632},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 247, col: 7, offset: 7666},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 247, col: 7, offset: 7666},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 247, col: 7, offset: 7666},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 247, col: 16, offset: 7675},
										expr: &choiceExpr{
											pos: position{line: 250, col: 5, offset: 7845},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 250, col: 6, offset: 7846},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 250, col: 6, offset: 7846},
														expr: &charClassMatcher{
															pos:        position{line: 250, col: 6, offset: 7846},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 253, col: 5, offset: 7940},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 254, col: 5, offset: 7965},
													name: "Quote",
												},
												&ruleRefExpr{
													pos:  position{line: 255, col: 5, offset: 7977},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 256, col: 6, offset: 8006},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 256, col: 6, offset: 8006},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 258, col: 10, offset: 8076},
									expr: &charClassMatcher{
										pos:        position{line: 258, col: 11, offset: 8077},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 262, col: 1, offset: 8153},
			expr: &choiceExpr{
				pos: position{line: 262, col: 24, offset: 8176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 8182},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 263, col: 5, offset: 8182},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 263, col: 5, offset: 8182},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 263, col: 12, offset: 8189},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 263, col: 29, offset: 8206},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 263, col: 29, offset: 8206},
											expr: &seqExpr{
												pos: position{line: 263, col: 30, offset: 8207},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 263, col: 30, offset: 8207},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 263, col: 34, offset: 8211},
														expr: &ruleRefExpr{
															pos:  position{line: 263, col: 34, offset: 8211},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 263, col: 45, offset: 8222},
											expr: &litMatcher{
												pos:        position{line: 263, col: 46, offset: 8223},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 268, col: 6, offset: 8460},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 268, col: 6, offset: 8460},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 268, col: 6, offset: 8460},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 268, col: 13, offset: 8467},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 268, col: 13, offset: 8467},
												expr: &ruleRefExpr{
													pos:  position{line: 268, col: 13, offset: 8467},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 268, col: 21, offset: 8475},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 268, col: 22, offset: 8476},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 268, col: 22, offset: 8476},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 268, col: 26, offset: 8480},
																expr: &ruleRefExpr{
																	pos:  position{line: 268, col: 26, offset: 8480},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 268, col: 36, offset: 8490},
														expr: &litMatcher{
															pos:        position{line: 268, col: 37, offset: 8491},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 269, col: 5, offset: 8501},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 279, col: 1, offset: 8816},
			expr: &actionExpr{
				pos: position{line: 279, col: 19, offset: 8834},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 279, col: 19, offset: 8834},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 279, col: 19, offset: 8834},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 24, offset: 8839},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 43, offset: 8858},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 47, offset: 8862},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 47, offset: 8862},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 54, offset: 8869},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 61, offset: 8876},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 77, offset: 8892},
							expr: &seqExpr{
								pos: position{line: 279, col: 78, offset: 8893},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 279, col: 78, offset: 8893},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 279, col: 82, offset: 8897},
										expr: &ruleRefExpr{
											pos:  position{line: 279, col: 82, offset: 8897},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 284, col: 1, offset: 9121},
			expr: &actionExpr{
				pos: position{line: 284, col: 22, offset: 9142},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 284, col: 22, offset: 9142},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 284, col: 22, offset: 9142},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 23, offset: 9143},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 284, col: 29, offset: 9149},
							expr: &charClassMatcher{
								pos:        position{line: 284, col: 29, offset: 9149},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 42, offset: 9162},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 42, offset: 9162},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 288, col: 1, offset: 9232},
			expr: &actionExpr{
				pos: position{line: 289, col: 5, offset: 9255},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 289, col: 5, offset: 9255},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 289, col: 5, offset: 9255},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 290, col: 9, offset: 9271},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 290, col: 9, offset: 9271},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 291, col: 11, offset: 9309},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 292, col: 11, offset: 9347},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 294, col: 5, offset: 9381},
							expr: &notExpr{
								pos: position{line: 294, col: 7, offset: 9383},
								expr: &seqExpr{
									pos: position{line: 294, col: 9, offset: 9385},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 294, col: 9, offset: 9385},
											expr: &ruleRefExpr{
												pos:  position{line: 294, col: 9, offset: 9385},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 294, col: 16, offset: 9392},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 298, col: 1, offset: 9433},
			expr: &actionExpr{
				pos: position{line: 299, col: 5, offset: 9468},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 299, col: 5, offset: 9468},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 5, offset: 9468},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 300, col: 5, offset: 9477},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 300, col: 14, offset: 9486},
								expr: &choiceExpr{
									pos: position{line: 302, col: 9, offset: 9576},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 302, col: 9, offset: 9576},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 303, col: 12, offset: 9593},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 303, col: 12, offset: 9593},
												expr: &charClassMatcher{
													pos:        position{line: 303, col: 12, offset: 9593},
													val:        "[^\\r\\n\\uFFFD\\\\{&<>']",
													chars:      []rune{'\r', '\n', '�', '\\', '{', '&', '<', '>', '\''},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 306, col: 11, offset: 9742},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 307, col: 11, offset: 9774},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 308, col: 11, offset: 9801},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 309, col: 12, offset: 9831},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 309, col: 12, offset: 9831},
													run: (*parser).callonSingleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 309, col: 12, offset: 9831},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 312, col: 11, offset: 9923},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 312, col: 17, offset: 9929},
													run: (*parser).callonSingleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 312, col: 17, offset: 9929},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 316, col: 5, offset: 10018},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 320, col: 1, offset: 10074},
			expr: &actionExpr{
				pos: position{line: 321, col: 5, offset: 10109},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 321, col: 5, offset: 10109},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 321, col: 5, offset: 10109},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 10119},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 322, col: 14, offset: 10128},
								expr: &choiceExpr{
									pos: position{line: 323, col: 9, offset: 10138},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 323, col: 9, offset: 10138},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 324, col: 12, offset: 10155},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 324, col: 12, offset: 10155},
												expr: &charClassMatcher{
													pos:        position{line: 324, col: 12, offset: 10155},
													val:        "[^\\r\\n\\uFFFD&<>\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '&', '<', '>', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 327, col: 11, offset: 10304},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 328, col: 11, offset: 10336},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 329, col: 11, offset: 10363},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 330, col: 12, offset: 10393},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 330, col: 12, offset: 10393},
													run: (*parser).callonDoubleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 330, col: 12, offset: 10393},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 333, col: 11, offset: 10485},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 333, col: 17, offset: 10491},
													run: (*parser).callonDoubleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 333, col: 17, offset: 10491},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 337, col: 5, offset: 10580},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 342, col: 1, offset: 10715},
			expr: &actionExpr{
				pos: position{line: 343, col: 5, offset: 10746},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 343, col: 5, offset: 10746},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 343, col: 5, offset: 10746},
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 6, offset: 10747},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 5, offset: 10757},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 344, col: 14, offset: 10766},
								expr: &actionExpr{
									pos: position{line: 345, col: 9, offset: 10776},
									run: (*parser).callonUnquotedAttributeValue7,
									expr: &seqExpr{
										pos: position{line: 345, col: 9, offset: 10776},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 345, col: 9, offset: 10776},
												expr: &litMatcher{
													pos:        position{line: 345, col: 10, offset: 10777},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 346, col: 9, offset: 10805},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 347, col: 13, offset: 10827},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 347, col: 13, offset: 10827},
															name: "Quote",
														},
														&actionExpr{
															pos: position{line: 348, col: 16, offset: 10848},
															run: (*parser).callonUnquotedAttributeValue14,
															expr: &oneOrMoreExpr{
																pos: position{line: 348, col: 16, offset: 10848},
																expr: &charClassMatcher{
																	pos:        position{line: 348, col: 16, offset: 10848},
																	val:        "[^,=\\r\\n\\uFFFD&<>{\\] ]",
																	chars:      []rune{',', '=', '\r', '\n', '�', '&', '<', '>', '{', ']', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 351, col: 15, offset: 10966},
															name: "Space",
														},
														&ruleRefExpr{
															pos:  position{line: 352, col: 15, offset: 10986},
															name: "AttributeSubstitution",
														},
														&ruleRefExpr{
															pos:  position{line: 353, col: 15, offset: 11022},
															name: "SpecialCharacter",
														},
														&ruleRefExpr{
															pos:  position{line: 354, col: 15, offset: 11053},
															name: "ElementPlaceHolder",
														},
														&actionExpr{
															pos: position{line: 355, col: 16, offset: 11087},
															run: (*parser).callonUnquotedAttributeValue21,
															expr: &litMatcher{
																pos:        position{line: 355, col: 16, offset: 11087},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 362, col: 5, offset: 11237},
							run: (*parser).callonUnquotedAttributeValue23,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 373, col: 1, offset: 11589},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 11680},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 11680},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 375, col: 5, offset: 11680},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 5, offset: 11744},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 378, col: 14, offset: 11753},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 378, col: 14, offset: 11753},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 36, offset: 11775},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 385, col: 1, offset: 11940},
			expr: &actionExpr{
				pos: position{line: 385, col: 31, offset: 11970},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 385, col: 31, offset: 11970},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 385, col: 31, offset: 11970},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 35, offset: 11974},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 40, offset: 11979},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 54, offset: 11993},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 390, col: 1, offset: 12109},
			expr: &choiceExpr{
				pos: position{line: 390, col: 24, offset: 12132},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 390, col: 24, offset: 12132},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 390, col: 47, offset: 12155},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 392, col: 1, offset: 12291},
			expr: &actionExpr{
				pos: position{line: 392, col: 25, offset: 12315},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 392, col: 25, offset: 12315},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 25, offset: 12315},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 392, col: 37, offset: 12327},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 42, offset: 12332},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 392, col: 56, offset: 12346},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 392, col: 62, offset: 12352},
								expr: &ruleRefExpr{
									pos:  position{line: 392, col: 63, offset: 12353},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 392, col: 78, offset: 12368},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 396, col: 1, offset: 12446},
			expr: &actionExpr{
				pos: position{line: 396, col: 25, offset: 12470},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 396, col: 25, offset: 12470},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 25, offset: 12470},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 38, offset: 12483},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 43, offset: 12488},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 396, col: 57, offset: 12502},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 396, col: 63, offset: 12508},
								expr: &ruleRefExpr{
									pos:  position{line: 396, col: 64, offset: 12509},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 79, offset: 12524},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 400, col: 1, offset: 12599},
			expr: &actionExpr{
				pos: position{line: 400, col: 17, offset: 12615},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 400, col: 17, offset: 12615},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 400, col: 17, offset: 12615},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 21, offset: 12619},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 400, col: 28, offset: 12626},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 400, col: 28, offset: 12626},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 400, col: 28, offset: 12626},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 402, col: 9, offset: 12680},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 402, col: 9, offset: 12680},
											expr: &charClassMatcher{
												pos:        position{line: 402, col: 9, offset: 12680},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 411, col: 1, offset: 12882},
			expr: &actionExpr{
				pos: position{line: 411, col: 14, offset: 12895},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 411, col: 14, offset: 12895},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 411, col: 14, offset: 12895},
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 14, offset: 12895},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 21, offset: 12902},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 418, col: 1, offset: 13139},
			expr: &actionExpr{
				pos: position{line: 420, col: 5, offset: 13217},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 420, col: 5, offset: 13217},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 420, col: 5, offset: 13217},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 423, col: 5, offset: 13279},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 9, offset: 13283},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 423, col: 14, offset: 13288},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 423, col: 14, offset: 13288},
									expr: &charClassMatcher{
										pos:        position{line: 423, col: 14, offset: 13288},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 423, col: 62, offset: 13336},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 66, offset: 13340},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 66, offset: 13340},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 423, col: 73, offset: 13347},
							expr: &choiceExpr{
								pos: position{line: 423, col: 75, offset: 13349},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 423, col: 75, offset: 13349},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 423, col: 81, offset: 13355},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElement",
			pos:  position{line: 427, col: 1, offset: 13416},
			expr: &actionExpr{
				pos: position{line: 427, col: 23, offset: 13438},
				run: (*parser).callonCalloutListElement1,
				expr: &seqExpr{
					pos: position{line: 427, col: 23, offset: 13438},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 23, offset: 13438},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 28, offset: 13443},
								name: "CalloutListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 54, offset: 13469},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 67, offset: 13482},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElementPrefix",
			pos:  position{line: 431, col: 1, offset: 13597},
			expr: &actionExpr{
				pos: position{line: 431, col: 29, offset: 13625},
				run: (*parser).callonCalloutListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 431, col: 29, offset: 13625},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 29, offset: 13625},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 33, offset: 13629},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 431, col: 38, offset: 13634},
								run: (*parser).callonCalloutListElementPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 431, col: 38, offset: 13634},
									expr: &charClassMatcher{
										pos:        position{line: 431, col: 38, offset: 13634},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 431, col: 86, offset: 13682},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 431, col: 90, offset: 13686},
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 90, offset: 13686},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 439, col: 1, offset: 13917},
			expr: &seqExpr{
				pos: position{line: 439, col: 31, offset: 13947},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 439, col: 31, offset: 13947},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 439, col: 38, offset: 13954},
						expr: &ruleRefExpr{
							pos:  position{line: 439, col: 38, offset: 13954},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 439, col: 45, offset: 13961},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 441, col: 1, offset: 13966},
			expr: &choiceExpr{
				pos: position{line: 441, col: 29, offset: 13994},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 441, col: 30, offset: 13995},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 441, col: 30, offset: 13995},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 441, col: 37, offset: 14002},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 37, offset: 14002},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 441, col: 44, offset: 14009},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 441, col: 51, offset: 14016},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 458, col: 1, offset: 14506},
			expr: &actionExpr{
				pos: position{line: 463, col: 5, offset: 14665},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 463, col: 5, offset: 14665},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 463, col: 14, offset: 14674},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 467, col: 1, offset: 14720},
			expr: &actionExpr{
				pos: position{line: 467, col: 12, offset: 14731},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 467, col: 12, offset: 14731},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 467, col: 12, offset: 14731},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 467, col: 20, offset: 14739},
								expr: &anyMatcher{
									line: 467, col: 21, offset: 14740,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 467, col: 25, offset: 14744},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 471, col: 1, offset: 14797},
			expr: &actionExpr{
				pos: position{line: 471, col: 22, offset: 14818},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 471, col: 22, offset: 14818},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 471, col: 22, offset: 14818},
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 23, offset: 14819},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 471, col: 45, offset: 14841},
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 45, offset: 14841},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 471, col: 52, offset: 14848},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 471, col: 57, offset: 14853},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 66, offset: 14862},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 471, col: 92, offset: 14888},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 475, col: 1, offset: 14961},
			expr: &actionExpr{
				pos: position{line: 475, col: 29, offset: 14989},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 475, col: 29, offset: 14989},
					expr: &charClassMatcher{
						pos:        position{line: 475, col: 29, offset: 14989},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 482, col: 1, offset: 15154},
			expr: &choiceExpr{
				pos: position{line: 482, col: 19, offset: 15172},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 482, col: 19, offset: 15172},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 482, col: 44, offset: 15197},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 484, col: 1, offset: 15222},
			expr: &choiceExpr{
				pos: position{line: 484, col: 27, offset: 15248},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 484, col: 27, offset: 15248},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 484, col: 27, offset: 15248},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 484, col: 27, offset: 15248},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 484, col: 32, offset: 15253},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 36, offset: 15257},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 484, col: 40, offset: 15261},
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 40, offset: 15261},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 484, col: 47, offset: 15268},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 484, col: 51, offset: 15272},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 58, offset: 15279},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 484, col: 79, offset: 15300},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 486, col: 9, offset: 15373},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 486, col: 9, offset: 15373},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 486, col: 9, offset: 15373},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 486, col: 14, offset: 15378},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 486, col: 18, offset: 15382},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 486, col: 22, offset: 15386},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 490, col: 1, offset: 15457},
			expr: &actionExpr{
				pos: position{line: 490, col: 27, offset: 15483},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 490, col: 27, offset: 15483},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 490, col: 27, offset: 15483},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 490, col: 35, offset: 15491},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 40, offset: 15496},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 490, col: 54, offset: 15510},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 72, offset: 15528},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 494, col: 1, offset: 15662},
			expr: &oneOrMoreExpr{
				pos: position{line: 494, col: 24, offset: 15685},
				expr: &choiceExpr{
					pos: position{line: 495, col: 5, offset: 15691},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 495, col: 6, offset: 15692},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 495, col: 6, offset: 15692},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 495, col: 6, offset: 15692},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 495, col: 14, offset: 15700},
										expr: &charClassMatcher{
											pos:        position{line: 495, col: 14, offset: 15700},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 7, offset: 15895},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 499, col: 8, offset: 15924},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 499, col: 8, offset: 15924},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 508, col: 1, offset: 16199},
			expr: &actionExpr{
				pos: position{line: 508, col: 19, offset: 16217},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 508, col: 19, offset: 16217},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 508, col: 19, offset: 16217},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 21, offset: 16219},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 5, offset: 16249},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 509, col: 16, offset: 16260},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 509, col: 16, offset: 16260},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 510, col: 7, offset: 16319},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 511, col: 7, offset: 16347},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 512, col: 7, offset: 16376},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 513, col: 7, offset: 16405},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 514, col: 7, offset: 16434},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 515, col: 7, offset: 16460},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 516, col: 7, offset: 16488},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 520, col: 1, offset: 16554},
			expr: &actionExpr{
				pos: position{line: 520, col: 26, offset: 16579},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 520, col: 26, offset: 16579},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 520, col: 26, offset: 16579},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 520, col: 33, offset: 16586},
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 33, offset: 16586},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 520, col: 40, offset: 16593},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 524, col: 1, offset: 16652},
			expr: &actionExpr{
				pos: position{line: 524, col: 25, offset: 16676},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 524, col: 25, offset: 16676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 524, col: 25, offset: 16676},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 524, col: 31, offset: 16682},
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 31, offset: 16682},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 524, col: 38, offset: 16689},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 528, col: 1, offset: 16747},
			expr: &actionExpr{
				pos: position{line: 528, col: 26, offset: 16772},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 528, col: 26, offset: 16772},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 528, col: 26, offset: 16772},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 528, col: 33, offset: 16779},
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 33, offset: 16779},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 532, col: 1, offset: 16841},
			expr: &ruleRefExpr{
				pos:  position{line: 532, col: 25, offset: 16865},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 534, col: 1, offset: 16888},
			expr: &actionExpr{
				pos: position{line: 534, col: 26, offset: 16913},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 534, col: 26, offset: 16913},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 534, col: 26, offset: 16913},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 534, col: 33, offset: 16920},
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 33, offset: 16920},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 534, col: 40, offset: 16927},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 538, col: 1, offset: 16986},
			expr: &actionExpr{
				pos: position{line: 538, col: 26, offset: 17011},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 538, col: 26, offset: 17011},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 538, col: 26, offset: 17011},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 538, col: 33, offset: 17018},
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 33, offset: 17018},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 40, offset: 17025},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 542, col: 1, offset: 17084},
			expr: &actionExpr{
				pos: position{line: 542, col: 24, offset: 17107},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 542, col: 24, offset: 17107},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 542, col: 24, offset: 17107},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 542, col: 31, offset: 17114},
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 31, offset: 17114},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 542, col: 38, offset: 17121},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 546, col: 1, offset: 17178},
			expr: &actionExpr{
				pos: position{line: 546, col: 26, offset: 17203},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 546, col: 26, offset: 17203},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 546, col: 26, offset: 17203},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 546, col: 33, offset: 17210},
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 33, offset: 17210},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 40, offset: 17217},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 550, col: 1, offset: 17276},
			expr: &actionExpr{
				pos: position{line: 550, col: 30, offset: 17305},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 550, col: 30, offset: 17305},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 550, col: 30, offset: 17305},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 550, col: 37, offset: 17312},
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 37, offset: 17312},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 550, col: 44, offset: 17319},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 617, col: 1, offset: 19440},
			expr: &actionExpr{
				pos: position{line: 618, col: 9, offset: 19466},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 618, col: 9, offset: 19466},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 618, col: 9, offset: 19466},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 618, col: 13, offset: 19470},
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 13, offset: 19470},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 20, offset: 19477},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 27, offset: 19484},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 49, offset: 19506},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 618, col: 53, offset: 19510},
								expr: &ruleRefExpr{
									pos:  position{line: 618, col: 53, offset: 19510},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 71, offset: 19528},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 622, col: 1, offset: 19643},
			expr: &choiceExpr{
				pos: position{line: 623, col: 9, offset: 19679},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 623, col: 9, offset: 19679},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 624, col: 11, offset: 19707},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 11, offset: 19739},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 626, col: 11, offset: 19769},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 628, col: 1, offset: 19786},
			expr: &choiceExpr{
				pos: position{line: 629, col: 9, offset: 19823},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 629, col: 9, offset: 19823},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 630, col: 11, offset: 19851},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 631, col: 11, offset: 19883},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 632, col: 11, offset: 19913},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 634, col: 1, offset: 19931},
			expr: &choiceExpr{
				pos: position{line: 634, col: 20, offset: 19950},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 634, col: 20, offset: 19950},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 634, col: 48, offset: 19978},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 636, col: 1, offset: 20008},
			expr: &actionExpr{
				pos: position{line: 636, col: 30, offset: 20037},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 636, col: 30, offset: 20037},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 636, col: 30, offset: 20037},
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 30, offset: 20037},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 636, col: 37, offset: 20044},
							expr: &litMatcher{
								pos:        position{line: 636, col: 38, offset: 20045},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 42, offset: 20049},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 636, col: 51, offset: 20058},
								expr: &ruleRefExpr{
									pos:  position{line: 636, col: 51, offset: 20058},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 68, offset: 20075},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 640, col: 1, offset: 20145},
			expr: &actionExpr{
				pos: position{line: 640, col: 33, offset: 20177},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 640, col: 33, offset: 20177},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 640, col: 33, offset: 20177},
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 33, offset: 20177},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 640, col: 40, offset: 20184},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 640, col: 51, offset: 20195},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 59, offset: 20203},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 640, col: 75, offset: 20219},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 644, col: 1, offset: 20298},
			expr: &actionExpr{
				pos: position{line: 644, col: 19, offset: 20316},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 644, col: 19, offset: 20316},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 644, col: 19, offset: 20316},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 19, offset: 20316},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 26, offset: 20323},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 36, offset: 20333},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 56, offset: 20353},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 644, col: 62, offset: 20359},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 63, offset: 20360},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 644, col: 85, offset: 20382},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 85, offset: 20382},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 644, col: 92, offset: 20389},
							expr: &litMatcher{
								pos:        position{line: 644, col: 92, offset: 20389},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 644, col: 97, offset: 20394},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 97, offset: 20394},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 649, col: 1, offset: 20539},
			expr: &actionExpr{
				pos: position{line: 649, col: 23, offset: 20561},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 649, col: 23, offset: 20561},
					expr: &charClassMatcher{
						pos:        position{line: 649, col: 23, offset: 20561},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 653, col: 1, offset: 20608},
			expr: &actionExpr{
				pos: position{line: 653, col: 24, offset: 20631},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 653, col: 24, offset: 20631},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 653, col: 24, offset: 20631},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 653, col: 28, offset: 20635},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 653, col: 35, offset: 20642},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 653, col: 36, offset: 20643},
									expr: &charClassMatcher{
										pos:        position{line: 653, col: 36, offset: 20643},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 655, col: 4, offset: 20690},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 661, col: 1, offset: 20851},
			expr: &actionExpr{
				pos: position{line: 661, col: 21, offset: 20871},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 661, col: 21, offset: 20871},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 661, col: 21, offset: 20871},
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 21, offset: 20871},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 661, col: 28, offset: 20878},
							expr: &litMatcher{
								pos:        position{line: 661, col: 29, offset: 20879},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 661, col: 33, offset: 20883},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 662, col: 9, offset: 20902},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 662, col: 10, offset: 20903},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 662, col: 10, offset: 20903},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 662, col: 10, offset: 20903},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 662, col: 21, offset: 20914},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 662, col: 45, offset: 20938},
													expr: &litMatcher{
														pos:        position{line: 662, col: 45, offset: 20938},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 662, col: 50, offset: 20943},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 662, col: 58, offset: 20951},
														expr: &ruleRefExpr{
															pos:  position{line: 662, col: 59, offset: 20952},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 662, col: 82, offset: 20975},
													expr: &litMatcher{
														pos:        position{line: 662, col: 82, offset: 20975},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 662, col: 87, offset: 20980},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 662, col: 97, offset: 20990},
														expr: &ruleRefExpr{
															pos:  position{line: 662, col: 98, offset: 20991},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 664, col: 15, offset: 21108},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 664, col: 15, offset: 21108},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 664, col: 15, offset: 21108},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 664, col: 24, offset: 21117},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 664, col: 46, offset: 21139},
													expr: &litMatcher{
														pos:        position{line: 664, col: 46, offset: 21139},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 664, col: 51, offset: 21144},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 664, col: 61, offset: 21154},
														expr: &ruleRefExpr{
															pos:  position{line: 664, col: 62, offset: 21155},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 666, col: 13, offset: 21264},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 671, col: 1, offset: 21394},
			expr: &choiceExpr{
				pos: position{line: 671, col: 27, offset: 21420},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 671, col: 27, offset: 21420},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 671, col: 27, offset: 21420},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 671, col: 27, offset: 21420},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 671, col: 32, offset: 21425},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 671, col: 39, offset: 21432},
									expr: &charClassMatcher{
										pos:        position{line: 671, col: 39, offset: 21432},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 21480},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 21480},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 673, col: 5, offset: 21480},
									expr: &litMatcher{
										pos:        position{line: 673, col: 5, offset: 21480},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 11, offset: 21486},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 673, col: 18, offset: 21493},
									expr: &charClassMatcher{
										pos:        position{line: 673, col: 18, offset: 21493},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 673, col: 29, offset: 21504},
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 29, offset: 21504},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 673, col: 36, offset: 21511},
									expr: &litMatcher{
										pos:        position{line: 673, col: 37, offset: 21512},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 677, col: 1, offset: 21552},
			expr: &actionExpr{
				pos: position{line: 677, col: 25, offset: 21576},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 677, col: 25, offset: 21576},
					expr: &charClassMatcher{
						pos:        position{line: 677, col: 25, offset: 21576},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 681, col: 1, offset: 21622},
			expr: &actionExpr{
				pos: position{line: 681, col: 27, offset: 21648},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 681, col: 27, offset: 21648},
					expr: &charClassMatcher{
						pos:        position{line: 681, col: 27, offset: 21648},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 688, col: 1, offset: 21823},
			expr: &litMatcher{
				pos:        position{line: 688, col: 32, offset: 21854},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 689, col: 1, offset: 21863},
			expr: &actionExpr{
				pos: position{line: 689, col: 23, offset: 21885},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 689, col: 23, offset: 21885},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 689, col: 23, offset: 21885},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 689, col: 51, offset: 21913},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 689, col: 56, offset: 21918},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 689, col: 56, offset: 21918},
									expr: &charClassMatcher{
										pos:        position{line: 689, col: 56, offset: 21918},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 95, offset: 21957},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 696, col: 1, offset: 22227},
			expr: &actionExpr{
				pos: position{line: 696, col: 14, offset: 22240},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 696, col: 14, offset: 22240},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 696, col: 14, offset: 22240},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 696, col: 20, offset: 22246},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 696, col: 24, offset: 22250},
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 24, offset: 22250},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 696, col: 31, offset: 22257},
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 32, offset: 22258},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 703, col: 1, offset: 22422},
			expr: &actionExpr{
				pos: position{line: 704, col: 5, offset: 22444},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 704, col: 5, offset: 22444},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 704, col: 5, offset: 22444},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 705, col: 9, offset: 22459},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 705, col: 9, offset: 22459},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 705, col: 9, offset: 22459},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 706, col: 9, offset: 22480},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 706, col: 15, offset: 22486},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 707, col: 9, offset: 22509},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 707, col: 27, offset: 22527},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 711, col: 5, offset: 22688},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 5, offset: 22688},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 711, col: 12, offset: 22695},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 715, col: 1, offset: 22755},
			expr: &ruleRefExpr{
				pos:  position{line: 715, col: 26, offset: 22780},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 718, col: 1, offset: 22820},
			expr: &actionExpr{
				pos: position{line: 718, col: 15, offset: 22834},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 718, col: 15, offset: 22834},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 718, col: 15, offset: 22834},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 718, col: 22, offset: 22841},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 718, col: 22, offset: 22841},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 719, col: 7, offset: 22867},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 720, col: 7, offset: 22889},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 721, col: 7, offset: 22912},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 725, col: 1, offset: 23002},
			expr: &actionExpr{
				pos: position{line: 725, col: 23, offset: 23024},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 725, col: 23, offset: 23024},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 23, offset: 23024},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 725, col: 30, offset: 23031},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 725, col: 30, offset: 23031},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 47, offset: 23048},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 726, col: 5, offset: 23070},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 726, col: 12, offset: 23077},
								expr: &actionExpr{
									pos: position{line: 727, col: 9, offset: 23087},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 727, col: 9, offset: 23087},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 727, col: 10, offset: 23088},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 727, col: 10, offset: 23088},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 727, col: 16, offset: 23094},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 728, col: 9, offset: 23205},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 728, col: 16, offset: 23212},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 728, col: 16, offset: 23212},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 728, col: 33, offset: 23229},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 734, col: 1, offset: 23371},
			expr: &actionExpr{
				pos: position{line: 734, col: 19, offset: 23389},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 734, col: 19, offset: 23389},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 734, col: 19, offset: 23389},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 26, offset: 23396},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 734, col: 34, offset: 23404},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 39, offset: 23409},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 44, offset: 23414},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 738, col: 1, offset: 23510},
			expr: &actionExpr{
				pos: position{line: 738, col: 20, offset: 23529},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 738, col: 20, offset: 23529},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 738, col: 32, offset: 23541},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 743, col: 1, offset: 23664},
			expr: &actionExpr{
				pos: position{line: 743, col: 14, offset: 23677},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 743, col: 14, offset: 23677},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 743, col: 14, offset: 23677},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 21, offset: 23684},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 743, col: 40, offset: 23703},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 747, col: 1, offset: 23793},
			expr: &actionExpr{
				pos: position{line: 747, col: 22, offset: 23814},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 747, col: 22, offset: 23814},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 747, col: 22, offset: 23814},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 29, offset: 23821},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 748, col: 5, offset: 23835},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 748, col: 12, offset: 23842},
								expr: &actionExpr{
									pos: position{line: 749, col: 9, offset: 23852},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 749, col: 9, offset: 23852},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 749, col: 10, offset: 23853},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 749, col: 10, offset: 23853},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 749, col: 16, offset: 23859},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 750, col: 9, offset: 23970},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 750, col: 16, offset: 23977},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 756, col: 1, offset: 24112},
			expr: &choiceExpr{
				pos: position{line: 756, col: 13, offset: 24124},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 756, col: 13, offset: 24124},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 756, col: 13, offset: 24124},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 756, col: 18, offset: 24129},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 756, col: 18, offset: 24129},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 30, offset: 24141},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 758, col: 9, offset: 24217},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 758, col: 9, offset: 24217},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 758, col: 9, offset: 24217},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 758, col: 13, offset: 24221},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 758, col: 18, offset: 24226},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 758, col: 18, offset: 24226},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 758, col: 30, offset: 24238},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 762, col: 1, offset: 24314},
			expr: &actionExpr{
				pos: position{line: 762, col: 16, offset: 24329},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 762, col: 16, offset: 24329},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 762, col: 16, offset: 24329},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 762, col: 23, offset: 24336},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 762, col: 23, offset: 24336},
									expr: &litMatcher{
										pos:        position{line: 762, col: 24, offset: 24337},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 765, col: 5, offset: 24391},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 772, col: 1, offset: 24558},
			expr: &actionExpr{
				pos: position{line: 772, col: 21, offset: 24578},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 772, col: 21, offset: 24578},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 772, col: 21, offset: 24578},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 772, col: 29, offset: 24586},
								expr: &choiceExpr{
									pos: position{line: 772, col: 30, offset: 24587},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 772, col: 30, offset: 24587},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 772, col: 53, offset: 24610},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 772, col: 74, offset: 24631},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 772, col: 74, offset: 24631,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 107, offset: 24664},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 776, col: 1, offset: 24743},
			expr: &actionExpr{
				pos: position{line: 776, col: 25, offset: 24767},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 776, col: 25, offset: 24767},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 776, col: 25, offset: 24767},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 776, col: 33, offset: 24775},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 776, col: 38, offset: 24780},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 776, col: 38, offset: 24780},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 776, col: 78, offset: 24820},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 780, col: 1, offset: 24893},
			expr: &actionExpr{
				pos: position{line: 780, col: 23, offset: 24915},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 780, col: 23, offset: 24915},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 780, col: 23, offset: 24915},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 31, offset: 24923},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 780, col: 36, offset: 24928},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 780, col: 36, offset: 24928},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 780, col: 76, offset: 24968},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 799, col: 1, offset: 25513},
			expr: &choiceExpr{
				pos: position{line: 799, col: 24, offset: 25536},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 799, col: 24, offset: 25536},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 47, offset: 25559},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 59, offset: 25571},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 801, col: 1, offset: 25588},
			expr: &actionExpr{
				pos: position{line: 801, col: 26, offset: 25613},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 801, col: 26, offset: 25613},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 801, col: 26, offset: 25613},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 801, col: 32, offset: 25619},
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 32, offset: 25619},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 801, col: 39, offset: 25626},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 805, col: 1, offset: 25689},
			expr: &actionExpr{
				pos: position{line: 805, col: 20, offset: 25708},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 805, col: 20, offset: 25708},
					expr: &anyMatcher{
						line: 805, col: 21, offset: 25709,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 812, col: 1, offset: 25879},
			expr: &actionExpr{
				pos: position{line: 813, col: 5, offset: 25902},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 813, col: 5, offset: 25902},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 813, col: 15, offset: 25912},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 813, col: 15, offset: 25912},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 813, col: 15, offset: 25912},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 813, col: 24, offset: 25921},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 815, col: 9, offset: 26013},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 815, col: 9, offset: 26013},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 815, col: 9, offset: 26013},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 815, col: 18, offset: 26022},
												expr: &ruleRefExpr{
													pos:  position{line: 815, col: 19, offset: 26023},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 815, col: 35, offset: 26039},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 831, col: 1, offset: 26356},
			expr: &actionExpr{
				pos: position{line: 832, col: 5, offset: 26379},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 832, col: 5, offset: 26379},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 832, col: 14, offset: 26388},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 832, col: 14, offset: 26388},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 833, col: 11, offset: 26449},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 834, col: 11, offset: 26494},
								expr: &ruleRefExpr{
									pos:  position{line: 834, col: 11, offset: 26494},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 835, col: 11, offset: 26512},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 835, col: 11, offset: 26512},
										expr: &ruleRefExpr{
											pos:  position{line: 835, col: 12, offset: 26513},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 836, col: 13, offset: 26531},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 836, col: 13, offset: 26531},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 837, col: 15, offset: 26562},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 838, col: 15, offset: 26582},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 839, col: 15, offset: 26619},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 26645},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 841, col: 15, offset: 26671},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 842, col: 15, offset: 26701},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 15, offset: 26801},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 876, col: 1, offset: 27817},
			expr: &actionExpr{
				pos: position{line: 876, col: 20, offset: 27836},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 876, col: 20, offset: 27836},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 876, col: 20, offset: 27836},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 876, col: 25, offset: 27841},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 29, offset: 27845},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 876, col: 33, offset: 27849},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 876, col: 38, offset: 27854},
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 38, offset: 27854},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 883, col: 1, offset: 28100},
			expr: &actionExpr{
				pos: position{line: 883, col: 14, offset: 28113},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 883, col: 14, offset: 28113},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 883, col: 14, offset: 28113},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 883, col: 19, offset: 28118},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 25, offset: 28124},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 883, col: 43, offset: 28142},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 887, col: 1, offset: 28207},
			expr: &actionExpr{
				pos: position{line: 887, col: 21, offset: 28227},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 887, col: 21, offset: 28227},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 887, col: 30, offset: 28236},
						expr: &choiceExpr{
							pos: position{line: 887, col: 31, offset: 28237},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 887, col: 31, offset: 28237},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 38, offset: 28244},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 53, offset: 28259},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 66, offset: 28272},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 74, offset: 28280},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 93, offset: 28299},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 887, col: 114, offset: 28320},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 887, col: 115, offset: 28321},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 887, col: 115, offset: 28321},
												expr: &litMatcher{
													pos:        position{line: 887, col: 116, offset: 28322},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 887, col: 121, offset: 28327,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 893, col: 1, offset: 28433},
			expr: &actionExpr{
				pos: position{line: 893, col: 23, offset: 28455},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 893, col: 23, offset: 28455},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 893, col: 23, offset: 28455},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 893, col: 29, offset: 28461},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 893, col: 36, offset: 28468},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 5, offset: 28500},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 894, col: 11, offset: 28506},
								expr: &actionExpr{
									pos: position{line: 894, col: 12, offset: 28507},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 894, col: 12, offset: 28507},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 894, col: 12, offset: 28507},
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 12, offset: 28507},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 894, col: 19, offset: 28514},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 894, col: 23, offset: 28518},
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 23, offset: 28518},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 894, col: 30, offset: 28525},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 39, offset: 28534},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 5, offset: 28592},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 895, col: 11, offset: 28598},
								expr: &actionExpr{
									pos: position{line: 895, col: 12, offset: 28599},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 895, col: 12, offset: 28599},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 895, col: 12, offset: 28599},
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 12, offset: 28599},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 895, col: 19, offset: 28606},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 895, col: 23, offset: 28610},
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 23, offset: 28610},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 895, col: 30, offset: 28617},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 39, offset: 28626},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 896, col: 5, offset: 28684},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 900, col: 1, offset: 28763},
			expr: &actionExpr{
				pos: position{line: 900, col: 30, offset: 28792},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 900, col: 30, offset: 28792},
					expr: &choiceExpr{
						pos: position{line: 900, col: 31, offset: 28793},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 900, col: 31, offset: 28793},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 900, col: 42, offset: 28804},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 907, col: 1, offset: 28950},
			expr: &actionExpr{
				pos: position{line: 912, col: 5, offset: 29133},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 912, col: 5, offset: 29133},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 912, col: 5, offset: 29133},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 916, col: 5, offset: 29261},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 916, col: 15, offset: 29271},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 916, col: 21, offset: 29277},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 916, col: 31, offset: 29287},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 916, col: 49, offset: 29305},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 916, col: 67, offset: 29323},
							expr: &ruleRefExpr{
								pos:  position{line: 916, col: 67, offset: 29323},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 922, col: 1, offset: 29608},
			expr: &actionExpr{
				pos: position{line: 922, col: 16, offset: 29623},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 922, col: 16, offset: 29623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 922, col: 16, offset: 29623},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 922, col: 25, offset: 29632},
							expr: &litMatcher{
								pos:        position{line: 922, col: 26, offset: 29633},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 30, offset: 29637},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 36, offset: 29643},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 46, offset: 29653},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 64, offset: 29671},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 929, col: 1, offset: 30015},
			expr: &actionExpr{
				pos: position{line: 929, col: 15, offset: 30029},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 929, col: 15, offset: 30029},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 929, col: 15, offset: 30029},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 929, col: 23, offset: 30037},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 929, col: 29, offset: 30043},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 929, col: 29, offset: 30043},
									expr: &charClassMatcher{
										pos:        position{line: 929, col: 29, offset: 30043},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 929, col: 73, offset: 30087},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 929, col: 85, offset: 30099},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 936, col: 1, offset: 30379},
			expr: &choiceExpr{
				pos: position{line: 936, col: 19, offset: 30397},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 936, col: 19, offset: 30397},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 936, col: 19, offset: 30397},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 936, col: 19, offset: 30397},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 936, col: 32, offset: 30410},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 41, offset: 30419},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 58, offset: 30436},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 938, col: 9, offset: 30512},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 938, col: 9, offset: 30512},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 938, col: 9, offset: 30512},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 21, offset: 30524},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 26, offset: 30529},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 39, offset: 30542},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 43, offset: 30546},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 938, col: 51, offset: 30554},
										expr: &ruleRefExpr{
											pos:  position{line: 938, col: 52, offset: 30555},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 70, offset: 30573},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 942, col: 1, offset: 30642},
			expr: &ruleRefExpr{
				pos:  position{line: 942, col: 16, offset: 30657},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 944, col: 1, offset: 30668},
			expr: &actionExpr{
				pos: position{line: 944, col: 20, offset: 30687},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 944, col: 20, offset: 30687},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 944, col: 29, offset: 30696},
						expr: &seqExpr{
							pos: position{line: 944, col: 30, offset: 30697},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 944, col: 30, offset: 30697},
									expr: &litMatcher{
										pos:        position{line: 944, col: 31, offset: 30698},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 944, col: 35, offset: 30702},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 952, col: 1, offset: 30945},
			expr: &litMatcher{
				pos:        position{line: 952, col: 32, offset: 30976},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 954, col: 1, offset: 30981},
			expr: &actionExpr{
				pos: position{line: 954, col: 26, offset: 31006},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 954, col: 26, offset: 31006},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 954, col: 26, offset: 31006},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 954, col: 54, offset: 31034},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 63, offset: 31043},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 93, offset: 31073},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 954, col: 121, offset: 31101},
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 122, offset: 31102},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 958, col: 1, offset: 31215},
			expr: &choiceExpr{
				pos: position{line: 958, col: 33, offset: 31247},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 958, col: 34, offset: 31248},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 958, col: 34, offset: 31248},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 958, col: 35, offset: 31249},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 958, col: 35, offset: 31249},
											expr: &ruleRefExpr{
												pos:  position{line: 958, col: 36, offset: 31250},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 958, col: 64, offset: 31278},
											expr: &ruleRefExpr{
												pos:  position{line: 958, col: 65, offset: 31279},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 958, col: 71, offset: 31285},
											expr: &ruleRefExpr{
												pos:  position{line: 958, col: 72, offset: 31286},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 958, col: 80, offset: 31294,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 958, col: 83, offset: 31297},
									expr: &seqExpr{
										pos: position{line: 958, col: 84, offset: 31298},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 958, col: 84, offset: 31298},
												expr: &seqExpr{
													pos: position{line: 958, col: 86, offset: 31300},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 958, col: 86, offset: 31300},
															expr: &ruleRefExpr{
																pos:  position{line: 958, col: 86, offset: 31300},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 958, col: 93, offset: 31307},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 958, col: 122, offset: 31336},
												expr: &ruleRefExpr{
													pos:  position{line: 958, col: 123, offset: 31337},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 958, col: 151, offset: 31365},
												expr: &ruleRefExpr{
													pos:  position{line: 958, col: 152, offset: 31366},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 958, col: 160, offset: 31374,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 960, col: 11, offset: 31524},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 960, col: 12, offset: 31525},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 960, col: 12, offset: 31525},
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 13, offset: 31526},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 960, col: 19, offset: 31532},
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 20, offset: 31533},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 960, col: 28, offset: 31541},
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 29, offset: 31542},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 960, col: 57, offset: 31570,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 964, col: 1, offset: 31660},
			expr: &litMatcher{
				pos:        position{line: 964, col: 32, offset: 31691},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 966, col: 1, offset: 31698},
			expr: &actionExpr{
				pos: position{line: 966, col: 26, offset: 31723},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 966, col: 26, offset: 31723},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 966, col: 26, offset: 31723},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 966, col: 54, offset: 31751},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 63, offset: 31760},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 966, col: 93, offset: 31790},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 966, col: 121, offset: 31818},
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 122, offset: 31819},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 970, col: 1, offset: 31932},
			expr: &choiceExpr{
				pos: position{line: 970, col: 33, offset: 31964},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 970, col: 34, offset: 31965},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 970, col: 34, offset: 31965},
							expr: &seqExpr{
								pos: position{line: 970, col: 35, offset: 31966},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 970, col: 35, offset: 31966},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 36, offset: 31967},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 970, col: 64, offset: 31995,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 11, offset: 32168},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 972, col: 11, offset: 32168},
							expr: &seqExpr{
								pos: position{line: 972, col: 12, offset: 32169},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 972, col: 12, offset: 32169},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 13, offset: 32170},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 972, col: 19, offset: 32176},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 20, offset: 32177},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 972, col: 28, offset: 32185},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 29, offset: 32186},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 972, col: 57, offset: 32214,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 976, col: 1, offset: 32305},
			expr: &choiceExpr{
				pos: position{line: 976, col: 21, offset: 32325},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 976, col: 21, offset: 32325},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 976, col: 21, offset: 32325},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 976, col: 21, offset: 32325},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 976, col: 30, offset: 32334},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 976, col: 38, offset: 32342},
										expr: &ruleRefExpr{
											pos:  position{line: 976, col: 39, offset: 32343},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 67, offset: 32371},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 978, col: 9, offset: 32475},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 978, col: 9, offset: 32475},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 978, col: 9, offset: 32475},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 978, col: 19, offset: 32485},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 978, col: 27, offset: 32493},
										expr: &choiceExpr{
											pos: position{line: 978, col: 28, offset: 32494},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 978, col: 28, offset: 32494},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 978, col: 41, offset: 32507},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 978, col: 69, offset: 32535},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 982, col: 1, offset: 32639},
			expr: &actionExpr{
				pos: position{line: 982, col: 30, offset: 32668},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 982, col: 30, offset: 32668},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 989, col: 1, offset: 32838},
			expr: &choiceExpr{
				pos: position{line: 989, col: 9, offset: 32846},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 989, col: 9, offset: 32846},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 24, offset: 32861},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 992, col: 1, offset: 32942},
			expr: &actionExpr{
				pos: position{line: 992, col: 17, offset: 32958},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 992, col: 17, offset: 32958},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 992, col: 17, offset: 32958},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 992, col: 25, offset: 32966},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 30, offset: 32971},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 992, col: 40, offset: 32981},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 58, offset: 32999},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 996, col: 1, offset: 33121},
			expr: &actionExpr{
				pos: position{line: 996, col: 17, offset: 33137},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 996, col: 17, offset: 33137},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 996, col: 17, offset: 33137},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 22, offset: 33142},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 996, col: 42, offset: 33162},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 996, col: 59, offset: 33179},
								expr: &ruleRefExpr{
									pos:  position{line: 996, col: 60, offset: 33180},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElement",
			pos:  position{line: 1004, col: 1, offset: 33462},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 9, offset: 33485},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1005, col: 9, offset: 33485},
						name: "OrderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 11, offset: 33515},
						name: "UnorderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 11, offset: 33631},
						name: "CalloutListElement",
					},
				},
			},
		},
		{
			name: "OrderedListElement",
			pos:  position{line: 1012, col: 1, offset: 33677},
			expr: &actionExpr{
				pos: position{line: 1012, col: 23, offset: 33699},
				run: (*parser).callonOrderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1012, col: 23, offset: 33699},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1012, col: 23, offset: 33699},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1012, col: 31, offset: 33707},
								name: "OrderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1012, col: 57, offset: 33733},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1012, col: 66, offset: 33742},
								name: "OrderedListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementPrefix",
			pos:  position{line: 1016, col: 1, offset: 33879},
			expr: &actionExpr{
				pos: position{line: 1017, col: 5, offset: 33912},
				run: (*parser).callonOrderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1017, col: 5, offset: 33912},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1017, col: 5, offset: 33912},
							expr: &ruleRefExpr{
								pos:  position{line: 1017, col: 5, offset: 33912},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 12, offset: 33919},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1019, col: 9, offset: 33982},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1019, col: 9, offset: 33982},
										run: (*parser).callonOrderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1019, col: 9, offset: 33982},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1019, col: 9, offset: 33982},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1019, col: 16, offset: 33989},
														run: (*parser).callonOrderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1019, col: 16, offset: 33989},
															expr: &litMatcher{
																pos:        position{line: 1019, col: 17, offset: 33990},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1023, col: 9, offset: 34090},
													run: (*parser).callonOrderedListElementPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1042, col: 11, offset: 34807},
										run: (*parser).callonOrderedListElementPrefix14,
										expr: &seqExpr{
											pos: position{line: 1042, col: 11, offset: 34807},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1042, col: 11, offset: 34807},
													expr: &charClassMatcher{
														pos:        position{line: 1042, col: 12, offset: 34808},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1042, col: 20, offset: 34816},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1044, col: 13, offset: 34927},
										run: (*parser).callonOrderedListElementPrefix19,
										expr: &seqExpr{
											pos: position{line: 1044, col: 13, offset: 34927},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1044, col: 14, offset: 34928},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1044, col: 21, offset: 34935},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1046, col: 13, offset: 35049},
										run: (*parser).callonOrderedListElementPrefix23,
										expr: &seqExpr{
											pos: position{line: 1046, col: 13, offset: 35049},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1046, col: 14, offset: 35050},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1046, col: 21, offset: 35057},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1048, col: 13, offset: 35171},
										run: (*parser).callonOrderedListElementPrefix27,
										expr: &seqExpr{
											pos: position{line: 1048, col: 13, offset: 35171},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1048, col: 13, offset: 35171},
													expr: &charClassMatcher{
														pos:        position{line: 1048, col: 14, offset: 35172},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1048, col: 26, offset: 35184},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1050, col: 13, offset: 35298},
										run: (*parser).callonOrderedListElementPrefix32,
										expr: &seqExpr{
											pos: position{line: 1050, col: 13, offset: 35298},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1050, col: 13, offset: 35298},
													expr: &charClassMatcher{
														pos:        position{line: 1050, col: 14, offset: 35299},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1050, col: 26, offset: 35311},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1052, col: 12, offset: 35424},
							expr: &ruleRefExpr{
								pos:  position{line: 1052, col: 12, offset: 35424},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementContent",
			pos:  position{line: 1056, col: 1, offset: 35459},
			expr: &actionExpr{
				pos: position{line: 1056, col: 30, offset: 35488},
				run: (*parser).callonOrderedListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1056, col: 30, offset: 35488},
					expr: &charClassMatcher{
						pos:        position{line: 1056, col: 30, offset: 35488},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UnorderedListElement",
			pos:  position{line: 1067, col: 1, offset: 35704},
			expr: &actionExpr{
				pos: position{line: 1068, col: 5, offset: 35733},
				run: (*parser).callonUnorderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1068, col: 5, offset: 35733},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1068, col: 5, offset: 35733},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1068, col: 13, offset: 35741},
								name: "UnorderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 5, offset: 35774},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 1069, col: 16, offset: 35785},
								expr: &ruleRefExpr{
									pos:  position{line: 1069, col: 17, offset: 35786},
									name: "UnorderedListElementCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 5, offset: 35824},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1070, col: 14, offset: 35833},
								name: "UnorderedListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementPrefix",
			pos:  position{line: 1074, col: 1, offset: 35996},
			expr: &actionExpr{
				pos: position{line: 1075, col: 5, offset: 36031},
				run: (*parser).callonUnorderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1075, col: 5, offset: 36031},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1075, col: 5, offset: 36031},
							expr: &ruleRefExpr{
								pos:  position{line: 1075, col: 5, offset: 36031},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1075, col: 12, offset: 36038},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1075, col: 20, offset: 36046},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1077, col: 9, offset: 36103},
										run: (*parser).callonUnorderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1077, col: 9, offset: 36103},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1077, col: 9, offset: 36103},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1077, col: 16, offset: 36110},
														run: (*parser).callonUnorderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1077, col: 16, offset: 36110},
															expr: &litMatcher{
																pos:        position{line: 1077, col: 17, offset: 36111},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1081, col: 9, offset: 36211},
													run: (*parser).callonUnorderedListElementPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1098, col: 14, offset: 36918},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 1098, col: 21, offset: 36925},
											run: (*parser).callonUnorderedListElementPrefix15,
											expr: &litMatcher{
												pos:        position{line: 1098, col: 22, offset: 36926},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1100, col: 13, offset: 37012},
							expr: &ruleRefExpr{
								pos:  position{line: 1100, col: 13, offset: 37012},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementCheckStyle",
			pos:  position{line: 1104, col: 1, offset: 37048},
			expr: &actionExpr{
				pos: position{line: 1104, col: 35, offset: 37082},
				run: (*parser).callonUnorderedListElementCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 1104, col: 35, offset: 37082},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1104, col: 35, offset: 37082},
							expr: &litMatcher{
								pos:        position{line: 1104, col: 36, offset: 37083},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1104, col: 40, offset: 37087},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 1105, col: 7, offset: 37101},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1105, col: 7, offset: 37101},
										run: (*parser).callonUnorderedListElementCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 1105, col: 7, offset: 37101},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1106, col: 7, offset: 37146},
										run: (*parser).callonUnorderedListElementCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 1106, col: 7, offset: 37146},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1107, col: 7, offset: 37189},
										run: (*parser).callonUnorderedListElementCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 1107, col: 7, offset: 37189},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1108, col: 7, offset: 37231},
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 7, offset: 37231},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementContent",
			pos:  position{line: 1116, col: 1, offset: 37525},
			expr: &actionExpr{
				pos: position{line: 1116, col: 32, offset: 37556},
				run: (*parser).callonUnorderedListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1116, col: 32, offset: 37556},
					expr: &charClassMatcher{
						pos:        position{line: 1116, col: 32, offset: 37556},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1129, col: 1, offset: 37982},
			expr: &choiceExpr{
				pos: position{line: 1130, col: 5, offset: 38001},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1131, col: 9, offset: 38011},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1131, col: 9, offset: 38011},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1131, col: 9, offset: 38011},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1131, col: 20, offset: 38022},
										expr: &ruleRefExpr{
											pos:  position{line: 1131, col: 21, offset: 38023},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1132, col: 9, offset: 38149},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1132, col: 15, offset: 38155},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1132, col: 15, offset: 38155},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1132, col: 41, offset: 38181},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1136, col: 7, offset: 38300},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1138, col: 1, offset: 38319},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 32, offset: 38350},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1138, col: 32, offset: 38350},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1138, col: 32, offset: 38350},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1138, col: 36, offset: 38354},
								expr: &litMatcher{
									pos:        position{line: 1138, col: 37, offset: 38355},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1138, col: 43, offset: 38361},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1138, col: 43, offset: 38361},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1138, col: 47, offset: 38365},
								expr: &litMatcher{
									pos:        position{line: 1138, col: 48, offset: 38366},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1138, col: 54, offset: 38372},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1138, col: 54, offset: 38372},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1138, col: 58, offset: 38376},
								expr: &litMatcher{
									pos:        position{line: 1138, col: 59, offset: 38377},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1138, col: 65, offset: 38383},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1138, col: 65, offset: 38383},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1138, col: 69, offset: 38387},
								expr: &litMatcher{
									pos:        position{line: 1138, col: 70, offset: 38388},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1140, col: 1, offset: 38393},
			expr: &choiceExpr{
				pos: position{line: 1140, col: 34, offset: 38426},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1140, col: 34, offset: 38426},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1140, col: 41, offset: 38433},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1140, col: 48, offset: 38440},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1140, col: 55, offset: 38447},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1140, col: 62, offset: 38454},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1140, col: 68, offset: 38460},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1142, col: 1, offset: 38465},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 5, offset: 38495},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1143, col: 5, offset: 38495},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 7, offset: 38522},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 7, offset: 38550},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 7, offset: 38578},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 7, offset: 38610},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 7, offset: 38631},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1150, col: 1, offset: 38649},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 5, offset: 38681},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1151, col: 5, offset: 38681},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 7, offset: 38707},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 7, offset: 38735},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 7, offset: 38763},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1156, col: 1, offset: 38789},
			expr: &actionExpr{
				pos: position{line: 1157, col: 5, offset: 38870},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1157, col: 5, offset: 38870},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1157, col: 5, offset: 38870},
							expr: &litMatcher{
								pos:        position{line: 1157, col: 7, offset: 38872},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1158, col: 5, offset: 38881},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1159, col: 9, offset: 38899},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1159, col: 9, offset: 38899},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1160, col: 11, offset: 38926},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1161, col: 11, offset: 38954},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1162, col: 11, offset: 38982},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1163, col: 11, offset: 39014},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1164, col: 11, offset: 39046},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1170, col: 1, offset: 39113},
			expr: &choiceExpr{
				pos: position{line: 1170, col: 33, offset: 39145},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1170, col: 33, offset: 39145},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1170, col: 39, offset: 39151},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1170, col: 39, offset: 39151},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1174, col: 1, offset: 39293},
			expr: &actionExpr{
				pos: position{line: 1174, col: 25, offset: 39317},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1174, col: 25, offset: 39317},
					expr: &litMatcher{
						pos:        position{line: 1174, col: 25, offset: 39317},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1178, col: 1, offset: 39366},
			expr: &actionExpr{
				pos: position{line: 1178, col: 25, offset: 39390},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1178, col: 25, offset: 39390},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1178, col: 25, offset: 39390},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1178, col: 30, offset: 39395},
							expr: &litMatcher{
								pos:        position{line: 1178, col: 30, offset: 39395},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1185, col: 1, offset: 39506},
			expr: &choiceExpr{
				pos: position{line: 1185, col: 13, offset: 39518},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1185, col: 13, offset: 39518},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 35, offset: 39540},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1187, col: 1, offset: 39607},
			expr: &actionExpr{
				pos: position{line: 1187, col: 24, offset: 39630},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 24, offset: 39630},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1187, col: 24, offset: 39630},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 29, offset: 39635},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 39, offset: 39645},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1187, col: 68, offset: 39674},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1191, col: 1, offset: 39773},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1191, col: 32, offset: 39804},
				expr: &ruleRefExpr{
					pos:  position{line: 1191, col: 32, offset: 39804},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1193, col: 1, offset: 39835},
			expr: &actionExpr{
				pos: position{line: 1193, col: 31, offset: 39865},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 31, offset: 39865},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1193, col: 31, offset: 39865},
							expr: &litMatcher{
								pos:        position{line: 1193, col: 33, offset: 39867},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1193, col: 39, offset: 39873},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1193, col: 48, offset: 39882},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1193, col: 48, offset: 39882},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1194, col: 7, offset: 39893},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1195, col: 7, offset: 39938},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1195, col: 7, offset: 39938},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1195, col: 15, offset: 39946},
												expr: &ruleRefExpr{
													pos:  position{line: 1195, col: 16, offset: 39947},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1196, col: 7, offset: 39961},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 7, offset: 39989},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1198, col: 7, offset: 40012},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 7, offset: 40030},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1200, col: 7, offset: 40049},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 7, offset: 40087},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 7, offset: 40112},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1206, col: 1, offset: 40187},
			expr: &actionExpr{
				pos: position{line: 1207, col: 5, offset: 40227},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 5, offset: 40227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1207, col: 5, offset: 40227},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1207, col: 16, offset: 40238},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 17, offset: 40239},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 5, offset: 40265},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1208, col: 11, offset: 40271},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1208, col: 11, offset: 40271},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 11, offset: 40301},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1210, col: 11, offset: 40322},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1211, col: 11, offset: 40343},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1212, col: 11, offset: 40367},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1213, col: 11, offset: 40391},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1217, col: 1, offset: 40492},
			expr: &choiceExpr{
				pos: position{line: 1218, col: 5, offset: 40536},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1218, col: 5, offset: 40536},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1219, col: 7, offset: 40633},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1219, col: 7, offset: 40633},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1219, col: 7, offset: 40633},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1219, col: 12, offset: 40638},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1223, col: 1, offset: 40809},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 5, offset: 40837},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1224, col: 5, offset: 40837},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1224, col: 5, offset: 40837},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1224, col: 6, offset: 40838},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1224, col: 6, offset: 40838},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1224, col: 10, offset: 40842},
											expr: &litMatcher{
												pos:        position{line: 1224, col: 11, offset: 40843},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1224, col: 16, offset: 40848},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 26, offset: 40858},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1224, col: 55, offset: 40887},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1224, col: 59, offset: 40891},
									expr: &notExpr{
										pos: position{line: 1224, col: 61, offset: 40893},
										expr: &ruleRefExpr{
											pos:  position{line: 1224, col: 62, offset: 40894},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1226, col: 9, offset: 41100},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1226, col: 9, offset: 41100},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1226, col: 9, offset: 41100},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1226, col: 13, offset: 41104},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1226, col: 23, offset: 41114},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1226, col: 23, offset: 41114},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1226, col: 27, offset: 41118},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1226, col: 56, offset: 41147},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1230, col: 1, offset: 41365},
			expr: &seqExpr{
				pos: position{line: 1230, col: 32, offset: 41396},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1230, col: 32, offset: 41396},
						expr: &ruleRefExpr{
							pos:  position{line: 1230, col: 33, offset: 41397},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1230, col: 39, offset: 41403},
						expr: &ruleRefExpr{
							pos:  position{line: 1230, col: 39, offset: 41403},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1232, col: 1, offset: 41432},
			expr: &choiceExpr{
				pos: position{line: 1233, col: 5, offset: 41467},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1233, col: 5, offset: 41467},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1234, col: 7, offset: 41478},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1234, col: 7, offset: 41478},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1234, col: 15, offset: 41486},
								expr: &ruleRefExpr{
									pos:  position{line: 1234, col: 16, offset: 41487},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 7, offset: 41501},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 7, offset: 41529},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 7, offset: 41552},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 7, offset: 41570},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1239, col: 7, offset: 41589},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1239, col: 7, offset: 41589},
								expr: &ruleRefExpr{
									pos:  position{line: 1239, col: 7, offset: 41589},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1239, col: 14, offset: 41596},
								expr: &seqExpr{
									pos: position{line: 1239, col: 15, offset: 41597},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1239, col: 15, offset: 41597},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1239, col: 19, offset: 41601},
											expr: &litMatcher{
												pos:        position{line: 1239, col: 20, offset: 41602},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 7, offset: 41614},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 7, offset: 41652},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 7, offset: 41677},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1244, col: 1, offset: 41715},
			expr: &actionExpr{
				pos: position{line: 1245, col: 5, offset: 41755},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 5, offset: 41755},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1245, col: 5, offset: 41755},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1245, col: 16, offset: 41766},
								expr: &ruleRefExpr{
									pos:  position{line: 1245, col: 17, offset: 41767},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1246, col: 5, offset: 41793},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1246, col: 11, offset: 41799},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 41799},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 41829},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 11, offset: 41850},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 11, offset: 41871},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 11, offset: 41895},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1251, col: 11, offset: 41919},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1254, col: 1, offset: 42019},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 42063},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1255, col: 5, offset: 42063},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1256, col: 7, offset: 42160},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1256, col: 7, offset: 42160},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1256, col: 7, offset: 42160},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1256, col: 11, offset: 42164},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1260, col: 1, offset: 42335},
			expr: &choiceExpr{
				pos: position{line: 1261, col: 5, offset: 42359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 42359},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1261, col: 5, offset: 42359},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1261, col: 5, offset: 42359},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 18, offset: 42372},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 40, offset: 42394},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 45, offset: 42399},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 55, offset: 42409},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 84, offset: 42438},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1263, col: 9, offset: 42595},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1263, col: 9, offset: 42595},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1263, col: 9, offset: 42595},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1263, col: 22, offset: 42608},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1263, col: 44, offset: 42630},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1263, col: 49, offset: 42635},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1263, col: 59, offset: 42645},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1263, col: 88, offset: 42674},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1266, col: 9, offset: 42874},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1266, col: 9, offset: 42874},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1266, col: 9, offset: 42874},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1266, col: 22, offset: 42887},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 44, offset: 42909},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1266, col: 48, offset: 42913},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1266, col: 58, offset: 42923},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 87, offset: 42952},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1273, col: 1, offset: 43173},
			expr: &choiceExpr{
				pos: position{line: 1273, col: 15, offset: 43187},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1273, col: 15, offset: 43187},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 39, offset: 43211},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1275, col: 1, offset: 43234},
			expr: &actionExpr{
				pos: position{line: 1275, col: 26, offset: 43259},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1275, col: 26, offset: 43259},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1275, col: 26, offset: 43259},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 31, offset: 43264},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 41, offset: 43274},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1275, col: 72, offset: 43305},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1279, col: 1, offset: 43451},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1279, col: 34, offset: 43484},
				expr: &ruleRefExpr{
					pos:  position{line: 1279, col: 34, offset: 43484},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1281, col: 1, offset: 43516},
			expr: &actionExpr{
				pos: position{line: 1282, col: 5, offset: 43553},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1282, col: 5, offset: 43553},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1282, col: 5, offset: 43553},
							expr: &litMatcher{
								pos:        position{line: 1282, col: 7, offset: 43555},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1282, col: 13, offset: 43561},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1282, col: 22, offset: 43570},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1282, col: 22, offset: 43570},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 7, offset: 43581},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1284, col: 7, offset: 43626},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1284, col: 7, offset: 43626},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1284, col: 15, offset: 43634},
												expr: &ruleRefExpr{
													pos:  position{line: 1284, col: 16, offset: 43635},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 7, offset: 43649},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1286, col: 7, offset: 43677},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1287, col: 7, offset: 43700},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 7, offset: 43718},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1289, col: 7, offset: 43737},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1290, col: 7, offset: 43777},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1291, col: 7, offset: 43802},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1295, col: 1, offset: 43879},
			expr: &actionExpr{
				pos: position{line: 1296, col: 5, offset: 43921},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1296, col: 5, offset: 43921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1296, col: 5, offset: 43921},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1296, col: 16, offset: 43932},
								expr: &ruleRefExpr{
									pos:  position{line: 1296, col: 17, offset: 43933},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1297, col: 5, offset: 43959},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1297, col: 11, offset: 43965},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1297, col: 11, offset: 43965},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1298, col: 11, offset: 43997},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1299, col: 11, offset: 44016},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1300, col: 11, offset: 44037},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1301, col: 11, offset: 44061},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1302, col: 11, offset: 44085},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1306, col: 1, offset: 44186},
			expr: &choiceExpr{
				pos: position{line: 1307, col: 5, offset: 44232},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1307, col: 5, offset: 44232},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1308, col: 7, offset: 44331},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1308, col: 7, offset: 44331},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1308, col: 7, offset: 44331},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1308, col: 12, offset: 44336},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1312, col: 1, offset: 44509},
			expr: &choiceExpr{
				pos: position{line: 1313, col: 5, offset: 44539},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1313, col: 5, offset: 44539},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1313, col: 5, offset: 44539},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1313, col: 6, offset: 44540},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1313, col: 6, offset: 44540},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1313, col: 10, offset: 44544},
											expr: &litMatcher{
												pos:        position{line: 1313, col: 11, offset: 44545},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1313, col: 16, offset: 44550},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1313, col: 26, offset: 44560},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1313, col: 57, offset: 44591},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1315, col: 9, offset: 44793},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1315, col: 9, offset: 44793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1315, col: 9, offset: 44793},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1315, col: 13, offset: 44797},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1315, col: 23, offset: 44807},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1315, col: 23, offset: 44807},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1315, col: 27, offset: 44811},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1315, col: 58, offset: 44842},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1319, col: 1, offset: 45064},
			expr: &actionExpr{
				pos: position{line: 1319, col: 34, offset: 45097},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1319, col: 34, offset: 45097},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1319, col: 34, offset: 45097},
							expr: &ruleRefExpr{
								pos:  position{line: 1319, col: 35, offset: 45098},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1319, col: 41, offset: 45104},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1319, col: 51, offset: 45114},
								expr: &ruleRefExpr{
									pos:  position{line: 1319, col: 51, offset: 45114},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1323, col: 1, offset: 45175},
			expr: &choiceExpr{
				pos: position{line: 1324, col: 5, offset: 45212},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1324, col: 5, offset: 45212},
						name: "ItalicWord",
					},
					&seqExpr{
						pos: position{line: 1325, col: 7, offset: 45229},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1325, col: 7, offset: 45229},
								expr: &ruleRefExpr{
									pos:  position{line: 1325, col: 7, offset: 45229},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1325, col: 14, offset: 45236},
								expr: &seqExpr{
									pos: position{line: 1325, col: 15, offset: 45237},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1325, col: 15, offset: 45237},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1325, col: 19, offset: 45241},
											expr: &litMatcher{
												pos:        position{line: 1325, col: 20, offset: 45242},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1326, col: 7, offset: 45254},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1326, col: 7, offset: 45254},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1326, col: 15, offset: 45262},
								expr: &ruleRefExpr{
									pos:  position{line: 1326, col: 16, offset: 45263},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 7, offset: 45277},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 7, offset: 45305},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 7, offset: 45328},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 7, offset: 45346},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 7, offset: 45365},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 7, offset: 45405},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 7, offset: 45430},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "ItalicWord",
			pos:  position{line: 1336, col: 1, offset: 45525},
			expr: &actionExpr{
				pos: position{line: 1336, col: 15, offset: 45539},
				run: (*parser).callonItalicWord1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 15, offset: 45539},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1336, col: 15, offset: 45539},
							expr: &charClassMatcher{
								pos:        position{line: 1336, col: 15, offset: 45539},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1336, col: 25, offset: 45549},
							expr: &choiceExpr{
								pos: position{line: 1336, col: 27, offset: 45551},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1336, col: 27, offset: 45551},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&litMatcher{
										pos:        position{line: 1336, col: 33, offset: 45557},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1340, col: 1, offset: 45617},
			expr: &actionExpr{
				pos: position{line: 1341, col: 5, offset: 45658},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1341, col: 5, offset: 45658},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1341, col: 5, offset: 45658},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1341, col: 16, offset: 45669},
								expr: &ruleRefExpr{
									pos:  position{line: 1341, col: 17, offset: 45670},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1342, col: 5, offset: 45696},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1342, col: 11, offset: 45702},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1342, col: 11, offset: 45702},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1343, col: 11, offset: 45721},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1344, col: 11, offset: 45753},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 11, offset: 45774},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1346, col: 11, offset: 45798},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1347, col: 11, offset: 45822},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1351, col: 1, offset: 45923},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 45969},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1352, col: 5, offset: 45969},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1353, col: 7, offset: 46068},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1353, col: 7, offset: 46068},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1353, col: 7, offset: 46068},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1353, col: 11, offset: 46072},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1357, col: 1, offset: 46246},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 5, offset: 46272},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1358, col: 5, offset: 46272},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1358, col: 5, offset: 46272},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1358, col: 5, offset: 46272},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1358, col: 18, offset: 46285},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1358, col: 40, offset: 46307},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1358, col: 45, offset: 46312},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1358, col: 55, offset: 46322},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1358, col: 86, offset: 46353},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1360, col: 9, offset: 46510},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1360, col: 9, offset: 46510},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1360, col: 9, offset: 46510},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 22, offset: 46523},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 44, offset: 46545},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1360, col: 49, offset: 46550},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 59, offset: 46560},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 90, offset: 46591},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1363, col: 9, offset: 46791},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1363, col: 9, offset: 46791},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1363, col: 9, offset: 46791},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 22, offset: 46804},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 44, offset: 46826},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1363, col: 48, offset: 46830},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 58, offset: 46840},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 89, offset: 46871},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1370, col: 1, offset: 47098},
			expr: &choiceExpr{
				pos: position{line: 1370, col: 18, offset: 47115},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1370, col: 18, offset: 47115},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 45, offset: 47142},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1372, col: 1, offset: 47168},
			expr: &actionExpr{
				pos: position{line: 1372, col: 29, offset: 47196},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1372, col: 29, offset: 47196},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1372, col: 29, offset: 47196},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 34, offset: 47201},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1372, col: 44, offset: 47211},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1372, col: 78, offset: 47245},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1376, col: 1, offset: 47394},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1376, col: 37, offset: 47430},
				expr: &ruleRefExpr{
					pos:  position{line: 1376, col: 37, offset: 47430},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1378, col: 1, offset: 47497},
			expr: &actionExpr{
				pos: position{line: 1379, col: 5, offset: 47537},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 5, offset: 47537},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1379, col: 5, offset: 47537},
							expr: &litMatcher{
								pos:        position{line: 1379, col: 7, offset: 47539},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1379, col: 13, offset: 47545},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1379, col: 22, offset: 47554},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1379, col: 22, offset: 47554},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1380, col: 7, offset: 47565},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1381, col: 7, offset: 47610},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1381, col: 7, offset: 47610},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1381, col: 15, offset: 47618},
												expr: &ruleRefExpr{
													pos:  position{line: 1381, col: 16, offset: 47619},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1382, col: 7, offset: 47633},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1383, col: 7, offset: 47661},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1384, col: 7, offset: 47684},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 7, offset: 47702},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 7, offset: 47721},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 7, offset: 47784},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 7, offset: 47827},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 7, offset: 47852},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1393, col: 1, offset: 47932},
			expr: &actionExpr{
				pos: position{line: 1394, col: 5, offset: 47976},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1394, col: 5, offset: 47976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1394, col: 5, offset: 47976},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1394, col: 16, offset: 47987},
								expr: &ruleRefExpr{
									pos:  position{line: 1394, col: 17, offset: 47988},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1395, col: 5, offset: 48014},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1395, col: 11, offset: 48020},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1395, col: 11, offset: 48020},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1396, col: 11, offset: 48055},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1397, col: 11, offset: 48074},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1398, col: 11, offset: 48095},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1399, col: 11, offset: 48116},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1400, col: 11, offset: 48140},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1404, col: 1, offset: 48242},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 5, offset: 48291},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1405, col: 5, offset: 48291},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1406, col: 7, offset: 48393},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1406, col: 7, offset: 48393},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1406, col: 7, offset: 48393},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1406, col: 12, offset: 48398},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1410, col: 1, offset: 48576},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 5, offset: 48609},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1411, col: 5, offset: 48609},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1411, col: 5, offset: 48609},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1411, col: 6, offset: 48610},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1411, col: 6, offset: 48610},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1411, col: 10, offset: 48614},
											expr: &litMatcher{
												pos:        position{line: 1411, col: 11, offset: 48615},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1411, col: 16, offset: 48620},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1411, col: 26, offset: 48630},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1411, col: 60, offset: 48664},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1413, col: 9, offset: 48869},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1413, col: 9, offset: 48869},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1413, col: 9, offset: 48869},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 13, offset: 48873},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1413, col: 23, offset: 48883},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1413, col: 23, offset: 48883},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 27, offset: 48887},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1413, col: 61, offset: 48921},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1417, col: 1, offset: 49147},
			expr: &seqExpr{
				pos: position{line: 1417, col: 37, offset: 49183},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1417, col: 37, offset: 49183},
						expr: &ruleRefExpr{
							pos:  position{line: 1417, col: 38, offset: 49184},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1417, col: 44, offset: 49190},
						expr: &ruleRefExpr{
							pos:  position{line: 1417, col: 44, offset: 49190},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1419, col: 1, offset: 49224},
			expr: &choiceExpr{
				pos: position{line: 1420, col: 5, offset: 49265},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1420, col: 5, offset: 49265},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1421, col: 7, offset: 49276},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1421, col: 7, offset: 49276},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1421, col: 15, offset: 49284},
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 16, offset: 49285},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1422, col: 7, offset: 49299},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1423, col: 7, offset: 49327},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1424, col: 7, offset: 49350},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1425, col: 7, offset: 49368},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1426, col: 7, offset: 49387},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1426, col: 7, offset: 49387},
								expr: &ruleRefExpr{
									pos:  position{line: 1426, col: 7, offset: 49387},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1426, col: 14, offset: 49394},
								expr: &seqExpr{
									pos: position{line: 1426, col: 15, offset: 49395},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1426, col: 15, offset: 49395},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1426, col: 19, offset: 49399},
											expr: &litMatcher{
												pos:        position{line: 1426, col: 20, offset: 49400},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 7, offset: 49524},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 7, offset: 49567},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 7, offset: 49587},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1430, col: 7, offset: 49612},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1432, col: 1, offset: 49655},
			expr: &actionExpr{
				pos: position{line: 1433, col: 5, offset: 49699},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 5, offset: 49699},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1433, col: 5, offset: 49699},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1433, col: 16, offset: 49710},
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 17, offset: 49711},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1434, col: 5, offset: 49737},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1434, col: 11, offset: 49743},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1434, col: 11, offset: 49743},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1435, col: 11, offset: 49778},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1436, col: 11, offset: 49797},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1437, col: 11, offset: 49818},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1438, col: 11, offset: 49839},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1439, col: 11, offset: 49863},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1443, col: 1, offset: 49965},
			expr: &actionExpr{
				pos: position{line: 1444, col: 5, offset: 50014},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1444, col: 6, offset: 50015},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1444, col: 6, offset: 50015},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1445, col: 7, offset: 50119},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1445, col: 7, offset: 50119},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1445, col: 11, offset: 50123},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1449, col: 1, offset: 50301},
			expr: &choiceExpr{
				pos: position{line: 1450, col: 5, offset: 50330},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1450, col: 5, offset: 50330},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1450, col: 5, offset: 50330},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1450, col: 5, offset: 50330},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1450, col: 18, offset: 50343},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1450, col: 40, offset: 50365},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1450, col: 45, offset: 50370},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1450, col: 55, offset: 50380},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1450, col: 89, offset: 50414},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1452, col: 9, offset: 50571},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1452, col: 9, offset: 50571},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1452, col: 9, offset: 50571},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1452, col: 22, offset: 50584},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1452, col: 44, offset: 50606},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1452, col: 49, offset: 50611},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1452, col: 59, offset: 50621},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1452, col: 93, offset: 50655},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1455, col: 9, offset: 50855},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1455, col: 9, offset: 50855},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1455, col: 9, offset: 50855},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1455, col: 22, offset: 50868},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1455, col: 44, offset: 50890},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1455, col: 48, offset: 50894},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1455, col: 58, offset: 50904},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1455, col: 92, offset: 50938},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1462, col: 1, offset: 51159},
			expr: &choiceExpr{
				pos: position{line: 1462, col: 15, offset: 51173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1462, col: 15, offset: 51173},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1462, col: 39, offset: 51197},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1464, col: 1, offset: 51220},
			expr: &actionExpr{
				pos: position{line: 1464, col: 26, offset: 51245},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1464, col: 26, offset: 51245},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1464, col: 26, offset: 51245},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1464, col: 31, offset: 51250},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1464, col: 41, offset: 51260},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1464, col: 72, offset: 51291},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1468, col: 1, offset: 51437},
			expr: &seqExpr{
				pos: position{line: 1468, col: 34, offset: 51470},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1468, col: 34, offset: 51470},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1468, col: 63, offset: 51499},
						expr: &seqExpr{
							pos: position{line: 1468, col: 64, offset: 51500},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1468, col: 64, offset: 51500},
									expr: &litMatcher{
										pos:        position{line: 1468, col: 66, offset: 51502},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1468, col: 73, offset: 51509},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1468, col: 73, offset: 51509},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1468, col: 81, offset: 51517},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1470, col: 1, offset: 51584},
			expr: &choiceExpr{
				pos: position{line: 1470, col: 33, offset: 51616},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1470, col: 33, offset: 51616},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1471, col: 7, offset: 51627},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1471, col: 7, offset: 51627},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1471, col: 15, offset: 51635},
								expr: &ruleRefExpr{
									pos:  position{line: 1471, col: 16, offset: 51636},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1472, col: 7, offset: 51650},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1473, col: 7, offset: 51678},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1474, col: 7, offset: 51701},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 7, offset: 51719},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1476, col: 7, offset: 51738},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 7, offset: 51769},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1478, col: 7, offset: 51794},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1480, col: 1, offset: 51834},
			expr: &actionExpr{
				pos: position{line: 1481, col: 5, offset: 51866},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1481, col: 5, offset: 51866},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1481, col: 5, offset: 51866},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1481, col: 16, offset: 51877},
								expr: &ruleRefExpr{
									pos:  position{line: 1481, col: 17, offset: 51878},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1482, col: 5, offset: 51904},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1482, col: 11, offset: 51910},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1482, col: 11, offset: 51910},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1483, col: 11, offset: 51929},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1484, col: 11, offset: 51950},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1485, col: 11, offset: 51974},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1486, col: 11, offset: 52006},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1487, col: 11, offset: 52030},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1491, col: 1, offset: 52132},
			expr: &choiceExpr{
				pos: position{line: 1492, col: 5, offset: 52178},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1492, col: 5, offset: 52178},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1493, col: 7, offset: 52277},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1493, col: 7, offset: 52277},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1493, col: 7, offset: 52277},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1493, col: 12, offset: 52282},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1497, col: 1, offset: 52455},
			expr: &choiceExpr{
				pos: position{line: 1497, col: 26, offset: 52480},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1497, col: 26, offset: 52480},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1497, col: 26, offset: 52480},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1497, col: 27, offset: 52481},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1497, col: 27, offset: 52481},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1497, col: 31, offset: 52485},
											expr: &litMatcher{
												pos:        position{line: 1497, col: 32, offset: 52486},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1497, col: 37, offset: 52491},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1497, col: 47, offset: 52501},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1497, col: 78, offset: 52532},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1499, col: 9, offset: 52734},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1499, col: 9, offset: 52734},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1499, col: 9, offset: 52734},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1499, col: 13, offset: 52738},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1499, col: 23, offset: 52748},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1499, col: 23, offset: 52748},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1499, col: 27, offset: 52752},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1499, col: 58, offset: 52783},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1503, col: 1, offset: 53004},
			expr: &seqExpr{
				pos: position{line: 1503, col: 34, offset: 53037},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1503, col: 34, offset: 53037},
						expr: &ruleRefExpr{
							pos:  position{line: 1503, col: 35, offset: 53038},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1503, col: 41, offset: 53044},
						expr: &ruleRefExpr{
							pos:  position{line: 1503, col: 41, offset: 53044},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1505, col: 1, offset: 53075},
			expr: &choiceExpr{
				pos: position{line: 1505, col: 33, offset: 53107},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1505, col: 33, offset: 53107},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1506, col: 7, offset: 53118},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1506, col: 7, offset: 53118},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1506, col: 15, offset: 53126},
								expr: &ruleRefExpr{
									pos:  position{line: 1506, col: 16, offset: 53127},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1507, col: 7, offset: 53141},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1508, col: 7, offset: 53169},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1509, col: 7, offset: 53192},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1510, col: 7, offset: 53210},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1511, col: 7, offset: 53229},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1511, col: 7, offset: 53229},
								expr: &ruleRefExpr{
									pos:  position{line: 1511, col: 7, offset: 53229},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1511, col: 14, offset: 53236},
								expr: &seqExpr{
									pos: position{line: 1511, col: 15, offset: 53237},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1511, col: 15, offset: 53237},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1511, col: 19, offset: 53241},
											expr: &litMatcher{
												pos:        position{line: 1511, col: 20, offset: 53242},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1512, col: 7, offset: 53254},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1513, col: 7, offset: 53285},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1514, col: 7, offset: 53310},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1516, col: 1, offset: 53350},
			expr: &actionExpr{
				pos: position{line: 1517, col: 5, offset: 53382},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 5, offset: 53382},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1517, col: 5, offset: 53382},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1517, col: 16, offset: 53393},
								expr: &ruleRefExpr{
									pos:  position{line: 1517, col: 17, offset: 53394},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 5, offset: 53420},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1518, col: 11, offset: 53426},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1518, col: 11, offset: 53426},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1519, col: 11, offset: 53458},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1520, col: 11, offset: 53477},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1521, col: 11, offset: 53498},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1522, col: 11, offset: 53522},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1523, col: 11, offset: 53546},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1526, col: 1, offset: 53647},
			expr: &choiceExpr{
				pos: position{line: 1527, col: 5, offset: 53693},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1527, col: 5, offset: 53693},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1528, col: 7, offset: 53790},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1528, col: 7, offset: 53790},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1528, col: 7, offset: 53790},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1528, col: 11, offset: 53794},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1532, col: 1, offset: 53965},
			expr: &choiceExpr{
				pos: position{line: 1533, col: 5, offset: 53990},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1533, col: 5, offset: 53990},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1533, col: 5, offset: 53990},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1533, col: 5, offset: 53990},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1533, col: 18, offset: 54003},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1533, col: 40, offset: 54025},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1533, col: 45, offset: 54030},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1533, col: 55, offset: 54040},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1533, col: 86, offset: 54071},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1535, col: 9, offset: 54228},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1535, col: 9, offset: 54228},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1535, col: 9, offset: 54228},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1535, col: 22, offset: 54241},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1535, col: 44, offset: 54263},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1535, col: 49, offset: 54268},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1535, col: 59, offset: 54278},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1535, col: 90, offset: 54309},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1538, col: 9, offset: 54509},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1538, col: 9, offset: 54509},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1538, col: 9, offset: 54509},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1538, col: 22, offset: 54522},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1538, col: 44, offset: 54544},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1538, col: 48, offset: 54548},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1538, col: 58, offset: 54558},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1538, col: 89, offset: 54589},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1545, col: 1, offset: 54817},
			expr: &actionExpr{
				pos: position{line: 1545, col: 18, offset: 54834},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1545, col: 18, offset: 54834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1545, col: 18, offset: 54834},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1545, col: 22, offset: 54838},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1545, col: 31, offset: 54847},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1545, col: 53, offset: 54869},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1549, col: 1, offset: 54977},
			expr: &choiceExpr{
				pos: position{line: 1549, col: 25, offset: 55001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1549, col: 25, offset: 55001},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1549, col: 38, offset: 55014},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1551, col: 1, offset: 55033},
			expr: &actionExpr{
				pos: position{line: 1551, col: 21, offset: 55053},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1551, col: 21, offset: 55053},
					expr: &charClassMatcher{
						pos:        position{line: 1551, col: 21, offset: 55053},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1555, col: 1, offset: 55138},
			expr: &actionExpr{
				pos: position{line: 1555, col: 25, offset: 55162},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1555, col: 25, offset: 55162},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1555, col: 25, offset: 55162},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1555, col: 38, offset: 55175},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1555, col: 60, offset: 55197},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1555, col: 64, offset: 55201},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1555, col: 73, offset: 55210},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1555, col: 95, offset: 55232},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1562, col: 1, offset: 55450},
			expr: &actionExpr{
				pos: position{line: 1562, col: 20, offset: 55469},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1562, col: 20, offset: 55469},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1562, col: 20, offset: 55469},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1562, col: 24, offset: 55473},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1562, col: 33, offset: 55482},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1562, col: 57, offset: 55506},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1566, col: 1, offset: 55616},
			expr: &choiceExpr{
				pos: position{line: 1566, col: 27, offset: 55642},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1566, col: 27, offset: 55642},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1566, col: 40, offset: 55655},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1568, col: 1, offset: 55676},
			expr: &actionExpr{
				pos: position{line: 1568, col: 23, offset: 55698},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1568, col: 23, offset: 55698},
					expr: &charClassMatcher{
						pos:        position{line: 1568, col: 23, offset: 55698},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1572, col: 1, offset: 55783},
			expr: &actionExpr{
				pos: position{line: 1572, col: 27, offset: 55809},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 27, offset: 55809},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1572, col: 27, offset: 55809},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1572, col: 40, offset: 55822},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1572, col: 62, offset: 55844},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1572, col: 66, offset: 55848},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1572, col: 75, offset: 55857},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1572, col: 99, offset: 55881},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1580, col: 1, offset: 56193},
			expr: &choiceExpr{
				pos: position{line: 1580, col: 17, offset: 56209},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1580, col: 17, offset: 56209},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1580, col: 38, offset: 56230},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1582, col: 1, offset: 56250},
			expr: &actionExpr{
				pos: position{line: 1582, col: 23, offset: 56272},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1582, col: 23, offset: 56272},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1582, col: 23, offset: 56272},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 46, offset: 56295},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1582, col: 55, offset: 56304},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1582, col: 82, offset: 56331},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1586, col: 1, offset: 56443},
			expr: &actionExpr{
				pos: position{line: 1586, col: 31, offset: 56473},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1586, col: 31, offset: 56473},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1586, col: 41, offset: 56483},
						expr: &ruleRefExpr{
							pos:  position{line: 1586, col: 41, offset: 56483},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1590, col: 1, offset: 56569},
			expr: &seqExpr{
				pos: position{line: 1590, col: 27, offset: 56595},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1590, col: 27, offset: 56595},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1590, col: 32, offset: 56600},
						expr: &charClassMatcher{
							pos:        position{line: 1590, col: 33, offset: 56601},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1592, col: 1, offset: 56612},
			expr: &litMatcher{
				pos:        position{line: 1592, col: 25, offset: 56636},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1595, col: 1, offset: 56724},
			expr: &actionExpr{
				pos: position{line: 1596, col: 5, offset: 56758},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1596, col: 5, offset: 56758},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1597, col: 9, offset: 56776},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1597, col: 9, offset: 56776},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1597, col: 9, offset: 56776},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1597, col: 19, offset: 56786},
										expr: &ruleRefExpr{
											pos:  position{line: 1597, col: 20, offset: 56787},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1598, col: 11, offset: 56843},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1598, col: 11, offset: 56843},
										expr: &ruleRefExpr{
											pos:  position{line: 1598, col: 11, offset: 56843},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1598, col: 18, offset: 56850},
										expr: &ruleRefExpr{
											pos:  position{line: 1598, col: 19, offset: 56851},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1599, col: 12, offset: 56883},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1599, col: 12, offset: 56883},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1599, col: 12, offset: 56883},
											expr: &litMatcher{
												pos:        position{line: 1599, col: 13, offset: 56884},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1599, col: 17, offset: 56888},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1599, col: 26, offset: 56897},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1600, col: 11, offset: 56969},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1601, col: 11, offset: 57010},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1602, col: 11, offset: 57039},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1607, col: 1, offset: 57118},
			expr: &actionExpr{
				pos: position{line: 1608, col: 5, offset: 57156},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1608, col: 5, offset: 57156},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1608, col: 5, offset: 57156},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1608, col: 16, offset: 57167},
								expr: &ruleRefExpr{
									pos:  position{line: 1608, col: 17, offset: 57168},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1609, col: 5, offset: 57194},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1609, col: 11, offset: 57200},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1609, col: 11, offset: 57200},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1610, col: 11, offset: 57219},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1611, col: 12, offset: 57241},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1611, col: 12, offset: 57241},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1611, col: 12, offset: 57241},
													expr: &litMatcher{
														pos:        position{line: 1611, col: 13, offset: 57242},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1611, col: 18, offset: 57247},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1611, col: 27, offset: 57256},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1612, col: 11, offset: 57305},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1613, col: 11, offset: 57329},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1614, col: 11, offset: 57355},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1618, col: 1, offset: 57452},
			expr: &choiceExpr{
				pos: position{line: 1618, col: 41, offset: 57492},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1618, col: 41, offset: 57492},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1618, col: 55, offset: 57506},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1618, col: 55, offset: 57506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1618, col: 55, offset: 57506},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1618, col: 59, offset: 57510},
									expr: &litMatcher{
										pos:        position{line: 1618, col: 60, offset: 57511},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1622, col: 1, offset: 57583},
			expr: &actionExpr{
				pos: position{line: 1622, col: 23, offset: 57605},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1622, col: 23, offset: 57605},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1622, col: 23, offset: 57605},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1622, col: 46, offset: 57628},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1622, col: 55, offset: 57637},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1622, col: 82, offset: 57664},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1626, col: 1, offset: 57776},
			expr: &actionExpr{
				pos: position{line: 1626, col: 31, offset: 57806},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1626, col: 31, offset: 57806},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1626, col: 41, offset: 57816},
						expr: &ruleRefExpr{
							pos:  position{line: 1626, col: 41, offset: 57816},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1631, col: 1, offset: 57984},
			expr: &actionExpr{
				pos: position{line: 1631, col: 30, offset: 58013},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1631, col: 30, offset: 58013},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1632, col: 5, offset: 58027},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1632, col: 5, offset: 58027},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1632, col: 5, offset: 58027},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1632, col: 15, offset: 58037},
										expr: &ruleRefExpr{
											pos:  position{line: 1632, col: 16, offset: 58038},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1633, col: 7, offset: 58090},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1633, col: 7, offset: 58090},
										expr: &ruleRefExpr{
											pos:  position{line: 1633, col: 7, offset: 58090},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1633, col: 14, offset: 58097},
										expr: &ruleRefExpr{
											pos:  position{line: 1633, col: 15, offset: 58098},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1634, col: 7, offset: 58125},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1635, col: 7, offset: 58162},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1636, col: 7, offset: 58187},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1640, col: 1, offset: 58261},
			expr: &actionExpr{
				pos: position{line: 1641, col: 5, offset: 58299},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1641, col: 5, offset: 58299},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1641, col: 5, offset: 58299},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1641, col: 16, offset: 58310},
								expr: &ruleRefExpr{
									pos:  position{line: 1641, col: 17, offset: 58311},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1642, col: 5, offset: 58337},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1642, col: 11, offset: 58343},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1642, col: 11, offset: 58343},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1643, col: 11, offset: 58362},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1644, col: 12, offset: 58384},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1644, col: 12, offset: 58384},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1644, col: 12, offset: 58384},
													expr: &litMatcher{
														pos:        position{line: 1644, col: 13, offset: 58385},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1644, col: 19, offset: 58391},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1644, col: 28, offset: 58400},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1645, col: 11, offset: 58449},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1646, col: 11, offset: 58473},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1647, col: 11, offset: 58499},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1651, col: 1, offset: 58596},
			expr: &seqExpr{
				pos: position{line: 1651, col: 27, offset: 58622},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1651, col: 27, offset: 58622},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1651, col: 33, offset: 58628},
						expr: &charClassMatcher{
							pos:        position{line: 1651, col: 34, offset: 58629},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1653, col: 1, offset: 58640},
			expr: &litMatcher{
				pos:        position{line: 1653, col: 25, offset: 58664},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1655, col: 1, offset: 58671},
			expr: &actionExpr{
				pos: position{line: 1655, col: 41, offset: 58711},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1655, col: 42, offset: 58712},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1655, col: 42, offset: 58712},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1655, col: 56, offset: 58726},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1655, col: 56, offset: 58726},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1655, col: 60, offset: 58730},
									expr: &litMatcher{
										pos:        position{line: 1655, col: 61, offset: 58731},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1664, col: 1, offset: 58997},
			expr: &actionExpr{
				pos: position{line: 1665, col: 5, offset: 59013},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1665, col: 5, offset: 59013},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1665, col: 5, offset: 59013},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1665, col: 12, offset: 59020},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1665, col: 12, offset: 59020},
									expr: &litMatcher{
										pos:        position{line: 1665, col: 13, offset: 59021},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1669, col: 5, offset: 59129},
							run: (*parser).callonSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 1681, col: 5, offset: 59635},
							expr: &ruleRefExpr{
								pos:  position{line: 1681, col: 5, offset: 59635},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1681, col: 12, offset: 59642},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1681, col: 19, offset: 59649},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1681, col: 36, offset: 59666},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 1705, col: 1, offset: 60497},
			expr: &actionExpr{
				pos: position{line: 1705, col: 20, offset: 60516},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1705, col: 20, offset: 60516},
					expr: &charClassMatcher{
						pos:        position{line: 1705, col: 20, offset: 60516},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1716, col: 1, offset: 60863},
			expr: &actionExpr{
				pos: position{line: 1716, col: 20, offset: 60882},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 20, offset: 60882},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1716, col: 20, offset: 60882},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1716, col: 29, offset: 60891},
								expr: &choiceExpr{
									pos: position{line: 1717, col: 5, offset: 60897},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1717, col: 5, offset: 60897},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1718, col: 7, offset: 60914},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1719, col: 7, offset: 60938},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1720, col: 7, offset: 60966},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1721, col: 7, offset: 61079},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1722, col: 7, offset: 61093},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1722, col: 17, offset: 61103},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 1727, col: 1, offset: 61200},
			expr: &actionExpr{
				pos: position{line: 1727, col: 27, offset: 61226},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1727, col: 27, offset: 61226},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1727, col: 27, offset: 61226},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1727, col: 36, offset: 61235},
								expr: &choiceExpr{
									pos: position{line: 1728, col: 5, offset: 61241},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1728, col: 5, offset: 61241},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1729, col: 7, offset: 61258},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1730, col: 7, offset: 61286},
											name: "Quotes",
										},
										&ruleRefExpr{
											pos:  position{line: 1731, col: 7, offset: 61299},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1732, col: 7, offset: 61412},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1733, col: 7, offset: 61426},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1733, col: 17, offset: 61436},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1738, col: 1, offset: 61536},
			expr: &actionExpr{
				pos: position{line: 1738, col: 16, offset: 61551},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1738, col: 16, offset: 61551},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1738, col: 16, offset: 61551},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1738, col: 25, offset: 61560},
								expr: &choiceExpr{
									pos: position{line: 1739, col: 5, offset: 61566},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1739, col: 5, offset: 61566},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1740, col: 7, offset: 61583},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1741, col: 7, offset: 61607},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1742, col: 7, offset: 61630},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1743, col: 7, offset: 61642},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1744, col: 7, offset: 61670},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1745, col: 7, offset: 61783},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1746, col: 7, offset: 61801},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1746, col: 17, offset: 61811},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1751, col: 1, offset: 61907},
			expr: &actionExpr{
				pos: position{line: 1751, col: 16, offset: 61922},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1751, col: 16, offset: 61922},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1751, col: 16, offset: 61922},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1751, col: 25, offset: 61931},
								expr: &choiceExpr{
									pos: position{line: 1752, col: 5, offset: 61937},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1752, col: 5, offset: 61937},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1753, col: 7, offset: 61954},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1754, col: 7, offset: 61972},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1755, col: 7, offset: 62085},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1756, col: 7, offset: 62099},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1756, col: 17, offset: 62109},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1761, col: 1, offset: 62192},
			expr: &actionExpr{
				pos: position{line: 1761, col: 14, offset: 62205},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1761, col: 14, offset: 62205},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1761, col: 14, offset: 62205},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1761, col: 22, offset: 62213},
								expr: &anyMatcher{
									line: 1761, col: 23, offset: 62214,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1761, col: 27, offset: 62218},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1768, col: 1, offset: 62523},
			expr: &actionExpr{
				pos: position{line: 1768, col: 16, offset: 62538},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1768, col: 16, offset: 62538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1768, col: 16, offset: 62538},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1768, col: 25, offset: 62547},
								expr: &ruleRefExpr{
									pos:  position{line: 1768, col: 26, offset: 62548},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1768, col: 47, offset: 62569},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1772, col: 1, offset: 62625},
			expr: &actionExpr{
				pos: position{line: 1772, col: 23, offset: 62647},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1772, col: 23, offset: 62647},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1772, col: 23, offset: 62647},
							expr: &ruleRefExpr{
								pos:  position{line: 1772, col: 24, offset: 62648},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1773, col: 5, offset: 62656},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1774, col: 9, offset: 62674},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1774, col: 9, offset: 62674},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1775, col: 11, offset: 62695},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1776, col: 11, offset: 62711},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 1777, col: 11, offset: 62729},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1778, col: 11, offset: 62757},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1779, col: 11, offset: 62784},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1780, col: 11, offset: 62800},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1781, col: 11, offset: 62832},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1782, col: 11, offset: 62854},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1783, col: 11, offset: 62876},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1784, col: 11, offset: 62902},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1785, col: 11, offset: 63019},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1790, col: 1, offset: 63113},
			expr: &actionExpr{
				pos: position{line: 1790, col: 16, offset: 63128},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1790, col: 16, offset: 63128},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1790, col: 16, offset: 63128},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1790, col: 25, offset: 63137},
								expr: &choiceExpr{
									pos: position{line: 1791, col: 5, offset: 63143},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1791, col: 5, offset: 63143},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1792, col: 7, offset: 63160},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1793, col: 7, offset: 63172},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1794, col: 7, offset: 63285},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1795, col: 7, offset: 63299},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1795, col: 17, offset: 63309},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1800, col: 1, offset: 63411},
			expr: &actionExpr{
				pos: position{line: 1800, col: 22, offset: 63432},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1800, col: 22, offset: 63432},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1800, col: 22, offset: 63432},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1800, col: 31, offset: 63441},
								expr: &choiceExpr{
									pos: position{line: 1801, col: 5, offset: 63447},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1801, col: 5, offset: 63447},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1802, col: 7, offset: 63464},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1803, col: 7, offset: 63482},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1804, col: 7, offset: 63595},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1805, col: 7, offset: 63609},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1805, col: 17, offset: 63619},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1810, col: 1, offset: 63746},
			expr: &actionExpr{
				pos: position{line: 1810, col: 27, offset: 63772},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1810, col: 27, offset: 63772},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1810, col: 27, offset: 63772},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1810, col: 36, offset: 63781},
								expr: &choiceExpr{
									pos: position{line: 1811, col: 5, offset: 63787},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1811, col: 5, offset: 63787},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1812, col: 7, offset: 63804},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1813, col: 7, offset: 63827},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1814, col: 7, offset: 63940},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1815, col: 7, offset: 63954},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1815, col: 17, offset: 63964},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 1819, col: 1, offset: 64020},
			expr: &actionExpr{
				pos: position{line: 1819, col: 18, offset: 64037},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 1819, col: 18, offset: 64037},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1819, col: 18, offset: 64037},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1819, col: 27, offset: 64046},
								expr: &choiceExpr{
									pos: position{line: 1820, col: 5, offset: 64052},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1820, col: 5, offset: 64052},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1821, col: 7, offset: 64069},
											name: "Callout",
										},
										&ruleRefExpr{
											pos:  position{line: 1822, col: 7, offset: 64125},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1823, col: 7, offset: 64148},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1824, col: 7, offset: 64261},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1825, col: 7, offset: 64275},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1825, col: 17, offset: 64285},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1829, col: 1, offset: 64345},
			expr: &actionExpr{
				pos: position{line: 1831, col: 5, offset: 64427},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1831, col: 5, offset: 64427},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1831, col: 5, offset: 64427},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1834, col: 5, offset: 64487},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1835, col: 9, offset: 64505},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1835, col: 9, offset: 64505},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1836, col: 11, offset: 64526},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1837, col: 11, offset: 64549},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1838, col: 11, offset: 64565},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1839, col: 11, offset: 64594},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1840, col: 11, offset: 64620},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1841, col: 11, offset: 64646},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1842, col: 11, offset: 64673},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1843, col: 11, offset: 64699},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1844, col: 11, offset: 64728},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1848, col: 1, offset: 64784},
			expr: &actionExpr{
				pos: position{line: 1850, col: 5, offset: 64872},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1850, col: 5, offset: 64872},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1850, col: 5, offset: 64872},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1853, col: 5, offset: 64944},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1854, col: 9, offset: 64962},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1854, col: 9, offset: 64962},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1854, col: 33, offset: 64986},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1854, col: 57, offset: 65010},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1859, col: 1, offset: 65070},
			expr: &actionExpr{
				pos: position{line: 1861, col: 5, offset: 65156},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1861, col: 5, offset: 65156},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1861, col: 5, offset: 65156},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1864, col: 5, offset: 65226},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1865, col: 9, offset: 65244},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1870, col: 1, offset: 65297},
			expr: &actionExpr{
				pos: position{line: 1872, col: 5, offset: 65373},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1872, col: 5, offset: 65373},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1872, col: 5, offset: 65373},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1875, col: 5, offset: 65433},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1876, col: 9, offset: 65451},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1876, col: 9, offset: 65451},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1877, col: 11, offset: 65473},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1881, col: 1, offset: 65532},
			expr: &actionExpr{
				pos: position{line: 1883, col: 5, offset: 65614},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1883, col: 5, offset: 65614},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1883, col: 5, offset: 65614},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1886, col: 5, offset: 65680},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1887, col: 9, offset: 65698},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1892, col: 1, offset: 65748},
			expr: &actionExpr{
				pos: position{line: 1894, col: 5, offset: 65835},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1894, col: 5, offset: 65835},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1894, col: 5, offset: 65835},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1897, col: 5, offset: 65906},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1899, col: 9, offset: 66004},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1899, col: 9, offset: 66004},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1899, col: 9, offset: 66004},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1902, col: 11, offset: 66108},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1902, col: 12, offset: 66109},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1902, col: 12, offset: 66109},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1902, col: 18, offset: 66115},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1902, col: 24, offset: 66121},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1912, col: 1, offset: 66350},
			expr: &choiceExpr{
				pos: position{line: 1912, col: 11, offset: 66360},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1912, col: 11, offset: 66360},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1912, col: 24, offset: 66373},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1912, col: 36, offset: 66385},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1912, col: 48, offset: 66397},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1912, col: 61, offset: 66410},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1912, col: 72, offset: 66421},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1914, col: 1, offset: 66440},
			expr: &actionExpr{
				pos: position{line: 1914, col: 15, offset: 66454},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1914, col: 15, offset: 66454},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1918, col: 1, offset: 66516},
			expr: &litMatcher{
				pos:        position{line: 1918, col: 18, offset: 66533},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1920, col: 1, offset: 66556},
			expr: &actionExpr{
				pos: position{line: 1920, col: 14, offset: 66569},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1920, col: 14, offset: 66569},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1924, col: 1, offset: 66632},
			expr: &actionExpr{
				pos: position{line: 1924, col: 14, offset: 66645},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1924, col: 14, offset: 66645},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1928, col: 1, offset: 66709},
			expr: &actionExpr{
				pos: position{line: 1928, col: 15, offset: 66723},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1928, col: 15, offset: 66723},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1932, col: 1, offset: 66786},
			expr: &actionExpr{
				pos: position{line: 1932, col: 13, offset: 66798},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1932, col: 13, offset: 66798},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1940, col: 1, offset: 67083},
			expr: &actionExpr{
				pos: position{line: 1940, col: 22, offset: 67104},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1940, col: 22, offset: 67104},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1940, col: 22, offset: 67104},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1940, col: 31, offset: 67113},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1940, col: 35, offset: 67117},
							expr: &charClassMatcher{
								pos:        position{line: 1940, col: 36, offset: 67118},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1947, col: 1, offset: 67396},
			expr: &actionExpr{
				pos: position{line: 1947, col: 18, offset: 67413},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 18, offset: 67413},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1947, col: 19, offset: 67414},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1947, col: 19, offset: 67414},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1947, col: 27, offset: 67422},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1947, col: 37, offset: 67432},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1947, col: 45, offset: 67440},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1947, col: 55, offset: 67450},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1947, col: 63, offset: 67458},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1947, col: 72, offset: 67467},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1954, col: 1, offset: 67626},
			expr: &actionExpr{
				pos: position{line: 1955, col: 5, offset: 67649},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1955, col: 5, offset: 67649},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1955, col: 5, offset: 67649},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1955, col: 11, offset: 67655},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1956, col: 5, offset: 67675},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1960, col: 5, offset: 67815},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1961, col: 5, offset: 67825},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1961, col: 12, offset: 67832},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1962, col: 5, offset: 67853},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1962, col: 23, offset: 67871},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1966, col: 1, offset: 68002},
			expr: &actionExpr{
				pos: position{line: 1967, col: 5, offset: 68026},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1967, col: 5, offset: 68026},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1967, col: 5, offset: 68026},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1967, col: 11, offset: 68032},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1968, col: 5, offset: 68052},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1972, col: 5, offset: 68192},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1973, col: 5, offset: 68201},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1973, col: 12, offset: 68208},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1974, col: 5, offset: 68229},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1974, col: 23, offset: 68247},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1978, col: 1, offset: 68379},
			expr: &actionExpr{
				pos: position{line: 1978, col: 18, offset: 68396},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1978, col: 19, offset: 68397},
					expr: &charClassMatcher{
						pos:        position{line: 1978, col: 19, offset: 68397},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1982, col: 1, offset: 68454},
			expr: &actionExpr{
				pos: position{line: 1982, col: 19, offset: 68472},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1982, col: 19, offset: 68472},
					expr: &charClassMatcher{
						pos:        position{line: 1982, col: 19, offset: 68472},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1989, col: 1, offset: 68634},
			expr: &charClassMatcher{
				pos:        position{line: 1989, col: 13, offset: 68646},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1991, col: 1, offset: 68656},
			expr: &choiceExpr{
				pos: position{line: 1991, col: 16, offset: 68671},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1991, col: 16, offset: 68671},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1991, col: 22, offset: 68677},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1991, col: 28, offset: 68683},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1991, col: 34, offset: 68689},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1991, col: 40, offset: 68695},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1991, col: 46, offset: 68701},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1993, col: 1, offset: 68707},
			expr: &actionExpr{
				pos: position{line: 1993, col: 14, offset: 68720},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1993, col: 14, offset: 68720},
					expr: &charClassMatcher{
						pos:        position{line: 1993, col: 14, offset: 68720},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1997, col: 1, offset: 68774},
			expr: &choiceExpr{
				pos: position{line: 2001, col: 5, offset: 69101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2001, col: 5, offset: 69101},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2001, col: 5, offset: 69101},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2001, col: 5, offset: 69101},
									expr: &charClassMatcher{
										pos:        position{line: 2001, col: 5, offset: 69101},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2001, col: 15, offset: 69111},
									expr: &choiceExpr{
										pos: position{line: 2001, col: 17, offset: 69113},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2001, col: 17, offset: 69113},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2001, col: 30, offset: 69126},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2003, col: 9, offset: 69195},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2003, col: 9, offset: 69195},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2003, col: 9, offset: 69195},
									expr: &charClassMatcher{
										pos:        position{line: 2003, col: 9, offset: 69195},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2003, col: 19, offset: 69205},
									expr: &seqExpr{
										pos: position{line: 2003, col: 20, offset: 69206},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2003, col: 20, offset: 69206},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2003, col: 27, offset: 69213},
												expr: &charClassMatcher{
													pos:        position{line: 2003, col: 27, offset: 69213},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2008, col: 1, offset: 69305},
			expr: &choiceExpr{
				pos: position{line: 2012, col: 5, offset: 69498},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2012, col: 5, offset: 69498},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2012, col: 5, offset: 69498},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2012, col: 5, offset: 69498},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 2012, col: 14, offset: 69507},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 2012, col: 14, offset: 69507},
											expr: &charClassMatcher{
												pos:        position{line: 2012, col: 14, offset: 69507},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2015, col: 5, offset: 69588},
									expr: &choiceExpr{
										pos: position{line: 2015, col: 7, offset: 69590},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2015, col: 7, offset: 69590},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2015, col: 17, offset: 69600},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 2015, col: 47, offset: 69630},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2017, col: 9, offset: 69673},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2020, col: 1, offset: 69773},
			expr: &actionExpr{
				pos: position{line: 2020, col: 12, offset: 69784},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2020, col: 12, offset: 69784},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2024, col: 1, offset: 69857},
			expr: &actionExpr{
				pos: position{line: 2024, col: 17, offset: 69873},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2024, col: 17, offset: 69873},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2024, col: 22, offset: 69878},
						expr: &choiceExpr{
							pos: position{line: 2024, col: 23, offset: 69879},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2024, col: 23, offset: 69879},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2024, col: 34, offset: 69890},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2028, col: 1, offset: 69979},
			expr: &actionExpr{
				pos: position{line: 2028, col: 13, offset: 69991},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2028, col: 13, offset: 69991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2028, col: 13, offset: 69991},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2028, col: 20, offset: 69998},
								expr: &ruleRefExpr{
									pos:  position{line: 2028, col: 21, offset: 69999},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2028, col: 30, offset: 70008},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2028, col: 35, offset: 70013},
								expr: &choiceExpr{
									pos: position{line: 2028, col: 36, offset: 70014},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2028, col: 36, offset: 70014},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2028, col: 47, offset: 70025},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2032, col: 1, offset: 70118},
			expr: &actionExpr{
				pos: position{line: 2032, col: 23, offset: 70140},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2032, col: 23, offset: 70140},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2032, col: 23, offset: 70140},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2032, col: 31, offset: 70148},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2032, col: 39, offset: 70156},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2032, col: 44, offset: 70161},
								expr: &choiceExpr{
									pos: position{line: 2032, col: 45, offset: 70162},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2032, col: 45, offset: 70162},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2032, col: 56, offset: 70173},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2036, col: 1, offset: 70266},
			expr: &actionExpr{
				pos: position{line: 2036, col: 13, offset: 70278},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 2036, col: 13, offset: 70278},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2036, col: 22, offset: 70287},
						expr: &choiceExpr{
							pos: position{line: 2038, col: 5, offset: 70326},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2038, col: 5, offset: 70326},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2038, col: 5, offset: 70326},
										expr: &charClassMatcher{
											pos:        position{line: 2038, col: 6, offset: 70327},
											val:        "[^\\r\\n[\\]\\uFFFD{&<> ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2041, col: 7, offset: 70466},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 2042, col: 7, offset: 70495},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 2043, col: 7, offset: 70518},
									run: (*parser).callonFilename10,
									expr: &litMatcher{
										pos:        position{line: 2043, col: 7, offset: 70518},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2049, col: 1, offset: 70656},
			expr: &choiceExpr{
				pos: position{line: 2049, col: 11, offset: 70666},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2049, col: 11, offset: 70666},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2049, col: 23, offset: 70678},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2049, col: 36, offset: 70691},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2049, col: 47, offset: 70702},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2049, col: 58, offset: 70713},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2051, col: 1, offset: 70724},
			expr: &actionExpr{
				pos: position{line: 2051, col: 7, offset: 70730},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2051, col: 7, offset: 70730},
					expr: &charClassMatcher{
						pos:        position{line: 2051, col: 7, offset: 70730},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2055, col: 1, offset: 70863},
			expr: &actionExpr{
				pos: position{line: 2055, col: 10, offset: 70872},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2055, col: 10, offset: 70872},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2059, col: 1, offset: 70922},
			expr: &actionExpr{
				pos: position{line: 2059, col: 11, offset: 70932},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2059, col: 11, offset: 70932},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2059, col: 11, offset: 70932},
							expr: &litMatcher{
								pos:        position{line: 2059, col: 11, offset: 70932},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2059, col: 16, offset: 70937},
							expr: &ruleRefExpr{
								pos:  position{line: 2059, col: 16, offset: 70937},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2063, col: 1, offset: 70997},
			expr: &choiceExpr{
				pos: position{line: 2063, col: 10, offset: 71006},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2063, col: 10, offset: 71006},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2063, col: 16, offset: 71012},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2063, col: 16, offset: 71012},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2067, col: 1, offset: 71061},
			expr: &choiceExpr{
				pos: position{line: 2067, col: 12, offset: 71072},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2067, col: 12, offset: 71072},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2067, col: 19, offset: 71079},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 2067, col: 28, offset: 71088},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 2067, col: 28, offset: 71088},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2071, col: 1, offset: 71172},
			expr: &notExpr{
				pos: position{line: 2071, col: 8, offset: 71179},
				expr: &anyMatcher{
					line: 2071, col: 9, offset: 71180,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2073, col: 1, offset: 71183},
			expr: &choiceExpr{
				pos: position{line: 2073, col: 8, offset: 71190},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2073, col: 8, offset: 71190},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 2073, col: 14, offset: 71196},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock7(delimiter interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block
	return c.isValidBlockDelimiter(delimiter.(types.BlockDelimiter))

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock7(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock3(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock3(stack["delimiter"])
}

func (c *current) onAttributeDeclaration3() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonAttributeDeclaration3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration3()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes13(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue15()
}

func (c *current) onSingleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue18()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue15()
}

func (c *current) onDoubleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue18()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue21() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue7(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue7(stack["element"])
}

func (c *current) onUnquotedAttributeValue23(elements interface{}) (bool, error) {
	// post-parsing condition to verify that the value is not an empty string
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue23(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListElement1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElement1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListElementPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListElementPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix5()
}

func (c *current) onCalloutListElementPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix1(stack["ref"])
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() error {
	// for images, we always enable the 'normal' substitutions
	return c.setSubstitutionPhase("normal")

}

func (p *parser) callonImageBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onOrderedListElement1(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content.([]interface{}))
}

func (p *parser) callonOrderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElement1(stack["prefix"], stack["content"])
}

func (c *current) onOrderedListElementPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix10()
}

func (c *current) onOrderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix13(stack["depth"])
}

func (c *current) onOrderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOrderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix7(stack["depth"])
}

func (c *current) onOrderedListElementPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOrderedListElementPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix14()
}

func (c *current) onOrderedListElementPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOrderedListElementPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix19()
}

func (c *current) onOrderedListElementPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOrderedListElementPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix23()
}

func (c *current) onOrderedListElementPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOrderedListElementPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix27()
}

func (c *current) onOrderedListElementPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOrderedListElementPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix32()
}

func (c *current) onOrderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix1(stack["prefix"])
}

func (c *current) onOrderedListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonOrderedListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementContent1()
}

func (c *current) onUnorderedListElement1(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content.([]interface{}))

}

func (p *parser) callonUnorderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElement1(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListElementPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix10()
}

func (c *current) onUnorderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix13(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonUnorderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix7(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix15() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonUnorderedListElementPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix15()
}

func (c *current) onUnorderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListElementCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle7()
}

func (c *current) onUnorderedListElementCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle9()
}

func (c *current) onUnorderedListElementCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle11()
}

func (c *current) onUnorderedListElementCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListElementCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonUnorderedListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementContent1()
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onItalicWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonItalicWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicWord1()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return []interface{}{
		types.StringElement{Content: string(c.text)},
	}, nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(content interface{}) (interface{}, error) {
	s, _ := types.NewStringElement(string(c.text))
	return []interface{}{s}, nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["content"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename10()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

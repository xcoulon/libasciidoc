// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DefaultDocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 420},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 420},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 7, offset: 436},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 450},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 467},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 489},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 510},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 532},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 7, offset: 589},
						name: "ListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 7, offset: 607},
						name: "ListElementContinuation",
					},
					&ruleRefExpr{
						pos:  position{line: 31, col: 7, offset: 637},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 7, offset: 661},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 33, col: 7, offset: 688},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 34, col: 7, offset: 709},
						name: "Admonition",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinParagraph",
			pos:  position{line: 40, col: 1, offset: 913},
			expr: &choiceExpr{
				pos: position{line: 41, col: 5, offset: 960},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 41, col: 5, offset: 960},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 7, offset: 976},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinDelimitedBlock",
			pos:  position{line: 47, col: 1, offset: 1186},
			expr: &actionExpr{
				pos: position{line: 48, col: 5, offset: 1238},
				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 48, col: 5, offset: 1238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1238},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 16, offset: 1249},
								name: "BlockDelimiter",
							},
						},
						&andCodeExpr{
							pos: position{line: 49, col: 5, offset: 1269},
							run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock5,
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 61, col: 1, offset: 1663},
			expr: &choiceExpr{
				pos: position{line: 61, col: 19, offset: 1681},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 61, col: 19, offset: 1681},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 61, col: 19, offset: 1681},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 1719},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 63, col: 5, offset: 1719},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1759},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 65, col: 5, offset: 1759},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1809},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 67, col: 5, offset: 1809},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 1855},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 69, col: 5, offset: 1855},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 73, col: 1, offset: 1900},
			expr: &actionExpr{
				pos: position{line: 73, col: 16, offset: 1915},
				run: (*parser).callonAdmonition1,
				expr: &seqExpr{
					pos: position{line: 73, col: 16, offset: 1915},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 73, col: 16, offset: 1915},
							label: "kind",
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 22, offset: 1921},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 73, col: 38, offset: 1937},
							val:        ": ",
							ignoreCase: false,
							want:       "\": \"",
						},
						&labeledExpr{
							pos:   position{line: 73, col: 43, offset: 1942},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 73, col: 52, offset: 1951},
								run: (*parser).callonAdmonition7,
								expr: &zeroOrMoreExpr{
									pos: position{line: 73, col: 52, offset: 1951},
									expr: &charClassMatcher{
										pos:        position{line: 73, col: 52, offset: 1951},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 82, col: 1, offset: 2215},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2244},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2244},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 83, col: 5, offset: 2244},
							run: (*parser).callonAttributeDeclaration3,
						},
						&litMatcher{
							pos:        position{line: 87, col: 5, offset: 2388},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 9, offset: 2392},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 15, offset: 2398},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 87, col: 30, offset: 2413},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 5, offset: 2422},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 88, col: 11, offset: 2428},
								expr: &ruleRefExpr{
									pos:  position{line: 88, col: 12, offset: 2429},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 5, offset: 2462},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 98, col: 1, offset: 2815},
			expr: &actionExpr{
				pos: position{line: 98, col: 18, offset: 2832},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 98, col: 18, offset: 2832},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 98, col: 18, offset: 2832},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 98, col: 28, offset: 2842},
							expr: &charClassMatcher{
								pos:        position{line: 98, col: 29, offset: 2843},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 102, col: 1, offset: 2899},
			expr: &actionExpr{
				pos: position{line: 102, col: 30, offset: 2928},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 102, col: 30, offset: 2928},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 102, col: 30, offset: 2928},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 30, offset: 2928},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 37, offset: 2935},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 46, offset: 2944},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 47, offset: 2945},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 106, col: 1, offset: 3067},
			expr: &actionExpr{
				pos: position{line: 106, col: 37, offset: 3103},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 106, col: 37, offset: 3103},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 106, col: 37, offset: 3103},
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 38, offset: 3104},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 5, offset: 3113},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 108, col: 9, offset: 3131},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 108, col: 10, offset: 3132},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 108, col: 10, offset: 3132},
											expr: &charClassMatcher{
												pos:        position{line: 108, col: 10, offset: 3132},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 111, col: 11, offset: 3227},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 112, col: 12, offset: 3260},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 112, col: 12, offset: 3260},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 119, col: 1, offset: 3397},
			expr: &choiceExpr{
				pos: position{line: 119, col: 19, offset: 3415},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 119, col: 19, offset: 3415},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 119, col: 19, offset: 3415},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 119, col: 19, offset: 3415},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 119, col: 24, offset: 3420},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 30, offset: 3426},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 119, col: 45, offset: 3441},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 119, col: 49, offset: 3445},
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 49, offset: 3445},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 56, offset: 3452},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3512},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 3512},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 121, col: 5, offset: 3512},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 121, col: 9, offset: 3516},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 15, offset: 3522},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 121, col: 30, offset: 3537},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 121, col: 35, offset: 3542},
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 35, offset: 3542},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 121, col: 42, offset: 3549},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 128, col: 1, offset: 3731},
			expr: &actionExpr{
				pos: position{line: 129, col: 5, offset: 3755},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 129, col: 5, offset: 3755},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 129, col: 5, offset: 3755},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 133, col: 5, offset: 3893},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 133, col: 16, offset: 3904},
								expr: &choiceExpr{
									pos: position{line: 135, col: 9, offset: 3971},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 135, col: 10, offset: 3972},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 135, col: 10, offset: 3972},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 135, col: 10, offset: 3972},
														label: "anchor",
														expr: &ruleRefExpr{
															pos:  position{line: 135, col: 18, offset: 3980},
															name: "ShortHandAnchor",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 135, col: 35, offset: 3997},
														expr: &ruleRefExpr{
															pos:  position{line: 135, col: 35, offset: 3997},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 139, col: 12, offset: 4114},
											run: (*parser).callonBlockAttributes13,
											expr: &seqExpr{
												pos: position{line: 139, col: 12, offset: 4114},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 139, col: 12, offset: 4114},
														label: "title",
														expr: &ruleRefExpr{
															pos:  position{line: 139, col: 19, offset: 4121},
															name: "ShortHandTitle",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 139, col: 35, offset: 4137},
														expr: &ruleRefExpr{
															pos:  position{line: 139, col: 35, offset: 4137},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 143, col: 12, offset: 4224},
											run: (*parser).callonBlockAttributes19,
											expr: &seqExpr{
												pos: position{line: 143, col: 12, offset: 4224},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 143, col: 12, offset: 4224},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 24, offset: 4236},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 143, col: 44, offset: 4256},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 44, offset: 4256},
															name: "Space",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 151, col: 1, offset: 4430},
			expr: &actionExpr{
				pos: position{line: 152, col: 5, offset: 4454},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 152, col: 5, offset: 4454},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 152, col: 5, offset: 4454},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 153, col: 5, offset: 4462},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 153, col: 16, offset: 4473},
								expr: &actionExpr{
									pos: position{line: 154, col: 9, offset: 4483},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 155, col: 13, offset: 4497},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 155, col: 13, offset: 4497},
												expr: &litMatcher{
													pos:        position{line: 155, col: 14, offset: 4498},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 156, col: 13, offset: 4530},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 156, col: 24, offset: 4541},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 156, col: 24, offset: 4541},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 156, col: 46, offset: 4563},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 161, col: 5, offset: 4646},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 166, col: 1, offset: 4774},
			expr: &actionExpr{
				pos: position{line: 167, col: 4, offset: 4796},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 167, col: 4, offset: 4796},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 167, col: 4, offset: 4796},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 168, col: 5, offset: 4806},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 169, col: 9, offset: 4819},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 169, col: 9, offset: 4819},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 169, col: 18, offset: 4828},
										expr: &choiceExpr{
											pos: position{line: 170, col: 13, offset: 4842},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 170, col: 14, offset: 4843},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 170, col: 14, offset: 4843},
														expr: &charClassMatcher{
															pos:        position{line: 170, col: 14, offset: 4843},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 173, col: 15, offset: 5009},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 174, col: 15, offset: 5042},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 175, col: 16, offset: 5079},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 175, col: 16, offset: 5079},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 181, col: 5, offset: 5265},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 186, col: 1, offset: 5366},
			expr: &actionExpr{
				pos: position{line: 186, col: 19, offset: 5384},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 186, col: 19, offset: 5384},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 186, col: 19, offset: 5384},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 186, col: 23, offset: 5388},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 187, col: 5, offset: 5400},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 187, col: 5, offset: 5400},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 187, col: 5, offset: 5400},
											expr: &charClassMatcher{
												pos:        position{line: 187, col: 6, offset: 5401},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 188, col: 5, offset: 5513},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 188, col: 14, offset: 5522},
												expr: &choiceExpr{
													pos: position{line: 189, col: 9, offset: 5532},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 189, col: 10, offset: 5533},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 189, col: 10, offset: 5533},
																expr: &charClassMatcher{
																	pos:        position{line: 189, col: 10, offset: 5533},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 192, col: 11, offset: 5630},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 193, col: 11, offset: 5659},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 194, col: 12, offset: 5692},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 194, col: 12, offset: 5692},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 205, col: 1, offset: 6092},
			expr: &actionExpr{
				pos: position{line: 206, col: 5, offset: 6118},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 206, col: 5, offset: 6118},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 206, col: 5, offset: 6118},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 206, col: 9, offset: 6122},
							expr: &litMatcher{
								pos:        position{line: 206, col: 10, offset: 6123},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 208, col: 5, offset: 6293},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 208, col: 31, offset: 6319},
								expr: &ruleRefExpr{
									pos:  position{line: 208, col: 32, offset: 6320},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 209, col: 5, offset: 6352},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 209, col: 21, offset: 6368},
								expr: &choiceExpr{
									pos: position{line: 209, col: 22, offset: 6369},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 209, col: 22, offset: 6369},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 209, col: 44, offset: 6391},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 5, offset: 6412},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 223, col: 1, offset: 6940},
			expr: &actionExpr{
				pos: position{line: 224, col: 5, offset: 6974},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 224, col: 5, offset: 6974},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 224, col: 5, offset: 6974},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 224, col: 10, offset: 6979},
								expr: &ruleRefExpr{
									pos:  position{line: 225, col: 9, offset: 6989},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 7019},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 227, col: 12, offset: 7026},
								expr: &choiceExpr{
									pos: position{line: 228, col: 9, offset: 7037},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 228, col: 9, offset: 7037},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 229, col: 11, offset: 7069},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 230, col: 11, offset: 7104},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 231, col: 8, offset: 7137},
							expr: &seqExpr{
								pos: position{line: 231, col: 9, offset: 7138},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 231, col: 9, offset: 7138},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 231, col: 13, offset: 7142},
										expr: &ruleRefExpr{
											pos:  position{line: 231, col: 13, offset: 7142},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 232, col: 5, offset: 7156},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 248, col: 1, offset: 7572},
			expr: &actionExpr{
				pos: position{line: 248, col: 25, offset: 7596},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 25, offset: 7596},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 25, offset: 7596},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 248, col: 29, offset: 7600},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 33, offset: 7604},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 252, col: 1, offset: 7678},
			expr: &actionExpr{
				pos: position{line: 252, col: 23, offset: 7700},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 252, col: 23, offset: 7700},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 252, col: 30, offset: 7707},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 257, col: 1, offset: 7833},
			expr: &actionExpr{
				pos: position{line: 257, col: 30, offset: 7862},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 257, col: 30, offset: 7862},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 30, offset: 7862},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 34, offset: 7866},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 40, offset: 7872},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 262, col: 1, offset: 7994},
			expr: &actionExpr{
				pos: position{line: 262, col: 29, offset: 8022},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 262, col: 29, offset: 8022},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 29, offset: 8022},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 33, offset: 8026},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 41, offset: 8034},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 267, col: 1, offset: 8147},
			expr: &choiceExpr{
				pos: position{line: 268, col: 5, offset: 8179},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 8179},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 7, offset: 8213},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 270, col: 7, offset: 8247},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 270, col: 7, offset: 8247},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 270, col: 7, offset: 8247},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 270, col: 16, offset: 8256},
										expr: &choiceExpr{
											pos: position{line: 273, col: 5, offset: 8426},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 273, col: 6, offset: 8427},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 273, col: 6, offset: 8427},
														expr: &charClassMatcher{
															pos:        position{line: 273, col: 6, offset: 8427},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 276, col: 5, offset: 8521},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 277, col: 5, offset: 8546},
													name: "Quote",
												},
												&ruleRefExpr{
													pos:  position{line: 278, col: 5, offset: 8558},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 279, col: 6, offset: 8587},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 279, col: 6, offset: 8587},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 281, col: 10, offset: 8657},
									expr: &charClassMatcher{
										pos:        position{line: 281, col: 11, offset: 8658},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 285, col: 1, offset: 8734},
			expr: &choiceExpr{
				pos: position{line: 285, col: 24, offset: 8757},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 8763},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 286, col: 5, offset: 8763},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 286, col: 5, offset: 8763},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 286, col: 12, offset: 8770},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 286, col: 29, offset: 8787},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 286, col: 29, offset: 8787},
											expr: &seqExpr{
												pos: position{line: 286, col: 30, offset: 8788},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 286, col: 30, offset: 8788},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 286, col: 34, offset: 8792},
														expr: &ruleRefExpr{
															pos:  position{line: 286, col: 34, offset: 8792},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 286, col: 45, offset: 8803},
											expr: &litMatcher{
												pos:        position{line: 286, col: 46, offset: 8804},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 291, col: 6, offset: 9041},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 291, col: 6, offset: 9041},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 291, col: 6, offset: 9041},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 291, col: 13, offset: 9048},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 291, col: 13, offset: 9048},
												expr: &ruleRefExpr{
													pos:  position{line: 291, col: 13, offset: 9048},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 291, col: 21, offset: 9056},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 291, col: 22, offset: 9057},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 291, col: 22, offset: 9057},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 291, col: 26, offset: 9061},
																expr: &ruleRefExpr{
																	pos:  position{line: 291, col: 26, offset: 9061},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 291, col: 36, offset: 9071},
														expr: &litMatcher{
															pos:        position{line: 291, col: 37, offset: 9072},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 292, col: 5, offset: 9082},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 302, col: 1, offset: 9397},
			expr: &actionExpr{
				pos: position{line: 302, col: 19, offset: 9415},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 302, col: 19, offset: 9415},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 302, col: 19, offset: 9415},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 24, offset: 9420},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 43, offset: 9439},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 47, offset: 9443},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 47, offset: 9443},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 54, offset: 9450},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 61, offset: 9457},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 302, col: 77, offset: 9473},
							expr: &seqExpr{
								pos: position{line: 302, col: 78, offset: 9474},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 302, col: 78, offset: 9474},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 302, col: 82, offset: 9478},
										expr: &ruleRefExpr{
											pos:  position{line: 302, col: 82, offset: 9478},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 307, col: 1, offset: 9702},
			expr: &actionExpr{
				pos: position{line: 307, col: 22, offset: 9723},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 307, col: 22, offset: 9723},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 307, col: 22, offset: 9723},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 23, offset: 9724},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 307, col: 29, offset: 9730},
							expr: &charClassMatcher{
								pos:        position{line: 307, col: 29, offset: 9730},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 42, offset: 9743},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 42, offset: 9743},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 311, col: 1, offset: 9813},
			expr: &actionExpr{
				pos: position{line: 312, col: 5, offset: 9836},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 312, col: 5, offset: 9836},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 312, col: 5, offset: 9836},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 313, col: 9, offset: 9852},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 313, col: 9, offset: 9852},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 314, col: 11, offset: 9890},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 315, col: 11, offset: 9928},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 317, col: 5, offset: 9962},
							expr: &notExpr{
								pos: position{line: 317, col: 7, offset: 9964},
								expr: &seqExpr{
									pos: position{line: 317, col: 9, offset: 9966},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 317, col: 9, offset: 9966},
											expr: &ruleRefExpr{
												pos:  position{line: 317, col: 9, offset: 9966},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 317, col: 16, offset: 9973},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 321, col: 1, offset: 10014},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 10049},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 10049},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 10049},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 10058},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 323, col: 14, offset: 10067},
								expr: &choiceExpr{
									pos: position{line: 325, col: 9, offset: 10157},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 325, col: 9, offset: 10157},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 326, col: 12, offset: 10174},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 326, col: 12, offset: 10174},
												expr: &charClassMatcher{
													pos:        position{line: 326, col: 12, offset: 10174},
													val:        "[^\\r\\n\\uFFFD\\\\{&<>']",
													chars:      []rune{'\r', '\n', '�', '\\', '{', '&', '<', '>', '\''},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 329, col: 11, offset: 10323},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 330, col: 11, offset: 10355},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 331, col: 11, offset: 10382},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 332, col: 12, offset: 10412},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 332, col: 12, offset: 10412},
													run: (*parser).callonSingleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 332, col: 12, offset: 10412},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 335, col: 11, offset: 10504},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 335, col: 17, offset: 10510},
													run: (*parser).callonSingleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 335, col: 17, offset: 10510},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 339, col: 5, offset: 10599},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 343, col: 1, offset: 10655},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 10690},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 10690},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 5, offset: 10690},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 345, col: 5, offset: 10700},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 345, col: 14, offset: 10709},
								expr: &choiceExpr{
									pos: position{line: 346, col: 9, offset: 10719},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 346, col: 9, offset: 10719},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 347, col: 12, offset: 10736},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 347, col: 12, offset: 10736},
												expr: &charClassMatcher{
													pos:        position{line: 347, col: 12, offset: 10736},
													val:        "[^\\r\\n\\uFFFD&<>\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '&', '<', '>', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 350, col: 11, offset: 10885},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 351, col: 11, offset: 10917},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 352, col: 11, offset: 10944},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 353, col: 12, offset: 10974},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 353, col: 12, offset: 10974},
													run: (*parser).callonDoubleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 353, col: 12, offset: 10974},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 356, col: 11, offset: 11066},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 356, col: 17, offset: 11072},
													run: (*parser).callonDoubleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 356, col: 17, offset: 11072},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 360, col: 5, offset: 11161},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 365, col: 1, offset: 11296},
			expr: &actionExpr{
				pos: position{line: 366, col: 5, offset: 11327},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 366, col: 5, offset: 11327},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 366, col: 5, offset: 11327},
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 6, offset: 11328},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 5, offset: 11338},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 367, col: 14, offset: 11347},
								expr: &actionExpr{
									pos: position{line: 368, col: 9, offset: 11357},
									run: (*parser).callonUnquotedAttributeValue7,
									expr: &seqExpr{
										pos: position{line: 368, col: 9, offset: 11357},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 368, col: 9, offset: 11357},
												expr: &litMatcher{
													pos:        position{line: 368, col: 10, offset: 11358},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 369, col: 9, offset: 11386},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 370, col: 13, offset: 11408},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 370, col: 13, offset: 11408},
															name: "Quote",
														},
														&actionExpr{
															pos: position{line: 371, col: 16, offset: 11429},
															run: (*parser).callonUnquotedAttributeValue14,
															expr: &oneOrMoreExpr{
																pos: position{line: 371, col: 16, offset: 11429},
																expr: &charClassMatcher{
																	pos:        position{line: 371, col: 16, offset: 11429},
																	val:        "[^,=\\r\\n\\uFFFD&<>{\\] ]",
																	chars:      []rune{',', '=', '\r', '\n', '�', '&', '<', '>', '{', ']', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 374, col: 15, offset: 11547},
															name: "Space",
														},
														&ruleRefExpr{
															pos:  position{line: 375, col: 15, offset: 11567},
															name: "AttributeSubstitution",
														},
														&ruleRefExpr{
															pos:  position{line: 376, col: 15, offset: 11603},
															name: "SpecialCharacter",
														},
														&ruleRefExpr{
															pos:  position{line: 377, col: 15, offset: 11634},
															name: "ElementPlaceHolder",
														},
														&actionExpr{
															pos: position{line: 378, col: 16, offset: 11668},
															run: (*parser).callonUnquotedAttributeValue21,
															expr: &litMatcher{
																pos:        position{line: 378, col: 16, offset: 11668},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 385, col: 5, offset: 11818},
							run: (*parser).callonUnquotedAttributeValue23,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 396, col: 1, offset: 12170},
			expr: &actionExpr{
				pos: position{line: 398, col: 5, offset: 12261},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 398, col: 5, offset: 12261},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 398, col: 5, offset: 12261},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 401, col: 5, offset: 12325},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 401, col: 14, offset: 12334},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 401, col: 14, offset: 12334},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 401, col: 36, offset: 12356},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 408, col: 1, offset: 12521},
			expr: &actionExpr{
				pos: position{line: 408, col: 31, offset: 12551},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 408, col: 31, offset: 12551},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 408, col: 31, offset: 12551},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 35, offset: 12555},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 40, offset: 12560},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 408, col: 54, offset: 12574},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 413, col: 1, offset: 12690},
			expr: &choiceExpr{
				pos: position{line: 413, col: 24, offset: 12713},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 413, col: 24, offset: 12713},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 413, col: 47, offset: 12736},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 415, col: 1, offset: 12872},
			expr: &actionExpr{
				pos: position{line: 415, col: 25, offset: 12896},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 415, col: 25, offset: 12896},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 415, col: 25, offset: 12896},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 37, offset: 12908},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 42, offset: 12913},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 56, offset: 12927},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 415, col: 62, offset: 12933},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 63, offset: 12934},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 78, offset: 12949},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 419, col: 1, offset: 13027},
			expr: &actionExpr{
				pos: position{line: 419, col: 25, offset: 13051},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 419, col: 25, offset: 13051},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 419, col: 25, offset: 13051},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 419, col: 38, offset: 13064},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 43, offset: 13069},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 57, offset: 13083},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 419, col: 63, offset: 13089},
								expr: &ruleRefExpr{
									pos:  position{line: 419, col: 64, offset: 13090},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 419, col: 79, offset: 13105},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 423, col: 1, offset: 13180},
			expr: &actionExpr{
				pos: position{line: 423, col: 17, offset: 13196},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 423, col: 17, offset: 13196},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 423, col: 17, offset: 13196},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 21, offset: 13200},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 423, col: 28, offset: 13207},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 423, col: 28, offset: 13207},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 423, col: 28, offset: 13207},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 425, col: 9, offset: 13261},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 425, col: 9, offset: 13261},
											expr: &charClassMatcher{
												pos:        position{line: 425, col: 9, offset: 13261},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 434, col: 1, offset: 13463},
			expr: &actionExpr{
				pos: position{line: 434, col: 14, offset: 13476},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 434, col: 14, offset: 13476},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 434, col: 14, offset: 13476},
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 14, offset: 13476},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 434, col: 21, offset: 13483},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 442, col: 1, offset: 13723},
			expr: &seqExpr{
				pos: position{line: 442, col: 31, offset: 13753},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 442, col: 31, offset: 13753},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 442, col: 38, offset: 13760},
						expr: &ruleRefExpr{
							pos:  position{line: 442, col: 38, offset: 13760},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 442, col: 45, offset: 13767},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 444, col: 1, offset: 13772},
			expr: &choiceExpr{
				pos: position{line: 444, col: 29, offset: 13800},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 444, col: 30, offset: 13801},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 444, col: 30, offset: 13801},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 444, col: 37, offset: 13808},
								expr: &ruleRefExpr{
									pos:  position{line: 444, col: 37, offset: 13808},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 444, col: 44, offset: 13815},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 444, col: 51, offset: 13822},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 461, col: 1, offset: 14312},
			expr: &actionExpr{
				pos: position{line: 466, col: 5, offset: 14471},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 466, col: 5, offset: 14471},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 466, col: 14, offset: 14480},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 470, col: 1, offset: 14526},
			expr: &actionExpr{
				pos: position{line: 470, col: 12, offset: 14537},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 470, col: 12, offset: 14537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 470, col: 12, offset: 14537},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 470, col: 20, offset: 14545},
								expr: &anyMatcher{
									line: 470, col: 21, offset: 14546,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 25, offset: 14550},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 474, col: 1, offset: 14603},
			expr: &actionExpr{
				pos: position{line: 474, col: 22, offset: 14624},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 474, col: 22, offset: 14624},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 474, col: 22, offset: 14624},
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 23, offset: 14625},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 474, col: 45, offset: 14647},
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 45, offset: 14647},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 474, col: 52, offset: 14654},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 57, offset: 14659},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 66, offset: 14668},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 92, offset: 14694},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 478, col: 1, offset: 14767},
			expr: &actionExpr{
				pos: position{line: 478, col: 29, offset: 14795},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 478, col: 29, offset: 14795},
					expr: &charClassMatcher{
						pos:        position{line: 478, col: 29, offset: 14795},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 485, col: 1, offset: 14960},
			expr: &choiceExpr{
				pos: position{line: 485, col: 19, offset: 14978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 485, col: 19, offset: 14978},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 485, col: 44, offset: 15003},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 487, col: 1, offset: 15028},
			expr: &choiceExpr{
				pos: position{line: 487, col: 27, offset: 15054},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 487, col: 27, offset: 15054},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 487, col: 27, offset: 15054},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 487, col: 27, offset: 15054},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 487, col: 32, offset: 15059},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 36, offset: 15063},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 487, col: 40, offset: 15067},
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 40, offset: 15067},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 47, offset: 15074},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 487, col: 51, offset: 15078},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 58, offset: 15085},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 79, offset: 15106},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 489, col: 9, offset: 15179},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 489, col: 9, offset: 15179},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 489, col: 9, offset: 15179},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 489, col: 14, offset: 15184},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 489, col: 18, offset: 15188},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 489, col: 22, offset: 15192},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 493, col: 1, offset: 15263},
			expr: &actionExpr{
				pos: position{line: 493, col: 27, offset: 15289},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 493, col: 27, offset: 15289},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 493, col: 27, offset: 15289},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 35, offset: 15297},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 40, offset: 15302},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 493, col: 54, offset: 15316},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 72, offset: 15334},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 497, col: 1, offset: 15468},
			expr: &oneOrMoreExpr{
				pos: position{line: 497, col: 24, offset: 15491},
				expr: &choiceExpr{
					pos: position{line: 498, col: 5, offset: 15497},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 498, col: 6, offset: 15498},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 498, col: 6, offset: 15498},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 498, col: 6, offset: 15498},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 498, col: 14, offset: 15506},
										expr: &charClassMatcher{
											pos:        position{line: 498, col: 14, offset: 15506},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 7, offset: 15701},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 502, col: 8, offset: 15730},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 502, col: 8, offset: 15730},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 511, col: 1, offset: 16005},
			expr: &actionExpr{
				pos: position{line: 511, col: 19, offset: 16023},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 511, col: 19, offset: 16023},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 511, col: 19, offset: 16023},
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 21, offset: 16025},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 5, offset: 16055},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 512, col: 16, offset: 16066},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 512, col: 16, offset: 16066},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 513, col: 7, offset: 16125},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 514, col: 7, offset: 16153},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 515, col: 7, offset: 16182},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 516, col: 7, offset: 16211},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 517, col: 7, offset: 16240},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 518, col: 7, offset: 16266},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 519, col: 7, offset: 16294},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 523, col: 1, offset: 16360},
			expr: &actionExpr{
				pos: position{line: 523, col: 26, offset: 16385},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 523, col: 26, offset: 16385},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 523, col: 26, offset: 16385},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 523, col: 33, offset: 16392},
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 33, offset: 16392},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 40, offset: 16399},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 527, col: 1, offset: 16458},
			expr: &actionExpr{
				pos: position{line: 527, col: 25, offset: 16482},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 527, col: 25, offset: 16482},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 527, col: 25, offset: 16482},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 527, col: 31, offset: 16488},
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 31, offset: 16488},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 38, offset: 16495},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 531, col: 1, offset: 16553},
			expr: &actionExpr{
				pos: position{line: 531, col: 26, offset: 16578},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 531, col: 26, offset: 16578},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 531, col: 26, offset: 16578},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 531, col: 33, offset: 16585},
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 33, offset: 16585},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 535, col: 1, offset: 16647},
			expr: &ruleRefExpr{
				pos:  position{line: 535, col: 25, offset: 16671},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 537, col: 1, offset: 16694},
			expr: &actionExpr{
				pos: position{line: 537, col: 26, offset: 16719},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 537, col: 26, offset: 16719},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 537, col: 26, offset: 16719},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 537, col: 33, offset: 16726},
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 33, offset: 16726},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 40, offset: 16733},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 541, col: 1, offset: 16792},
			expr: &actionExpr{
				pos: position{line: 541, col: 26, offset: 16817},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 541, col: 26, offset: 16817},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 26, offset: 16817},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 541, col: 33, offset: 16824},
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 33, offset: 16824},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 40, offset: 16831},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 545, col: 1, offset: 16890},
			expr: &actionExpr{
				pos: position{line: 545, col: 24, offset: 16913},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 545, col: 24, offset: 16913},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 24, offset: 16913},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 545, col: 31, offset: 16920},
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 31, offset: 16920},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 38, offset: 16927},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 549, col: 1, offset: 16984},
			expr: &actionExpr{
				pos: position{line: 549, col: 26, offset: 17009},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 549, col: 26, offset: 17009},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 549, col: 26, offset: 17009},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 549, col: 33, offset: 17016},
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 33, offset: 17016},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 549, col: 40, offset: 17023},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 553, col: 1, offset: 17082},
			expr: &actionExpr{
				pos: position{line: 553, col: 30, offset: 17111},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 553, col: 30, offset: 17111},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 553, col: 30, offset: 17111},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 553, col: 37, offset: 17118},
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 37, offset: 17118},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 553, col: 44, offset: 17125},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 620, col: 1, offset: 19246},
			expr: &actionExpr{
				pos: position{line: 621, col: 9, offset: 19272},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 621, col: 9, offset: 19272},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 621, col: 9, offset: 19272},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 621, col: 13, offset: 19276},
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 13, offset: 19276},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 621, col: 20, offset: 19283},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 27, offset: 19290},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 621, col: 49, offset: 19312},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 621, col: 53, offset: 19316},
								expr: &ruleRefExpr{
									pos:  position{line: 621, col: 53, offset: 19316},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 621, col: 71, offset: 19334},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 625, col: 1, offset: 19449},
			expr: &choiceExpr{
				pos: position{line: 626, col: 9, offset: 19485},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 626, col: 9, offset: 19485},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 627, col: 11, offset: 19513},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 11, offset: 19545},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 629, col: 11, offset: 19575},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 631, col: 1, offset: 19592},
			expr: &choiceExpr{
				pos: position{line: 632, col: 9, offset: 19629},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 632, col: 9, offset: 19629},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 633, col: 11, offset: 19657},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 634, col: 11, offset: 19689},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 635, col: 11, offset: 19719},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 637, col: 1, offset: 19737},
			expr: &choiceExpr{
				pos: position{line: 637, col: 20, offset: 19756},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 637, col: 20, offset: 19756},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 637, col: 48, offset: 19784},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 639, col: 1, offset: 19814},
			expr: &actionExpr{
				pos: position{line: 639, col: 30, offset: 19843},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 639, col: 30, offset: 19843},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 639, col: 30, offset: 19843},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 30, offset: 19843},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 639, col: 37, offset: 19850},
							expr: &litMatcher{
								pos:        position{line: 639, col: 38, offset: 19851},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 639, col: 42, offset: 19855},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 639, col: 51, offset: 19864},
								expr: &ruleRefExpr{
									pos:  position{line: 639, col: 51, offset: 19864},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 68, offset: 19881},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 643, col: 1, offset: 19951},
			expr: &actionExpr{
				pos: position{line: 643, col: 33, offset: 19983},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 643, col: 33, offset: 19983},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 643, col: 33, offset: 19983},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 33, offset: 19983},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 643, col: 40, offset: 19990},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 643, col: 51, offset: 20001},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 59, offset: 20009},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 643, col: 75, offset: 20025},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 647, col: 1, offset: 20104},
			expr: &actionExpr{
				pos: position{line: 647, col: 19, offset: 20122},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 647, col: 19, offset: 20122},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 647, col: 19, offset: 20122},
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 19, offset: 20122},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 26, offset: 20129},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 36, offset: 20139},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 56, offset: 20159},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 647, col: 62, offset: 20165},
								expr: &ruleRefExpr{
									pos:  position{line: 647, col: 63, offset: 20166},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 647, col: 85, offset: 20188},
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 85, offset: 20188},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 647, col: 92, offset: 20195},
							expr: &litMatcher{
								pos:        position{line: 647, col: 92, offset: 20195},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 647, col: 97, offset: 20200},
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 97, offset: 20200},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 652, col: 1, offset: 20345},
			expr: &actionExpr{
				pos: position{line: 652, col: 23, offset: 20367},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 652, col: 23, offset: 20367},
					expr: &charClassMatcher{
						pos:        position{line: 652, col: 23, offset: 20367},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 656, col: 1, offset: 20414},
			expr: &actionExpr{
				pos: position{line: 656, col: 24, offset: 20437},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 656, col: 24, offset: 20437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 656, col: 24, offset: 20437},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 656, col: 28, offset: 20441},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 656, col: 35, offset: 20448},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 656, col: 36, offset: 20449},
									expr: &charClassMatcher{
										pos:        position{line: 656, col: 36, offset: 20449},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 658, col: 4, offset: 20496},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 664, col: 1, offset: 20657},
			expr: &actionExpr{
				pos: position{line: 664, col: 21, offset: 20677},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 664, col: 21, offset: 20677},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 664, col: 21, offset: 20677},
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 21, offset: 20677},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 664, col: 28, offset: 20684},
							expr: &litMatcher{
								pos:        position{line: 664, col: 29, offset: 20685},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 33, offset: 20689},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 665, col: 9, offset: 20708},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 665, col: 10, offset: 20709},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 665, col: 10, offset: 20709},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 665, col: 10, offset: 20709},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 665, col: 21, offset: 20720},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 665, col: 45, offset: 20744},
													expr: &litMatcher{
														pos:        position{line: 665, col: 45, offset: 20744},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 665, col: 50, offset: 20749},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 665, col: 58, offset: 20757},
														expr: &ruleRefExpr{
															pos:  position{line: 665, col: 59, offset: 20758},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 665, col: 82, offset: 20781},
													expr: &litMatcher{
														pos:        position{line: 665, col: 82, offset: 20781},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 665, col: 87, offset: 20786},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 665, col: 97, offset: 20796},
														expr: &ruleRefExpr{
															pos:  position{line: 665, col: 98, offset: 20797},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 667, col: 15, offset: 20914},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 667, col: 15, offset: 20914},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 667, col: 15, offset: 20914},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 667, col: 24, offset: 20923},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 667, col: 46, offset: 20945},
													expr: &litMatcher{
														pos:        position{line: 667, col: 46, offset: 20945},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 667, col: 51, offset: 20950},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 667, col: 61, offset: 20960},
														expr: &ruleRefExpr{
															pos:  position{line: 667, col: 62, offset: 20961},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 669, col: 13, offset: 21070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 674, col: 1, offset: 21200},
			expr: &choiceExpr{
				pos: position{line: 674, col: 27, offset: 21226},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 674, col: 27, offset: 21226},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 674, col: 27, offset: 21226},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 674, col: 27, offset: 21226},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 674, col: 32, offset: 21231},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 674, col: 39, offset: 21238},
									expr: &charClassMatcher{
										pos:        position{line: 674, col: 39, offset: 21238},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 21286},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 676, col: 5, offset: 21286},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 676, col: 5, offset: 21286},
									expr: &litMatcher{
										pos:        position{line: 676, col: 5, offset: 21286},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 676, col: 11, offset: 21292},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 676, col: 18, offset: 21299},
									expr: &charClassMatcher{
										pos:        position{line: 676, col: 18, offset: 21299},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 676, col: 29, offset: 21310},
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 29, offset: 21310},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 676, col: 36, offset: 21317},
									expr: &litMatcher{
										pos:        position{line: 676, col: 37, offset: 21318},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 680, col: 1, offset: 21358},
			expr: &actionExpr{
				pos: position{line: 680, col: 25, offset: 21382},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 680, col: 25, offset: 21382},
					expr: &charClassMatcher{
						pos:        position{line: 680, col: 25, offset: 21382},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 684, col: 1, offset: 21428},
			expr: &actionExpr{
				pos: position{line: 684, col: 27, offset: 21454},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 684, col: 27, offset: 21454},
					expr: &charClassMatcher{
						pos:        position{line: 684, col: 27, offset: 21454},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 691, col: 1, offset: 21629},
			expr: &litMatcher{
				pos:        position{line: 691, col: 32, offset: 21660},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 692, col: 1, offset: 21669},
			expr: &actionExpr{
				pos: position{line: 692, col: 23, offset: 21691},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 692, col: 23, offset: 21691},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 692, col: 23, offset: 21691},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 692, col: 51, offset: 21719},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 692, col: 56, offset: 21724},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 692, col: 56, offset: 21724},
									expr: &charClassMatcher{
										pos:        position{line: 692, col: 56, offset: 21724},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 95, offset: 21763},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 699, col: 1, offset: 22033},
			expr: &actionExpr{
				pos: position{line: 699, col: 14, offset: 22046},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 699, col: 14, offset: 22046},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 699, col: 14, offset: 22046},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 699, col: 20, offset: 22052},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 699, col: 24, offset: 22056},
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 24, offset: 22056},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 699, col: 31, offset: 22063},
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 32, offset: 22064},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 706, col: 1, offset: 22228},
			expr: &actionExpr{
				pos: position{line: 707, col: 5, offset: 22250},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 707, col: 5, offset: 22250},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 707, col: 5, offset: 22250},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 708, col: 9, offset: 22265},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 708, col: 9, offset: 22265},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 708, col: 9, offset: 22265},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 709, col: 9, offset: 22286},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 709, col: 15, offset: 22292},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 710, col: 9, offset: 22315},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 710, col: 27, offset: 22333},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 714, col: 5, offset: 22494},
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 5, offset: 22494},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 12, offset: 22501},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 718, col: 1, offset: 22561},
			expr: &ruleRefExpr{
				pos:  position{line: 718, col: 26, offset: 22586},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 721, col: 1, offset: 22626},
			expr: &actionExpr{
				pos: position{line: 721, col: 15, offset: 22640},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 721, col: 15, offset: 22640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 721, col: 15, offset: 22640},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 721, col: 22, offset: 22647},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 721, col: 22, offset: 22647},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 722, col: 7, offset: 22673},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 723, col: 7, offset: 22695},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 724, col: 7, offset: 22718},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 728, col: 1, offset: 22808},
			expr: &actionExpr{
				pos: position{line: 728, col: 23, offset: 22830},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 728, col: 23, offset: 22830},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 728, col: 23, offset: 22830},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 728, col: 30, offset: 22837},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 728, col: 30, offset: 22837},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 47, offset: 22854},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 5, offset: 22876},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 729, col: 12, offset: 22883},
								expr: &actionExpr{
									pos: position{line: 730, col: 9, offset: 22893},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 730, col: 9, offset: 22893},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 730, col: 10, offset: 22894},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 730, col: 10, offset: 22894},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 730, col: 16, offset: 22900},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 731, col: 9, offset: 23011},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 731, col: 16, offset: 23018},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 731, col: 16, offset: 23018},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 731, col: 33, offset: 23035},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 737, col: 1, offset: 23177},
			expr: &actionExpr{
				pos: position{line: 737, col: 19, offset: 23195},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 737, col: 19, offset: 23195},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 737, col: 19, offset: 23195},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 26, offset: 23202},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 737, col: 34, offset: 23210},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 737, col: 39, offset: 23215},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 44, offset: 23220},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 741, col: 1, offset: 23316},
			expr: &actionExpr{
				pos: position{line: 741, col: 20, offset: 23335},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 741, col: 20, offset: 23335},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 741, col: 32, offset: 23347},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 746, col: 1, offset: 23470},
			expr: &actionExpr{
				pos: position{line: 746, col: 14, offset: 23483},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 746, col: 14, offset: 23483},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 746, col: 14, offset: 23483},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 21, offset: 23490},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 40, offset: 23509},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 750, col: 1, offset: 23599},
			expr: &actionExpr{
				pos: position{line: 750, col: 22, offset: 23620},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 750, col: 22, offset: 23620},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 750, col: 22, offset: 23620},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 29, offset: 23627},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 751, col: 5, offset: 23641},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 751, col: 12, offset: 23648},
								expr: &actionExpr{
									pos: position{line: 752, col: 9, offset: 23658},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 752, col: 9, offset: 23658},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 752, col: 10, offset: 23659},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 752, col: 10, offset: 23659},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 752, col: 16, offset: 23665},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 753, col: 9, offset: 23776},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 753, col: 16, offset: 23783},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 759, col: 1, offset: 23918},
			expr: &choiceExpr{
				pos: position{line: 759, col: 13, offset: 23930},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 759, col: 13, offset: 23930},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 759, col: 13, offset: 23930},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 759, col: 18, offset: 23935},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 759, col: 18, offset: 23935},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 759, col: 30, offset: 23947},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 761, col: 9, offset: 24023},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 761, col: 9, offset: 24023},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 761, col: 9, offset: 24023},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 761, col: 13, offset: 24027},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 761, col: 18, offset: 24032},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 761, col: 18, offset: 24032},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 761, col: 30, offset: 24044},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 765, col: 1, offset: 24120},
			expr: &actionExpr{
				pos: position{line: 765, col: 16, offset: 24135},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 765, col: 16, offset: 24135},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 765, col: 16, offset: 24135},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 765, col: 23, offset: 24142},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 765, col: 23, offset: 24142},
									expr: &litMatcher{
										pos:        position{line: 765, col: 24, offset: 24143},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 768, col: 5, offset: 24197},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 775, col: 1, offset: 24364},
			expr: &actionExpr{
				pos: position{line: 775, col: 21, offset: 24384},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 775, col: 21, offset: 24384},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 775, col: 21, offset: 24384},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 775, col: 29, offset: 24392},
								expr: &choiceExpr{
									pos: position{line: 775, col: 30, offset: 24393},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 775, col: 30, offset: 24393},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 775, col: 53, offset: 24416},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 775, col: 74, offset: 24437},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 775, col: 74, offset: 24437,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 775, col: 107, offset: 24470},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 779, col: 1, offset: 24549},
			expr: &actionExpr{
				pos: position{line: 779, col: 25, offset: 24573},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 779, col: 25, offset: 24573},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 779, col: 25, offset: 24573},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 779, col: 33, offset: 24581},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 779, col: 38, offset: 24586},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 779, col: 38, offset: 24586},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 779, col: 78, offset: 24626},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 783, col: 1, offset: 24699},
			expr: &actionExpr{
				pos: position{line: 783, col: 23, offset: 24721},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 783, col: 23, offset: 24721},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 783, col: 23, offset: 24721},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 783, col: 31, offset: 24729},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 783, col: 36, offset: 24734},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 783, col: 36, offset: 24734},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 783, col: 76, offset: 24774},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 802, col: 1, offset: 25319},
			expr: &choiceExpr{
				pos: position{line: 802, col: 24, offset: 25342},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 802, col: 24, offset: 25342},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 802, col: 47, offset: 25365},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 802, col: 59, offset: 25377},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 804, col: 1, offset: 25394},
			expr: &actionExpr{
				pos: position{line: 804, col: 26, offset: 25419},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 804, col: 26, offset: 25419},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 804, col: 26, offset: 25419},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 804, col: 32, offset: 25425},
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 32, offset: 25425},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 39, offset: 25432},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 808, col: 1, offset: 25495},
			expr: &actionExpr{
				pos: position{line: 808, col: 20, offset: 25514},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 808, col: 20, offset: 25514},
					expr: &anyMatcher{
						line: 808, col: 21, offset: 25515,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 815, col: 1, offset: 25685},
			expr: &actionExpr{
				pos: position{line: 816, col: 5, offset: 25708},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 816, col: 5, offset: 25708},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 816, col: 15, offset: 25718},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 816, col: 15, offset: 25718},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 816, col: 15, offset: 25718},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 816, col: 24, offset: 25727},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 818, col: 9, offset: 25819},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 818, col: 9, offset: 25819},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 818, col: 9, offset: 25819},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 818, col: 18, offset: 25828},
												expr: &ruleRefExpr{
													pos:  position{line: 818, col: 19, offset: 25829},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 818, col: 35, offset: 25845},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 834, col: 1, offset: 26162},
			expr: &actionExpr{
				pos: position{line: 835, col: 5, offset: 26185},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 835, col: 5, offset: 26185},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 835, col: 14, offset: 26194},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 835, col: 14, offset: 26194},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 836, col: 11, offset: 26255},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 837, col: 11, offset: 26300},
								expr: &ruleRefExpr{
									pos:  position{line: 837, col: 11, offset: 26300},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 838, col: 11, offset: 26318},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 838, col: 11, offset: 26318},
										expr: &ruleRefExpr{
											pos:  position{line: 838, col: 12, offset: 26319},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 839, col: 13, offset: 26337},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 839, col: 13, offset: 26337},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 26368},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 841, col: 15, offset: 26388},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 842, col: 15, offset: 26425},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 843, col: 15, offset: 26451},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 15, offset: 26477},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 845, col: 15, offset: 26507},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 847, col: 15, offset: 26607},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 879, col: 1, offset: 27623},
			expr: &actionExpr{
				pos: position{line: 879, col: 20, offset: 27642},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 879, col: 20, offset: 27642},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 879, col: 20, offset: 27642},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 879, col: 25, offset: 27647},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 29, offset: 27651},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 879, col: 33, offset: 27655},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 879, col: 38, offset: 27660},
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 38, offset: 27660},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 886, col: 1, offset: 27906},
			expr: &actionExpr{
				pos: position{line: 886, col: 14, offset: 27919},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 886, col: 14, offset: 27919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 886, col: 14, offset: 27919},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 886, col: 19, offset: 27924},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 886, col: 25, offset: 27930},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 886, col: 43, offset: 27948},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 890, col: 1, offset: 28020},
			expr: &actionExpr{
				pos: position{line: 890, col: 21, offset: 28040},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 890, col: 21, offset: 28040},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 890, col: 30, offset: 28049},
						expr: &choiceExpr{
							pos: position{line: 890, col: 31, offset: 28050},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 890, col: 31, offset: 28050},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 890, col: 38, offset: 28057},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 890, col: 53, offset: 28072},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 890, col: 66, offset: 28085},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 890, col: 74, offset: 28093},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 890, col: 93, offset: 28112},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 890, col: 114, offset: 28133},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 890, col: 115, offset: 28134},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 890, col: 115, offset: 28134},
												expr: &litMatcher{
													pos:        position{line: 890, col: 116, offset: 28135},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 890, col: 121, offset: 28140,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 896, col: 1, offset: 28246},
			expr: &actionExpr{
				pos: position{line: 896, col: 23, offset: 28268},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 896, col: 23, offset: 28268},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 896, col: 23, offset: 28268},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 896, col: 29, offset: 28274},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 36, offset: 28281},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 897, col: 5, offset: 28313},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 897, col: 11, offset: 28319},
								expr: &actionExpr{
									pos: position{line: 897, col: 12, offset: 28320},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 897, col: 12, offset: 28320},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 897, col: 12, offset: 28320},
												expr: &ruleRefExpr{
													pos:  position{line: 897, col: 12, offset: 28320},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 897, col: 19, offset: 28327},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 897, col: 23, offset: 28331},
												expr: &ruleRefExpr{
													pos:  position{line: 897, col: 23, offset: 28331},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 897, col: 30, offset: 28338},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 897, col: 39, offset: 28347},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 898, col: 5, offset: 28405},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 898, col: 11, offset: 28411},
								expr: &actionExpr{
									pos: position{line: 898, col: 12, offset: 28412},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 898, col: 12, offset: 28412},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 898, col: 12, offset: 28412},
												expr: &ruleRefExpr{
													pos:  position{line: 898, col: 12, offset: 28412},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 898, col: 19, offset: 28419},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 898, col: 23, offset: 28423},
												expr: &ruleRefExpr{
													pos:  position{line: 898, col: 23, offset: 28423},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 898, col: 30, offset: 28430},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 898, col: 39, offset: 28439},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 899, col: 5, offset: 28497},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 903, col: 1, offset: 28576},
			expr: &actionExpr{
				pos: position{line: 903, col: 30, offset: 28605},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 903, col: 30, offset: 28605},
					expr: &choiceExpr{
						pos: position{line: 903, col: 31, offset: 28606},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 903, col: 31, offset: 28606},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 903, col: 42, offset: 28617},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 910, col: 1, offset: 28763},
			expr: &actionExpr{
				pos: position{line: 915, col: 5, offset: 28946},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 915, col: 5, offset: 28946},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 915, col: 5, offset: 28946},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 919, col: 5, offset: 29074},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 919, col: 15, offset: 29084},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 21, offset: 29090},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 919, col: 31, offset: 29100},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 49, offset: 29118},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 919, col: 67, offset: 29136},
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 67, offset: 29136},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 925, col: 1, offset: 29421},
			expr: &actionExpr{
				pos: position{line: 925, col: 16, offset: 29436},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 925, col: 16, offset: 29436},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 925, col: 16, offset: 29436},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 925, col: 25, offset: 29445},
							expr: &litMatcher{
								pos:        position{line: 925, col: 26, offset: 29446},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 30, offset: 29450},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 36, offset: 29456},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 46, offset: 29466},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 64, offset: 29484},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 932, col: 1, offset: 29828},
			expr: &actionExpr{
				pos: position{line: 932, col: 15, offset: 29842},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 932, col: 15, offset: 29842},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 932, col: 15, offset: 29842},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 932, col: 23, offset: 29850},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 932, col: 29, offset: 29856},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 932, col: 29, offset: 29856},
									expr: &charClassMatcher{
										pos:        position{line: 932, col: 29, offset: 29856},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 73, offset: 29900},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 932, col: 85, offset: 29912},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 939, col: 1, offset: 30192},
			expr: &choiceExpr{
				pos: position{line: 939, col: 19, offset: 30210},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 939, col: 19, offset: 30210},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 939, col: 19, offset: 30210},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 939, col: 19, offset: 30210},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 939, col: 32, offset: 30223},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 41, offset: 30232},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 58, offset: 30249},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 9, offset: 30325},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 941, col: 9, offset: 30325},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 941, col: 9, offset: 30325},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 941, col: 21, offset: 30337},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 26, offset: 30342},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 39, offset: 30355},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 941, col: 43, offset: 30359},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 941, col: 51, offset: 30367},
										expr: &ruleRefExpr{
											pos:  position{line: 941, col: 52, offset: 30368},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 70, offset: 30386},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 945, col: 1, offset: 30455},
			expr: &ruleRefExpr{
				pos:  position{line: 945, col: 16, offset: 30470},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 947, col: 1, offset: 30481},
			expr: &actionExpr{
				pos: position{line: 947, col: 20, offset: 30500},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 947, col: 20, offset: 30500},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 947, col: 29, offset: 30509},
						expr: &seqExpr{
							pos: position{line: 947, col: 30, offset: 30510},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 947, col: 30, offset: 30510},
									expr: &litMatcher{
										pos:        position{line: 947, col: 31, offset: 30511},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 35, offset: 30515},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 955, col: 1, offset: 30758},
			expr: &litMatcher{
				pos:        position{line: 955, col: 32, offset: 30789},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 957, col: 1, offset: 30794},
			expr: &actionExpr{
				pos: position{line: 957, col: 26, offset: 30819},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 957, col: 26, offset: 30819},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 957, col: 26, offset: 30819},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 957, col: 54, offset: 30847},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 957, col: 63, offset: 30856},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 957, col: 93, offset: 30886},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 957, col: 121, offset: 30914},
							expr: &ruleRefExpr{
								pos:  position{line: 957, col: 122, offset: 30915},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 961, col: 1, offset: 31028},
			expr: &choiceExpr{
				pos: position{line: 961, col: 33, offset: 31060},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 961, col: 34, offset: 31061},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 961, col: 34, offset: 31061},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 961, col: 35, offset: 31062},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 961, col: 35, offset: 31062},
											expr: &ruleRefExpr{
												pos:  position{line: 961, col: 36, offset: 31063},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 961, col: 64, offset: 31091},
											expr: &ruleRefExpr{
												pos:  position{line: 961, col: 65, offset: 31092},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 961, col: 71, offset: 31098},
											expr: &ruleRefExpr{
												pos:  position{line: 961, col: 72, offset: 31099},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 961, col: 80, offset: 31107,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 961, col: 83, offset: 31110},
									expr: &seqExpr{
										pos: position{line: 961, col: 84, offset: 31111},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 961, col: 84, offset: 31111},
												expr: &seqExpr{
													pos: position{line: 961, col: 86, offset: 31113},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 961, col: 86, offset: 31113},
															expr: &ruleRefExpr{
																pos:  position{line: 961, col: 86, offset: 31113},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 961, col: 93, offset: 31120},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 961, col: 122, offset: 31149},
												expr: &ruleRefExpr{
													pos:  position{line: 961, col: 123, offset: 31150},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 961, col: 151, offset: 31178},
												expr: &ruleRefExpr{
													pos:  position{line: 961, col: 152, offset: 31179},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 961, col: 160, offset: 31187,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 963, col: 11, offset: 31337},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 963, col: 12, offset: 31338},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 963, col: 12, offset: 31338},
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 13, offset: 31339},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 963, col: 19, offset: 31345},
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 20, offset: 31346},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 963, col: 28, offset: 31354},
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 29, offset: 31355},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 963, col: 57, offset: 31383,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 967, col: 1, offset: 31473},
			expr: &litMatcher{
				pos:        position{line: 967, col: 32, offset: 31504},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 969, col: 1, offset: 31511},
			expr: &actionExpr{
				pos: position{line: 969, col: 26, offset: 31536},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 969, col: 26, offset: 31536},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 969, col: 26, offset: 31536},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 969, col: 54, offset: 31564},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 63, offset: 31573},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 969, col: 93, offset: 31603},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 969, col: 121, offset: 31631},
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 122, offset: 31632},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 973, col: 1, offset: 31745},
			expr: &choiceExpr{
				pos: position{line: 973, col: 33, offset: 31777},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 973, col: 34, offset: 31778},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 973, col: 34, offset: 31778},
							expr: &seqExpr{
								pos: position{line: 973, col: 35, offset: 31779},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 973, col: 35, offset: 31779},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 36, offset: 31780},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 973, col: 64, offset: 31808,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 975, col: 11, offset: 31981},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 975, col: 11, offset: 31981},
							expr: &seqExpr{
								pos: position{line: 975, col: 12, offset: 31982},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 975, col: 12, offset: 31982},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 13, offset: 31983},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 975, col: 19, offset: 31989},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 20, offset: 31990},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 975, col: 28, offset: 31998},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 29, offset: 31999},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 975, col: 57, offset: 32027,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 979, col: 1, offset: 32118},
			expr: &choiceExpr{
				pos: position{line: 979, col: 21, offset: 32138},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 979, col: 21, offset: 32138},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 979, col: 21, offset: 32138},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 979, col: 21, offset: 32138},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 979, col: 30, offset: 32147},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 979, col: 38, offset: 32155},
										expr: &ruleRefExpr{
											pos:  position{line: 979, col: 39, offset: 32156},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 67, offset: 32184},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 9, offset: 32288},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 981, col: 9, offset: 32288},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 981, col: 9, offset: 32288},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 981, col: 19, offset: 32298},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 981, col: 27, offset: 32306},
										expr: &choiceExpr{
											pos: position{line: 981, col: 28, offset: 32307},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 981, col: 28, offset: 32307},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 981, col: 41, offset: 32320},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 981, col: 69, offset: 32348},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 985, col: 1, offset: 32452},
			expr: &actionExpr{
				pos: position{line: 985, col: 30, offset: 32481},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 985, col: 30, offset: 32481},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 992, col: 1, offset: 32651},
			expr: &choiceExpr{
				pos: position{line: 992, col: 9, offset: 32659},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 992, col: 9, offset: 32659},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 24, offset: 32674},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 995, col: 1, offset: 32755},
			expr: &actionExpr{
				pos: position{line: 995, col: 17, offset: 32771},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 995, col: 17, offset: 32771},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 995, col: 17, offset: 32771},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 995, col: 25, offset: 32779},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 30, offset: 32784},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 995, col: 40, offset: 32794},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 58, offset: 32812},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 999, col: 1, offset: 32934},
			expr: &actionExpr{
				pos: position{line: 999, col: 17, offset: 32950},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 999, col: 17, offset: 32950},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 999, col: 17, offset: 32950},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 22, offset: 32955},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 999, col: 42, offset: 32975},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 999, col: 59, offset: 32992},
								expr: &ruleRefExpr{
									pos:  position{line: 999, col: 60, offset: 32993},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElement",
			pos:  position{line: 1007, col: 1, offset: 33275},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 9, offset: 33298},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1008, col: 9, offset: 33298},
						name: "OrderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 11, offset: 33328},
						name: "UnorderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 11, offset: 33359},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1011, col: 11, offset: 33441},
						name: "CalloutListElement",
					},
				},
			},
		},
		{
			name: "OrderedListElement",
			pos:  position{line: 1015, col: 1, offset: 33487},
			expr: &actionExpr{
				pos: position{line: 1015, col: 23, offset: 33509},
				run: (*parser).callonOrderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1015, col: 23, offset: 33509},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1015, col: 23, offset: 33509},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1015, col: 31, offset: 33517},
								name: "OrderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1015, col: 57, offset: 33543},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1015, col: 66, offset: 33552},
								name: "OrderedListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementPrefix",
			pos:  position{line: 1019, col: 1, offset: 33689},
			expr: &actionExpr{
				pos: position{line: 1020, col: 5, offset: 33722},
				run: (*parser).callonOrderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1020, col: 5, offset: 33722},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1020, col: 5, offset: 33722},
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 5, offset: 33722},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 12, offset: 33729},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1022, col: 9, offset: 33792},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1022, col: 9, offset: 33792},
										run: (*parser).callonOrderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1022, col: 9, offset: 33792},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1022, col: 9, offset: 33792},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1022, col: 16, offset: 33799},
														run: (*parser).callonOrderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1022, col: 16, offset: 33799},
															expr: &litMatcher{
																pos:        position{line: 1022, col: 17, offset: 33800},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1026, col: 9, offset: 33900},
													run: (*parser).callonOrderedListElementPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1045, col: 11, offset: 34617},
										run: (*parser).callonOrderedListElementPrefix14,
										expr: &seqExpr{
											pos: position{line: 1045, col: 11, offset: 34617},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1045, col: 11, offset: 34617},
													expr: &charClassMatcher{
														pos:        position{line: 1045, col: 12, offset: 34618},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1045, col: 20, offset: 34626},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1047, col: 13, offset: 34737},
										run: (*parser).callonOrderedListElementPrefix19,
										expr: &seqExpr{
											pos: position{line: 1047, col: 13, offset: 34737},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1047, col: 14, offset: 34738},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1047, col: 21, offset: 34745},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1049, col: 13, offset: 34859},
										run: (*parser).callonOrderedListElementPrefix23,
										expr: &seqExpr{
											pos: position{line: 1049, col: 13, offset: 34859},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1049, col: 14, offset: 34860},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1049, col: 21, offset: 34867},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1051, col: 13, offset: 34981},
										run: (*parser).callonOrderedListElementPrefix27,
										expr: &seqExpr{
											pos: position{line: 1051, col: 13, offset: 34981},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1051, col: 13, offset: 34981},
													expr: &charClassMatcher{
														pos:        position{line: 1051, col: 14, offset: 34982},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1051, col: 26, offset: 34994},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1053, col: 13, offset: 35108},
										run: (*parser).callonOrderedListElementPrefix32,
										expr: &seqExpr{
											pos: position{line: 1053, col: 13, offset: 35108},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1053, col: 13, offset: 35108},
													expr: &charClassMatcher{
														pos:        position{line: 1053, col: 14, offset: 35109},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1053, col: 26, offset: 35121},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1055, col: 12, offset: 35234},
							expr: &ruleRefExpr{
								pos:  position{line: 1055, col: 12, offset: 35234},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementContent",
			pos:  position{line: 1059, col: 1, offset: 35269},
			expr: &actionExpr{
				pos: position{line: 1059, col: 30, offset: 35298},
				run: (*parser).callonOrderedListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1059, col: 30, offset: 35298},
					expr: &charClassMatcher{
						pos:        position{line: 1059, col: 30, offset: 35298},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UnorderedListElement",
			pos:  position{line: 1070, col: 1, offset: 35514},
			expr: &actionExpr{
				pos: position{line: 1071, col: 5, offset: 35543},
				run: (*parser).callonUnorderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1071, col: 5, offset: 35543},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1071, col: 5, offset: 35543},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1071, col: 13, offset: 35551},
								name: "UnorderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1072, col: 5, offset: 35584},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 1072, col: 16, offset: 35595},
								expr: &ruleRefExpr{
									pos:  position{line: 1072, col: 17, offset: 35596},
									name: "UnorderedListElementCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1073, col: 5, offset: 35634},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1073, col: 14, offset: 35643},
								name: "UnorderedListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementPrefix",
			pos:  position{line: 1077, col: 1, offset: 35806},
			expr: &actionExpr{
				pos: position{line: 1078, col: 5, offset: 35841},
				run: (*parser).callonUnorderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1078, col: 5, offset: 35841},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1078, col: 5, offset: 35841},
							expr: &ruleRefExpr{
								pos:  position{line: 1078, col: 5, offset: 35841},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1078, col: 12, offset: 35848},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1078, col: 20, offset: 35856},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1080, col: 9, offset: 35913},
										run: (*parser).callonUnorderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1080, col: 9, offset: 35913},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1080, col: 9, offset: 35913},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1080, col: 16, offset: 35920},
														run: (*parser).callonUnorderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1080, col: 16, offset: 35920},
															expr: &litMatcher{
																pos:        position{line: 1080, col: 17, offset: 35921},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1084, col: 9, offset: 36021},
													run: (*parser).callonUnorderedListElementPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1101, col: 14, offset: 36728},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 1101, col: 21, offset: 36735},
											run: (*parser).callonUnorderedListElementPrefix15,
											expr: &litMatcher{
												pos:        position{line: 1101, col: 22, offset: 36736},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1103, col: 13, offset: 36822},
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 13, offset: 36822},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementCheckStyle",
			pos:  position{line: 1107, col: 1, offset: 36858},
			expr: &actionExpr{
				pos: position{line: 1107, col: 35, offset: 36892},
				run: (*parser).callonUnorderedListElementCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 35, offset: 36892},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1107, col: 35, offset: 36892},
							expr: &litMatcher{
								pos:        position{line: 1107, col: 36, offset: 36893},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 40, offset: 36897},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 1108, col: 7, offset: 36911},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1108, col: 7, offset: 36911},
										run: (*parser).callonUnorderedListElementCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 1108, col: 7, offset: 36911},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1109, col: 7, offset: 36956},
										run: (*parser).callonUnorderedListElementCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 1109, col: 7, offset: 36956},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1110, col: 7, offset: 36999},
										run: (*parser).callonUnorderedListElementCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 1110, col: 7, offset: 36999},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1111, col: 7, offset: 37041},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 7, offset: 37041},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementContent",
			pos:  position{line: 1119, col: 1, offset: 37335},
			expr: &actionExpr{
				pos: position{line: 1119, col: 32, offset: 37366},
				run: (*parser).callonUnorderedListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1119, col: 32, offset: 37366},
					expr: &charClassMatcher{
						pos:        position{line: 1119, col: 32, offset: 37366},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 1129, col: 1, offset: 37555},
			expr: &actionExpr{
				pos: position{line: 1129, col: 20, offset: 37574},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 20, offset: 37574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1129, col: 20, offset: 37574},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1129, col: 26, offset: 37580},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 1129, col: 47, offset: 37601},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 1129, col: 58, offset: 37612},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1129, col: 84, offset: 37638},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 1129, col: 96, offset: 37650},
								expr: &ruleRefExpr{
									pos:  position{line: 1129, col: 97, offset: 37651},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 1133, col: 1, offset: 37781},
			expr: &actionExpr{
				pos: position{line: 1133, col: 24, offset: 37804},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1133, col: 24, offset: 37804},
					expr: &seqExpr{
						pos: position{line: 1133, col: 25, offset: 37805},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1133, col: 25, offset: 37805},
								expr: &ruleRefExpr{
									pos:  position{line: 1133, col: 26, offset: 37806},
									name: "LabeledListItemSeparator",
								},
							},
							&anyMatcher{
								line: 1133, col: 51, offset: 37831,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 1137, col: 1, offset: 37871},
			expr: &actionExpr{
				pos: position{line: 1138, col: 5, offset: 37904},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 5, offset: 37904},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1138, col: 5, offset: 37904},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 1138, col: 16, offset: 37915},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1138, col: 16, offset: 37915},
									expr: &litMatcher{
										pos:        position{line: 1138, col: 17, offset: 37916},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1141, col: 5, offset: 37974},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 1145, col: 6, offset: 38150},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1145, col: 6, offset: 38150},
									expr: &choiceExpr{
										pos: position{line: 1145, col: 7, offset: 38151},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1145, col: 7, offset: 38151},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 1145, col: 15, offset: 38159},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1145, col: 27, offset: 38171},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 1149, col: 1, offset: 38207},
			expr: &actionExpr{
				pos: position{line: 1149, col: 31, offset: 38237},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1149, col: 31, offset: 38237},
					expr: &charClassMatcher{
						pos:        position{line: 1149, col: 31, offset: 38237},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1153, col: 1, offset: 38283},
			expr: &actionExpr{
				pos: position{line: 1155, col: 5, offset: 38361},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 5, offset: 38361},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1155, col: 5, offset: 38361},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1158, col: 5, offset: 38423},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1158, col: 9, offset: 38427},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1158, col: 14, offset: 38432},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1158, col: 14, offset: 38432},
									expr: &charClassMatcher{
										pos:        position{line: 1158, col: 14, offset: 38432},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1158, col: 62, offset: 38480},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1158, col: 66, offset: 38484},
							expr: &ruleRefExpr{
								pos:  position{line: 1158, col: 66, offset: 38484},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1158, col: 73, offset: 38491},
							expr: &choiceExpr{
								pos: position{line: 1158, col: 75, offset: 38493},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1158, col: 75, offset: 38493},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1158, col: 81, offset: 38499},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElement",
			pos:  position{line: 1162, col: 1, offset: 38560},
			expr: &actionExpr{
				pos: position{line: 1162, col: 23, offset: 38582},
				run: (*parser).callonCalloutListElement1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 23, offset: 38582},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1162, col: 23, offset: 38582},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1162, col: 28, offset: 38587},
								name: "CalloutListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1162, col: 54, offset: 38613},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 1162, col: 67, offset: 38626},
								name: "CalloutListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElementPrefix",
			pos:  position{line: 1166, col: 1, offset: 38745},
			expr: &actionExpr{
				pos: position{line: 1166, col: 29, offset: 38773},
				run: (*parser).callonCalloutListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 29, offset: 38773},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1166, col: 29, offset: 38773},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1166, col: 33, offset: 38777},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1166, col: 38, offset: 38782},
								run: (*parser).callonCalloutListElementPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1166, col: 38, offset: 38782},
									expr: &charClassMatcher{
										pos:        position{line: 1166, col: 38, offset: 38782},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1166, col: 86, offset: 38830},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1166, col: 90, offset: 38834},
							expr: &ruleRefExpr{
								pos:  position{line: 1166, col: 90, offset: 38834},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElementContent",
			pos:  position{line: 1170, col: 1, offset: 38874},
			expr: &actionExpr{
				pos: position{line: 1170, col: 30, offset: 38903},
				run: (*parser).callonCalloutListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1170, col: 30, offset: 38903},
					expr: &charClassMatcher{
						pos:        position{line: 1170, col: 30, offset: 38903},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1180, col: 1, offset: 39092},
			expr: &actionExpr{
				pos: position{line: 1180, col: 28, offset: 39119},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 28, offset: 39119},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1180, col: 28, offset: 39119},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1180, col: 32, offset: 39123},
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 32, offset: 39123},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1187, col: 1, offset: 39422},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 5, offset: 39441},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1189, col: 9, offset: 39451},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1189, col: 9, offset: 39451},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1189, col: 9, offset: 39451},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1189, col: 20, offset: 39462},
										expr: &ruleRefExpr{
											pos:  position{line: 1189, col: 21, offset: 39463},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 9, offset: 39589},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1190, col: 15, offset: 39595},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1190, col: 15, offset: 39595},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1190, col: 41, offset: 39621},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 7, offset: 39740},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1196, col: 1, offset: 39759},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 32, offset: 39790},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1196, col: 32, offset: 39790},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1196, col: 32, offset: 39790},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1196, col: 36, offset: 39794},
								expr: &litMatcher{
									pos:        position{line: 1196, col: 37, offset: 39795},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1196, col: 43, offset: 39801},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1196, col: 43, offset: 39801},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1196, col: 47, offset: 39805},
								expr: &litMatcher{
									pos:        position{line: 1196, col: 48, offset: 39806},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1196, col: 54, offset: 39812},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1196, col: 54, offset: 39812},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1196, col: 58, offset: 39816},
								expr: &litMatcher{
									pos:        position{line: 1196, col: 59, offset: 39817},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1196, col: 65, offset: 39823},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1196, col: 65, offset: 39823},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1196, col: 69, offset: 39827},
								expr: &litMatcher{
									pos:        position{line: 1196, col: 70, offset: 39828},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1198, col: 1, offset: 39833},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 34, offset: 39866},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1198, col: 34, offset: 39866},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1198, col: 41, offset: 39873},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1198, col: 48, offset: 39880},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1198, col: 55, offset: 39887},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1198, col: 62, offset: 39894},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1198, col: 68, offset: 39900},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1200, col: 1, offset: 39905},
			expr: &choiceExpr{
				pos: position{line: 1201, col: 5, offset: 39935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1201, col: 5, offset: 39935},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 7, offset: 39962},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 7, offset: 39990},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 7, offset: 40018},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 7, offset: 40050},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 7, offset: 40071},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1208, col: 1, offset: 40089},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 5, offset: 40121},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1209, col: 5, offset: 40121},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 7, offset: 40147},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 7, offset: 40175},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 7, offset: 40203},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1214, col: 1, offset: 40229},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 40310},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 40310},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1215, col: 5, offset: 40310},
							expr: &litMatcher{
								pos:        position{line: 1215, col: 7, offset: 40312},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 5, offset: 40321},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1217, col: 9, offset: 40339},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1217, col: 9, offset: 40339},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1218, col: 11, offset: 40366},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1219, col: 11, offset: 40394},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1220, col: 11, offset: 40422},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1221, col: 11, offset: 40454},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1222, col: 11, offset: 40486},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1228, col: 1, offset: 40553},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 33, offset: 40585},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1228, col: 33, offset: 40585},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1228, col: 39, offset: 40591},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1228, col: 39, offset: 40591},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1232, col: 1, offset: 40733},
			expr: &actionExpr{
				pos: position{line: 1232, col: 25, offset: 40757},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1232, col: 25, offset: 40757},
					expr: &litMatcher{
						pos:        position{line: 1232, col: 25, offset: 40757},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1236, col: 1, offset: 40806},
			expr: &actionExpr{
				pos: position{line: 1236, col: 25, offset: 40830},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 25, offset: 40830},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1236, col: 25, offset: 40830},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1236, col: 30, offset: 40835},
							expr: &litMatcher{
								pos:        position{line: 1236, col: 30, offset: 40835},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1243, col: 1, offset: 40946},
			expr: &choiceExpr{
				pos: position{line: 1243, col: 13, offset: 40958},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1243, col: 13, offset: 40958},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 35, offset: 40980},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1245, col: 1, offset: 41047},
			expr: &actionExpr{
				pos: position{line: 1245, col: 24, offset: 41070},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 24, offset: 41070},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1245, col: 24, offset: 41070},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1245, col: 29, offset: 41075},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1245, col: 39, offset: 41085},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1245, col: 68, offset: 41114},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1249, col: 1, offset: 41213},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1249, col: 32, offset: 41244},
				expr: &ruleRefExpr{
					pos:  position{line: 1249, col: 32, offset: 41244},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1251, col: 1, offset: 41275},
			expr: &actionExpr{
				pos: position{line: 1251, col: 31, offset: 41305},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1251, col: 31, offset: 41305},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1251, col: 31, offset: 41305},
							expr: &litMatcher{
								pos:        position{line: 1251, col: 33, offset: 41307},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 39, offset: 41313},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1251, col: 48, offset: 41322},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1251, col: 48, offset: 41322},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 7, offset: 41333},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1253, col: 7, offset: 41378},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1253, col: 7, offset: 41378},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1253, col: 15, offset: 41386},
												expr: &ruleRefExpr{
													pos:  position{line: 1253, col: 16, offset: 41387},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1254, col: 7, offset: 41401},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1255, col: 7, offset: 41429},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1256, col: 7, offset: 41452},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1257, col: 7, offset: 41470},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1258, col: 7, offset: 41489},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1259, col: 7, offset: 41527},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 7, offset: 41552},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1264, col: 1, offset: 41627},
			expr: &actionExpr{
				pos: position{line: 1265, col: 5, offset: 41667},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 5, offset: 41667},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1265, col: 5, offset: 41667},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1265, col: 16, offset: 41678},
								expr: &ruleRefExpr{
									pos:  position{line: 1265, col: 17, offset: 41679},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 5, offset: 41705},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1266, col: 11, offset: 41711},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1266, col: 11, offset: 41711},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1267, col: 11, offset: 41741},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1268, col: 11, offset: 41762},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1269, col: 11, offset: 41783},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1270, col: 11, offset: 41807},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1271, col: 11, offset: 41831},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1275, col: 1, offset: 41932},
			expr: &choiceExpr{
				pos: position{line: 1276, col: 5, offset: 41976},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1276, col: 5, offset: 41976},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1277, col: 7, offset: 42073},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1277, col: 7, offset: 42073},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1277, col: 7, offset: 42073},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1277, col: 12, offset: 42078},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1281, col: 1, offset: 42249},
			expr: &choiceExpr{
				pos: position{line: 1282, col: 5, offset: 42277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1282, col: 5, offset: 42277},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1282, col: 5, offset: 42277},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1282, col: 6, offset: 42278},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1282, col: 6, offset: 42278},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1282, col: 10, offset: 42282},
											expr: &litMatcher{
												pos:        position{line: 1282, col: 11, offset: 42283},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1282, col: 16, offset: 42288},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1282, col: 26, offset: 42298},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1282, col: 55, offset: 42327},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1282, col: 59, offset: 42331},
									expr: &notExpr{
										pos: position{line: 1282, col: 61, offset: 42333},
										expr: &ruleRefExpr{
											pos:  position{line: 1282, col: 62, offset: 42334},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1284, col: 9, offset: 42540},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1284, col: 9, offset: 42540},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1284, col: 9, offset: 42540},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1284, col: 13, offset: 42544},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1284, col: 23, offset: 42554},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1284, col: 23, offset: 42554},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1284, col: 27, offset: 42558},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1284, col: 56, offset: 42587},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1288, col: 1, offset: 42805},
			expr: &seqExpr{
				pos: position{line: 1288, col: 32, offset: 42836},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1288, col: 32, offset: 42836},
						expr: &ruleRefExpr{
							pos:  position{line: 1288, col: 33, offset: 42837},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1288, col: 39, offset: 42843},
						expr: &ruleRefExpr{
							pos:  position{line: 1288, col: 39, offset: 42843},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1290, col: 1, offset: 42872},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 5, offset: 42907},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1291, col: 5, offset: 42907},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1292, col: 7, offset: 42918},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1292, col: 7, offset: 42918},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1292, col: 15, offset: 42926},
								expr: &ruleRefExpr{
									pos:  position{line: 1292, col: 16, offset: 42927},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 7, offset: 42941},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 7, offset: 42969},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 7, offset: 42992},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 7, offset: 43010},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1297, col: 7, offset: 43029},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1297, col: 7, offset: 43029},
								expr: &ruleRefExpr{
									pos:  position{line: 1297, col: 7, offset: 43029},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1297, col: 14, offset: 43036},
								expr: &seqExpr{
									pos: position{line: 1297, col: 15, offset: 43037},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1297, col: 15, offset: 43037},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1297, col: 19, offset: 43041},
											expr: &litMatcher{
												pos:        position{line: 1297, col: 20, offset: 43042},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 7, offset: 43054},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 7, offset: 43092},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 7, offset: 43117},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1302, col: 1, offset: 43155},
			expr: &actionExpr{
				pos: position{line: 1303, col: 5, offset: 43195},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1303, col: 5, offset: 43195},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1303, col: 5, offset: 43195},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1303, col: 16, offset: 43206},
								expr: &ruleRefExpr{
									pos:  position{line: 1303, col: 17, offset: 43207},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 5, offset: 43233},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1304, col: 11, offset: 43239},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1304, col: 11, offset: 43239},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1305, col: 11, offset: 43269},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1306, col: 11, offset: 43290},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1307, col: 11, offset: 43311},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1308, col: 11, offset: 43335},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 11, offset: 43359},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1312, col: 1, offset: 43459},
			expr: &choiceExpr{
				pos: position{line: 1313, col: 5, offset: 43503},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1313, col: 5, offset: 43503},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1314, col: 7, offset: 43600},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1314, col: 7, offset: 43600},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1314, col: 7, offset: 43600},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1314, col: 11, offset: 43604},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1318, col: 1, offset: 43775},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 5, offset: 43799},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1319, col: 5, offset: 43799},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1319, col: 5, offset: 43799},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1319, col: 5, offset: 43799},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1319, col: 18, offset: 43812},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 40, offset: 43834},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1319, col: 45, offset: 43839},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1319, col: 55, offset: 43849},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 84, offset: 43878},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1321, col: 9, offset: 44035},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1321, col: 9, offset: 44035},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1321, col: 9, offset: 44035},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1321, col: 22, offset: 44048},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 44, offset: 44070},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1321, col: 49, offset: 44075},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1321, col: 59, offset: 44085},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 88, offset: 44114},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1324, col: 9, offset: 44314},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1324, col: 9, offset: 44314},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1324, col: 9, offset: 44314},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 22, offset: 44327},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 44, offset: 44349},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1324, col: 48, offset: 44353},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 58, offset: 44363},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 87, offset: 44392},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1331, col: 1, offset: 44613},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 15, offset: 44627},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1331, col: 15, offset: 44627},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 39, offset: 44651},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1333, col: 1, offset: 44674},
			expr: &actionExpr{
				pos: position{line: 1333, col: 26, offset: 44699},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1333, col: 26, offset: 44699},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1333, col: 26, offset: 44699},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1333, col: 31, offset: 44704},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1333, col: 41, offset: 44714},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1333, col: 72, offset: 44745},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1337, col: 1, offset: 44891},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1337, col: 34, offset: 44924},
				expr: &ruleRefExpr{
					pos:  position{line: 1337, col: 34, offset: 44924},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1339, col: 1, offset: 44956},
			expr: &actionExpr{
				pos: position{line: 1340, col: 5, offset: 44993},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1340, col: 5, offset: 44993},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1340, col: 5, offset: 44993},
							expr: &litMatcher{
								pos:        position{line: 1340, col: 7, offset: 44995},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1340, col: 13, offset: 45001},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1340, col: 22, offset: 45010},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1340, col: 22, offset: 45010},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1341, col: 7, offset: 45021},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1342, col: 7, offset: 45066},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1342, col: 7, offset: 45066},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1342, col: 15, offset: 45074},
												expr: &ruleRefExpr{
													pos:  position{line: 1342, col: 16, offset: 45075},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1343, col: 7, offset: 45089},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1344, col: 7, offset: 45117},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 7, offset: 45140},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1346, col: 7, offset: 45158},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1347, col: 7, offset: 45177},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1348, col: 7, offset: 45217},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1349, col: 7, offset: 45242},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1353, col: 1, offset: 45319},
			expr: &actionExpr{
				pos: position{line: 1354, col: 5, offset: 45361},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1354, col: 5, offset: 45361},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1354, col: 5, offset: 45361},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1354, col: 16, offset: 45372},
								expr: &ruleRefExpr{
									pos:  position{line: 1354, col: 17, offset: 45373},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1355, col: 5, offset: 45399},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1355, col: 11, offset: 45405},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1355, col: 11, offset: 45405},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1356, col: 11, offset: 45437},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1357, col: 11, offset: 45456},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1358, col: 11, offset: 45477},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1359, col: 11, offset: 45501},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1360, col: 11, offset: 45525},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1364, col: 1, offset: 45626},
			expr: &choiceExpr{
				pos: position{line: 1365, col: 5, offset: 45672},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1365, col: 5, offset: 45672},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1366, col: 7, offset: 45771},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1366, col: 7, offset: 45771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1366, col: 7, offset: 45771},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1366, col: 12, offset: 45776},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1370, col: 1, offset: 45949},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 5, offset: 45979},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 45979},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1371, col: 5, offset: 45979},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1371, col: 6, offset: 45980},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1371, col: 6, offset: 45980},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1371, col: 10, offset: 45984},
											expr: &litMatcher{
												pos:        position{line: 1371, col: 11, offset: 45985},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1371, col: 16, offset: 45990},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 26, offset: 46000},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 57, offset: 46031},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1373, col: 9, offset: 46233},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1373, col: 9, offset: 46233},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1373, col: 9, offset: 46233},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1373, col: 13, offset: 46237},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1373, col: 23, offset: 46247},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1373, col: 23, offset: 46247},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1373, col: 27, offset: 46251},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1373, col: 58, offset: 46282},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1377, col: 1, offset: 46504},
			expr: &actionExpr{
				pos: position{line: 1377, col: 34, offset: 46537},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1377, col: 34, offset: 46537},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1377, col: 34, offset: 46537},
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 35, offset: 46538},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1377, col: 41, offset: 46544},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1377, col: 51, offset: 46554},
								expr: &ruleRefExpr{
									pos:  position{line: 1377, col: 51, offset: 46554},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1381, col: 1, offset: 46615},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 5, offset: 46652},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1382, col: 5, offset: 46652},
						name: "ItalicWord",
					},
					&seqExpr{
						pos: position{line: 1383, col: 7, offset: 46669},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1383, col: 7, offset: 46669},
								expr: &ruleRefExpr{
									pos:  position{line: 1383, col: 7, offset: 46669},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1383, col: 14, offset: 46676},
								expr: &seqExpr{
									pos: position{line: 1383, col: 15, offset: 46677},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1383, col: 15, offset: 46677},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1383, col: 19, offset: 46681},
											expr: &litMatcher{
												pos:        position{line: 1383, col: 20, offset: 46682},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1384, col: 7, offset: 46694},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1384, col: 7, offset: 46694},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1384, col: 15, offset: 46702},
								expr: &ruleRefExpr{
									pos:  position{line: 1384, col: 16, offset: 46703},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1385, col: 7, offset: 46717},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 7, offset: 46745},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1387, col: 7, offset: 46768},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 7, offset: 46786},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 7, offset: 46805},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1390, col: 7, offset: 46845},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 7, offset: 46870},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "ItalicWord",
			pos:  position{line: 1394, col: 1, offset: 46965},
			expr: &actionExpr{
				pos: position{line: 1394, col: 15, offset: 46979},
				run: (*parser).callonItalicWord1,
				expr: &seqExpr{
					pos: position{line: 1394, col: 15, offset: 46979},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1394, col: 15, offset: 46979},
							expr: &charClassMatcher{
								pos:        position{line: 1394, col: 15, offset: 46979},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1394, col: 25, offset: 46989},
							expr: &choiceExpr{
								pos: position{line: 1394, col: 27, offset: 46991},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1394, col: 27, offset: 46991},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&litMatcher{
										pos:        position{line: 1394, col: 33, offset: 46997},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1398, col: 1, offset: 47057},
			expr: &actionExpr{
				pos: position{line: 1399, col: 5, offset: 47098},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1399, col: 5, offset: 47098},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1399, col: 5, offset: 47098},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1399, col: 16, offset: 47109},
								expr: &ruleRefExpr{
									pos:  position{line: 1399, col: 17, offset: 47110},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 5, offset: 47136},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1400, col: 11, offset: 47142},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1400, col: 11, offset: 47142},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1401, col: 11, offset: 47161},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1402, col: 11, offset: 47193},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1403, col: 11, offset: 47214},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1404, col: 11, offset: 47238},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1405, col: 11, offset: 47262},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1409, col: 1, offset: 47363},
			expr: &choiceExpr{
				pos: position{line: 1410, col: 5, offset: 47409},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1410, col: 5, offset: 47409},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1411, col: 7, offset: 47508},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1411, col: 7, offset: 47508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1411, col: 7, offset: 47508},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1411, col: 11, offset: 47512},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1415, col: 1, offset: 47686},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 5, offset: 47712},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 47712},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1416, col: 5, offset: 47712},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1416, col: 5, offset: 47712},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1416, col: 18, offset: 47725},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 40, offset: 47747},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1416, col: 45, offset: 47752},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1416, col: 55, offset: 47762},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 86, offset: 47793},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1418, col: 9, offset: 47950},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1418, col: 9, offset: 47950},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1418, col: 9, offset: 47950},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1418, col: 22, offset: 47963},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 44, offset: 47985},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1418, col: 49, offset: 47990},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1418, col: 59, offset: 48000},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 90, offset: 48031},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1421, col: 9, offset: 48231},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1421, col: 9, offset: 48231},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1421, col: 9, offset: 48231},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1421, col: 22, offset: 48244},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1421, col: 44, offset: 48266},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1421, col: 48, offset: 48270},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1421, col: 58, offset: 48280},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1421, col: 89, offset: 48311},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1428, col: 1, offset: 48538},
			expr: &choiceExpr{
				pos: position{line: 1428, col: 18, offset: 48555},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1428, col: 18, offset: 48555},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 45, offset: 48582},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1430, col: 1, offset: 48608},
			expr: &actionExpr{
				pos: position{line: 1430, col: 29, offset: 48636},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1430, col: 29, offset: 48636},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1430, col: 29, offset: 48636},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1430, col: 34, offset: 48641},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1430, col: 44, offset: 48651},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1430, col: 78, offset: 48685},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1434, col: 1, offset: 48834},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1434, col: 37, offset: 48870},
				expr: &ruleRefExpr{
					pos:  position{line: 1434, col: 37, offset: 48870},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1436, col: 1, offset: 48937},
			expr: &actionExpr{
				pos: position{line: 1437, col: 5, offset: 48977},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1437, col: 5, offset: 48977},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1437, col: 5, offset: 48977},
							expr: &litMatcher{
								pos:        position{line: 1437, col: 7, offset: 48979},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1437, col: 13, offset: 48985},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1437, col: 22, offset: 48994},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1437, col: 22, offset: 48994},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1438, col: 7, offset: 49005},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1439, col: 7, offset: 49050},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1439, col: 7, offset: 49050},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1439, col: 15, offset: 49058},
												expr: &ruleRefExpr{
													pos:  position{line: 1439, col: 16, offset: 49059},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1440, col: 7, offset: 49073},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1441, col: 7, offset: 49101},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1442, col: 7, offset: 49124},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1443, col: 7, offset: 49142},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1444, col: 7, offset: 49161},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1445, col: 7, offset: 49224},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1446, col: 7, offset: 49267},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1447, col: 7, offset: 49292},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1451, col: 1, offset: 49372},
			expr: &actionExpr{
				pos: position{line: 1452, col: 5, offset: 49416},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 5, offset: 49416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1452, col: 5, offset: 49416},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1452, col: 16, offset: 49427},
								expr: &ruleRefExpr{
									pos:  position{line: 1452, col: 17, offset: 49428},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1453, col: 5, offset: 49454},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1453, col: 11, offset: 49460},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1453, col: 11, offset: 49460},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1454, col: 11, offset: 49495},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1455, col: 11, offset: 49514},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1456, col: 11, offset: 49535},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1457, col: 11, offset: 49556},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1458, col: 11, offset: 49580},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1462, col: 1, offset: 49682},
			expr: &choiceExpr{
				pos: position{line: 1463, col: 5, offset: 49731},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1463, col: 5, offset: 49731},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1464, col: 7, offset: 49833},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1464, col: 7, offset: 49833},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1464, col: 7, offset: 49833},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1464, col: 12, offset: 49838},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1468, col: 1, offset: 50016},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 5, offset: 50049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1469, col: 5, offset: 50049},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1469, col: 5, offset: 50049},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1469, col: 6, offset: 50050},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1469, col: 6, offset: 50050},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1469, col: 10, offset: 50054},
											expr: &litMatcher{
												pos:        position{line: 1469, col: 11, offset: 50055},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1469, col: 16, offset: 50060},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1469, col: 26, offset: 50070},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1469, col: 60, offset: 50104},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1471, col: 9, offset: 50309},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1471, col: 9, offset: 50309},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1471, col: 9, offset: 50309},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1471, col: 13, offset: 50313},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1471, col: 23, offset: 50323},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1471, col: 23, offset: 50323},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1471, col: 27, offset: 50327},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1471, col: 61, offset: 50361},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1475, col: 1, offset: 50587},
			expr: &seqExpr{
				pos: position{line: 1475, col: 37, offset: 50623},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1475, col: 37, offset: 50623},
						expr: &ruleRefExpr{
							pos:  position{line: 1475, col: 38, offset: 50624},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1475, col: 44, offset: 50630},
						expr: &ruleRefExpr{
							pos:  position{line: 1475, col: 44, offset: 50630},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1477, col: 1, offset: 50664},
			expr: &choiceExpr{
				pos: position{line: 1478, col: 5, offset: 50705},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1478, col: 5, offset: 50705},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1479, col: 7, offset: 50716},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1479, col: 7, offset: 50716},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1479, col: 15, offset: 50724},
								expr: &ruleRefExpr{
									pos:  position{line: 1479, col: 16, offset: 50725},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 7, offset: 50739},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 7, offset: 50767},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1482, col: 7, offset: 50790},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1483, col: 7, offset: 50808},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1484, col: 7, offset: 50827},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1484, col: 7, offset: 50827},
								expr: &ruleRefExpr{
									pos:  position{line: 1484, col: 7, offset: 50827},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1484, col: 14, offset: 50834},
								expr: &seqExpr{
									pos: position{line: 1484, col: 15, offset: 50835},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1484, col: 15, offset: 50835},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1484, col: 19, offset: 50839},
											expr: &litMatcher{
												pos:        position{line: 1484, col: 20, offset: 50840},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1485, col: 7, offset: 50964},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1486, col: 7, offset: 51007},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1487, col: 7, offset: 51027},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1488, col: 7, offset: 51052},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1490, col: 1, offset: 51095},
			expr: &actionExpr{
				pos: position{line: 1491, col: 5, offset: 51139},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1491, col: 5, offset: 51139},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1491, col: 5, offset: 51139},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1491, col: 16, offset: 51150},
								expr: &ruleRefExpr{
									pos:  position{line: 1491, col: 17, offset: 51151},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1492, col: 5, offset: 51177},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1492, col: 11, offset: 51183},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1492, col: 11, offset: 51183},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1493, col: 11, offset: 51218},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1494, col: 11, offset: 51237},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1495, col: 11, offset: 51258},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1496, col: 11, offset: 51279},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1497, col: 11, offset: 51303},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1501, col: 1, offset: 51405},
			expr: &actionExpr{
				pos: position{line: 1502, col: 5, offset: 51454},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1502, col: 6, offset: 51455},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1502, col: 6, offset: 51455},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1503, col: 7, offset: 51559},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1503, col: 7, offset: 51559},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1503, col: 11, offset: 51563},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1507, col: 1, offset: 51741},
			expr: &choiceExpr{
				pos: position{line: 1508, col: 5, offset: 51770},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1508, col: 5, offset: 51770},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1508, col: 5, offset: 51770},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1508, col: 5, offset: 51770},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1508, col: 18, offset: 51783},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1508, col: 40, offset: 51805},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1508, col: 45, offset: 51810},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1508, col: 55, offset: 51820},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1508, col: 89, offset: 51854},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1510, col: 9, offset: 52011},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1510, col: 9, offset: 52011},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1510, col: 9, offset: 52011},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 22, offset: 52024},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1510, col: 44, offset: 52046},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1510, col: 49, offset: 52051},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 59, offset: 52061},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1510, col: 93, offset: 52095},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1513, col: 9, offset: 52295},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1513, col: 9, offset: 52295},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1513, col: 9, offset: 52295},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1513, col: 22, offset: 52308},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1513, col: 44, offset: 52330},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1513, col: 48, offset: 52334},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1513, col: 58, offset: 52344},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1513, col: 92, offset: 52378},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1520, col: 1, offset: 52599},
			expr: &choiceExpr{
				pos: position{line: 1520, col: 15, offset: 52613},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1520, col: 15, offset: 52613},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1520, col: 39, offset: 52637},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1522, col: 1, offset: 52660},
			expr: &actionExpr{
				pos: position{line: 1522, col: 26, offset: 52685},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1522, col: 26, offset: 52685},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1522, col: 26, offset: 52685},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 31, offset: 52690},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1522, col: 41, offset: 52700},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1522, col: 72, offset: 52731},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1526, col: 1, offset: 52877},
			expr: &seqExpr{
				pos: position{line: 1526, col: 34, offset: 52910},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1526, col: 34, offset: 52910},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1526, col: 63, offset: 52939},
						expr: &seqExpr{
							pos: position{line: 1526, col: 64, offset: 52940},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1526, col: 64, offset: 52940},
									expr: &litMatcher{
										pos:        position{line: 1526, col: 66, offset: 52942},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1526, col: 73, offset: 52949},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1526, col: 73, offset: 52949},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1526, col: 81, offset: 52957},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1528, col: 1, offset: 53024},
			expr: &choiceExpr{
				pos: position{line: 1528, col: 33, offset: 53056},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1528, col: 33, offset: 53056},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1529, col: 7, offset: 53067},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1529, col: 7, offset: 53067},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1529, col: 15, offset: 53075},
								expr: &ruleRefExpr{
									pos:  position{line: 1529, col: 16, offset: 53076},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1530, col: 7, offset: 53090},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1531, col: 7, offset: 53118},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1532, col: 7, offset: 53141},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1533, col: 7, offset: 53159},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1534, col: 7, offset: 53178},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1535, col: 7, offset: 53209},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1536, col: 7, offset: 53234},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1538, col: 1, offset: 53274},
			expr: &actionExpr{
				pos: position{line: 1539, col: 5, offset: 53306},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1539, col: 5, offset: 53306},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1539, col: 5, offset: 53306},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1539, col: 16, offset: 53317},
								expr: &ruleRefExpr{
									pos:  position{line: 1539, col: 17, offset: 53318},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 5, offset: 53344},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1540, col: 11, offset: 53350},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1540, col: 11, offset: 53350},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1541, col: 11, offset: 53369},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1542, col: 11, offset: 53390},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1543, col: 11, offset: 53414},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1544, col: 11, offset: 53446},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1545, col: 11, offset: 53470},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1549, col: 1, offset: 53572},
			expr: &choiceExpr{
				pos: position{line: 1550, col: 5, offset: 53618},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1550, col: 5, offset: 53618},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1551, col: 7, offset: 53717},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1551, col: 7, offset: 53717},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1551, col: 7, offset: 53717},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1551, col: 12, offset: 53722},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1555, col: 1, offset: 53895},
			expr: &choiceExpr{
				pos: position{line: 1555, col: 26, offset: 53920},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1555, col: 26, offset: 53920},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1555, col: 26, offset: 53920},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1555, col: 27, offset: 53921},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1555, col: 27, offset: 53921},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1555, col: 31, offset: 53925},
											expr: &litMatcher{
												pos:        position{line: 1555, col: 32, offset: 53926},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1555, col: 37, offset: 53931},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1555, col: 47, offset: 53941},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1555, col: 78, offset: 53972},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1557, col: 9, offset: 54174},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1557, col: 9, offset: 54174},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1557, col: 9, offset: 54174},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1557, col: 13, offset: 54178},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1557, col: 23, offset: 54188},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1557, col: 23, offset: 54188},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1557, col: 27, offset: 54192},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1557, col: 58, offset: 54223},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1561, col: 1, offset: 54444},
			expr: &seqExpr{
				pos: position{line: 1561, col: 34, offset: 54477},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1561, col: 34, offset: 54477},
						expr: &ruleRefExpr{
							pos:  position{line: 1561, col: 35, offset: 54478},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1561, col: 41, offset: 54484},
						expr: &ruleRefExpr{
							pos:  position{line: 1561, col: 41, offset: 54484},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1563, col: 1, offset: 54515},
			expr: &choiceExpr{
				pos: position{line: 1563, col: 33, offset: 54547},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1563, col: 33, offset: 54547},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1564, col: 7, offset: 54558},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1564, col: 7, offset: 54558},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1564, col: 15, offset: 54566},
								expr: &ruleRefExpr{
									pos:  position{line: 1564, col: 16, offset: 54567},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1565, col: 7, offset: 54581},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1566, col: 7, offset: 54609},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1567, col: 7, offset: 54632},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1568, col: 7, offset: 54650},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1569, col: 7, offset: 54669},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1569, col: 7, offset: 54669},
								expr: &ruleRefExpr{
									pos:  position{line: 1569, col: 7, offset: 54669},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1569, col: 14, offset: 54676},
								expr: &seqExpr{
									pos: position{line: 1569, col: 15, offset: 54677},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1569, col: 15, offset: 54677},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1569, col: 19, offset: 54681},
											expr: &litMatcher{
												pos:        position{line: 1569, col: 20, offset: 54682},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 7, offset: 54694},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1571, col: 7, offset: 54725},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1572, col: 7, offset: 54750},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1574, col: 1, offset: 54790},
			expr: &actionExpr{
				pos: position{line: 1575, col: 5, offset: 54822},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1575, col: 5, offset: 54822},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1575, col: 5, offset: 54822},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1575, col: 16, offset: 54833},
								expr: &ruleRefExpr{
									pos:  position{line: 1575, col: 17, offset: 54834},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1576, col: 5, offset: 54860},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1576, col: 11, offset: 54866},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1576, col: 11, offset: 54866},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1577, col: 11, offset: 54898},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1578, col: 11, offset: 54917},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 11, offset: 54938},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1580, col: 11, offset: 54962},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1581, col: 11, offset: 54986},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1584, col: 1, offset: 55087},
			expr: &choiceExpr{
				pos: position{line: 1585, col: 5, offset: 55133},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1585, col: 5, offset: 55133},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1586, col: 7, offset: 55230},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1586, col: 7, offset: 55230},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1586, col: 7, offset: 55230},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1586, col: 11, offset: 55234},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1590, col: 1, offset: 55405},
			expr: &choiceExpr{
				pos: position{line: 1591, col: 5, offset: 55430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1591, col: 5, offset: 55430},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1591, col: 5, offset: 55430},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1591, col: 5, offset: 55430},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1591, col: 18, offset: 55443},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1591, col: 40, offset: 55465},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1591, col: 45, offset: 55470},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1591, col: 55, offset: 55480},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1591, col: 86, offset: 55511},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1593, col: 9, offset: 55668},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1593, col: 9, offset: 55668},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1593, col: 9, offset: 55668},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1593, col: 22, offset: 55681},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1593, col: 44, offset: 55703},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1593, col: 49, offset: 55708},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1593, col: 59, offset: 55718},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1593, col: 90, offset: 55749},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1596, col: 9, offset: 55949},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1596, col: 9, offset: 55949},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1596, col: 9, offset: 55949},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1596, col: 22, offset: 55962},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1596, col: 44, offset: 55984},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1596, col: 48, offset: 55988},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1596, col: 58, offset: 55998},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1596, col: 89, offset: 56029},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1603, col: 1, offset: 56257},
			expr: &actionExpr{
				pos: position{line: 1603, col: 18, offset: 56274},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1603, col: 18, offset: 56274},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1603, col: 18, offset: 56274},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 22, offset: 56278},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1603, col: 31, offset: 56287},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1603, col: 53, offset: 56309},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1607, col: 1, offset: 56417},
			expr: &choiceExpr{
				pos: position{line: 1607, col: 25, offset: 56441},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1607, col: 25, offset: 56441},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1607, col: 38, offset: 56454},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1609, col: 1, offset: 56473},
			expr: &actionExpr{
				pos: position{line: 1609, col: 21, offset: 56493},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1609, col: 21, offset: 56493},
					expr: &charClassMatcher{
						pos:        position{line: 1609, col: 21, offset: 56493},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1613, col: 1, offset: 56578},
			expr: &actionExpr{
				pos: position{line: 1613, col: 25, offset: 56602},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 25, offset: 56602},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1613, col: 25, offset: 56602},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1613, col: 38, offset: 56615},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1613, col: 60, offset: 56637},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1613, col: 64, offset: 56641},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1613, col: 73, offset: 56650},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1613, col: 95, offset: 56672},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1620, col: 1, offset: 56890},
			expr: &actionExpr{
				pos: position{line: 1620, col: 20, offset: 56909},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1620, col: 20, offset: 56909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1620, col: 20, offset: 56909},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1620, col: 24, offset: 56913},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1620, col: 33, offset: 56922},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1620, col: 57, offset: 56946},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1624, col: 1, offset: 57056},
			expr: &choiceExpr{
				pos: position{line: 1624, col: 27, offset: 57082},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1624, col: 27, offset: 57082},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1624, col: 40, offset: 57095},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1626, col: 1, offset: 57116},
			expr: &actionExpr{
				pos: position{line: 1626, col: 23, offset: 57138},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1626, col: 23, offset: 57138},
					expr: &charClassMatcher{
						pos:        position{line: 1626, col: 23, offset: 57138},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1630, col: 1, offset: 57223},
			expr: &actionExpr{
				pos: position{line: 1630, col: 27, offset: 57249},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1630, col: 27, offset: 57249},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1630, col: 27, offset: 57249},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1630, col: 40, offset: 57262},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1630, col: 62, offset: 57284},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 66, offset: 57288},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1630, col: 75, offset: 57297},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1630, col: 99, offset: 57321},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1638, col: 1, offset: 57633},
			expr: &choiceExpr{
				pos: position{line: 1638, col: 17, offset: 57649},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1638, col: 17, offset: 57649},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 38, offset: 57670},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1640, col: 1, offset: 57690},
			expr: &actionExpr{
				pos: position{line: 1640, col: 23, offset: 57712},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1640, col: 23, offset: 57712},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1640, col: 23, offset: 57712},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1640, col: 46, offset: 57735},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1640, col: 55, offset: 57744},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1640, col: 82, offset: 57771},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1644, col: 1, offset: 57883},
			expr: &actionExpr{
				pos: position{line: 1644, col: 31, offset: 57913},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1644, col: 31, offset: 57913},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1644, col: 41, offset: 57923},
						expr: &ruleRefExpr{
							pos:  position{line: 1644, col: 41, offset: 57923},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1648, col: 1, offset: 58009},
			expr: &seqExpr{
				pos: position{line: 1648, col: 27, offset: 58035},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1648, col: 27, offset: 58035},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1648, col: 32, offset: 58040},
						expr: &charClassMatcher{
							pos:        position{line: 1648, col: 33, offset: 58041},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1650, col: 1, offset: 58052},
			expr: &litMatcher{
				pos:        position{line: 1650, col: 25, offset: 58076},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1653, col: 1, offset: 58164},
			expr: &actionExpr{
				pos: position{line: 1654, col: 5, offset: 58198},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1654, col: 5, offset: 58198},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1655, col: 9, offset: 58216},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1655, col: 9, offset: 58216},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1655, col: 9, offset: 58216},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1655, col: 19, offset: 58226},
										expr: &ruleRefExpr{
											pos:  position{line: 1655, col: 20, offset: 58227},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1656, col: 11, offset: 58283},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1656, col: 11, offset: 58283},
										expr: &ruleRefExpr{
											pos:  position{line: 1656, col: 11, offset: 58283},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1656, col: 18, offset: 58290},
										expr: &ruleRefExpr{
											pos:  position{line: 1656, col: 19, offset: 58291},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1657, col: 12, offset: 58323},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1657, col: 12, offset: 58323},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1657, col: 12, offset: 58323},
											expr: &litMatcher{
												pos:        position{line: 1657, col: 13, offset: 58324},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1657, col: 17, offset: 58328},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1657, col: 26, offset: 58337},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1658, col: 11, offset: 58409},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1659, col: 11, offset: 58450},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1660, col: 11, offset: 58479},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1665, col: 1, offset: 58558},
			expr: &actionExpr{
				pos: position{line: 1666, col: 5, offset: 58596},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1666, col: 5, offset: 58596},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1666, col: 5, offset: 58596},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1666, col: 16, offset: 58607},
								expr: &ruleRefExpr{
									pos:  position{line: 1666, col: 17, offset: 58608},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1667, col: 5, offset: 58634},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1667, col: 11, offset: 58640},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1667, col: 11, offset: 58640},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1668, col: 11, offset: 58659},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1669, col: 12, offset: 58681},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1669, col: 12, offset: 58681},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1669, col: 12, offset: 58681},
													expr: &litMatcher{
														pos:        position{line: 1669, col: 13, offset: 58682},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1669, col: 18, offset: 58687},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1669, col: 27, offset: 58696},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1670, col: 11, offset: 58745},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1671, col: 11, offset: 58769},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1672, col: 11, offset: 58795},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1676, col: 1, offset: 58892},
			expr: &choiceExpr{
				pos: position{line: 1676, col: 41, offset: 58932},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1676, col: 41, offset: 58932},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1676, col: 55, offset: 58946},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1676, col: 55, offset: 58946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1676, col: 55, offset: 58946},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1676, col: 59, offset: 58950},
									expr: &litMatcher{
										pos:        position{line: 1676, col: 60, offset: 58951},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1680, col: 1, offset: 59023},
			expr: &actionExpr{
				pos: position{line: 1680, col: 23, offset: 59045},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1680, col: 23, offset: 59045},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1680, col: 23, offset: 59045},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1680, col: 46, offset: 59068},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1680, col: 55, offset: 59077},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1680, col: 82, offset: 59104},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1684, col: 1, offset: 59216},
			expr: &actionExpr{
				pos: position{line: 1684, col: 31, offset: 59246},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1684, col: 31, offset: 59246},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1684, col: 41, offset: 59256},
						expr: &ruleRefExpr{
							pos:  position{line: 1684, col: 41, offset: 59256},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1689, col: 1, offset: 59424},
			expr: &actionExpr{
				pos: position{line: 1689, col: 30, offset: 59453},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1689, col: 30, offset: 59453},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1690, col: 5, offset: 59467},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1690, col: 5, offset: 59467},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1690, col: 5, offset: 59467},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1690, col: 15, offset: 59477},
										expr: &ruleRefExpr{
											pos:  position{line: 1690, col: 16, offset: 59478},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1691, col: 7, offset: 59530},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1691, col: 7, offset: 59530},
										expr: &ruleRefExpr{
											pos:  position{line: 1691, col: 7, offset: 59530},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1691, col: 14, offset: 59537},
										expr: &ruleRefExpr{
											pos:  position{line: 1691, col: 15, offset: 59538},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1692, col: 7, offset: 59565},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1693, col: 7, offset: 59602},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1694, col: 7, offset: 59627},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1698, col: 1, offset: 59701},
			expr: &actionExpr{
				pos: position{line: 1699, col: 5, offset: 59739},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1699, col: 5, offset: 59739},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1699, col: 5, offset: 59739},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1699, col: 16, offset: 59750},
								expr: &ruleRefExpr{
									pos:  position{line: 1699, col: 17, offset: 59751},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1700, col: 5, offset: 59777},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1700, col: 11, offset: 59783},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1700, col: 11, offset: 59783},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1701, col: 11, offset: 59802},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1702, col: 12, offset: 59824},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1702, col: 12, offset: 59824},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1702, col: 12, offset: 59824},
													expr: &litMatcher{
														pos:        position{line: 1702, col: 13, offset: 59825},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1702, col: 19, offset: 59831},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1702, col: 28, offset: 59840},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1703, col: 11, offset: 59889},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1704, col: 11, offset: 59913},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1705, col: 11, offset: 59939},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1709, col: 1, offset: 60036},
			expr: &seqExpr{
				pos: position{line: 1709, col: 27, offset: 60062},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1709, col: 27, offset: 60062},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1709, col: 33, offset: 60068},
						expr: &charClassMatcher{
							pos:        position{line: 1709, col: 34, offset: 60069},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1711, col: 1, offset: 60080},
			expr: &litMatcher{
				pos:        position{line: 1711, col: 25, offset: 60104},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1713, col: 1, offset: 60111},
			expr: &actionExpr{
				pos: position{line: 1713, col: 41, offset: 60151},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1713, col: 42, offset: 60152},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1713, col: 42, offset: 60152},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1713, col: 56, offset: 60166},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1713, col: 56, offset: 60166},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1713, col: 60, offset: 60170},
									expr: &litMatcher{
										pos:        position{line: 1713, col: 61, offset: 60171},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1722, col: 1, offset: 60437},
			expr: &actionExpr{
				pos: position{line: 1723, col: 5, offset: 60453},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1723, col: 5, offset: 60453},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1723, col: 5, offset: 60453},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1723, col: 12, offset: 60460},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1723, col: 12, offset: 60460},
									expr: &litMatcher{
										pos:        position{line: 1723, col: 13, offset: 60461},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1727, col: 5, offset: 60569},
							run: (*parser).callonSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 1739, col: 5, offset: 61075},
							expr: &ruleRefExpr{
								pos:  position{line: 1739, col: 5, offset: 61075},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1739, col: 12, offset: 61082},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1739, col: 19, offset: 61089},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1739, col: 36, offset: 61106},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 1763, col: 1, offset: 61937},
			expr: &actionExpr{
				pos: position{line: 1763, col: 20, offset: 61956},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1763, col: 20, offset: 61956},
					expr: &charClassMatcher{
						pos:        position{line: 1763, col: 20, offset: 61956},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1774, col: 1, offset: 62303},
			expr: &actionExpr{
				pos: position{line: 1774, col: 20, offset: 62322},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1774, col: 20, offset: 62322},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1774, col: 20, offset: 62322},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1774, col: 29, offset: 62331},
								expr: &choiceExpr{
									pos: position{line: 1775, col: 5, offset: 62337},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1775, col: 5, offset: 62337},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1776, col: 7, offset: 62354},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1777, col: 7, offset: 62378},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1778, col: 7, offset: 62406},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1779, col: 7, offset: 62519},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1779, col: 17, offset: 62529},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 1784, col: 1, offset: 62626},
			expr: &actionExpr{
				pos: position{line: 1784, col: 27, offset: 62652},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1784, col: 27, offset: 62652},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1784, col: 27, offset: 62652},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1784, col: 36, offset: 62661},
								expr: &choiceExpr{
									pos: position{line: 1785, col: 5, offset: 62667},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1785, col: 5, offset: 62667},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1786, col: 7, offset: 62684},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1787, col: 7, offset: 62712},
											name: "Quotes",
										},
										&ruleRefExpr{
											pos:  position{line: 1788, col: 7, offset: 62725},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1789, col: 7, offset: 62838},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1789, col: 17, offset: 62848},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1794, col: 1, offset: 62948},
			expr: &actionExpr{
				pos: position{line: 1794, col: 16, offset: 62963},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1794, col: 16, offset: 62963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1794, col: 16, offset: 62963},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1794, col: 25, offset: 62972},
								expr: &choiceExpr{
									pos: position{line: 1795, col: 5, offset: 62978},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1795, col: 5, offset: 62978},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1796, col: 7, offset: 62995},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1797, col: 7, offset: 63019},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1798, col: 7, offset: 63042},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1799, col: 7, offset: 63054},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1800, col: 7, offset: 63082},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1801, col: 7, offset: 63195},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1802, col: 7, offset: 63213},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1802, col: 17, offset: 63223},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1807, col: 1, offset: 63319},
			expr: &actionExpr{
				pos: position{line: 1807, col: 16, offset: 63334},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1807, col: 16, offset: 63334},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1807, col: 16, offset: 63334},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1807, col: 25, offset: 63343},
								expr: &choiceExpr{
									pos: position{line: 1808, col: 5, offset: 63349},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1808, col: 5, offset: 63349},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1809, col: 7, offset: 63366},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1810, col: 7, offset: 63384},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1811, col: 7, offset: 63497},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1811, col: 17, offset: 63507},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1817, col: 1, offset: 63667},
			expr: &actionExpr{
				pos: position{line: 1817, col: 14, offset: 63680},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1817, col: 14, offset: 63680},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1817, col: 14, offset: 63680},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1817, col: 23, offset: 63689},
								expr: &ruleRefExpr{
									pos:  position{line: 1817, col: 24, offset: 63690},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1817, col: 45, offset: 63711},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroupElement",
			pos:  position{line: 1821, col: 1, offset: 63767},
			expr: &actionExpr{
				pos: position{line: 1821, col: 21, offset: 63787},
				run: (*parser).callonNoneGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1821, col: 21, offset: 63787},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1821, col: 21, offset: 63787},
							expr: &ruleRefExpr{
								pos:  position{line: 1821, col: 22, offset: 63788},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1822, col: 5, offset: 63796},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1822, col: 13, offset: 63804},
								expr: &choiceExpr{
									pos: position{line: 1823, col: 9, offset: 63814},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1823, col: 9, offset: 63814},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1824, col: 11, offset: 63835},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1825, col: 11, offset: 63952},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1825, col: 21, offset: 63962},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1831, col: 1, offset: 64212},
			expr: &actionExpr{
				pos: position{line: 1831, col: 16, offset: 64227},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1831, col: 16, offset: 64227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1831, col: 16, offset: 64227},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1831, col: 25, offset: 64236},
								expr: &ruleRefExpr{
									pos:  position{line: 1831, col: 26, offset: 64237},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1831, col: 47, offset: 64258},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1835, col: 1, offset: 64314},
			expr: &actionExpr{
				pos: position{line: 1835, col: 23, offset: 64336},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1835, col: 23, offset: 64336},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1835, col: 23, offset: 64336},
							expr: &ruleRefExpr{
								pos:  position{line: 1835, col: 24, offset: 64337},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1836, col: 5, offset: 64345},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1837, col: 9, offset: 64363},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1837, col: 9, offset: 64363},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1838, col: 11, offset: 64384},
										name: "LineBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1839, col: 11, offset: 64435},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1840, col: 11, offset: 64451},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 1841, col: 11, offset: 64469},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1842, col: 11, offset: 64497},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1843, col: 11, offset: 64524},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1844, col: 11, offset: 64540},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1845, col: 11, offset: 64572},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1846, col: 11, offset: 64594},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1847, col: 11, offset: 64616},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1848, col: 11, offset: 64642},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1849, col: 11, offset: 64759},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1854, col: 1, offset: 64853},
			expr: &actionExpr{
				pos: position{line: 1854, col: 16, offset: 64868},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1854, col: 16, offset: 64868},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1854, col: 16, offset: 64868},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1854, col: 25, offset: 64877},
								expr: &choiceExpr{
									pos: position{line: 1855, col: 5, offset: 64883},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1855, col: 5, offset: 64883},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1856, col: 7, offset: 64900},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1857, col: 7, offset: 64912},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1858, col: 7, offset: 65025},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1858, col: 17, offset: 65035},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1863, col: 1, offset: 65137},
			expr: &actionExpr{
				pos: position{line: 1863, col: 22, offset: 65158},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1863, col: 22, offset: 65158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1863, col: 22, offset: 65158},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1863, col: 31, offset: 65167},
								expr: &choiceExpr{
									pos: position{line: 1864, col: 5, offset: 65173},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1864, col: 5, offset: 65173},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1865, col: 7, offset: 65190},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1866, col: 7, offset: 65208},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1867, col: 7, offset: 65321},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1867, col: 17, offset: 65331},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1872, col: 1, offset: 65458},
			expr: &actionExpr{
				pos: position{line: 1872, col: 27, offset: 65484},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1872, col: 27, offset: 65484},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1872, col: 27, offset: 65484},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1872, col: 36, offset: 65493},
								expr: &choiceExpr{
									pos: position{line: 1873, col: 5, offset: 65499},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1873, col: 5, offset: 65499},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1874, col: 7, offset: 65516},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1875, col: 7, offset: 65539},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1876, col: 7, offset: 65652},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1876, col: 17, offset: 65662},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 1880, col: 1, offset: 65718},
			expr: &actionExpr{
				pos: position{line: 1880, col: 18, offset: 65735},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 1880, col: 18, offset: 65735},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1880, col: 18, offset: 65735},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1880, col: 27, offset: 65744},
								expr: &choiceExpr{
									pos: position{line: 1881, col: 5, offset: 65750},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1881, col: 5, offset: 65750},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1882, col: 7, offset: 65767},
											name: "Callout",
										},
										&ruleRefExpr{
											pos:  position{line: 1883, col: 7, offset: 65823},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1884, col: 7, offset: 65846},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1885, col: 7, offset: 65959},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1885, col: 17, offset: 65969},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1889, col: 1, offset: 66029},
			expr: &actionExpr{
				pos: position{line: 1891, col: 5, offset: 66111},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1891, col: 5, offset: 66111},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1891, col: 5, offset: 66111},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1894, col: 5, offset: 66171},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1895, col: 9, offset: 66189},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1895, col: 9, offset: 66189},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1896, col: 11, offset: 66210},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1897, col: 11, offset: 66233},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1898, col: 11, offset: 66249},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1899, col: 11, offset: 66278},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1900, col: 11, offset: 66304},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1901, col: 11, offset: 66330},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1902, col: 11, offset: 66357},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1903, col: 11, offset: 66383},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1904, col: 11, offset: 66412},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1908, col: 1, offset: 66468},
			expr: &actionExpr{
				pos: position{line: 1910, col: 5, offset: 66556},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1910, col: 5, offset: 66556},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1910, col: 5, offset: 66556},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1913, col: 5, offset: 66628},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1914, col: 9, offset: 66646},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1914, col: 9, offset: 66646},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1914, col: 33, offset: 66670},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1914, col: 57, offset: 66694},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1919, col: 1, offset: 66754},
			expr: &actionExpr{
				pos: position{line: 1921, col: 5, offset: 66840},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1921, col: 5, offset: 66840},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1921, col: 5, offset: 66840},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1924, col: 5, offset: 66910},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1925, col: 9, offset: 66928},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1930, col: 1, offset: 66981},
			expr: &actionExpr{
				pos: position{line: 1932, col: 5, offset: 67057},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1932, col: 5, offset: 67057},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1932, col: 5, offset: 67057},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1935, col: 5, offset: 67117},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1936, col: 9, offset: 67135},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1936, col: 9, offset: 67135},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1937, col: 11, offset: 67157},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1941, col: 1, offset: 67216},
			expr: &actionExpr{
				pos: position{line: 1943, col: 5, offset: 67298},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1943, col: 5, offset: 67298},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1943, col: 5, offset: 67298},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1946, col: 5, offset: 67364},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1947, col: 9, offset: 67382},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1952, col: 1, offset: 67432},
			expr: &actionExpr{
				pos: position{line: 1954, col: 5, offset: 67519},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1954, col: 5, offset: 67519},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1954, col: 5, offset: 67519},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1957, col: 5, offset: 67590},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1959, col: 9, offset: 67688},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1959, col: 9, offset: 67688},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1959, col: 9, offset: 67688},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1962, col: 11, offset: 67792},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1962, col: 12, offset: 67793},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1962, col: 12, offset: 67793},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1962, col: 18, offset: 67799},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1962, col: 24, offset: 67805},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1972, col: 1, offset: 68034},
			expr: &choiceExpr{
				pos: position{line: 1972, col: 11, offset: 68044},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1972, col: 11, offset: 68044},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1972, col: 24, offset: 68057},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1972, col: 36, offset: 68069},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1972, col: 48, offset: 68081},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1972, col: 61, offset: 68094},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1972, col: 72, offset: 68105},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1974, col: 1, offset: 68124},
			expr: &actionExpr{
				pos: position{line: 1974, col: 15, offset: 68138},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1974, col: 15, offset: 68138},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1978, col: 1, offset: 68200},
			expr: &litMatcher{
				pos:        position{line: 1978, col: 18, offset: 68217},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1980, col: 1, offset: 68240},
			expr: &actionExpr{
				pos: position{line: 1980, col: 14, offset: 68253},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1980, col: 14, offset: 68253},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1984, col: 1, offset: 68316},
			expr: &actionExpr{
				pos: position{line: 1984, col: 14, offset: 68329},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1984, col: 14, offset: 68329},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1988, col: 1, offset: 68393},
			expr: &actionExpr{
				pos: position{line: 1988, col: 15, offset: 68407},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1988, col: 15, offset: 68407},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1992, col: 1, offset: 68470},
			expr: &actionExpr{
				pos: position{line: 1992, col: 13, offset: 68482},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1992, col: 13, offset: 68482},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2000, col: 1, offset: 68767},
			expr: &actionExpr{
				pos: position{line: 2000, col: 22, offset: 68788},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2000, col: 22, offset: 68788},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2000, col: 22, offset: 68788},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2000, col: 31, offset: 68797},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2000, col: 35, offset: 68801},
							expr: &charClassMatcher{
								pos:        position{line: 2000, col: 36, offset: 68802},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 2007, col: 1, offset: 69080},
			expr: &actionExpr{
				pos: position{line: 2007, col: 18, offset: 69097},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 2007, col: 18, offset: 69097},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 2007, col: 19, offset: 69098},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2007, col: 19, offset: 69098},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 2007, col: 27, offset: 69106},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 2007, col: 37, offset: 69116},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 2007, col: 45, offset: 69124},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 2007, col: 55, offset: 69134},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 2007, col: 63, offset: 69142},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2007, col: 72, offset: 69151},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2014, col: 1, offset: 69310},
			expr: &actionExpr{
				pos: position{line: 2015, col: 5, offset: 69333},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2015, col: 5, offset: 69333},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2015, col: 5, offset: 69333},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 2015, col: 11, offset: 69339},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 2016, col: 5, offset: 69359},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 2020, col: 5, offset: 69499},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2021, col: 5, offset: 69509},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2021, col: 12, offset: 69516},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 5, offset: 69537},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2022, col: 23, offset: 69555},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2026, col: 1, offset: 69686},
			expr: &actionExpr{
				pos: position{line: 2027, col: 5, offset: 69710},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2027, col: 5, offset: 69710},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2027, col: 5, offset: 69710},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 2027, col: 11, offset: 69716},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 2028, col: 5, offset: 69736},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 2032, col: 5, offset: 69876},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2033, col: 5, offset: 69885},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2033, col: 12, offset: 69892},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 2034, col: 5, offset: 69913},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2034, col: 23, offset: 69931},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 2038, col: 1, offset: 70063},
			expr: &actionExpr{
				pos: position{line: 2038, col: 18, offset: 70080},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2038, col: 19, offset: 70081},
					expr: &charClassMatcher{
						pos:        position{line: 2038, col: 19, offset: 70081},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 2042, col: 1, offset: 70138},
			expr: &actionExpr{
				pos: position{line: 2042, col: 19, offset: 70156},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2042, col: 19, offset: 70156},
					expr: &charClassMatcher{
						pos:        position{line: 2042, col: 19, offset: 70156},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2049, col: 1, offset: 70318},
			expr: &charClassMatcher{
				pos:        position{line: 2049, col: 13, offset: 70330},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2051, col: 1, offset: 70340},
			expr: &choiceExpr{
				pos: position{line: 2051, col: 16, offset: 70355},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2051, col: 16, offset: 70355},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2051, col: 22, offset: 70361},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2051, col: 28, offset: 70367},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2051, col: 34, offset: 70373},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2051, col: 40, offset: 70379},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2051, col: 46, offset: 70385},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2053, col: 1, offset: 70391},
			expr: &actionExpr{
				pos: position{line: 2053, col: 14, offset: 70404},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2053, col: 14, offset: 70404},
					expr: &charClassMatcher{
						pos:        position{line: 2053, col: 14, offset: 70404},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2057, col: 1, offset: 70458},
			expr: &choiceExpr{
				pos: position{line: 2061, col: 5, offset: 70785},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2061, col: 5, offset: 70785},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2061, col: 5, offset: 70785},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2061, col: 5, offset: 70785},
									expr: &charClassMatcher{
										pos:        position{line: 2061, col: 5, offset: 70785},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2061, col: 15, offset: 70795},
									expr: &choiceExpr{
										pos: position{line: 2061, col: 17, offset: 70797},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2061, col: 17, offset: 70797},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2061, col: 30, offset: 70810},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2063, col: 9, offset: 70879},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2063, col: 9, offset: 70879},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 9, offset: 70879},
									expr: &charClassMatcher{
										pos:        position{line: 2063, col: 9, offset: 70879},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 19, offset: 70889},
									expr: &seqExpr{
										pos: position{line: 2063, col: 20, offset: 70890},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2063, col: 20, offset: 70890},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2063, col: 27, offset: 70897},
												expr: &charClassMatcher{
													pos:        position{line: 2063, col: 27, offset: 70897},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2068, col: 1, offset: 70989},
			expr: &choiceExpr{
				pos: position{line: 2072, col: 5, offset: 71182},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2072, col: 5, offset: 71182},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2072, col: 5, offset: 71182},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2072, col: 5, offset: 71182},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 2072, col: 14, offset: 71191},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 2072, col: 14, offset: 71191},
											expr: &charClassMatcher{
												pos:        position{line: 2072, col: 14, offset: 71191},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2075, col: 5, offset: 71272},
									expr: &choiceExpr{
										pos: position{line: 2075, col: 7, offset: 71274},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2075, col: 7, offset: 71274},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2075, col: 17, offset: 71284},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 2075, col: 47, offset: 71314},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2077, col: 9, offset: 71357},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2081, col: 1, offset: 71482},
			expr: &actionExpr{
				pos: position{line: 2081, col: 12, offset: 71493},
				run: (*parser).callonAnyChar1,
				expr: &anyMatcher{
					line: 2081, col: 12, offset: 71493,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2085, col: 1, offset: 71560},
			expr: &actionExpr{
				pos: position{line: 2085, col: 17, offset: 71576},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2085, col: 17, offset: 71576},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2085, col: 22, offset: 71581},
						expr: &choiceExpr{
							pos: position{line: 2085, col: 23, offset: 71582},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2085, col: 23, offset: 71582},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2085, col: 34, offset: 71593},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2089, col: 1, offset: 71682},
			expr: &actionExpr{
				pos: position{line: 2089, col: 13, offset: 71694},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2089, col: 13, offset: 71694},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2089, col: 13, offset: 71694},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2089, col: 20, offset: 71701},
								expr: &ruleRefExpr{
									pos:  position{line: 2089, col: 21, offset: 71702},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2089, col: 30, offset: 71711},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2089, col: 35, offset: 71716},
								expr: &choiceExpr{
									pos: position{line: 2089, col: 36, offset: 71717},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2089, col: 36, offset: 71717},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2089, col: 47, offset: 71728},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2093, col: 1, offset: 71821},
			expr: &actionExpr{
				pos: position{line: 2093, col: 23, offset: 71843},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2093, col: 23, offset: 71843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2093, col: 23, offset: 71843},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2093, col: 31, offset: 71851},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2093, col: 39, offset: 71859},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2093, col: 44, offset: 71864},
								expr: &choiceExpr{
									pos: position{line: 2093, col: 45, offset: 71865},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2093, col: 45, offset: 71865},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2093, col: 56, offset: 71876},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2097, col: 1, offset: 71969},
			expr: &actionExpr{
				pos: position{line: 2097, col: 13, offset: 71981},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 2097, col: 13, offset: 71981},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2097, col: 22, offset: 71990},
						expr: &choiceExpr{
							pos: position{line: 2099, col: 5, offset: 72029},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2099, col: 5, offset: 72029},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2099, col: 5, offset: 72029},
										expr: &charClassMatcher{
											pos:        position{line: 2099, col: 6, offset: 72030},
											val:        "[^\\r\\n[\\]\\uFFFD{&<> ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2102, col: 7, offset: 72169},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 7, offset: 72198},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 2104, col: 7, offset: 72221},
									run: (*parser).callonFilename10,
									expr: &litMatcher{
										pos:        position{line: 2104, col: 7, offset: 72221},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2110, col: 1, offset: 72359},
			expr: &choiceExpr{
				pos: position{line: 2110, col: 11, offset: 72369},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2110, col: 11, offset: 72369},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2110, col: 23, offset: 72381},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2110, col: 36, offset: 72394},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2110, col: 47, offset: 72405},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2110, col: 58, offset: 72416},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2112, col: 1, offset: 72427},
			expr: &actionExpr{
				pos: position{line: 2112, col: 7, offset: 72433},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2112, col: 7, offset: 72433},
					expr: &charClassMatcher{
						pos:        position{line: 2112, col: 7, offset: 72433},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2116, col: 1, offset: 72566},
			expr: &actionExpr{
				pos: position{line: 2116, col: 10, offset: 72575},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2116, col: 10, offset: 72575},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2120, col: 1, offset: 72625},
			expr: &actionExpr{
				pos: position{line: 2120, col: 11, offset: 72635},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2120, col: 11, offset: 72635},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2120, col: 11, offset: 72635},
							expr: &litMatcher{
								pos:        position{line: 2120, col: 11, offset: 72635},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2120, col: 16, offset: 72640},
							expr: &ruleRefExpr{
								pos:  position{line: 2120, col: 16, offset: 72640},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2124, col: 1, offset: 72700},
			expr: &choiceExpr{
				pos: position{line: 2124, col: 10, offset: 72709},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2124, col: 10, offset: 72709},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2124, col: 16, offset: 72715},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2124, col: 16, offset: 72715},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2128, col: 1, offset: 72764},
			expr: &choiceExpr{
				pos: position{line: 2128, col: 12, offset: 72775},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2128, col: 12, offset: 72775},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2128, col: 19, offset: 72782},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 2128, col: 28, offset: 72791},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 2128, col: 28, offset: 72791},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2132, col: 1, offset: 72875},
			expr: &notExpr{
				pos: position{line: 2132, col: 8, offset: 72882},
				expr: &anyMatcher{
					line: 2132, col: 9, offset: 72883,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2134, col: 1, offset: 72886},
			expr: &choiceExpr{
				pos: position{line: 2134, col: 8, offset: 72893},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2134, col: 8, offset: 72893},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 2134, col: 14, offset: 72899},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock5(delimiter interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block
	return c.isValidBlockDelimiter(delimiter.(*types.BlockDelimiter))

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock5(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock1(stack["delimiter"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onAdmonition7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAdmonition7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition7()
}

func (c *current) onAdmonition1(kind, content interface{}) (interface{}, error) {

	return types.NewAdmonitionLine(kind.(string), content.(string))

}

func (p *parser) callonAdmonition1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition1(stack["kind"], stack["content"])
}

func (c *current) onAttributeDeclaration3() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonAttributeDeclaration3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration3()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes13(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue15()
}

func (c *current) onSingleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue18()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue15()
}

func (c *current) onDoubleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue18()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue21() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue7(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue7(stack["element"])
}

func (c *current) onUnquotedAttributeValue23(elements interface{}) (bool, error) {
	// post-parsing condition to verify that the value is not an empty string
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue23(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.(types.InlineElements))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() error {
	// for images, we always enable the 'normal' substitutions
	return c.setSubstitutionPhase("normal")

}

func (p *parser) callonImageBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onOrderedListElement1(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content.([]interface{}))
}

func (p *parser) callonOrderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElement1(stack["prefix"], stack["content"])
}

func (c *current) onOrderedListElementPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix10()
}

func (c *current) onOrderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix13(stack["depth"])
}

func (c *current) onOrderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOrderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix7(stack["depth"])
}

func (c *current) onOrderedListElementPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOrderedListElementPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix14()
}

func (c *current) onOrderedListElementPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOrderedListElementPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix19()
}

func (c *current) onOrderedListElementPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOrderedListElementPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix23()
}

func (c *current) onOrderedListElementPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOrderedListElementPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix27()
}

func (c *current) onOrderedListElementPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOrderedListElementPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix32()
}

func (c *current) onOrderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix1(stack["prefix"])
}

func (c *current) onOrderedListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonOrderedListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementContent1()
}

func (c *current) onUnorderedListElement1(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content.([]interface{}))

}

func (p *parser) callonUnorderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElement1(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListElementPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix10()
}

func (c *current) onUnorderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix13(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonUnorderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix7(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix15() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonUnorderedListElementPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix15()
}

func (c *current) onUnorderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListElementCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle7()
}

func (c *current) onUnorderedListElementCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle9()
}

func (c *current) onUnorderedListElementCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle11()
}

func (c *current) onUnorderedListElementCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListElementCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonUnorderedListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementContent1()
}

func (c *current) onLabeledListItem1(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term.(string), description)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1()
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListElement1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.([]interface{}))

}

func (p *parser) callonCalloutListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElement1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListElementPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListElementPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix5()
}

func (c *current) onCalloutListElementPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix1(stack["ref"])
}

func (c *current) onCalloutListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonCalloutListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementContent1()
}

func (c *current) onListElementContinuation1() (interface{}, error) {
	return types.NewListElementContinuation()
}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1()
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onItalicWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonItalicWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicWord1()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return []interface{}{
		types.StringElement{Content: string(c.text)},
	}, nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["elements"])
}

func (c *current) onNoneGroupElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNoneGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroupElement1(stack["element"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename10()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

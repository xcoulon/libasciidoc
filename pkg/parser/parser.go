// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragments",
			pos:  position{line: 21, col: 1, offset: 347},
			expr: &actionExpr{
				pos: position{line: 22, col: 5, offset: 373},
				run: (*parser).callonDocumentFragments1,
				expr: &seqExpr{
					pos: position{line: 22, col: 5, offset: 373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 5, offset: 373},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 22, col: 17, offset: 385},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 18, offset: 386},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 404},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 23, col: 13, offset: 412},
								expr: &ruleRefExpr{
									pos:  position{line: 23, col: 13, offset: 412},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 434},
							label: "fragments",
							expr: &zeroOrMoreExpr{
								pos: position{line: 24, col: 15, offset: 444},
								expr: &ruleRefExpr{
									pos:  position{line: 24, col: 16, offset: 445},
									name: "DocumentFragment",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 35, offset: 464},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 31, col: 1, offset: 696},
			expr: &actionExpr{
				pos: position{line: 31, col: 25, offset: 720},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 31, col: 25, offset: 720},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 31, col: 25, offset: 720},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 31, col: 29, offset: 724},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 35, offset: 730},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 31, col: 50, offset: 745},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 32, col: 9, offset: 758},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 15, offset: 764},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 16, offset: 765},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 32, col: 44, offset: 793},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 41, col: 1, offset: 1130},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1147},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1147},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 41, col: 18, offset: 1147},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 41, col: 28, offset: 1157},
							expr: &charClassMatcher{
								pos:        position{line: 41, col: 29, offset: 1158},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 45, col: 1, offset: 1206},
			expr: &actionExpr{
				pos: position{line: 45, col: 30, offset: 1235},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 45, col: 30, offset: 1235},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 45, col: 30, offset: 1235},
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 30, offset: 1235},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 45, col: 37, offset: 1242},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 45, col: 46, offset: 1251},
								expr: &choiceExpr{
									pos: position{line: 46, col: 5, offset: 1257},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 46, col: 6, offset: 1258},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 46, col: 6, offset: 1258},
												expr: &charClassMatcher{
													pos:        position{line: 46, col: 6, offset: 1258},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 49, col: 5, offset: 1337},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 50, col: 6, offset: 1366},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 50, col: 6, offset: 1366},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 57, col: 1, offset: 1533},
			expr: &choiceExpr{
				pos: position{line: 57, col: 19, offset: 1551},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 57, col: 19, offset: 1551},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 57, col: 19, offset: 1551},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 57, col: 19, offset: 1551},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 57, col: 24, offset: 1556},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 57, col: 30, offset: 1562},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 57, col: 45, offset: 1577},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 57, col: 49, offset: 1581},
									expr: &ruleRefExpr{
										pos:  position{line: 57, col: 49, offset: 1581},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 57, col: 56, offset: 1588},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1648},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1648},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 5, offset: 1648},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 9, offset: 1652},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 15, offset: 1658},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 59, col: 30, offset: 1673},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 59, col: 35, offset: 1678},
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 35, offset: 1678},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 42, offset: 1685},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 66, col: 1, offset: 1867},
			expr: &actionExpr{
				pos: position{line: 67, col: 5, offset: 1891},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 67, col: 5, offset: 1891},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 67, col: 16, offset: 1902},
						expr: &choiceExpr{
							pos: position{line: 69, col: 9, offset: 1969},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 69, col: 10, offset: 1970},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 69, col: 10, offset: 1970},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 69, col: 10, offset: 1970},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 69, col: 18, offset: 1978},
													name: "ShortHandAnchor",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 69, col: 35, offset: 1995},
												expr: &ruleRefExpr{
													pos:  position{line: 69, col: 35, offset: 1995},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 69, col: 42, offset: 2002},
												name: "Newline",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 73, col: 12, offset: 2120},
									run: (*parser).callonBlockAttributes12,
									expr: &seqExpr{
										pos: position{line: 73, col: 12, offset: 2120},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 73, col: 12, offset: 2120},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 73, col: 19, offset: 2127},
													name: "ShortHandTitle",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 73, col: 35, offset: 2143},
												expr: &ruleRefExpr{
													pos:  position{line: 73, col: 35, offset: 2143},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 73, col: 42, offset: 2150},
												name: "Newline",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 77, col: 12, offset: 2238},
									run: (*parser).callonBlockAttributes19,
									expr: &seqExpr{
										pos: position{line: 77, col: 12, offset: 2238},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 77, col: 12, offset: 2238},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 77, col: 24, offset: 2250},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 77, col: 44, offset: 2270},
												expr: &ruleRefExpr{
													pos:  position{line: 77, col: 44, offset: 2270},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 77, col: 51, offset: 2277},
												name: "Newline",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 90, col: 1, offset: 2593},
			expr: &actionExpr{
				pos: position{line: 91, col: 5, offset: 2617},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 91, col: 5, offset: 2617},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 5, offset: 2617},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 5, offset: 2625},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 92, col: 16, offset: 2636},
								expr: &choiceExpr{
									pos: position{line: 92, col: 17, offset: 2637},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 92, col: 17, offset: 2637},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 92, col: 37, offset: 2657},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 93, col: 5, offset: 2678},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 98, col: 1, offset: 2806},
			expr: &actionExpr{
				pos: position{line: 99, col: 4, offset: 2828},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 99, col: 4, offset: 2828},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 99, col: 4, offset: 2828},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 100, col: 5, offset: 2838},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 101, col: 9, offset: 2851},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 101, col: 9, offset: 2851},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 101, col: 18, offset: 2860},
										expr: &choiceExpr{
											pos: position{line: 102, col: 13, offset: 2874},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 102, col: 14, offset: 2875},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 102, col: 14, offset: 2875},
														expr: &charClassMatcher{
															pos:        position{line: 102, col: 14, offset: 2875},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 105, col: 13, offset: 3042},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 106, col: 13, offset: 3075},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 107, col: 14, offset: 3098},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 107, col: 14, offset: 3098},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 113, col: 5, offset: 3284},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 118, col: 1, offset: 3385},
			expr: &actionExpr{
				pos: position{line: 118, col: 19, offset: 3403},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 118, col: 19, offset: 3403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 118, col: 19, offset: 3403},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 118, col: 23, offset: 3407},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 119, col: 5, offset: 3419},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 119, col: 5, offset: 3419},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 119, col: 5, offset: 3419},
											expr: &charClassMatcher{
												pos:        position{line: 119, col: 6, offset: 3420},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 120, col: 5, offset: 3532},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 120, col: 14, offset: 3541},
												expr: &choiceExpr{
													pos: position{line: 121, col: 9, offset: 3551},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 121, col: 10, offset: 3552},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 121, col: 10, offset: 3552},
																expr: &charClassMatcher{
																	pos:        position{line: 121, col: 10, offset: 3552},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 124, col: 9, offset: 3650},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 125, col: 9, offset: 3679},
															name: "AttrSub",
														},
														&actionExpr{
															pos: position{line: 126, col: 10, offset: 3698},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 126, col: 10, offset: 3698},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 137, col: 1, offset: 4098},
			expr: &actionExpr{
				pos: position{line: 138, col: 5, offset: 4124},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 138, col: 5, offset: 4124},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 5, offset: 4124},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 138, col: 9, offset: 4128},
							expr: &litMatcher{
								pos:        position{line: 138, col: 10, offset: 4129},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 140, col: 5, offset: 4299},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 140, col: 31, offset: 4325},
								expr: &ruleRefExpr{
									pos:  position{line: 140, col: 32, offset: 4326},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 141, col: 5, offset: 4358},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 141, col: 21, offset: 4374},
								expr: &choiceExpr{
									pos: position{line: 141, col: 22, offset: 4375},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 141, col: 22, offset: 4375},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 141, col: 44, offset: 4397},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 142, col: 5, offset: 4418},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 153, col: 1, offset: 4878},
			expr: &actionExpr{
				pos: position{line: 154, col: 5, offset: 4912},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 154, col: 5, offset: 4912},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 154, col: 5, offset: 4912},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 154, col: 10, offset: 4917},
								expr: &ruleRefExpr{
									pos:  position{line: 155, col: 9, offset: 4927},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 157, col: 5, offset: 4957},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 157, col: 12, offset: 4964},
								expr: &choiceExpr{
									pos: position{line: 158, col: 9, offset: 4975},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 158, col: 9, offset: 4975},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 159, col: 11, offset: 5007},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 160, col: 11, offset: 5042},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 161, col: 8, offset: 5075},
							expr: &seqExpr{
								pos: position{line: 161, col: 9, offset: 5076},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 161, col: 9, offset: 5076},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 161, col: 13, offset: 5080},
										expr: &ruleRefExpr{
											pos:  position{line: 161, col: 13, offset: 5080},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 162, col: 5, offset: 5094},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 176, col: 1, offset: 5451},
			expr: &actionExpr{
				pos: position{line: 176, col: 25, offset: 5475},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 176, col: 25, offset: 5475},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 176, col: 25, offset: 5475},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 176, col: 29, offset: 5479},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 33, offset: 5483},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 180, col: 1, offset: 5557},
			expr: &actionExpr{
				pos: position{line: 180, col: 23, offset: 5579},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 180, col: 23, offset: 5579},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 180, col: 30, offset: 5586},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 185, col: 1, offset: 5712},
			expr: &actionExpr{
				pos: position{line: 185, col: 30, offset: 5741},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 185, col: 30, offset: 5741},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 30, offset: 5741},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 34, offset: 5745},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 40, offset: 5751},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 190, col: 1, offset: 5873},
			expr: &actionExpr{
				pos: position{line: 190, col: 29, offset: 5901},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 190, col: 29, offset: 5901},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 190, col: 29, offset: 5901},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 190, col: 33, offset: 5905},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 41, offset: 5913},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 195, col: 1, offset: 6026},
			expr: &choiceExpr{
				pos: position{line: 196, col: 5, offset: 6058},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 196, col: 5, offset: 6058},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 7, offset: 6092},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 198, col: 7, offset: 6126},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 198, col: 7, offset: 6126},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 198, col: 7, offset: 6126},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 198, col: 16, offset: 6135},
										expr: &choiceExpr{
											pos: position{line: 201, col: 5, offset: 6305},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 201, col: 6, offset: 6306},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 201, col: 6, offset: 6306},
														expr: &charClassMatcher{
															pos:        position{line: 201, col: 6, offset: 6306},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 204, col: 5, offset: 6400},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 205, col: 5, offset: 6417},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 206, col: 5, offset: 6442},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 207, col: 6, offset: 6457},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 207, col: 6, offset: 6457},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 209, col: 10, offset: 6527},
									expr: &charClassMatcher{
										pos:        position{line: 209, col: 11, offset: 6528},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 213, col: 1, offset: 6604},
			expr: &choiceExpr{
				pos: position{line: 213, col: 24, offset: 6627},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 214, col: 5, offset: 6633},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 214, col: 5, offset: 6633},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 214, col: 5, offset: 6633},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 12, offset: 6640},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 214, col: 29, offset: 6657},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 214, col: 29, offset: 6657},
											expr: &seqExpr{
												pos: position{line: 214, col: 30, offset: 6658},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 214, col: 30, offset: 6658},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 214, col: 34, offset: 6662},
														expr: &ruleRefExpr{
															pos:  position{line: 214, col: 34, offset: 6662},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 214, col: 45, offset: 6673},
											expr: &litMatcher{
												pos:        position{line: 214, col: 46, offset: 6674},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 219, col: 6, offset: 6911},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 219, col: 6, offset: 6911},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 219, col: 6, offset: 6911},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 219, col: 13, offset: 6918},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 219, col: 13, offset: 6918},
												expr: &ruleRefExpr{
													pos:  position{line: 219, col: 13, offset: 6918},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 219, col: 21, offset: 6926},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 219, col: 22, offset: 6927},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 219, col: 22, offset: 6927},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 219, col: 26, offset: 6931},
																expr: &ruleRefExpr{
																	pos:  position{line: 219, col: 26, offset: 6931},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 219, col: 36, offset: 6941},
														expr: &litMatcher{
															pos:        position{line: 219, col: 37, offset: 6942},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 220, col: 5, offset: 6952},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 231, col: 1, offset: 7265},
			expr: &actionExpr{
				pos: position{line: 231, col: 19, offset: 7283},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 231, col: 19, offset: 7283},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 231, col: 19, offset: 7283},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 24, offset: 7288},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 231, col: 43, offset: 7307},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 231, col: 47, offset: 7311},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 47, offset: 7311},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 54, offset: 7318},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 61, offset: 7325},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 231, col: 77, offset: 7341},
							expr: &seqExpr{
								pos: position{line: 231, col: 78, offset: 7342},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 231, col: 78, offset: 7342},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 231, col: 82, offset: 7346},
										expr: &ruleRefExpr{
											pos:  position{line: 231, col: 82, offset: 7346},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 236, col: 1, offset: 7570},
			expr: &actionExpr{
				pos: position{line: 236, col: 22, offset: 7591},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 236, col: 22, offset: 7591},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 236, col: 22, offset: 7591},
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 23, offset: 7592},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 236, col: 29, offset: 7598},
							expr: &charClassMatcher{
								pos:        position{line: 236, col: 29, offset: 7598},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 236, col: 42, offset: 7611},
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 42, offset: 7611},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 240, col: 1, offset: 7681},
			expr: &actionExpr{
				pos: position{line: 241, col: 5, offset: 7704},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 241, col: 5, offset: 7704},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 241, col: 5, offset: 7704},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 242, col: 9, offset: 7720},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 242, col: 9, offset: 7720},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 11, offset: 7758},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 11, offset: 7796},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 246, col: 5, offset: 7830},
							expr: &notExpr{
								pos: position{line: 246, col: 7, offset: 7832},
								expr: &seqExpr{
									pos: position{line: 246, col: 9, offset: 7834},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 246, col: 9, offset: 7834},
											expr: &ruleRefExpr{
												pos:  position{line: 246, col: 9, offset: 7834},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 246, col: 16, offset: 7841},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 250, col: 1, offset: 7882},
			expr: &actionExpr{
				pos: position{line: 251, col: 5, offset: 7917},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 251, col: 5, offset: 7917},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 5, offset: 7917},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 252, col: 5, offset: 7926},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 252, col: 14, offset: 7935},
								expr: &choiceExpr{
									pos: position{line: 253, col: 9, offset: 7945},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 253, col: 9, offset: 7945},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 254, col: 12, offset: 7968},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 254, col: 12, offset: 7968},
												expr: &charClassMatcher{
													pos:        position{line: 254, col: 12, offset: 7968},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 257, col: 11, offset: 8114},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 258, col: 11, offset: 8143},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 259, col: 12, offset: 8162},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 259, col: 12, offset: 8162},
													run: (*parser).callonSingleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 259, col: 12, offset: 8162},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 262, col: 11, offset: 8254},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 262, col: 17, offset: 8260},
													run: (*parser).callonSingleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 262, col: 17, offset: 8260},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 8349},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 270, col: 1, offset: 8405},
			expr: &actionExpr{
				pos: position{line: 271, col: 5, offset: 8440},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 271, col: 5, offset: 8440},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 271, col: 5, offset: 8440},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 5, offset: 8450},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 272, col: 14, offset: 8459},
								expr: &choiceExpr{
									pos: position{line: 273, col: 9, offset: 8469},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 273, col: 9, offset: 8469},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 274, col: 12, offset: 8492},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 274, col: 12, offset: 8492},
												expr: &charClassMatcher{
													pos:        position{line: 274, col: 12, offset: 8492},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 277, col: 11, offset: 8638},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 278, col: 11, offset: 8667},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 279, col: 12, offset: 8686},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 279, col: 12, offset: 8686},
													run: (*parser).callonDoubleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 279, col: 12, offset: 8686},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 282, col: 11, offset: 8778},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 282, col: 17, offset: 8784},
													run: (*parser).callonDoubleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 282, col: 17, offset: 8784},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 286, col: 5, offset: 8873},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 291, col: 1, offset: 9008},
			expr: &actionExpr{
				pos: position{line: 292, col: 5, offset: 9039},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 292, col: 5, offset: 9039},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 292, col: 5, offset: 9039},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 6, offset: 9040},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 5, offset: 9050},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 293, col: 14, offset: 9059},
								expr: &choiceExpr{
									pos: position{line: 294, col: 9, offset: 9069},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 294, col: 9, offset: 9069},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 295, col: 12, offset: 9091},
											run: (*parser).callonUnquotedAttributeValue9,
											expr: &oneOrMoreExpr{
												pos: position{line: 295, col: 12, offset: 9091},
												expr: &charClassMatcher{
													pos:        position{line: 295, col: 12, offset: 9091},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 298, col: 11, offset: 9193},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 299, col: 11, offset: 9222},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 300, col: 12, offset: 9241},
											run: (*parser).callonUnquotedAttributeValue14,
											expr: &litMatcher{
												pos:        position{line: 300, col: 12, offset: 9241},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 304, col: 5, offset: 9329},
							run: (*parser).callonUnquotedAttributeValue16,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 315, col: 1, offset: 9643},
			expr: &choiceExpr{
				pos: position{line: 315, col: 26, offset: 9668},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 315, col: 26, offset: 9668},
						name: "CounterSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 48, offset: 9690},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 317, col: 1, offset: 9699},
			expr: &actionExpr{
				pos: position{line: 317, col: 12, offset: 9710},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 317, col: 12, offset: 9710},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 317, col: 12, offset: 9710},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 16, offset: 9714},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 21, offset: 9719},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 317, col: 35, offset: 9733},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 322, col: 1, offset: 9848},
			expr: &choiceExpr{
				pos: position{line: 322, col: 24, offset: 9871},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 322, col: 24, offset: 9871},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 47, offset: 9894},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 324, col: 1, offset: 10030},
			expr: &actionExpr{
				pos: position{line: 324, col: 25, offset: 10054},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 324, col: 25, offset: 10054},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 324, col: 25, offset: 10054},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 37, offset: 10066},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 42, offset: 10071},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 56, offset: 10085},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 62, offset: 10091},
								expr: &ruleRefExpr{
									pos:  position{line: 324, col: 63, offset: 10092},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 324, col: 78, offset: 10107},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 328, col: 1, offset: 10185},
			expr: &actionExpr{
				pos: position{line: 328, col: 25, offset: 10209},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 328, col: 25, offset: 10209},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 328, col: 25, offset: 10209},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 38, offset: 10222},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 43, offset: 10227},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 57, offset: 10241},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 328, col: 63, offset: 10247},
								expr: &ruleRefExpr{
									pos:  position{line: 328, col: 64, offset: 10248},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 328, col: 79, offset: 10263},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 332, col: 1, offset: 10338},
			expr: &actionExpr{
				pos: position{line: 332, col: 17, offset: 10354},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 332, col: 17, offset: 10354},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 17, offset: 10354},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 332, col: 21, offset: 10358},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 332, col: 28, offset: 10365},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 332, col: 28, offset: 10365},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 332, col: 28, offset: 10365},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 334, col: 9, offset: 10419},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 334, col: 9, offset: 10419},
											expr: &charClassMatcher{
												pos:        position{line: 334, col: 9, offset: 10419},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 343, col: 1, offset: 10621},
			expr: &actionExpr{
				pos: position{line: 343, col: 14, offset: 10634},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 343, col: 14, offset: 10634},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 343, col: 14, offset: 10634},
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 15, offset: 10635},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 343, col: 19, offset: 10639},
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 19, offset: 10639},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 343, col: 26, offset: 10646},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 350, col: 1, offset: 10883},
			expr: &actionExpr{
				pos: position{line: 350, col: 12, offset: 10894},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 350, col: 12, offset: 10894},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 12, offset: 10894},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 16, offset: 10898},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 350, col: 21, offset: 10903},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 350, col: 21, offset: 10903},
									expr: &charClassMatcher{
										pos:        position{line: 350, col: 21, offset: 10903},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 350, col: 69, offset: 10951},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 350, col: 73, offset: 10955},
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 73, offset: 10955},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 350, col: 80, offset: 10962},
							expr: &choiceExpr{
								pos: position{line: 350, col: 82, offset: 10964},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 350, col: 82, offset: 10964},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 350, col: 88, offset: 10970},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 354, col: 1, offset: 11031},
			expr: &actionExpr{
				pos: position{line: 354, col: 20, offset: 11050},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 354, col: 20, offset: 11050},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 354, col: 20, offset: 11050},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 25, offset: 11055},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 48, offset: 11078},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 61, offset: 11091},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 358, col: 1, offset: 11203},
			expr: &actionExpr{
				pos: position{line: 358, col: 26, offset: 11228},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 358, col: 26, offset: 11228},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 26, offset: 11228},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 30, offset: 11232},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 358, col: 35, offset: 11237},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 358, col: 35, offset: 11237},
									expr: &charClassMatcher{
										pos:        position{line: 358, col: 35, offset: 11237},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 358, col: 83, offset: 11285},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 358, col: 87, offset: 11289},
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 87, offset: 11289},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 365, col: 1, offset: 11519},
			expr: &seqExpr{
				pos: position{line: 365, col: 26, offset: 11544},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 365, col: 26, offset: 11544},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 365, col: 33, offset: 11551},
						expr: &ruleRefExpr{
							pos:  position{line: 365, col: 33, offset: 11551},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 40, offset: 11558},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 367, col: 1, offset: 11563},
			expr: &seqExpr{
				pos: position{line: 367, col: 31, offset: 11593},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 367, col: 31, offset: 11593},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 367, col: 38, offset: 11600},
						expr: &ruleRefExpr{
							pos:  position{line: 367, col: 38, offset: 11600},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 367, col: 45, offset: 11607},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 369, col: 1, offset: 11612},
			expr: &choiceExpr{
				pos: position{line: 369, col: 29, offset: 11640},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 369, col: 30, offset: 11641},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 369, col: 30, offset: 11641},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 369, col: 37, offset: 11648},
								expr: &ruleRefExpr{
									pos:  position{line: 369, col: 37, offset: 11648},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 369, col: 44, offset: 11655},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 369, col: 51, offset: 11662},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 371, col: 1, offset: 11667},
			expr: &actionExpr{
				pos: position{line: 371, col: 17, offset: 11683},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 371, col: 17, offset: 11683},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 371, col: 17, offset: 11683},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 371, col: 44, offset: 11710},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 53, offset: 11719},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 371, col: 78, offset: 11744},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 375, col: 1, offset: 11845},
			expr: &zeroOrMoreExpr{
				pos: position{line: 375, col: 27, offset: 11871},
				expr: &actionExpr{
					pos: position{line: 375, col: 28, offset: 11872},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 375, col: 28, offset: 11872},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 375, col: 28, offset: 11872},
								expr: &ruleRefExpr{
									pos:  position{line: 375, col: 29, offset: 11873},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 375, col: 54, offset: 11898},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 375, col: 60, offset: 11904},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 380, col: 1, offset: 11951},
			expr: &actionExpr{
				pos: position{line: 380, col: 12, offset: 11962},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 380, col: 12, offset: 11962},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 380, col: 12, offset: 11962},
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 13, offset: 11963},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 380, col: 17, offset: 11967},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 380, col: 26, offset: 11976},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 380, col: 26, offset: 11976},
									expr: &charClassMatcher{
										pos:        position{line: 380, col: 26, offset: 11976},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 8, offset: 12055},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 386, col: 1, offset: 12119},
			expr: &actionExpr{
				pos: position{line: 386, col: 22, offset: 12140},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 386, col: 22, offset: 12140},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 386, col: 22, offset: 12140},
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 23, offset: 12141},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 386, col: 45, offset: 12163},
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 45, offset: 12163},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 386, col: 52, offset: 12170},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 386, col: 57, offset: 12175},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 66, offset: 12184},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 92, offset: 12210},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 390, col: 1, offset: 12283},
			expr: &actionExpr{
				pos: position{line: 390, col: 29, offset: 12311},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 390, col: 29, offset: 12311},
					expr: &charClassMatcher{
						pos:        position{line: 390, col: 29, offset: 12311},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 397, col: 1, offset: 12476},
			expr: &choiceExpr{
				pos: position{line: 397, col: 19, offset: 12494},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 397, col: 19, offset: 12494},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 397, col: 44, offset: 12519},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 399, col: 1, offset: 12544},
			expr: &choiceExpr{
				pos: position{line: 399, col: 27, offset: 12570},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 399, col: 27, offset: 12570},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 399, col: 27, offset: 12570},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 399, col: 27, offset: 12570},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 399, col: 32, offset: 12575},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 36, offset: 12579},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 399, col: 40, offset: 12583},
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 40, offset: 12583},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 399, col: 47, offset: 12590},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 399, col: 51, offset: 12594},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 58, offset: 12601},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 399, col: 79, offset: 12622},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 401, col: 9, offset: 12695},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 401, col: 9, offset: 12695},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 401, col: 9, offset: 12695},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 401, col: 14, offset: 12700},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 401, col: 18, offset: 12704},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 401, col: 22, offset: 12708},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 405, col: 1, offset: 12779},
			expr: &actionExpr{
				pos: position{line: 405, col: 27, offset: 12805},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 405, col: 27, offset: 12805},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 405, col: 27, offset: 12805},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 35, offset: 12813},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 40, offset: 12818},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 405, col: 54, offset: 12832},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 72, offset: 12850},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 409, col: 1, offset: 12983},
			expr: &oneOrMoreExpr{
				pos: position{line: 409, col: 24, offset: 13006},
				expr: &choiceExpr{
					pos: position{line: 410, col: 5, offset: 13012},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 410, col: 6, offset: 13013},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 410, col: 6, offset: 13013},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 410, col: 6, offset: 13013},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 410, col: 14, offset: 13021},
										expr: &charClassMatcher{
											pos:        position{line: 410, col: 14, offset: 13021},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 5, offset: 13216},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 414, col: 6, offset: 13231},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 414, col: 6, offset: 13231},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 423, col: 1, offset: 13506},
			expr: &actionExpr{
				pos: position{line: 423, col: 19, offset: 13524},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 423, col: 19, offset: 13524},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 423, col: 19, offset: 13524},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 21, offset: 13526},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 424, col: 5, offset: 13556},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 424, col: 16, offset: 13567},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 424, col: 16, offset: 13567},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 425, col: 7, offset: 13626},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 426, col: 7, offset: 13654},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 427, col: 7, offset: 13683},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 428, col: 7, offset: 13712},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 429, col: 7, offset: 13741},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 430, col: 7, offset: 13767},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 431, col: 7, offset: 13795},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 435, col: 1, offset: 13861},
			expr: &actionExpr{
				pos: position{line: 435, col: 26, offset: 13886},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 435, col: 26, offset: 13886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 26, offset: 13886},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 435, col: 33, offset: 13893},
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 33, offset: 13893},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 40, offset: 13900},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 439, col: 1, offset: 13959},
			expr: &actionExpr{
				pos: position{line: 439, col: 25, offset: 13983},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 439, col: 25, offset: 13983},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 439, col: 25, offset: 13983},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 31, offset: 13989},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 31, offset: 13989},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 38, offset: 13996},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 443, col: 1, offset: 14054},
			expr: &actionExpr{
				pos: position{line: 443, col: 26, offset: 14079},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 443, col: 26, offset: 14079},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 443, col: 26, offset: 14079},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 443, col: 33, offset: 14086},
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 33, offset: 14086},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 443, col: 40, offset: 14093},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 447, col: 1, offset: 14152},
			expr: &ruleRefExpr{
				pos:  position{line: 447, col: 25, offset: 14176},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 449, col: 1, offset: 14199},
			expr: &actionExpr{
				pos: position{line: 449, col: 26, offset: 14224},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 449, col: 26, offset: 14224},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 449, col: 26, offset: 14224},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 449, col: 33, offset: 14231},
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 33, offset: 14231},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 449, col: 40, offset: 14238},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 453, col: 1, offset: 14297},
			expr: &actionExpr{
				pos: position{line: 453, col: 26, offset: 14322},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 453, col: 26, offset: 14322},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 453, col: 26, offset: 14322},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 453, col: 33, offset: 14329},
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 33, offset: 14329},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 40, offset: 14336},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 457, col: 1, offset: 14395},
			expr: &actionExpr{
				pos: position{line: 457, col: 24, offset: 14418},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 457, col: 24, offset: 14418},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 24, offset: 14418},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 457, col: 31, offset: 14425},
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 31, offset: 14425},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 38, offset: 14432},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 461, col: 1, offset: 14489},
			expr: &actionExpr{
				pos: position{line: 461, col: 26, offset: 14514},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 461, col: 26, offset: 14514},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 26, offset: 14514},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 461, col: 33, offset: 14521},
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 33, offset: 14521},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 40, offset: 14528},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 465, col: 1, offset: 14587},
			expr: &actionExpr{
				pos: position{line: 465, col: 30, offset: 14616},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 465, col: 30, offset: 14616},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 465, col: 30, offset: 14616},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 465, col: 37, offset: 14623},
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 37, offset: 14623},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 465, col: 44, offset: 14630},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentFragment",
			pos:  position{line: 474, col: 1, offset: 14833},
			expr: &actionExpr{
				pos: position{line: 474, col: 21, offset: 14853},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 474, col: 21, offset: 14853},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 474, col: 21, offset: 14853},
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 22, offset: 14854},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 475, col: 5, offset: 14862},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 476, col: 9, offset: 14877},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 476, col: 9, offset: 14877},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 477, col: 11, offset: 14895},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 478, col: 11, offset: 14915},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 479, col: 11, offset: 14939},
										name: "BlockAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 480, col: 11, offset: 14965},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 481, col: 11, offset: 14996},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 482, col: 11, offset: 15028},
										name: "BlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 11, offset: 15053},
										name: "CalloutListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 484, col: 11, offset: 15079},
										name: "InlineElements",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockFragments",
			pos:  position{line: 490, col: 1, offset: 15213},
			expr: &zeroOrMoreExpr{
				pos: position{line: 490, col: 25, offset: 15237},
				expr: &seqExpr{
					pos: position{line: 490, col: 26, offset: 15238},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 490, col: 26, offset: 15238},
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 27, offset: 15239},
								name: "FencedBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 48, offset: 15260},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockFragments",
			pos:  position{line: 492, col: 1, offset: 15289},
			expr: &zeroOrMoreExpr{
				pos: position{line: 492, col: 26, offset: 15314},
				expr: &seqExpr{
					pos: position{line: 492, col: 27, offset: 15315},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 492, col: 27, offset: 15315},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 28, offset: 15316},
								name: "ListingBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 50, offset: 15338},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockFragments",
			pos:  position{line: 494, col: 1, offset: 15367},
			expr: &zeroOrMoreExpr{
				pos: position{line: 494, col: 26, offset: 15392},
				expr: &seqExpr{
					pos: position{line: 494, col: 27, offset: 15393},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 494, col: 27, offset: 15393},
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 28, offset: 15394},
								name: "LiteralBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 50, offset: 15416},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "LiteralParagraphFragments",
			pos:  position{line: 496, col: 1, offset: 15445},
			expr: &zeroOrMoreExpr{
				pos: position{line: 496, col: 30, offset: 15474},
				expr: &seqExpr{
					pos: position{line: 496, col: 31, offset: 15475},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 496, col: 31, offset: 15475},
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 32, offset: 15476},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 42, offset: 15486},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockFragments",
			pos:  position{line: 498, col: 1, offset: 15515},
			expr: &zeroOrMoreExpr{
				pos: position{line: 498, col: 25, offset: 15539},
				expr: &seqExpr{
					pos: position{line: 498, col: 26, offset: 15540},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 498, col: 26, offset: 15540},
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 27, offset: 15541},
								name: "SourceBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 48, offset: 15562},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 503, col: 1, offset: 15715},
			expr: &actionExpr{
				pos: position{line: 505, col: 5, offset: 15800},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 505, col: 5, offset: 15800},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 505, col: 5, offset: 15800},
							run: (*parser).callonDocumentHeader3,
						},
						&labeledExpr{
							pos:   position{line: 512, col: 5, offset: 15973},
							label: "fragments",
							expr: &seqExpr{
								pos: position{line: 513, col: 9, offset: 15993},
								exprs: []interface{}{
									&actionExpr{
										pos: position{line: 513, col: 10, offset: 15994},
										run: (*parser).callonDocumentHeader6,
										expr: &seqExpr{
											pos: position{line: 513, col: 10, offset: 15994},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 513, col: 10, offset: 15994},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 513, col: 14, offset: 15998},
													expr: &ruleRefExpr{
														pos:  position{line: 513, col: 14, offset: 15998},
														name: "Space",
													},
												},
												&labeledExpr{
													pos:   position{line: 513, col: 21, offset: 16005},
													label: "title",
													expr: &ruleRefExpr{
														pos:  position{line: 513, col: 28, offset: 16012},
														name: "SectionTitleElements",
													},
												},
												&labeledExpr{
													pos:   position{line: 513, col: 50, offset: 16034},
													label: "id",
													expr: &zeroOrMoreExpr{
														pos: position{line: 513, col: 54, offset: 16038},
														expr: &ruleRefExpr{
															pos:  position{line: 513, col: 54, offset: 16038},
															name: "InlineElementID",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 513, col: 72, offset: 16056},
													name: "EOL",
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 516, col: 9, offset: 16171},
										expr: &choiceExpr{
											pos: position{line: 516, col: 10, offset: 16172},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 516, col: 10, offset: 16172},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 516, col: 30, offset: 16192},
													name: "CommentBlock",
												},
											},
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 517, col: 9, offset: 16215},
										expr: &ruleRefExpr{
											pos:  position{line: 517, col: 9, offset: 16215},
											name: "DocumentAuthors",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 518, col: 9, offset: 16240},
										expr: &choiceExpr{
											pos: position{line: 518, col: 10, offset: 16241},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 518, col: 10, offset: 16241},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 518, col: 30, offset: 16261},
													name: "CommentBlock",
												},
											},
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 519, col: 9, offset: 16284},
										expr: &ruleRefExpr{
											pos:  position{line: 519, col: 9, offset: 16284},
											name: "DocumentRevision",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 524, col: 1, offset: 16384},
			expr: &choiceExpr{
				pos: position{line: 524, col: 20, offset: 16403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 524, col: 20, offset: 16403},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 524, col: 48, offset: 16431},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 526, col: 1, offset: 16461},
			expr: &actionExpr{
				pos: position{line: 526, col: 30, offset: 16490},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 526, col: 30, offset: 16490},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 526, col: 30, offset: 16490},
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 30, offset: 16490},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 526, col: 37, offset: 16497},
							expr: &litMatcher{
								pos:        position{line: 526, col: 38, offset: 16498},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 42, offset: 16502},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 526, col: 51, offset: 16511},
								expr: &ruleRefExpr{
									pos:  position{line: 526, col: 51, offset: 16511},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 526, col: 68, offset: 16528},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 530, col: 1, offset: 16598},
			expr: &actionExpr{
				pos: position{line: 530, col: 33, offset: 16630},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 530, col: 33, offset: 16630},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 530, col: 33, offset: 16630},
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 33, offset: 16630},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 530, col: 40, offset: 16637},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 51, offset: 16648},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 59, offset: 16656},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 75, offset: 16672},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 534, col: 1, offset: 16751},
			expr: &actionExpr{
				pos: position{line: 534, col: 19, offset: 16769},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 534, col: 19, offset: 16769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 534, col: 19, offset: 16769},
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 19, offset: 16769},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 26, offset: 16776},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 36, offset: 16786},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 56, offset: 16806},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 534, col: 62, offset: 16812},
								expr: &ruleRefExpr{
									pos:  position{line: 534, col: 63, offset: 16813},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 534, col: 85, offset: 16835},
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 85, offset: 16835},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 534, col: 92, offset: 16842},
							expr: &litMatcher{
								pos:        position{line: 534, col: 92, offset: 16842},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 534, col: 97, offset: 16847},
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 97, offset: 16847},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 539, col: 1, offset: 16992},
			expr: &actionExpr{
				pos: position{line: 539, col: 23, offset: 17014},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 539, col: 23, offset: 17014},
					expr: &charClassMatcher{
						pos:        position{line: 539, col: 23, offset: 17014},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 543, col: 1, offset: 17061},
			expr: &actionExpr{
				pos: position{line: 543, col: 24, offset: 17084},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 543, col: 24, offset: 17084},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 24, offset: 17084},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 28, offset: 17088},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 543, col: 35, offset: 17095},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 543, col: 36, offset: 17096},
									expr: &charClassMatcher{
										pos:        position{line: 543, col: 36, offset: 17096},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 545, col: 4, offset: 17143},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 551, col: 1, offset: 17304},
			expr: &actionExpr{
				pos: position{line: 551, col: 21, offset: 17324},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 551, col: 21, offset: 17324},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 551, col: 21, offset: 17324},
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 21, offset: 17324},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 551, col: 28, offset: 17331},
							expr: &litMatcher{
								pos:        position{line: 551, col: 29, offset: 17332},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 33, offset: 17336},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 552, col: 9, offset: 17355},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 552, col: 10, offset: 17356},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 552, col: 10, offset: 17356},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 552, col: 10, offset: 17356},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 552, col: 21, offset: 17367},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 552, col: 45, offset: 17391},
													expr: &litMatcher{
														pos:        position{line: 552, col: 45, offset: 17391},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 552, col: 50, offset: 17396},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 552, col: 58, offset: 17404},
														expr: &ruleRefExpr{
															pos:  position{line: 552, col: 59, offset: 17405},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 552, col: 82, offset: 17428},
													expr: &litMatcher{
														pos:        position{line: 552, col: 82, offset: 17428},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 552, col: 87, offset: 17433},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 552, col: 97, offset: 17443},
														expr: &ruleRefExpr{
															pos:  position{line: 552, col: 98, offset: 17444},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 554, col: 15, offset: 17561},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 554, col: 15, offset: 17561},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 554, col: 15, offset: 17561},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 554, col: 24, offset: 17570},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 554, col: 46, offset: 17592},
													expr: &litMatcher{
														pos:        position{line: 554, col: 46, offset: 17592},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 554, col: 51, offset: 17597},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 554, col: 61, offset: 17607},
														expr: &ruleRefExpr{
															pos:  position{line: 554, col: 62, offset: 17608},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 556, col: 13, offset: 17717},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 561, col: 1, offset: 17847},
			expr: &choiceExpr{
				pos: position{line: 561, col: 27, offset: 17873},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 561, col: 27, offset: 17873},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 561, col: 27, offset: 17873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 561, col: 27, offset: 17873},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 561, col: 32, offset: 17878},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 561, col: 39, offset: 17885},
									expr: &charClassMatcher{
										pos:        position{line: 561, col: 39, offset: 17885},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 563, col: 5, offset: 17933},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 563, col: 5, offset: 17933},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 563, col: 5, offset: 17933},
									expr: &litMatcher{
										pos:        position{line: 563, col: 5, offset: 17933},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 563, col: 11, offset: 17939},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 563, col: 18, offset: 17946},
									expr: &charClassMatcher{
										pos:        position{line: 563, col: 18, offset: 17946},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 563, col: 29, offset: 17957},
									expr: &ruleRefExpr{
										pos:  position{line: 563, col: 29, offset: 17957},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 563, col: 36, offset: 17964},
									expr: &litMatcher{
										pos:        position{line: 563, col: 37, offset: 17965},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 567, col: 1, offset: 18005},
			expr: &actionExpr{
				pos: position{line: 567, col: 25, offset: 18029},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 567, col: 25, offset: 18029},
					expr: &charClassMatcher{
						pos:        position{line: 567, col: 25, offset: 18029},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 571, col: 1, offset: 18075},
			expr: &actionExpr{
				pos: position{line: 571, col: 27, offset: 18101},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 571, col: 27, offset: 18101},
					expr: &charClassMatcher{
						pos:        position{line: 571, col: 27, offset: 18101},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 578, col: 1, offset: 18276},
			expr: &actionExpr{
				pos: position{line: 578, col: 23, offset: 18298},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 578, col: 23, offset: 18298},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 578, col: 23, offset: 18298},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 32, offset: 18307},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 578, col: 37, offset: 18312},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 578, col: 37, offset: 18312},
									expr: &charClassMatcher{
										pos:        position{line: 578, col: 37, offset: 18312},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 578, col: 76, offset: 18351},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 585, col: 1, offset: 18602},
			expr: &actionExpr{
				pos: position{line: 585, col: 14, offset: 18615},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 585, col: 14, offset: 18615},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 585, col: 14, offset: 18615},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 585, col: 20, offset: 18621},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 585, col: 24, offset: 18625},
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 24, offset: 18625},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 585, col: 31, offset: 18632},
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 32, offset: 18633},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 592, col: 1, offset: 18797},
			expr: &actionExpr{
				pos: position{line: 593, col: 5, offset: 18819},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 593, col: 5, offset: 18819},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 593, col: 5, offset: 18819},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 594, col: 9, offset: 18834},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 594, col: 9, offset: 18834},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 594, col: 9, offset: 18834},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 595, col: 9, offset: 18855},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 595, col: 15, offset: 18861},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 596, col: 9, offset: 18884},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 596, col: 27, offset: 18902},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 600, col: 5, offset: 19062},
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 5, offset: 19062},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 600, col: 12, offset: 19069},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 604, col: 1, offset: 19129},
			expr: &ruleRefExpr{
				pos:  position{line: 604, col: 26, offset: 19154},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 607, col: 1, offset: 19194},
			expr: &actionExpr{
				pos: position{line: 607, col: 15, offset: 19208},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 607, col: 15, offset: 19208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 607, col: 15, offset: 19208},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 607, col: 22, offset: 19215},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 607, col: 22, offset: 19215},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 608, col: 7, offset: 19241},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 609, col: 7, offset: 19263},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 7, offset: 19286},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 614, col: 1, offset: 19376},
			expr: &actionExpr{
				pos: position{line: 614, col: 23, offset: 19398},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 614, col: 23, offset: 19398},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 614, col: 23, offset: 19398},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 614, col: 30, offset: 19405},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 614, col: 30, offset: 19405},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 614, col: 47, offset: 19422},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 615, col: 5, offset: 19444},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 615, col: 12, offset: 19451},
								expr: &actionExpr{
									pos: position{line: 616, col: 9, offset: 19461},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 616, col: 9, offset: 19461},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 616, col: 10, offset: 19462},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 616, col: 10, offset: 19462},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 616, col: 16, offset: 19468},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 617, col: 9, offset: 19579},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 617, col: 16, offset: 19586},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 617, col: 16, offset: 19586},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 617, col: 33, offset: 19603},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 623, col: 1, offset: 19745},
			expr: &actionExpr{
				pos: position{line: 623, col: 19, offset: 19763},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 623, col: 19, offset: 19763},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 623, col: 19, offset: 19763},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 26, offset: 19770},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 623, col: 34, offset: 19778},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 623, col: 39, offset: 19783},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 44, offset: 19788},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 627, col: 1, offset: 19884},
			expr: &actionExpr{
				pos: position{line: 627, col: 20, offset: 19903},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 627, col: 20, offset: 19903},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 627, col: 32, offset: 19915},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 632, col: 1, offset: 20038},
			expr: &actionExpr{
				pos: position{line: 632, col: 14, offset: 20051},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 632, col: 14, offset: 20051},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 632, col: 14, offset: 20051},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 21, offset: 20058},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 632, col: 40, offset: 20077},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 636, col: 1, offset: 20167},
			expr: &actionExpr{
				pos: position{line: 636, col: 22, offset: 20188},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 636, col: 22, offset: 20188},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 636, col: 22, offset: 20188},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 29, offset: 20195},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 637, col: 5, offset: 20209},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 637, col: 12, offset: 20216},
								expr: &actionExpr{
									pos: position{line: 638, col: 9, offset: 20226},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 638, col: 9, offset: 20226},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 638, col: 10, offset: 20227},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 638, col: 10, offset: 20227},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 638, col: 16, offset: 20233},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 639, col: 9, offset: 20344},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 639, col: 16, offset: 20351},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 645, col: 1, offset: 20486},
			expr: &choiceExpr{
				pos: position{line: 645, col: 13, offset: 20498},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 645, col: 13, offset: 20498},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 645, col: 13, offset: 20498},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 645, col: 18, offset: 20503},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 645, col: 18, offset: 20503},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 645, col: 30, offset: 20515},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 647, col: 9, offset: 20591},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 647, col: 9, offset: 20591},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 647, col: 9, offset: 20591},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 647, col: 13, offset: 20595},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 647, col: 18, offset: 20600},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 647, col: 18, offset: 20600},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 647, col: 30, offset: 20612},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 651, col: 1, offset: 20688},
			expr: &actionExpr{
				pos: position{line: 651, col: 16, offset: 20703},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 651, col: 16, offset: 20703},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 651, col: 16, offset: 20703},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 651, col: 23, offset: 20710},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 651, col: 23, offset: 20710},
									expr: &litMatcher{
										pos:        position{line: 651, col: 24, offset: 20711},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 654, col: 5, offset: 20765},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 661, col: 1, offset: 20932},
			expr: &actionExpr{
				pos: position{line: 661, col: 21, offset: 20952},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 661, col: 21, offset: 20952},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 661, col: 21, offset: 20952},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 661, col: 29, offset: 20960},
								expr: &choiceExpr{
									pos: position{line: 661, col: 30, offset: 20961},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 661, col: 30, offset: 20961},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 661, col: 53, offset: 20984},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 661, col: 74, offset: 21005},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 661, col: 74, offset: 21005,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 661, col: 107, offset: 21038},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 665, col: 1, offset: 21117},
			expr: &actionExpr{
				pos: position{line: 665, col: 25, offset: 21141},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 665, col: 25, offset: 21141},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 665, col: 25, offset: 21141},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 665, col: 33, offset: 21149},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 665, col: 38, offset: 21154},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 665, col: 38, offset: 21154},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 665, col: 78, offset: 21194},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 669, col: 1, offset: 21267},
			expr: &actionExpr{
				pos: position{line: 669, col: 23, offset: 21289},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 669, col: 23, offset: 21289},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 669, col: 23, offset: 21289},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 669, col: 31, offset: 21297},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 669, col: 36, offset: 21302},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 669, col: 36, offset: 21302},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 669, col: 76, offset: 21342},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 676, col: 1, offset: 21521},
			expr: &ruleRefExpr{
				pos:  position{line: 676, col: 16, offset: 21536},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 678, col: 1, offset: 21554},
			expr: &actionExpr{
				pos: position{line: 678, col: 20, offset: 21573},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 678, col: 20, offset: 21573},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 678, col: 20, offset: 21573},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 41, offset: 21594},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 678, col: 49, offset: 21602},
								expr: &ruleRefExpr{
									pos:  position{line: 678, col: 50, offset: 21603},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 75, offset: 21628},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 682, col: 1, offset: 21708},
			expr: &seqExpr{
				pos: position{line: 682, col: 26, offset: 21733},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 682, col: 26, offset: 21733},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 682, col: 32, offset: 21739},
						expr: &ruleRefExpr{
							pos:  position{line: 682, col: 32, offset: 21739},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 682, col: 39, offset: 21746},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 684, col: 1, offset: 21751},
			expr: &actionExpr{
				pos: position{line: 684, col: 27, offset: 21777},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 684, col: 27, offset: 21777},
					expr: &oneOrMoreExpr{
						pos: position{line: 684, col: 28, offset: 21778},
						expr: &seqExpr{
							pos: position{line: 684, col: 29, offset: 21779},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 684, col: 29, offset: 21779},
									expr: &ruleRefExpr{
										pos:  position{line: 684, col: 30, offset: 21780},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 684, col: 51, offset: 21801,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 690, col: 1, offset: 21953},
			expr: &actionExpr{
				pos: position{line: 691, col: 5, offset: 21976},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 691, col: 5, offset: 21976},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 691, col: 15, offset: 21986},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 691, col: 15, offset: 21986},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 691, col: 15, offset: 21986},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 691, col: 24, offset: 21995},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 693, col: 9, offset: 22087},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 693, col: 9, offset: 22087},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 693, col: 9, offset: 22087},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 693, col: 18, offset: 22096},
												expr: &ruleRefExpr{
													pos:  position{line: 693, col: 19, offset: 22097},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 693, col: 35, offset: 22113},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 702, col: 1, offset: 22333},
			expr: &actionExpr{
				pos: position{line: 703, col: 5, offset: 22356},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 703, col: 5, offset: 22356},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 703, col: 14, offset: 22365},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 703, col: 14, offset: 22365},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 704, col: 11, offset: 22426},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 705, col: 11, offset: 22471},
								expr: &ruleRefExpr{
									pos:  position{line: 705, col: 11, offset: 22471},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 706, col: 11, offset: 22489},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 706, col: 11, offset: 22489},
										expr: &ruleRefExpr{
											pos:  position{line: 706, col: 12, offset: 22490},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 707, col: 13, offset: 22508},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 707, col: 13, offset: 22508},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 708, col: 15, offset: 22535},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 709, col: 15, offset: 22560},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 710, col: 15, offset: 22585},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 711, col: 15, offset: 22612},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 712, col: 15, offset: 22632},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 713, col: 15, offset: 22725},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 714, col: 15, offset: 22755},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 715, col: 15, offset: 22823},
												name: "Callout",
											},
											&ruleRefExpr{
												pos:  position{line: 716, col: 15, offset: 22845},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 717, col: 15, offset: 22876},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 718, col: 15, offset: 22897},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 719, col: 15, offset: 22928},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 720, col: 15, offset: 22965},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 721, col: 15, offset: 22995},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 722, col: 15, offset: 23028},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 723, col: 15, offset: 23052},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 724, col: 15, offset: 23085},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 731, col: 1, offset: 23236},
			expr: &actionExpr{
				pos: position{line: 731, col: 20, offset: 23255},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 731, col: 20, offset: 23255},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 731, col: 20, offset: 23255},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 731, col: 25, offset: 23260},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 29, offset: 23264},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 731, col: 33, offset: 23268},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 731, col: 38, offset: 23273},
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 38, offset: 23273},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 738, col: 1, offset: 23519},
			expr: &actionExpr{
				pos: position{line: 738, col: 14, offset: 23532},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 738, col: 14, offset: 23532},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 738, col: 14, offset: 23532},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 738, col: 19, offset: 23537},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 25, offset: 23543},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 738, col: 43, offset: 23561},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 742, col: 1, offset: 23626},
			expr: &actionExpr{
				pos: position{line: 742, col: 21, offset: 23646},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 742, col: 21, offset: 23646},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 742, col: 30, offset: 23655},
						expr: &choiceExpr{
							pos: position{line: 742, col: 31, offset: 23656},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 742, col: 31, offset: 23656},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 38, offset: 23663},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 53, offset: 23678},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 66, offset: 23691},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 74, offset: 23699},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 93, offset: 23718},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 742, col: 114, offset: 23739},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 742, col: 115, offset: 23740},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 742, col: 115, offset: 23740},
												expr: &litMatcher{
													pos:        position{line: 742, col: 116, offset: 23741},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 742, col: 121, offset: 23746,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 748, col: 1, offset: 23852},
			expr: &actionExpr{
				pos: position{line: 748, col: 23, offset: 23874},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 748, col: 23, offset: 23874},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 748, col: 23, offset: 23874},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 748, col: 29, offset: 23880},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 36, offset: 23887},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 749, col: 5, offset: 23919},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 749, col: 11, offset: 23925},
								expr: &actionExpr{
									pos: position{line: 749, col: 12, offset: 23926},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 749, col: 12, offset: 23926},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 749, col: 12, offset: 23926},
												expr: &ruleRefExpr{
													pos:  position{line: 749, col: 12, offset: 23926},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 749, col: 19, offset: 23933},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 749, col: 23, offset: 23937},
												expr: &ruleRefExpr{
													pos:  position{line: 749, col: 23, offset: 23937},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 749, col: 30, offset: 23944},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 749, col: 39, offset: 23953},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 750, col: 5, offset: 24011},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 750, col: 11, offset: 24017},
								expr: &actionExpr{
									pos: position{line: 750, col: 12, offset: 24018},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 750, col: 12, offset: 24018},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 750, col: 12, offset: 24018},
												expr: &ruleRefExpr{
													pos:  position{line: 750, col: 12, offset: 24018},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 750, col: 19, offset: 24025},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 750, col: 23, offset: 24029},
												expr: &ruleRefExpr{
													pos:  position{line: 750, col: 23, offset: 24029},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 750, col: 30, offset: 24036},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 750, col: 39, offset: 24045},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 751, col: 5, offset: 24103},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 755, col: 1, offset: 24182},
			expr: &actionExpr{
				pos: position{line: 755, col: 30, offset: 24211},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 755, col: 30, offset: 24211},
					expr: &choiceExpr{
						pos: position{line: 755, col: 31, offset: 24212},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 755, col: 31, offset: 24212},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 755, col: 42, offset: 24223},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 762, col: 1, offset: 24369},
			expr: &actionExpr{
				pos: position{line: 763, col: 5, offset: 24388},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 763, col: 5, offset: 24388},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 763, col: 5, offset: 24388},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 767, col: 5, offset: 24540},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 767, col: 15, offset: 24550},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 21, offset: 24556},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 31, offset: 24566},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 49, offset: 24584},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 767, col: 67, offset: 24602},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 67, offset: 24602},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 767, col: 74, offset: 24609},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 772, col: 1, offset: 24855},
			expr: &actionExpr{
				pos: position{line: 772, col: 16, offset: 24870},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 772, col: 16, offset: 24870},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 772, col: 16, offset: 24870},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 772, col: 25, offset: 24879},
							expr: &litMatcher{
								pos:        position{line: 772, col: 26, offset: 24880},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 772, col: 30, offset: 24884},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 36, offset: 24890},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 772, col: 46, offset: 24900},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 64, offset: 24918},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 779, col: 1, offset: 25261},
			expr: &actionExpr{
				pos: position{line: 779, col: 15, offset: 25275},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 779, col: 15, offset: 25275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 779, col: 15, offset: 25275},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 779, col: 23, offset: 25283},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 779, col: 29, offset: 25289},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 779, col: 29, offset: 25289},
									expr: &charClassMatcher{
										pos:        position{line: 779, col: 29, offset: 25289},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 779, col: 73, offset: 25333},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 85, offset: 25345},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 786, col: 1, offset: 25625},
			expr: &choiceExpr{
				pos: position{line: 786, col: 19, offset: 25643},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 786, col: 19, offset: 25643},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 786, col: 19, offset: 25643},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 786, col: 19, offset: 25643},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 786, col: 32, offset: 25656},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 41, offset: 25665},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 786, col: 58, offset: 25682},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 788, col: 9, offset: 25758},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 788, col: 9, offset: 25758},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 788, col: 9, offset: 25758},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 788, col: 21, offset: 25770},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 26, offset: 25775},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 788, col: 39, offset: 25788},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 788, col: 43, offset: 25792},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 788, col: 51, offset: 25800},
										expr: &ruleRefExpr{
											pos:  position{line: 788, col: 52, offset: 25801},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 788, col: 70, offset: 25819},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 792, col: 1, offset: 25888},
			expr: &ruleRefExpr{
				pos:  position{line: 792, col: 16, offset: 25903},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 794, col: 1, offset: 25914},
			expr: &actionExpr{
				pos: position{line: 794, col: 20, offset: 25933},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 794, col: 20, offset: 25933},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 794, col: 29, offset: 25942},
						expr: &seqExpr{
							pos: position{line: 794, col: 30, offset: 25943},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 794, col: 30, offset: 25943},
									expr: &litMatcher{
										pos:        position{line: 794, col: 31, offset: 25944},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 794, col: 35, offset: 25948},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 801, col: 1, offset: 26197},
			expr: &choiceExpr{
				pos: position{line: 801, col: 22, offset: 26218},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 801, col: 22, offset: 26218},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 801, col: 46, offset: 26242},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 801, col: 70, offset: 26266},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 803, col: 1, offset: 26284},
			expr: &litMatcher{
				pos:        position{line: 803, col: 32, offset: 26315},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 805, col: 1, offset: 26320},
			expr: &actionExpr{
				pos: position{line: 805, col: 26, offset: 26345},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 805, col: 26, offset: 26345},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 805, col: 26, offset: 26345},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 805, col: 54, offset: 26373},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 63, offset: 26382},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 805, col: 93, offset: 26412},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 805, col: 121, offset: 26440},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 122, offset: 26441},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 809, col: 1, offset: 26554},
			expr: &choiceExpr{
				pos: position{line: 809, col: 33, offset: 26586},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 809, col: 34, offset: 26587},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 809, col: 34, offset: 26587},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 809, col: 35, offset: 26588},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 809, col: 35, offset: 26588},
											expr: &ruleRefExpr{
												pos:  position{line: 809, col: 36, offset: 26589},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 809, col: 64, offset: 26617},
											expr: &ruleRefExpr{
												pos:  position{line: 809, col: 65, offset: 26618},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 809, col: 71, offset: 26624},
											expr: &ruleRefExpr{
												pos:  position{line: 809, col: 72, offset: 26625},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 809, col: 80, offset: 26633,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 809, col: 83, offset: 26636},
									expr: &seqExpr{
										pos: position{line: 809, col: 84, offset: 26637},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 809, col: 84, offset: 26637},
												expr: &seqExpr{
													pos: position{line: 809, col: 86, offset: 26639},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 809, col: 86, offset: 26639},
															expr: &ruleRefExpr{
																pos:  position{line: 809, col: 86, offset: 26639},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 809, col: 93, offset: 26646},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 809, col: 122, offset: 26675},
												expr: &ruleRefExpr{
													pos:  position{line: 809, col: 123, offset: 26676},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 809, col: 151, offset: 26704},
												expr: &ruleRefExpr{
													pos:  position{line: 809, col: 152, offset: 26705},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 809, col: 160, offset: 26713,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 811, col: 11, offset: 26863},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 811, col: 12, offset: 26864},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 811, col: 12, offset: 26864},
									expr: &ruleRefExpr{
										pos:  position{line: 811, col: 13, offset: 26865},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 811, col: 19, offset: 26871},
									expr: &ruleRefExpr{
										pos:  position{line: 811, col: 20, offset: 26872},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 811, col: 28, offset: 26880},
									expr: &ruleRefExpr{
										pos:  position{line: 811, col: 29, offset: 26881},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 811, col: 57, offset: 26909,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 815, col: 1, offset: 26999},
			expr: &litMatcher{
				pos:        position{line: 815, col: 32, offset: 27030},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 817, col: 1, offset: 27037},
			expr: &actionExpr{
				pos: position{line: 817, col: 26, offset: 27062},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 817, col: 26, offset: 27062},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 817, col: 26, offset: 27062},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 817, col: 54, offset: 27090},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 63, offset: 27099},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 817, col: 93, offset: 27129},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 817, col: 121, offset: 27157},
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 122, offset: 27158},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 821, col: 1, offset: 27271},
			expr: &choiceExpr{
				pos: position{line: 821, col: 33, offset: 27303},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 821, col: 34, offset: 27304},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 821, col: 34, offset: 27304},
							expr: &seqExpr{
								pos: position{line: 821, col: 35, offset: 27305},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 821, col: 35, offset: 27305},
										expr: &ruleRefExpr{
											pos:  position{line: 821, col: 36, offset: 27306},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 821, col: 64, offset: 27334,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 823, col: 11, offset: 27507},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 823, col: 11, offset: 27507},
							expr: &seqExpr{
								pos: position{line: 823, col: 12, offset: 27508},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 823, col: 12, offset: 27508},
										expr: &ruleRefExpr{
											pos:  position{line: 823, col: 13, offset: 27509},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 823, col: 19, offset: 27515},
										expr: &ruleRefExpr{
											pos:  position{line: 823, col: 20, offset: 27516},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 823, col: 28, offset: 27524},
										expr: &ruleRefExpr{
											pos:  position{line: 823, col: 29, offset: 27525},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 823, col: 57, offset: 27553,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 827, col: 1, offset: 27644},
			expr: &choiceExpr{
				pos: position{line: 827, col: 21, offset: 27664},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 827, col: 21, offset: 27664},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 827, col: 21, offset: 27664},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 827, col: 21, offset: 27664},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 827, col: 30, offset: 27673},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 827, col: 38, offset: 27681},
										expr: &ruleRefExpr{
											pos:  position{line: 827, col: 39, offset: 27682},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 827, col: 67, offset: 27710},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 829, col: 9, offset: 27814},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 829, col: 9, offset: 27814},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 829, col: 9, offset: 27814},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 829, col: 19, offset: 27824},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 829, col: 27, offset: 27832},
										expr: &choiceExpr{
											pos: position{line: 829, col: 28, offset: 27833},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 829, col: 28, offset: 27833},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 829, col: 41, offset: 27846},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 829, col: 69, offset: 27874},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 833, col: 1, offset: 27978},
			expr: &actionExpr{
				pos: position{line: 833, col: 30, offset: 28007},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 833, col: 30, offset: 28007},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 840, col: 1, offset: 28177},
			expr: &choiceExpr{
				pos: position{line: 840, col: 9, offset: 28185},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 840, col: 9, offset: 28185},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 840, col: 24, offset: 28200},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 843, col: 1, offset: 28281},
			expr: &actionExpr{
				pos: position{line: 843, col: 17, offset: 28297},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 843, col: 17, offset: 28297},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 843, col: 17, offset: 28297},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 843, col: 25, offset: 28305},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 30, offset: 28310},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 843, col: 40, offset: 28320},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 58, offset: 28338},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 847, col: 1, offset: 28459},
			expr: &actionExpr{
				pos: position{line: 847, col: 17, offset: 28475},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 847, col: 17, offset: 28475},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 847, col: 17, offset: 28475},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 22, offset: 28480},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 42, offset: 28500},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 847, col: 59, offset: 28517},
								expr: &ruleRefExpr{
									pos:  position{line: 847, col: 60, offset: 28518},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 856, col: 1, offset: 28865},
			expr: &choiceExpr{
				pos: position{line: 857, col: 5, offset: 28884},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 858, col: 9, offset: 28894},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 858, col: 9, offset: 28894},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 858, col: 9, offset: 28894},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 858, col: 20, offset: 28905},
										expr: &ruleRefExpr{
											pos:  position{line: 858, col: 21, offset: 28906},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 859, col: 9, offset: 28936},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 859, col: 15, offset: 28942},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 859, col: 15, offset: 28942},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 859, col: 41, offset: 28968},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 863, col: 7, offset: 29086},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 865, col: 1, offset: 29105},
			expr: &choiceExpr{
				pos: position{line: 865, col: 32, offset: 29136},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 865, col: 32, offset: 29136},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 865, col: 32, offset: 29136},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 865, col: 36, offset: 29140},
								expr: &litMatcher{
									pos:        position{line: 865, col: 37, offset: 29141},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 865, col: 43, offset: 29147},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 865, col: 43, offset: 29147},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 865, col: 47, offset: 29151},
								expr: &litMatcher{
									pos:        position{line: 865, col: 48, offset: 29152},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 865, col: 54, offset: 29158},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 865, col: 54, offset: 29158},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 865, col: 58, offset: 29162},
								expr: &litMatcher{
									pos:        position{line: 865, col: 59, offset: 29163},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 865, col: 65, offset: 29169},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 865, col: 65, offset: 29169},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 865, col: 69, offset: 29173},
								expr: &litMatcher{
									pos:        position{line: 865, col: 70, offset: 29174},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 867, col: 1, offset: 29179},
			expr: &choiceExpr{
				pos: position{line: 867, col: 34, offset: 29212},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 867, col: 34, offset: 29212},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 867, col: 41, offset: 29219},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 867, col: 48, offset: 29226},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 867, col: 55, offset: 29233},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 867, col: 62, offset: 29240},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 867, col: 68, offset: 29246},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 869, col: 1, offset: 29251},
			expr: &choiceExpr{
				pos: position{line: 870, col: 5, offset: 29281},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 870, col: 5, offset: 29281},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 871, col: 7, offset: 29308},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 872, col: 7, offset: 29336},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 873, col: 7, offset: 29364},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 874, col: 7, offset: 29396},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 875, col: 7, offset: 29417},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 877, col: 1, offset: 29435},
			expr: &choiceExpr{
				pos: position{line: 878, col: 5, offset: 29467},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 878, col: 5, offset: 29467},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 879, col: 7, offset: 29493},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 880, col: 7, offset: 29521},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 881, col: 7, offset: 29549},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 883, col: 1, offset: 29575},
			expr: &choiceExpr{
				pos: position{line: 884, col: 5, offset: 29601},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 884, col: 5, offset: 29601},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 885, col: 7, offset: 29624},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 886, col: 7, offset: 29648},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 887, col: 7, offset: 29672},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 888, col: 7, offset: 29700},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 889, col: 7, offset: 29728},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 891, col: 1, offset: 29752},
			expr: &choiceExpr{
				pos: position{line: 891, col: 33, offset: 29784},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 891, col: 33, offset: 29784},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 891, col: 39, offset: 29790},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 891, col: 39, offset: 29790},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 895, col: 1, offset: 29932},
			expr: &actionExpr{
				pos: position{line: 895, col: 25, offset: 29956},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 895, col: 25, offset: 29956},
					expr: &litMatcher{
						pos:        position{line: 895, col: 25, offset: 29956},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 899, col: 1, offset: 30005},
			expr: &actionExpr{
				pos: position{line: 899, col: 25, offset: 30029},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 899, col: 25, offset: 30029},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 899, col: 25, offset: 30029},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 899, col: 30, offset: 30034},
							expr: &litMatcher{
								pos:        position{line: 899, col: 30, offset: 30034},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 906, col: 1, offset: 30138},
			expr: &choiceExpr{
				pos: position{line: 906, col: 13, offset: 30150},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 906, col: 13, offset: 30150},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 906, col: 35, offset: 30172},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 908, col: 1, offset: 30239},
			expr: &actionExpr{
				pos: position{line: 908, col: 24, offset: 30262},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 908, col: 24, offset: 30262},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 908, col: 24, offset: 30262},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 908, col: 29, offset: 30267},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 908, col: 39, offset: 30277},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 908, col: 68, offset: 30306},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 912, col: 1, offset: 30405},
			expr: &zeroOrMoreExpr{
				pos: position{line: 912, col: 32, offset: 30436},
				expr: &ruleRefExpr{
					pos:  position{line: 912, col: 32, offset: 30436},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 914, col: 1, offset: 30467},
			expr: &actionExpr{
				pos: position{line: 914, col: 31, offset: 30497},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 914, col: 31, offset: 30497},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 914, col: 31, offset: 30497},
							expr: &litMatcher{
								pos:        position{line: 914, col: 33, offset: 30499},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 914, col: 39, offset: 30505},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 914, col: 48, offset: 30514},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 914, col: 48, offset: 30514},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 915, col: 7, offset: 30525},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 916, col: 7, offset: 30570},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 916, col: 7, offset: 30570},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 916, col: 15, offset: 30578},
												expr: &ruleRefExpr{
													pos:  position{line: 916, col: 16, offset: 30579},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 917, col: 7, offset: 30593},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 918, col: 7, offset: 30612},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 919, col: 7, offset: 30650},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 7, offset: 30675},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 924, col: 1, offset: 30750},
			expr: &actionExpr{
				pos: position{line: 925, col: 5, offset: 30790},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 925, col: 5, offset: 30790},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 30790},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 16, offset: 30801},
								expr: &ruleRefExpr{
									pos:  position{line: 925, col: 17, offset: 30802},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 926, col: 5, offset: 30828},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 926, col: 11, offset: 30834},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 30834},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 927, col: 11, offset: 30864},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 928, col: 11, offset: 30885},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 929, col: 11, offset: 30906},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 930, col: 11, offset: 30930},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 931, col: 11, offset: 30954},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 935, col: 1, offset: 31054},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 31098},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 936, col: 5, offset: 31098},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 937, col: 7, offset: 31195},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 937, col: 7, offset: 31195},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 937, col: 7, offset: 31195},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 12, offset: 31200},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 941, col: 1, offset: 31371},
			expr: &choiceExpr{
				pos: position{line: 942, col: 5, offset: 31399},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 31399},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 31399},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 942, col: 6, offset: 31400},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 942, col: 6, offset: 31400},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 942, col: 10, offset: 31404},
											expr: &litMatcher{
												pos:        position{line: 942, col: 11, offset: 31405},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 942, col: 16, offset: 31410},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 26, offset: 31420},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 942, col: 55, offset: 31449},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 942, col: 59, offset: 31453},
									expr: &notExpr{
										pos: position{line: 942, col: 61, offset: 31455},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 62, offset: 31456},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 9, offset: 31662},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 944, col: 9, offset: 31662},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 944, col: 9, offset: 31662},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 944, col: 13, offset: 31666},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 944, col: 23, offset: 31676},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 944, col: 23, offset: 31676},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 944, col: 27, offset: 31680},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 56, offset: 31709},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 948, col: 1, offset: 31927},
			expr: &seqExpr{
				pos: position{line: 948, col: 32, offset: 31958},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 948, col: 32, offset: 31958},
						expr: &ruleRefExpr{
							pos:  position{line: 948, col: 33, offset: 31959},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 948, col: 39, offset: 31965},
						expr: &ruleRefExpr{
							pos:  position{line: 948, col: 39, offset: 31965},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 950, col: 1, offset: 31994},
			expr: &choiceExpr{
				pos: position{line: 951, col: 5, offset: 32029},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 951, col: 5, offset: 32029},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 952, col: 7, offset: 32040},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 952, col: 7, offset: 32040},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 952, col: 15, offset: 32048},
								expr: &ruleRefExpr{
									pos:  position{line: 952, col: 16, offset: 32049},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 953, col: 7, offset: 32063},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 954, col: 7, offset: 32082},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 954, col: 7, offset: 32082},
								expr: &ruleRefExpr{
									pos:  position{line: 954, col: 7, offset: 32082},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 954, col: 14, offset: 32089},
								expr: &seqExpr{
									pos: position{line: 954, col: 15, offset: 32090},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 954, col: 15, offset: 32090},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 954, col: 19, offset: 32094},
											expr: &litMatcher{
												pos:        position{line: 954, col: 20, offset: 32095},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 7, offset: 32107},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 956, col: 7, offset: 32145},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 7, offset: 32170},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 959, col: 1, offset: 32208},
			expr: &actionExpr{
				pos: position{line: 960, col: 5, offset: 32248},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 960, col: 5, offset: 32248},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 960, col: 5, offset: 32248},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 960, col: 16, offset: 32259},
								expr: &ruleRefExpr{
									pos:  position{line: 960, col: 17, offset: 32260},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 961, col: 5, offset: 32286},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 961, col: 11, offset: 32292},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 961, col: 11, offset: 32292},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 962, col: 11, offset: 32322},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 963, col: 11, offset: 32343},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 964, col: 11, offset: 32364},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 965, col: 11, offset: 32388},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 966, col: 11, offset: 32412},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 969, col: 1, offset: 32511},
			expr: &choiceExpr{
				pos: position{line: 970, col: 5, offset: 32555},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 970, col: 5, offset: 32555},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 971, col: 7, offset: 32652},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 971, col: 7, offset: 32652},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 971, col: 7, offset: 32652},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 971, col: 11, offset: 32656},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 975, col: 1, offset: 32827},
			expr: &choiceExpr{
				pos: position{line: 976, col: 5, offset: 32851},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 32851},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 32851},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 976, col: 5, offset: 32851},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 18, offset: 32864},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 40, offset: 32886},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 976, col: 45, offset: 32891},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 55, offset: 32901},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 84, offset: 32930},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 978, col: 9, offset: 33087},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 978, col: 9, offset: 33087},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 978, col: 9, offset: 33087},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 978, col: 22, offset: 33100},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 978, col: 44, offset: 33122},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 978, col: 49, offset: 33127},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 978, col: 59, offset: 33137},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 978, col: 88, offset: 33166},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 9, offset: 33366},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 981, col: 9, offset: 33366},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 981, col: 9, offset: 33366},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 981, col: 22, offset: 33379},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 981, col: 44, offset: 33401},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 981, col: 48, offset: 33405},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 981, col: 58, offset: 33415},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 981, col: 87, offset: 33444},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 988, col: 1, offset: 33654},
			expr: &choiceExpr{
				pos: position{line: 988, col: 15, offset: 33668},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 988, col: 15, offset: 33668},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 39, offset: 33692},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 990, col: 1, offset: 33715},
			expr: &actionExpr{
				pos: position{line: 990, col: 26, offset: 33740},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 990, col: 26, offset: 33740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 990, col: 26, offset: 33740},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 990, col: 31, offset: 33745},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 990, col: 41, offset: 33755},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 990, col: 72, offset: 33786},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 994, col: 1, offset: 33932},
			expr: &zeroOrMoreExpr{
				pos: position{line: 994, col: 34, offset: 33965},
				expr: &ruleRefExpr{
					pos:  position{line: 994, col: 34, offset: 33965},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 996, col: 1, offset: 33997},
			expr: &actionExpr{
				pos: position{line: 997, col: 5, offset: 34034},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 997, col: 5, offset: 34034},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 997, col: 5, offset: 34034},
							expr: &litMatcher{
								pos:        position{line: 997, col: 7, offset: 34036},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 997, col: 13, offset: 34042},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 997, col: 22, offset: 34051},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 997, col: 22, offset: 34051},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 998, col: 7, offset: 34062},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 999, col: 7, offset: 34107},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 999, col: 7, offset: 34107},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 999, col: 15, offset: 34115},
												expr: &ruleRefExpr{
													pos:  position{line: 999, col: 16, offset: 34116},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1000, col: 7, offset: 34130},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1001, col: 7, offset: 34149},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1002, col: 7, offset: 34189},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1003, col: 7, offset: 34214},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1007, col: 1, offset: 34291},
			expr: &actionExpr{
				pos: position{line: 1008, col: 5, offset: 34333},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1008, col: 5, offset: 34333},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1008, col: 5, offset: 34333},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1008, col: 16, offset: 34344},
								expr: &ruleRefExpr{
									pos:  position{line: 1008, col: 17, offset: 34345},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1009, col: 5, offset: 34371},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1009, col: 11, offset: 34377},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1009, col: 11, offset: 34377},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1010, col: 11, offset: 34409},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1011, col: 11, offset: 34428},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1012, col: 11, offset: 34449},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1013, col: 11, offset: 34473},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1014, col: 11, offset: 34497},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1018, col: 1, offset: 34597},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 5, offset: 34643},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1019, col: 5, offset: 34643},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1020, col: 7, offset: 34742},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1020, col: 7, offset: 34742},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1020, col: 7, offset: 34742},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1020, col: 12, offset: 34747},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1024, col: 1, offset: 34920},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 34950},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 34950},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 34950},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1025, col: 6, offset: 34951},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1025, col: 6, offset: 34951},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1025, col: 10, offset: 34955},
											expr: &litMatcher{
												pos:        position{line: 1025, col: 11, offset: 34956},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 16, offset: 34961},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 26, offset: 34971},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 57, offset: 35002},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1027, col: 9, offset: 35204},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1027, col: 9, offset: 35204},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1027, col: 9, offset: 35204},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1027, col: 13, offset: 35208},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1027, col: 23, offset: 35218},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1027, col: 23, offset: 35218},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 27, offset: 35222},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1027, col: 58, offset: 35253},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1031, col: 1, offset: 35475},
			expr: &seqExpr{
				pos: position{line: 1031, col: 34, offset: 35508},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1031, col: 34, offset: 35508},
						expr: &ruleRefExpr{
							pos:  position{line: 1031, col: 35, offset: 35509},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1031, col: 41, offset: 35515},
						expr: &ruleRefExpr{
							pos:  position{line: 1031, col: 41, offset: 35515},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1033, col: 1, offset: 35546},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 5, offset: 35583},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1034, col: 5, offset: 35583},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1035, col: 7, offset: 35594},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1035, col: 7, offset: 35594},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1035, col: 15, offset: 35602},
								expr: &ruleRefExpr{
									pos:  position{line: 1035, col: 16, offset: 35603},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 7, offset: 35617},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1037, col: 7, offset: 35636},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1037, col: 7, offset: 35636},
								expr: &ruleRefExpr{
									pos:  position{line: 1037, col: 7, offset: 35636},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1037, col: 14, offset: 35643},
								expr: &seqExpr{
									pos: position{line: 1037, col: 15, offset: 35644},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1037, col: 15, offset: 35644},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1037, col: 19, offset: 35648},
											expr: &litMatcher{
												pos:        position{line: 1037, col: 20, offset: 35649},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 7, offset: 35661},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 7, offset: 35701},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1040, col: 7, offset: 35726},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1042, col: 1, offset: 35766},
			expr: &actionExpr{
				pos: position{line: 1043, col: 5, offset: 35807},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1043, col: 5, offset: 35807},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1043, col: 5, offset: 35807},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1043, col: 16, offset: 35818},
								expr: &ruleRefExpr{
									pos:  position{line: 1043, col: 17, offset: 35819},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 5, offset: 35845},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1044, col: 11, offset: 35851},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1044, col: 11, offset: 35851},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1045, col: 11, offset: 35870},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1046, col: 11, offset: 35902},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1047, col: 11, offset: 35923},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1048, col: 11, offset: 35947},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1049, col: 11, offset: 35971},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1053, col: 1, offset: 36071},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 5, offset: 36117},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1054, col: 5, offset: 36117},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1055, col: 7, offset: 36216},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1055, col: 7, offset: 36216},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1055, col: 7, offset: 36216},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1055, col: 11, offset: 36220},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1059, col: 1, offset: 36394},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 5, offset: 36420},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 36420},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1060, col: 5, offset: 36420},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1060, col: 5, offset: 36420},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1060, col: 18, offset: 36433},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1060, col: 40, offset: 36455},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 45, offset: 36460},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1060, col: 55, offset: 36470},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1060, col: 86, offset: 36501},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1062, col: 9, offset: 36658},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1062, col: 9, offset: 36658},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1062, col: 9, offset: 36658},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 22, offset: 36671},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1062, col: 44, offset: 36693},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 49, offset: 36698},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 59, offset: 36708},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1062, col: 90, offset: 36739},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1065, col: 9, offset: 36939},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1065, col: 9, offset: 36939},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1065, col: 9, offset: 36939},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1065, col: 22, offset: 36952},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1065, col: 44, offset: 36974},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1065, col: 48, offset: 36978},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1065, col: 58, offset: 36988},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1065, col: 89, offset: 37019},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1072, col: 1, offset: 37229},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 18, offset: 37246},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1072, col: 18, offset: 37246},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1072, col: 45, offset: 37273},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1074, col: 1, offset: 37299},
			expr: &actionExpr{
				pos: position{line: 1074, col: 29, offset: 37327},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1074, col: 29, offset: 37327},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1074, col: 29, offset: 37327},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1074, col: 34, offset: 37332},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 44, offset: 37342},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1074, col: 78, offset: 37376},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1078, col: 1, offset: 37525},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1078, col: 37, offset: 37561},
				expr: &ruleRefExpr{
					pos:  position{line: 1078, col: 37, offset: 37561},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1080, col: 1, offset: 37628},
			expr: &actionExpr{
				pos: position{line: 1081, col: 5, offset: 37668},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 5, offset: 37668},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1081, col: 5, offset: 37668},
							expr: &litMatcher{
								pos:        position{line: 1081, col: 7, offset: 37670},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 13, offset: 37676},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1081, col: 22, offset: 37685},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1081, col: 22, offset: 37685},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1082, col: 7, offset: 37696},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1083, col: 7, offset: 37741},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1083, col: 7, offset: 37741},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1083, col: 15, offset: 37749},
												expr: &ruleRefExpr{
													pos:  position{line: 1083, col: 16, offset: 37750},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1084, col: 7, offset: 37764},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1085, col: 7, offset: 37783},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1086, col: 7, offset: 37846},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1087, col: 7, offset: 37889},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1088, col: 7, offset: 37914},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1092, col: 1, offset: 37994},
			expr: &actionExpr{
				pos: position{line: 1093, col: 5, offset: 38038},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1093, col: 5, offset: 38038},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1093, col: 5, offset: 38038},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1093, col: 16, offset: 38049},
								expr: &ruleRefExpr{
									pos:  position{line: 1093, col: 17, offset: 38050},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1094, col: 5, offset: 38076},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1094, col: 11, offset: 38082},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1094, col: 11, offset: 38082},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1095, col: 11, offset: 38117},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1096, col: 11, offset: 38136},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1097, col: 11, offset: 38157},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 38178},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 11, offset: 38202},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1103, col: 1, offset: 38303},
			expr: &choiceExpr{
				pos: position{line: 1104, col: 5, offset: 38352},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1104, col: 5, offset: 38352},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1105, col: 7, offset: 38454},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1105, col: 7, offset: 38454},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1105, col: 7, offset: 38454},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1105, col: 12, offset: 38459},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1109, col: 1, offset: 38637},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 5, offset: 38670},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1110, col: 5, offset: 38670},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1110, col: 5, offset: 38670},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1110, col: 6, offset: 38671},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1110, col: 6, offset: 38671},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1110, col: 10, offset: 38675},
											expr: &litMatcher{
												pos:        position{line: 1110, col: 11, offset: 38676},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 16, offset: 38681},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 26, offset: 38691},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 60, offset: 38725},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1112, col: 9, offset: 38930},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1112, col: 9, offset: 38930},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 9, offset: 38930},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 13, offset: 38934},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1112, col: 23, offset: 38944},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1112, col: 23, offset: 38944},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1112, col: 27, offset: 38948},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1112, col: 61, offset: 38982},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1116, col: 1, offset: 39208},
			expr: &seqExpr{
				pos: position{line: 1116, col: 37, offset: 39244},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1116, col: 37, offset: 39244},
						expr: &ruleRefExpr{
							pos:  position{line: 1116, col: 38, offset: 39245},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1116, col: 44, offset: 39251},
						expr: &ruleRefExpr{
							pos:  position{line: 1116, col: 44, offset: 39251},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1118, col: 1, offset: 39285},
			expr: &choiceExpr{
				pos: position{line: 1119, col: 5, offset: 39326},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1119, col: 5, offset: 39326},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1120, col: 7, offset: 39337},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1120, col: 7, offset: 39337},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1120, col: 15, offset: 39345},
								expr: &ruleRefExpr{
									pos:  position{line: 1120, col: 16, offset: 39346},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1121, col: 7, offset: 39360},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1122, col: 7, offset: 39379},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1122, col: 7, offset: 39379},
								expr: &ruleRefExpr{
									pos:  position{line: 1122, col: 7, offset: 39379},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1122, col: 14, offset: 39386},
								expr: &seqExpr{
									pos: position{line: 1122, col: 15, offset: 39387},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1122, col: 15, offset: 39387},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1122, col: 19, offset: 39391},
											expr: &litMatcher{
												pos:        position{line: 1122, col: 20, offset: 39392},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 7, offset: 39516},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1124, col: 7, offset: 39559},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 7, offset: 39579},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 7, offset: 39604},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1128, col: 1, offset: 39647},
			expr: &actionExpr{
				pos: position{line: 1129, col: 5, offset: 39691},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 5, offset: 39691},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1129, col: 5, offset: 39691},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1129, col: 16, offset: 39702},
								expr: &ruleRefExpr{
									pos:  position{line: 1129, col: 17, offset: 39703},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1130, col: 5, offset: 39729},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1130, col: 11, offset: 39735},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1130, col: 11, offset: 39735},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 11, offset: 39770},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1132, col: 11, offset: 39789},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 11, offset: 39810},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1134, col: 11, offset: 39831},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1135, col: 11, offset: 39855},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1139, col: 1, offset: 39956},
			expr: &actionExpr{
				pos: position{line: 1140, col: 5, offset: 40005},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1140, col: 6, offset: 40006},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1140, col: 6, offset: 40006},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1141, col: 7, offset: 40110},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1141, col: 7, offset: 40110},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1141, col: 11, offset: 40114},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1145, col: 1, offset: 40292},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 5, offset: 40321},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 40321},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1146, col: 5, offset: 40321},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1146, col: 5, offset: 40321},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 18, offset: 40334},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 40, offset: 40356},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 45, offset: 40361},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 55, offset: 40371},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 89, offset: 40405},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 9, offset: 40562},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1148, col: 9, offset: 40562},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1148, col: 9, offset: 40562},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 22, offset: 40575},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 44, offset: 40597},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 49, offset: 40602},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 59, offset: 40612},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 93, offset: 40646},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1151, col: 9, offset: 40846},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1151, col: 9, offset: 40846},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1151, col: 9, offset: 40846},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 22, offset: 40859},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 44, offset: 40881},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 48, offset: 40885},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 58, offset: 40895},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 92, offset: 40929},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1158, col: 1, offset: 41139},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 15, offset: 41153},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 15, offset: 41153},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 39, offset: 41177},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1160, col: 1, offset: 41200},
			expr: &actionExpr{
				pos: position{line: 1160, col: 26, offset: 41225},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 26, offset: 41225},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1160, col: 26, offset: 41225},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 31, offset: 41230},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 41, offset: 41240},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1160, col: 72, offset: 41271},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1164, col: 1, offset: 41417},
			expr: &seqExpr{
				pos: position{line: 1164, col: 34, offset: 41450},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1164, col: 34, offset: 41450},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1164, col: 63, offset: 41479},
						expr: &seqExpr{
							pos: position{line: 1164, col: 64, offset: 41480},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1164, col: 64, offset: 41480},
									expr: &litMatcher{
										pos:        position{line: 1164, col: 66, offset: 41482},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1164, col: 73, offset: 41489},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1164, col: 73, offset: 41489},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1164, col: 81, offset: 41497},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1166, col: 1, offset: 41564},
			expr: &choiceExpr{
				pos: position{line: 1166, col: 33, offset: 41596},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1166, col: 33, offset: 41596},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1167, col: 7, offset: 41607},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1167, col: 7, offset: 41607},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1167, col: 15, offset: 41615},
								expr: &ruleRefExpr{
									pos:  position{line: 1167, col: 16, offset: 41616},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 7, offset: 41630},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 7, offset: 41649},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 7, offset: 41680},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 7, offset: 41705},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1173, col: 1, offset: 41745},
			expr: &actionExpr{
				pos: position{line: 1174, col: 5, offset: 41777},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1174, col: 5, offset: 41777},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1174, col: 5, offset: 41777},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1174, col: 16, offset: 41788},
								expr: &ruleRefExpr{
									pos:  position{line: 1174, col: 17, offset: 41789},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 5, offset: 41815},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1175, col: 11, offset: 41821},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1175, col: 11, offset: 41821},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 11, offset: 41840},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1177, col: 11, offset: 41861},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1178, col: 11, offset: 41885},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1179, col: 11, offset: 41917},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1180, col: 11, offset: 41941},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1184, col: 1, offset: 42042},
			expr: &choiceExpr{
				pos: position{line: 1185, col: 5, offset: 42088},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1185, col: 5, offset: 42088},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1186, col: 7, offset: 42187},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1186, col: 7, offset: 42187},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1186, col: 7, offset: 42187},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1186, col: 12, offset: 42192},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1190, col: 1, offset: 42365},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 26, offset: 42390},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1190, col: 26, offset: 42390},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1190, col: 26, offset: 42390},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1190, col: 27, offset: 42391},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1190, col: 27, offset: 42391},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1190, col: 31, offset: 42395},
											expr: &litMatcher{
												pos:        position{line: 1190, col: 32, offset: 42396},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 37, offset: 42401},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 47, offset: 42411},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1190, col: 78, offset: 42442},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1192, col: 9, offset: 42644},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1192, col: 9, offset: 42644},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1192, col: 9, offset: 42644},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1192, col: 13, offset: 42648},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1192, col: 23, offset: 42658},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1192, col: 23, offset: 42658},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1192, col: 27, offset: 42662},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1192, col: 58, offset: 42693},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1196, col: 1, offset: 42914},
			expr: &seqExpr{
				pos: position{line: 1196, col: 34, offset: 42947},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1196, col: 34, offset: 42947},
						expr: &ruleRefExpr{
							pos:  position{line: 1196, col: 35, offset: 42948},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1196, col: 41, offset: 42954},
						expr: &ruleRefExpr{
							pos:  position{line: 1196, col: 41, offset: 42954},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1198, col: 1, offset: 42985},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 33, offset: 43017},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 33, offset: 43017},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1199, col: 7, offset: 43028},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1199, col: 7, offset: 43028},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1199, col: 15, offset: 43036},
								expr: &ruleRefExpr{
									pos:  position{line: 1199, col: 16, offset: 43037},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 7, offset: 43051},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1201, col: 7, offset: 43070},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1201, col: 7, offset: 43070},
								expr: &ruleRefExpr{
									pos:  position{line: 1201, col: 7, offset: 43070},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1201, col: 14, offset: 43077},
								expr: &seqExpr{
									pos: position{line: 1201, col: 15, offset: 43078},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1201, col: 15, offset: 43078},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1201, col: 19, offset: 43082},
											expr: &litMatcher{
												pos:        position{line: 1201, col: 20, offset: 43083},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 7, offset: 43095},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 7, offset: 43126},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 7, offset: 43151},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1206, col: 1, offset: 43191},
			expr: &actionExpr{
				pos: position{line: 1207, col: 5, offset: 43223},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 5, offset: 43223},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1207, col: 5, offset: 43223},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1207, col: 16, offset: 43234},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 17, offset: 43235},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 5, offset: 43261},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1208, col: 11, offset: 43267},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1208, col: 11, offset: 43267},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 11, offset: 43299},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1210, col: 11, offset: 43318},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1211, col: 11, offset: 43339},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1212, col: 11, offset: 43363},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1213, col: 11, offset: 43387},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1216, col: 1, offset: 43487},
			expr: &choiceExpr{
				pos: position{line: 1217, col: 5, offset: 43533},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1217, col: 5, offset: 43533},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1218, col: 7, offset: 43630},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1218, col: 7, offset: 43630},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1218, col: 7, offset: 43630},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1218, col: 11, offset: 43634},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1222, col: 1, offset: 43805},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 5, offset: 43830},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1223, col: 5, offset: 43830},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1223, col: 5, offset: 43830},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1223, col: 5, offset: 43830},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 18, offset: 43843},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 40, offset: 43865},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1223, col: 45, offset: 43870},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 55, offset: 43880},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 86, offset: 43911},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1225, col: 9, offset: 44068},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1225, col: 9, offset: 44068},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1225, col: 9, offset: 44068},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 22, offset: 44081},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 44, offset: 44103},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1225, col: 49, offset: 44108},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 59, offset: 44118},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 90, offset: 44149},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1228, col: 9, offset: 44349},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1228, col: 9, offset: 44349},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1228, col: 9, offset: 44349},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1228, col: 22, offset: 44362},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1228, col: 44, offset: 44384},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1228, col: 48, offset: 44388},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1228, col: 58, offset: 44398},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1228, col: 89, offset: 44429},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1235, col: 1, offset: 44642},
			expr: &actionExpr{
				pos: position{line: 1235, col: 18, offset: 44659},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 18, offset: 44659},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1235, col: 18, offset: 44659},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1235, col: 22, offset: 44663},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 31, offset: 44672},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1235, col: 53, offset: 44694},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1239, col: 1, offset: 44802},
			expr: &choiceExpr{
				pos: position{line: 1239, col: 25, offset: 44826},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1239, col: 25, offset: 44826},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 38, offset: 44839},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1241, col: 1, offset: 44858},
			expr: &actionExpr{
				pos: position{line: 1241, col: 21, offset: 44878},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1241, col: 21, offset: 44878},
					expr: &charClassMatcher{
						pos:        position{line: 1241, col: 21, offset: 44878},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1245, col: 1, offset: 44963},
			expr: &actionExpr{
				pos: position{line: 1245, col: 25, offset: 44987},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 25, offset: 44987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1245, col: 25, offset: 44987},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1245, col: 38, offset: 45000},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1245, col: 60, offset: 45022},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1245, col: 64, offset: 45026},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1245, col: 73, offset: 45035},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1245, col: 95, offset: 45057},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1252, col: 1, offset: 45256},
			expr: &actionExpr{
				pos: position{line: 1252, col: 20, offset: 45275},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 20, offset: 45275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1252, col: 20, offset: 45275},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 24, offset: 45279},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 33, offset: 45288},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1252, col: 57, offset: 45312},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1256, col: 1, offset: 45422},
			expr: &choiceExpr{
				pos: position{line: 1256, col: 27, offset: 45448},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1256, col: 27, offset: 45448},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 40, offset: 45461},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1258, col: 1, offset: 45482},
			expr: &actionExpr{
				pos: position{line: 1258, col: 23, offset: 45504},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1258, col: 23, offset: 45504},
					expr: &charClassMatcher{
						pos:        position{line: 1258, col: 23, offset: 45504},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1262, col: 1, offset: 45589},
			expr: &actionExpr{
				pos: position{line: 1262, col: 27, offset: 45615},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1262, col: 27, offset: 45615},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1262, col: 27, offset: 45615},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1262, col: 40, offset: 45628},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1262, col: 62, offset: 45650},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1262, col: 66, offset: 45654},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1262, col: 75, offset: 45663},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1262, col: 99, offset: 45687},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1270, col: 1, offset: 45999},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 17, offset: 46015},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1270, col: 17, offset: 46015},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 38, offset: 46036},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1272, col: 1, offset: 46056},
			expr: &actionExpr{
				pos: position{line: 1272, col: 23, offset: 46078},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 23, offset: 46078},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1272, col: 23, offset: 46078},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1272, col: 46, offset: 46101},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 55, offset: 46110},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1272, col: 82, offset: 46137},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1276, col: 1, offset: 46249},
			expr: &actionExpr{
				pos: position{line: 1276, col: 31, offset: 46279},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1276, col: 31, offset: 46279},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1276, col: 41, offset: 46289},
						expr: &ruleRefExpr{
							pos:  position{line: 1276, col: 41, offset: 46289},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1280, col: 1, offset: 46375},
			expr: &seqExpr{
				pos: position{line: 1280, col: 27, offset: 46401},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1280, col: 27, offset: 46401},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1280, col: 32, offset: 46406},
						expr: &charClassMatcher{
							pos:        position{line: 1280, col: 33, offset: 46407},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1282, col: 1, offset: 46418},
			expr: &litMatcher{
				pos:        position{line: 1282, col: 25, offset: 46442},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1285, col: 1, offset: 46530},
			expr: &actionExpr{
				pos: position{line: 1286, col: 5, offset: 46564},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1286, col: 5, offset: 46564},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1287, col: 9, offset: 46582},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1287, col: 9, offset: 46582},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1287, col: 9, offset: 46582},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1287, col: 19, offset: 46592},
										expr: &ruleRefExpr{
											pos:  position{line: 1287, col: 20, offset: 46593},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1288, col: 11, offset: 46649},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1288, col: 11, offset: 46649},
										expr: &ruleRefExpr{
											pos:  position{line: 1288, col: 11, offset: 46649},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1288, col: 18, offset: 46656},
										expr: &ruleRefExpr{
											pos:  position{line: 1288, col: 19, offset: 46657},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1289, col: 12, offset: 46689},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1289, col: 12, offset: 46689},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1289, col: 12, offset: 46689},
											expr: &litMatcher{
												pos:        position{line: 1289, col: 13, offset: 46690},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1289, col: 17, offset: 46694},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1289, col: 26, offset: 46703},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1290, col: 11, offset: 46775},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 11, offset: 46816},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1292, col: 11, offset: 46845},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1297, col: 1, offset: 46924},
			expr: &actionExpr{
				pos: position{line: 1298, col: 5, offset: 46962},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1298, col: 5, offset: 46962},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1298, col: 5, offset: 46962},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1298, col: 16, offset: 46973},
								expr: &ruleRefExpr{
									pos:  position{line: 1298, col: 17, offset: 46974},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 5, offset: 47000},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1299, col: 11, offset: 47006},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1299, col: 11, offset: 47006},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1300, col: 11, offset: 47025},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1301, col: 12, offset: 47047},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1301, col: 12, offset: 47047},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1301, col: 12, offset: 47047},
													expr: &litMatcher{
														pos:        position{line: 1301, col: 13, offset: 47048},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1301, col: 18, offset: 47053},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1301, col: 27, offset: 47062},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1302, col: 11, offset: 47111},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1303, col: 11, offset: 47135},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1304, col: 11, offset: 47161},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1308, col: 1, offset: 47257},
			expr: &choiceExpr{
				pos: position{line: 1308, col: 41, offset: 47297},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1308, col: 41, offset: 47297},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1308, col: 55, offset: 47311},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1308, col: 55, offset: 47311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1308, col: 55, offset: 47311},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1308, col: 59, offset: 47315},
									expr: &litMatcher{
										pos:        position{line: 1308, col: 60, offset: 47316},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1312, col: 1, offset: 47388},
			expr: &actionExpr{
				pos: position{line: 1312, col: 23, offset: 47410},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 23, offset: 47410},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1312, col: 23, offset: 47410},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 46, offset: 47433},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 55, offset: 47442},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1312, col: 82, offset: 47469},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1316, col: 1, offset: 47581},
			expr: &actionExpr{
				pos: position{line: 1316, col: 31, offset: 47611},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1316, col: 31, offset: 47611},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1316, col: 41, offset: 47621},
						expr: &ruleRefExpr{
							pos:  position{line: 1316, col: 41, offset: 47621},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1321, col: 1, offset: 47789},
			expr: &actionExpr{
				pos: position{line: 1321, col: 30, offset: 47818},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1321, col: 30, offset: 47818},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1322, col: 5, offset: 47832},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1322, col: 5, offset: 47832},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1322, col: 5, offset: 47832},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1322, col: 15, offset: 47842},
										expr: &ruleRefExpr{
											pos:  position{line: 1322, col: 16, offset: 47843},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1323, col: 7, offset: 47895},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1323, col: 7, offset: 47895},
										expr: &ruleRefExpr{
											pos:  position{line: 1323, col: 7, offset: 47895},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1323, col: 14, offset: 47902},
										expr: &ruleRefExpr{
											pos:  position{line: 1323, col: 15, offset: 47903},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1324, col: 7, offset: 47930},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1325, col: 7, offset: 47967},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1326, col: 7, offset: 47992},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1330, col: 1, offset: 48066},
			expr: &actionExpr{
				pos: position{line: 1331, col: 5, offset: 48104},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1331, col: 5, offset: 48104},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1331, col: 5, offset: 48104},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1331, col: 16, offset: 48115},
								expr: &ruleRefExpr{
									pos:  position{line: 1331, col: 17, offset: 48116},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 5, offset: 48142},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1332, col: 11, offset: 48148},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1332, col: 11, offset: 48148},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 11, offset: 48167},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1334, col: 12, offset: 48189},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1334, col: 12, offset: 48189},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1334, col: 12, offset: 48189},
													expr: &litMatcher{
														pos:        position{line: 1334, col: 13, offset: 48190},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1334, col: 19, offset: 48196},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1334, col: 28, offset: 48205},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 11, offset: 48254},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 11, offset: 48278},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 11, offset: 48304},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1341, col: 1, offset: 48400},
			expr: &seqExpr{
				pos: position{line: 1341, col: 27, offset: 48426},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1341, col: 27, offset: 48426},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1341, col: 33, offset: 48432},
						expr: &charClassMatcher{
							pos:        position{line: 1341, col: 34, offset: 48433},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1343, col: 1, offset: 48444},
			expr: &litMatcher{
				pos:        position{line: 1343, col: 25, offset: 48468},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1345, col: 1, offset: 48475},
			expr: &actionExpr{
				pos: position{line: 1345, col: 41, offset: 48515},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1345, col: 42, offset: 48516},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1345, col: 42, offset: 48516},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1345, col: 56, offset: 48530},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1345, col: 56, offset: 48530},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1345, col: 60, offset: 48534},
									expr: &litMatcher{
										pos:        position{line: 1345, col: 61, offset: 48535},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1353, col: 1, offset: 48800},
			expr: &actionExpr{
				pos: position{line: 1355, col: 5, offset: 48878},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1355, col: 5, offset: 48878},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1355, col: 5, offset: 48878},
							run: (*parser).callonSection3,
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 5, offset: 49051},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1362, col: 12, offset: 49058},
								run: (*parser).callonSection5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1362, col: 12, offset: 49058},
									expr: &litMatcher{
										pos:        position{line: 1362, col: 13, offset: 49059},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1366, col: 5, offset: 49167},
							run: (*parser).callonSection8,
						},
						&oneOrMoreExpr{
							pos: position{line: 1370, col: 5, offset: 49319},
							expr: &ruleRefExpr{
								pos:  position{line: 1370, col: 5, offset: 49319},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1370, col: 12, offset: 49326},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1370, col: 19, offset: 49333},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 1370, col: 41, offset: 49355},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1370, col: 45, offset: 49359},
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 45, offset: 49359},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1370, col: 63, offset: 49377},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElements",
			pos:  position{line: 1374, col: 1, offset: 49478},
			expr: &actionExpr{
				pos: position{line: 1374, col: 25, offset: 49502},
				run: (*parser).callonSectionTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 1374, col: 25, offset: 49502},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1374, col: 34, offset: 49511},
						expr: &seqExpr{
							pos: position{line: 1374, col: 35, offset: 49512},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1374, col: 35, offset: 49512},
									expr: &ruleRefExpr{
										pos:  position{line: 1374, col: 36, offset: 49513},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1374, col: 44, offset: 49521},
									expr: &ruleRefExpr{
										pos:  position{line: 1374, col: 45, offset: 49522},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1374, col: 61, offset: 49538},
									name: "SectionTitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElement",
			pos:  position{line: 1378, col: 1, offset: 49666},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 9, offset: 49699},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1379, col: 9, offset: 49699},
						name: "InlineWord",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 49760},
						name: "LineBreak",
					},
					&oneOrMoreExpr{
						pos: position{line: 1381, col: 11, offset: 49805},
						expr: &ruleRefExpr{
							pos:  position{line: 1381, col: 11, offset: 49805},
							name: "Space",
						},
					},
					&seqExpr{
						pos: position{line: 1382, col: 11, offset: 49823},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1382, col: 11, offset: 49823},
								expr: &ruleRefExpr{
									pos:  position{line: 1382, col: 12, offset: 49824},
									name: "EOL",
								},
							},
							&choiceExpr{
								pos: position{line: 1383, col: 13, offset: 49842},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1383, col: 13, offset: 49842},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1384, col: 15, offset: 49869},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 15, offset: 49894},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 15, offset: 49919},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 15, offset: 49946},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 15, offset: 49966},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 15, offset: 50059},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 15, offset: 50089},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1391, col: 15, offset: 50157},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1392, col: 15, offset: 50188},
										name: "Symbol",
									},
									&ruleRefExpr{
										pos:  position{line: 1393, col: 15, offset: 50209},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1394, col: 15, offset: 50240},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1395, col: 15, offset: 50277},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1396, col: 15, offset: 50310},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1397, col: 15, offset: 50334},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1398, col: 15, offset: 50367},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1404, col: 1, offset: 50665},
			expr: &choiceExpr{
				pos: position{line: 1406, col: 5, offset: 50766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1406, col: 5, offset: 50766},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 1406, col: 5, offset: 50766},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 1409, col: 7, offset: 50858},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 1409, col: 8, offset: 50859},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1409, col: 8, offset: 50859},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 1409, col: 14, offset: 50865},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 1409, col: 20, offset: 50871},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1423, col: 1, offset: 51409},
			expr: &seqExpr{
				pos: position{line: 1424, col: 5, offset: 51431},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1424, col: 5, offset: 51431},
						expr: &choiceExpr{
							pos: position{line: 1424, col: 6, offset: 51432},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1424, col: 6, offset: 51432},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1425, col: 7, offset: 51489},
									expr: &ruleRefExpr{
										pos:  position{line: 1425, col: 7, offset: 51489},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1426, col: 7, offset: 51503},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1428, col: 7, offset: 51559},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1429, col: 7, offset: 51573},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 17, offset: 51583},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1435, col: 1, offset: 51692},
			expr: &choiceExpr{
				pos: position{line: 1435, col: 11, offset: 51702},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1435, col: 11, offset: 51702},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 24, offset: 51715},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 36, offset: 51727},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 48, offset: 51739},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 61, offset: 51752},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 72, offset: 51763},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1437, col: 1, offset: 51782},
			expr: &actionExpr{
				pos: position{line: 1437, col: 15, offset: 51796},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1437, col: 15, offset: 51796},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1441, col: 1, offset: 51858},
			expr: &litMatcher{
				pos:        position{line: 1441, col: 18, offset: 51875},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1443, col: 1, offset: 51898},
			expr: &actionExpr{
				pos: position{line: 1443, col: 14, offset: 51911},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1443, col: 14, offset: 51911},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1447, col: 1, offset: 51974},
			expr: &actionExpr{
				pos: position{line: 1447, col: 14, offset: 51987},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1447, col: 14, offset: 51987},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1451, col: 1, offset: 52051},
			expr: &actionExpr{
				pos: position{line: 1451, col: 15, offset: 52065},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1451, col: 15, offset: 52065},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1455, col: 1, offset: 52128},
			expr: &actionExpr{
				pos: position{line: 1455, col: 13, offset: 52140},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1455, col: 13, offset: 52140},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1463, col: 1, offset: 52425},
			expr: &actionExpr{
				pos: position{line: 1463, col: 22, offset: 52446},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 22, offset: 52446},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1463, col: 22, offset: 52446},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1463, col: 31, offset: 52455},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1463, col: 35, offset: 52459},
							expr: &charClassMatcher{
								pos:        position{line: 1463, col: 36, offset: 52460},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1470, col: 1, offset: 52738},
			expr: &actionExpr{
				pos: position{line: 1470, col: 18, offset: 52755},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 18, offset: 52755},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1470, col: 19, offset: 52756},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1470, col: 19, offset: 52756},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1470, col: 27, offset: 52764},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1470, col: 37, offset: 52774},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1470, col: 45, offset: 52782},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1470, col: 55, offset: 52792},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1470, col: 63, offset: 52800},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1470, col: 72, offset: 52809},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1477, col: 1, offset: 52968},
			expr: &actionExpr{
				pos: position{line: 1478, col: 5, offset: 52991},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 5, offset: 52991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1478, col: 5, offset: 52991},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 11, offset: 52997},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1479, col: 5, offset: 53017},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1483, col: 5, offset: 53157},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1484, col: 5, offset: 53167},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1484, col: 12, offset: 53174},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1485, col: 5, offset: 53195},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 23, offset: 53213},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1489, col: 1, offset: 53344},
			expr: &actionExpr{
				pos: position{line: 1490, col: 5, offset: 53368},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1490, col: 5, offset: 53368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1490, col: 5, offset: 53368},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1490, col: 11, offset: 53374},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1491, col: 5, offset: 53394},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1495, col: 5, offset: 53534},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 5, offset: 53543},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 12, offset: 53550},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 5, offset: 53571},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 23, offset: 53589},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1501, col: 1, offset: 53721},
			expr: &actionExpr{
				pos: position{line: 1501, col: 18, offset: 53738},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1501, col: 19, offset: 53739},
					expr: &charClassMatcher{
						pos:        position{line: 1501, col: 19, offset: 53739},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1505, col: 1, offset: 53796},
			expr: &actionExpr{
				pos: position{line: 1505, col: 19, offset: 53814},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1505, col: 19, offset: 53814},
					expr: &charClassMatcher{
						pos:        position{line: 1505, col: 19, offset: 53814},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1524, col: 1, offset: 54228},
			expr: &charClassMatcher{
				pos:        position{line: 1524, col: 13, offset: 54240},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1526, col: 1, offset: 54250},
			expr: &choiceExpr{
				pos: position{line: 1526, col: 16, offset: 54265},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1526, col: 16, offset: 54265},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1526, col: 22, offset: 54271},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1526, col: 28, offset: 54277},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1526, col: 34, offset: 54283},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1526, col: 40, offset: 54289},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1526, col: 46, offset: 54295},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1528, col: 1, offset: 54301},
			expr: &actionExpr{
				pos: position{line: 1528, col: 14, offset: 54314},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1528, col: 14, offset: 54314},
					expr: &charClassMatcher{
						pos:        position{line: 1528, col: 14, offset: 54314},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1532, col: 1, offset: 54368},
			expr: &choiceExpr{
				pos: position{line: 1536, col: 5, offset: 54695},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1536, col: 5, offset: 54695},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1536, col: 5, offset: 54695},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1536, col: 5, offset: 54695},
									expr: &charClassMatcher{
										pos:        position{line: 1536, col: 5, offset: 54695},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1536, col: 15, offset: 54705},
									expr: &choiceExpr{
										pos: position{line: 1536, col: 17, offset: 54707},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1536, col: 17, offset: 54707},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1536, col: 30, offset: 54720},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1538, col: 9, offset: 54790},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1538, col: 9, offset: 54790},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1538, col: 9, offset: 54790},
									expr: &charClassMatcher{
										pos:        position{line: 1538, col: 9, offset: 54790},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1538, col: 19, offset: 54800},
									expr: &seqExpr{
										pos: position{line: 1538, col: 20, offset: 54801},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1538, col: 20, offset: 54801},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1538, col: 27, offset: 54808},
												expr: &charClassMatcher{
													pos:        position{line: 1538, col: 27, offset: 54808},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1542, col: 1, offset: 54895},
			expr: &choiceExpr{
				pos: position{line: 1543, col: 5, offset: 54976},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1543, col: 5, offset: 54976},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1543, col: 5, offset: 54976},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1543, col: 5, offset: 54976},
									expr: &charClassMatcher{
										pos:        position{line: 1543, col: 5, offset: 54976},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1543, col: 19, offset: 54990},
									expr: &choiceExpr{
										pos: position{line: 1543, col: 21, offset: 54992},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1543, col: 21, offset: 54992},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1543, col: 31, offset: 55002},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1545, col: 9, offset: 55071},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1548, col: 1, offset: 55171},
			expr: &actionExpr{
				pos: position{line: 1548, col: 12, offset: 55182},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1548, col: 12, offset: 55182},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1552, col: 1, offset: 55255},
			expr: &actionExpr{
				pos: position{line: 1552, col: 17, offset: 55271},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1552, col: 17, offset: 55271},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1552, col: 22, offset: 55276},
						expr: &choiceExpr{
							pos: position{line: 1552, col: 23, offset: 55277},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1552, col: 23, offset: 55277},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 1552, col: 34, offset: 55288},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1556, col: 1, offset: 55377},
			expr: &actionExpr{
				pos: position{line: 1556, col: 13, offset: 55389},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1556, col: 13, offset: 55389},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1556, col: 13, offset: 55389},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1556, col: 20, offset: 55396},
								expr: &ruleRefExpr{
									pos:  position{line: 1556, col: 21, offset: 55397},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1556, col: 30, offset: 55406},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1556, col: 35, offset: 55411},
								expr: &choiceExpr{
									pos: position{line: 1556, col: 36, offset: 55412},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1556, col: 36, offset: 55412},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1556, col: 47, offset: 55423},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1560, col: 1, offset: 55516},
			expr: &actionExpr{
				pos: position{line: 1560, col: 23, offset: 55538},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1560, col: 23, offset: 55538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1560, col: 23, offset: 55538},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1560, col: 31, offset: 55546},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1560, col: 39, offset: 55554},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1560, col: 44, offset: 55559},
								expr: &choiceExpr{
									pos: position{line: 1560, col: 45, offset: 55560},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1560, col: 45, offset: 55560},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1560, col: 56, offset: 55571},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 1564, col: 1, offset: 55664},
			expr: &actionExpr{
				pos: position{line: 1564, col: 13, offset: 55676},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 1564, col: 13, offset: 55676},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1564, col: 22, offset: 55685},
						expr: &choiceExpr{
							pos: position{line: 1565, col: 5, offset: 55691},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1565, col: 5, offset: 55691},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 1565, col: 5, offset: 55691},
										expr: &charClassMatcher{
											pos:        position{line: 1565, col: 6, offset: 55692},
											val:        "[^\\r\\n[\\]\\uFFFD{ ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1568, col: 7, offset: 55828},
									name: "AttributeSubstitution",
								},
								&actionExpr{
									pos: position{line: 1569, col: 7, offset: 55857},
									run: (*parser).callonFilename9,
									expr: &litMatcher{
										pos:        position{line: 1569, col: 7, offset: 55857},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 1575, col: 1, offset: 55995},
			expr: &choiceExpr{
				pos: position{line: 1575, col: 11, offset: 56005},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1575, col: 11, offset: 56005},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1575, col: 23, offset: 56017},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1575, col: 36, offset: 56030},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1575, col: 47, offset: 56041},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1575, col: 58, offset: 56052},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 1577, col: 1, offset: 56063},
			expr: &actionExpr{
				pos: position{line: 1577, col: 7, offset: 56069},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1577, col: 7, offset: 56069},
					expr: &charClassMatcher{
						pos:        position{line: 1577, col: 7, offset: 56069},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 1581, col: 1, offset: 56202},
			expr: &actionExpr{
				pos: position{line: 1581, col: 10, offset: 56211},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 1581, col: 10, offset: 56211},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1585, col: 1, offset: 56261},
			expr: &actionExpr{
				pos: position{line: 1585, col: 11, offset: 56271},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 11, offset: 56271},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1585, col: 11, offset: 56271},
							expr: &litMatcher{
								pos:        position{line: 1585, col: 11, offset: 56271},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1585, col: 16, offset: 56276},
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 16, offset: 56276},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1589, col: 1, offset: 56336},
			expr: &choiceExpr{
				pos: position{line: 1589, col: 10, offset: 56345},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1589, col: 10, offset: 56345},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1589, col: 16, offset: 56351},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1589, col: 16, offset: 56351},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1593, col: 1, offset: 56400},
			expr: &choiceExpr{
				pos: position{line: 1593, col: 12, offset: 56411},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1593, col: 12, offset: 56411},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1593, col: 21, offset: 56420},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1593, col: 28, offset: 56427},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1595, col: 1, offset: 56433},
			expr: &notExpr{
				pos: position{line: 1595, col: 8, offset: 56440},
				expr: &anyMatcher{
					line: 1595, col: 9, offset: 56441,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1597, col: 1, offset: 56444},
			expr: &choiceExpr{
				pos: position{line: 1597, col: 8, offset: 56451},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1597, col: 8, offset: 56451},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1597, col: 18, offset: 56461},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragments1(frontmatter, header, fragments interface{}) (interface{}, error) {
	return types.NewDocumentFragments(frontmatter, header, fragments.([]interface{}))

}

func (p *parser) callonDocumentFragments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragments1(stack["frontmatter"], stack["header"], stack["fragments"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes12(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	attrs, err := types.NewAttributes(attributes.([]interface{})...)
	if err != nil {
		return nil, err
	}
	ctx, err := c.globalStore.parserContext()
	if err != nil {
		return nil, err
	}
	ctx.onBlockAttributes(attrs)
	return attrs, nil

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	attributes = append(attributes, otherAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue14()
}

func (c *current) onSingleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue17()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue14()
}

func (c *current) onDoubleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue17()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue9()
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue16(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue16(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)

}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onRawLine6() (interface{}, error) {
	// line MAY have content
	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentFragment1(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["line"])
}

func (c *current) onDocumentHeader3() (bool, error) {
	ctx, err := c.globalStore.parserContext()
	if err != nil {
		return false, err
	}
	return ctx.isSectionRuleEnabled(), nil

}

func (p *parser) callonDocumentHeader3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader3()
}

func (c *current) onDocumentHeader6(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentHeader6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader6(stack["title"], stack["id"])
}

func (c *current) onDocumentHeader1(fragments interface{}) (interface{}, error) {
	return types.NewDocumentHeader(fragments.([]interface{}))

}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["fragments"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection3() (bool, error) {
	ctx, err := c.globalStore.parserContext()
	if err != nil {
		return false, err
	}
	return ctx.isSectionRuleEnabled(), nil

}

func (p *parser) callonSection3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3()
}

func (c *current) onSection5() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5()
}

func (c *current) onSection8(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection8(stack["level"])
}

func (c *current) onSection1(level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}))
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"], stack["id"])
}

func (c *current) onSectionTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonSectionTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElements1(stack["elements"])
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename9()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

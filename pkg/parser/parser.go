// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DefaultDocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 420},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 420},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 7, offset: 436},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 450},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 467},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 489},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 510},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 532},
						name: "ListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 7, offset: 550},
						name: "ListElementContinuation",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 7, offset: 580},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 31, col: 7, offset: 604},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 7, offset: 631},
						name: "AttributeReset",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinParagraph",
			pos:  position{line: 37, col: 1, offset: 838},
			expr: &choiceExpr{
				pos: position{line: 38, col: 5, offset: 885},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 38, col: 5, offset: 885},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 39, col: 7, offset: 901},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinDelimitedBlock",
			pos:  position{line: 44, col: 1, offset: 1111},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 45, col: 5, offset: 1163},
						name: "BlankLine",
					},
					&actionExpr{
						pos: position{line: 47, col: 9, offset: 1189},
						run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock3,
						expr: &seqExpr{
							pos: position{line: 47, col: 9, offset: 1189},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 47, col: 9, offset: 1189},
									label: "delimiter",
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 20, offset: 1200},
										name: "BlockDelimiter",
									},
								},
								&andCodeExpr{
									pos: position{line: 48, col: 9, offset: 1224},
									run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock7,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 60, col: 1, offset: 1664},
			expr: &actionExpr{
				pos: position{line: 61, col: 5, offset: 1693},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 61, col: 5, offset: 1693},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 61, col: 5, offset: 1693},
							run: (*parser).callonAttributeDeclaration3,
						},
						&litMatcher{
							pos:        position{line: 65, col: 5, offset: 1837},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 65, col: 9, offset: 1841},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 15, offset: 1847},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 65, col: 30, offset: 1862},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 66, col: 5, offset: 1871},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 66, col: 11, offset: 1877},
								expr: &ruleRefExpr{
									pos:  position{line: 66, col: 12, offset: 1878},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 5, offset: 1911},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 76, col: 1, offset: 2264},
			expr: &actionExpr{
				pos: position{line: 76, col: 18, offset: 2281},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 76, col: 18, offset: 2281},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 76, col: 18, offset: 2281},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 76, col: 28, offset: 2291},
							expr: &charClassMatcher{
								pos:        position{line: 76, col: 29, offset: 2292},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 80, col: 1, offset: 2348},
			expr: &actionExpr{
				pos: position{line: 80, col: 30, offset: 2377},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 80, col: 30, offset: 2377},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 80, col: 30, offset: 2377},
							expr: &ruleRefExpr{
								pos:  position{line: 80, col: 30, offset: 2377},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 37, offset: 2384},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 80, col: 46, offset: 2393},
								expr: &ruleRefExpr{
									pos:  position{line: 80, col: 47, offset: 2394},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 84, col: 1, offset: 2516},
			expr: &actionExpr{
				pos: position{line: 84, col: 37, offset: 2552},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 84, col: 37, offset: 2552},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 84, col: 37, offset: 2552},
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 38, offset: 2553},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 85, col: 5, offset: 2562},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 86, col: 9, offset: 2580},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 86, col: 10, offset: 2581},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 86, col: 10, offset: 2581},
											expr: &charClassMatcher{
												pos:        position{line: 86, col: 10, offset: 2581},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2676},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 90, col: 12, offset: 2709},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 90, col: 12, offset: 2709},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 97, col: 1, offset: 2846},
			expr: &choiceExpr{
				pos: position{line: 97, col: 19, offset: 2864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 97, col: 19, offset: 2864},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 97, col: 19, offset: 2864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 97, col: 19, offset: 2864},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 97, col: 24, offset: 2869},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 30, offset: 2875},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 97, col: 45, offset: 2890},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 97, col: 49, offset: 2894},
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 49, offset: 2894},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 56, offset: 2901},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 2961},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 99, col: 5, offset: 2961},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 99, col: 5, offset: 2961},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 99, col: 9, offset: 2965},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 15, offset: 2971},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 99, col: 30, offset: 2986},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 99, col: 35, offset: 2991},
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 35, offset: 2991},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 99, col: 42, offset: 2998},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 106, col: 1, offset: 3180},
			expr: &actionExpr{
				pos: position{line: 107, col: 5, offset: 3204},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 107, col: 5, offset: 3204},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 107, col: 5, offset: 3204},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 111, col: 5, offset: 3342},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 111, col: 16, offset: 3353},
								expr: &choiceExpr{
									pos: position{line: 113, col: 9, offset: 3420},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 113, col: 10, offset: 3421},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 113, col: 10, offset: 3421},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 113, col: 10, offset: 3421},
														label: "anchor",
														expr: &ruleRefExpr{
															pos:  position{line: 113, col: 18, offset: 3429},
															name: "ShortHandAnchor",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 113, col: 35, offset: 3446},
														expr: &ruleRefExpr{
															pos:  position{line: 113, col: 35, offset: 3446},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 117, col: 12, offset: 3563},
											run: (*parser).callonBlockAttributes13,
											expr: &seqExpr{
												pos: position{line: 117, col: 12, offset: 3563},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 117, col: 12, offset: 3563},
														label: "title",
														expr: &ruleRefExpr{
															pos:  position{line: 117, col: 19, offset: 3570},
															name: "ShortHandTitle",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 117, col: 35, offset: 3586},
														expr: &ruleRefExpr{
															pos:  position{line: 117, col: 35, offset: 3586},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 121, col: 12, offset: 3673},
											run: (*parser).callonBlockAttributes19,
											expr: &seqExpr{
												pos: position{line: 121, col: 12, offset: 3673},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 121, col: 12, offset: 3673},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 121, col: 24, offset: 3685},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 121, col: 44, offset: 3705},
														expr: &ruleRefExpr{
															pos:  position{line: 121, col: 44, offset: 3705},
															name: "Space",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 129, col: 1, offset: 3879},
			expr: &actionExpr{
				pos: position{line: 130, col: 5, offset: 3903},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 130, col: 5, offset: 3903},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 130, col: 5, offset: 3903},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 131, col: 5, offset: 3911},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 131, col: 16, offset: 3922},
								expr: &actionExpr{
									pos: position{line: 132, col: 9, offset: 3932},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 133, col: 13, offset: 3946},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 133, col: 13, offset: 3946},
												expr: &litMatcher{
													pos:        position{line: 133, col: 14, offset: 3947},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 134, col: 13, offset: 3979},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 134, col: 24, offset: 3990},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 134, col: 24, offset: 3990},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 134, col: 46, offset: 4012},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 139, col: 5, offset: 4095},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 144, col: 1, offset: 4223},
			expr: &actionExpr{
				pos: position{line: 145, col: 4, offset: 4245},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 145, col: 4, offset: 4245},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 145, col: 4, offset: 4245},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 5, offset: 4255},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 147, col: 9, offset: 4268},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 147, col: 9, offset: 4268},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 147, col: 18, offset: 4277},
										expr: &choiceExpr{
											pos: position{line: 148, col: 13, offset: 4291},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 148, col: 14, offset: 4292},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 148, col: 14, offset: 4292},
														expr: &charClassMatcher{
															pos:        position{line: 148, col: 14, offset: 4292},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 151, col: 15, offset: 4458},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 152, col: 15, offset: 4491},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 153, col: 16, offset: 4528},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 153, col: 16, offset: 4528},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 159, col: 5, offset: 4714},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 164, col: 1, offset: 4815},
			expr: &actionExpr{
				pos: position{line: 164, col: 19, offset: 4833},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 164, col: 19, offset: 4833},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 19, offset: 4833},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 23, offset: 4837},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 165, col: 5, offset: 4849},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 165, col: 5, offset: 4849},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 165, col: 5, offset: 4849},
											expr: &charClassMatcher{
												pos:        position{line: 165, col: 6, offset: 4850},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 166, col: 5, offset: 4962},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 166, col: 14, offset: 4971},
												expr: &choiceExpr{
													pos: position{line: 167, col: 9, offset: 4981},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 167, col: 10, offset: 4982},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 167, col: 10, offset: 4982},
																expr: &charClassMatcher{
																	pos:        position{line: 167, col: 10, offset: 4982},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 170, col: 11, offset: 5079},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 171, col: 11, offset: 5108},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 172, col: 12, offset: 5141},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 172, col: 12, offset: 5141},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 183, col: 1, offset: 5541},
			expr: &actionExpr{
				pos: position{line: 184, col: 5, offset: 5567},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 184, col: 5, offset: 5567},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 184, col: 5, offset: 5567},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 184, col: 9, offset: 5571},
							expr: &litMatcher{
								pos:        position{line: 184, col: 10, offset: 5572},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 186, col: 5, offset: 5742},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 186, col: 31, offset: 5768},
								expr: &ruleRefExpr{
									pos:  position{line: 186, col: 32, offset: 5769},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 187, col: 5, offset: 5801},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 187, col: 21, offset: 5817},
								expr: &choiceExpr{
									pos: position{line: 187, col: 22, offset: 5818},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 187, col: 22, offset: 5818},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 187, col: 44, offset: 5840},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 188, col: 5, offset: 5861},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 201, col: 1, offset: 6389},
			expr: &actionExpr{
				pos: position{line: 202, col: 5, offset: 6423},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 202, col: 5, offset: 6423},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 202, col: 5, offset: 6423},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 202, col: 10, offset: 6428},
								expr: &ruleRefExpr{
									pos:  position{line: 203, col: 9, offset: 6438},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 205, col: 5, offset: 6468},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 205, col: 12, offset: 6475},
								expr: &choiceExpr{
									pos: position{line: 206, col: 9, offset: 6486},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 206, col: 9, offset: 6486},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 207, col: 11, offset: 6518},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 208, col: 11, offset: 6553},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 209, col: 8, offset: 6586},
							expr: &seqExpr{
								pos: position{line: 209, col: 9, offset: 6587},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 209, col: 9, offset: 6587},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 209, col: 13, offset: 6591},
										expr: &ruleRefExpr{
											pos:  position{line: 209, col: 13, offset: 6591},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 210, col: 5, offset: 6605},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 226, col: 1, offset: 7021},
			expr: &actionExpr{
				pos: position{line: 226, col: 25, offset: 7045},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 226, col: 25, offset: 7045},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 25, offset: 7045},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 29, offset: 7049},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 33, offset: 7053},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 230, col: 1, offset: 7127},
			expr: &actionExpr{
				pos: position{line: 230, col: 23, offset: 7149},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 230, col: 23, offset: 7149},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 230, col: 30, offset: 7156},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 235, col: 1, offset: 7282},
			expr: &actionExpr{
				pos: position{line: 235, col: 30, offset: 7311},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 235, col: 30, offset: 7311},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 235, col: 30, offset: 7311},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 34, offset: 7315},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 40, offset: 7321},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 240, col: 1, offset: 7443},
			expr: &actionExpr{
				pos: position{line: 240, col: 29, offset: 7471},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 240, col: 29, offset: 7471},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 240, col: 29, offset: 7471},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 240, col: 33, offset: 7475},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 41, offset: 7483},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 245, col: 1, offset: 7596},
			expr: &choiceExpr{
				pos: position{line: 246, col: 5, offset: 7628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7628},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 7, offset: 7662},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 248, col: 7, offset: 7696},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 248, col: 7, offset: 7696},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 248, col: 7, offset: 7696},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 248, col: 16, offset: 7705},
										expr: &choiceExpr{
											pos: position{line: 251, col: 5, offset: 7875},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 251, col: 6, offset: 7876},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 251, col: 6, offset: 7876},
														expr: &charClassMatcher{
															pos:        position{line: 251, col: 6, offset: 7876},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 254, col: 5, offset: 7970},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 255, col: 5, offset: 7995},
													name: "Quote",
												},
												&ruleRefExpr{
													pos:  position{line: 256, col: 5, offset: 8007},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 257, col: 6, offset: 8036},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 257, col: 6, offset: 8036},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 259, col: 10, offset: 8106},
									expr: &charClassMatcher{
										pos:        position{line: 259, col: 11, offset: 8107},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 263, col: 1, offset: 8183},
			expr: &choiceExpr{
				pos: position{line: 263, col: 24, offset: 8206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 8212},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 264, col: 5, offset: 8212},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 264, col: 5, offset: 8212},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 12, offset: 8219},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 264, col: 29, offset: 8236},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 264, col: 29, offset: 8236},
											expr: &seqExpr{
												pos: position{line: 264, col: 30, offset: 8237},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 264, col: 30, offset: 8237},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 264, col: 34, offset: 8241},
														expr: &ruleRefExpr{
															pos:  position{line: 264, col: 34, offset: 8241},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 264, col: 45, offset: 8252},
											expr: &litMatcher{
												pos:        position{line: 264, col: 46, offset: 8253},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 269, col: 6, offset: 8490},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 269, col: 6, offset: 8490},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 269, col: 6, offset: 8490},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 269, col: 13, offset: 8497},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 269, col: 13, offset: 8497},
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 13, offset: 8497},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 269, col: 21, offset: 8505},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 269, col: 22, offset: 8506},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 269, col: 22, offset: 8506},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 269, col: 26, offset: 8510},
																expr: &ruleRefExpr{
																	pos:  position{line: 269, col: 26, offset: 8510},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 269, col: 36, offset: 8520},
														expr: &litMatcher{
															pos:        position{line: 269, col: 37, offset: 8521},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 270, col: 5, offset: 8531},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 280, col: 1, offset: 8846},
			expr: &actionExpr{
				pos: position{line: 280, col: 19, offset: 8864},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 280, col: 19, offset: 8864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 280, col: 19, offset: 8864},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 24, offset: 8869},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 280, col: 43, offset: 8888},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 280, col: 47, offset: 8892},
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 47, offset: 8892},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 280, col: 54, offset: 8899},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 61, offset: 8906},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 280, col: 77, offset: 8922},
							expr: &seqExpr{
								pos: position{line: 280, col: 78, offset: 8923},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 280, col: 78, offset: 8923},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 280, col: 82, offset: 8927},
										expr: &ruleRefExpr{
											pos:  position{line: 280, col: 82, offset: 8927},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 285, col: 1, offset: 9151},
			expr: &actionExpr{
				pos: position{line: 285, col: 22, offset: 9172},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 285, col: 22, offset: 9172},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 285, col: 22, offset: 9172},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 23, offset: 9173},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 285, col: 29, offset: 9179},
							expr: &charClassMatcher{
								pos:        position{line: 285, col: 29, offset: 9179},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 42, offset: 9192},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 42, offset: 9192},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 289, col: 1, offset: 9262},
			expr: &actionExpr{
				pos: position{line: 290, col: 5, offset: 9285},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 290, col: 5, offset: 9285},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 290, col: 5, offset: 9285},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 291, col: 9, offset: 9301},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 291, col: 9, offset: 9301},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 292, col: 11, offset: 9339},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 293, col: 11, offset: 9377},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 295, col: 5, offset: 9411},
							expr: &notExpr{
								pos: position{line: 295, col: 7, offset: 9413},
								expr: &seqExpr{
									pos: position{line: 295, col: 9, offset: 9415},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 295, col: 9, offset: 9415},
											expr: &ruleRefExpr{
												pos:  position{line: 295, col: 9, offset: 9415},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 295, col: 16, offset: 9422},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 299, col: 1, offset: 9463},
			expr: &actionExpr{
				pos: position{line: 300, col: 5, offset: 9498},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 300, col: 5, offset: 9498},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 300, col: 5, offset: 9498},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 5, offset: 9507},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 301, col: 14, offset: 9516},
								expr: &choiceExpr{
									pos: position{line: 303, col: 9, offset: 9606},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 303, col: 9, offset: 9606},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 304, col: 12, offset: 9623},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 304, col: 12, offset: 9623},
												expr: &charClassMatcher{
													pos:        position{line: 304, col: 12, offset: 9623},
													val:        "[^\\r\\n\\uFFFD\\\\{&<>']",
													chars:      []rune{'\r', '\n', '�', '\\', '{', '&', '<', '>', '\''},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 307, col: 11, offset: 9772},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 308, col: 11, offset: 9804},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 309, col: 11, offset: 9831},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 310, col: 12, offset: 9861},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 310, col: 12, offset: 9861},
													run: (*parser).callonSingleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 310, col: 12, offset: 9861},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 313, col: 11, offset: 9953},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 313, col: 17, offset: 9959},
													run: (*parser).callonSingleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 313, col: 17, offset: 9959},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 317, col: 5, offset: 10048},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 321, col: 1, offset: 10104},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 10139},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 10139},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 10139},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 10149},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 323, col: 14, offset: 10158},
								expr: &choiceExpr{
									pos: position{line: 324, col: 9, offset: 10168},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 324, col: 9, offset: 10168},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 325, col: 12, offset: 10185},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 325, col: 12, offset: 10185},
												expr: &charClassMatcher{
													pos:        position{line: 325, col: 12, offset: 10185},
													val:        "[^\\r\\n\\uFFFD&<>\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '&', '<', '>', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 328, col: 11, offset: 10334},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 329, col: 11, offset: 10366},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 330, col: 11, offset: 10393},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 331, col: 12, offset: 10423},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 331, col: 12, offset: 10423},
													run: (*parser).callonDoubleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 331, col: 12, offset: 10423},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 334, col: 11, offset: 10515},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 334, col: 17, offset: 10521},
													run: (*parser).callonDoubleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 334, col: 17, offset: 10521},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 5, offset: 10610},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 343, col: 1, offset: 10745},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 10776},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 10776},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 344, col: 5, offset: 10776},
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 6, offset: 10777},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 5, offset: 10787},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 345, col: 14, offset: 10796},
								expr: &actionExpr{
									pos: position{line: 346, col: 9, offset: 10806},
									run: (*parser).callonUnquotedAttributeValue7,
									expr: &seqExpr{
										pos: position{line: 346, col: 9, offset: 10806},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 346, col: 9, offset: 10806},
												expr: &litMatcher{
													pos:        position{line: 346, col: 10, offset: 10807},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 347, col: 9, offset: 10835},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 348, col: 13, offset: 10857},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 348, col: 13, offset: 10857},
															name: "Quote",
														},
														&actionExpr{
															pos: position{line: 349, col: 16, offset: 10878},
															run: (*parser).callonUnquotedAttributeValue14,
															expr: &oneOrMoreExpr{
																pos: position{line: 349, col: 16, offset: 10878},
																expr: &charClassMatcher{
																	pos:        position{line: 349, col: 16, offset: 10878},
																	val:        "[^,=\\r\\n\\uFFFD&<>{\\] ]",
																	chars:      []rune{',', '=', '\r', '\n', '�', '&', '<', '>', '{', ']', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 352, col: 15, offset: 10996},
															name: "Space",
														},
														&ruleRefExpr{
															pos:  position{line: 353, col: 15, offset: 11016},
															name: "AttributeSubstitution",
														},
														&ruleRefExpr{
															pos:  position{line: 354, col: 15, offset: 11052},
															name: "SpecialCharacter",
														},
														&ruleRefExpr{
															pos:  position{line: 355, col: 15, offset: 11083},
															name: "ElementPlaceHolder",
														},
														&actionExpr{
															pos: position{line: 356, col: 16, offset: 11117},
															run: (*parser).callonUnquotedAttributeValue21,
															expr: &litMatcher{
																pos:        position{line: 356, col: 16, offset: 11117},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 363, col: 5, offset: 11267},
							run: (*parser).callonUnquotedAttributeValue23,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 374, col: 1, offset: 11619},
			expr: &actionExpr{
				pos: position{line: 376, col: 5, offset: 11710},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 376, col: 5, offset: 11710},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 376, col: 5, offset: 11710},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 379, col: 5, offset: 11774},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 379, col: 14, offset: 11783},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 379, col: 14, offset: 11783},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 36, offset: 11805},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 386, col: 1, offset: 11970},
			expr: &actionExpr{
				pos: position{line: 386, col: 31, offset: 12000},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 386, col: 31, offset: 12000},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 386, col: 31, offset: 12000},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 386, col: 35, offset: 12004},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 40, offset: 12009},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 386, col: 54, offset: 12023},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 391, col: 1, offset: 12139},
			expr: &choiceExpr{
				pos: position{line: 391, col: 24, offset: 12162},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 391, col: 24, offset: 12162},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 391, col: 47, offset: 12185},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 393, col: 1, offset: 12321},
			expr: &actionExpr{
				pos: position{line: 393, col: 25, offset: 12345},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 393, col: 25, offset: 12345},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 25, offset: 12345},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 393, col: 37, offset: 12357},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 42, offset: 12362},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 56, offset: 12376},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 393, col: 62, offset: 12382},
								expr: &ruleRefExpr{
									pos:  position{line: 393, col: 63, offset: 12383},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 78, offset: 12398},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 397, col: 1, offset: 12476},
			expr: &actionExpr{
				pos: position{line: 397, col: 25, offset: 12500},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 397, col: 25, offset: 12500},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 397, col: 25, offset: 12500},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 397, col: 38, offset: 12513},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 43, offset: 12518},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 397, col: 57, offset: 12532},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 397, col: 63, offset: 12538},
								expr: &ruleRefExpr{
									pos:  position{line: 397, col: 64, offset: 12539},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 397, col: 79, offset: 12554},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 401, col: 1, offset: 12629},
			expr: &actionExpr{
				pos: position{line: 401, col: 17, offset: 12645},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 401, col: 17, offset: 12645},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 17, offset: 12645},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 21, offset: 12649},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 401, col: 28, offset: 12656},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 401, col: 28, offset: 12656},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 401, col: 28, offset: 12656},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 403, col: 9, offset: 12710},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 403, col: 9, offset: 12710},
											expr: &charClassMatcher{
												pos:        position{line: 403, col: 9, offset: 12710},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 412, col: 1, offset: 12912},
			expr: &actionExpr{
				pos: position{line: 412, col: 14, offset: 12925},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 412, col: 14, offset: 12925},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 14, offset: 12925},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 14, offset: 12925},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 412, col: 21, offset: 12932},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 419, col: 1, offset: 13169},
			expr: &actionExpr{
				pos: position{line: 421, col: 5, offset: 13247},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 421, col: 5, offset: 13247},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 421, col: 5, offset: 13247},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 424, col: 5, offset: 13309},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 9, offset: 13313},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 424, col: 14, offset: 13318},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 424, col: 14, offset: 13318},
									expr: &charClassMatcher{
										pos:        position{line: 424, col: 14, offset: 13318},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 424, col: 62, offset: 13366},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 424, col: 66, offset: 13370},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 66, offset: 13370},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 424, col: 73, offset: 13377},
							expr: &choiceExpr{
								pos: position{line: 424, col: 75, offset: 13379},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 424, col: 75, offset: 13379},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 424, col: 81, offset: 13385},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElement",
			pos:  position{line: 428, col: 1, offset: 13446},
			expr: &actionExpr{
				pos: position{line: 428, col: 23, offset: 13468},
				run: (*parser).callonCalloutListElement1,
				expr: &seqExpr{
					pos: position{line: 428, col: 23, offset: 13468},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 428, col: 23, offset: 13468},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 28, offset: 13473},
								name: "CalloutListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 54, offset: 13499},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 67, offset: 13512},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElementPrefix",
			pos:  position{line: 432, col: 1, offset: 13627},
			expr: &actionExpr{
				pos: position{line: 432, col: 29, offset: 13655},
				run: (*parser).callonCalloutListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 432, col: 29, offset: 13655},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 432, col: 29, offset: 13655},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 432, col: 33, offset: 13659},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 432, col: 38, offset: 13664},
								run: (*parser).callonCalloutListElementPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 432, col: 38, offset: 13664},
									expr: &charClassMatcher{
										pos:        position{line: 432, col: 38, offset: 13664},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 432, col: 86, offset: 13712},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 432, col: 90, offset: 13716},
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 90, offset: 13716},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 440, col: 1, offset: 13947},
			expr: &seqExpr{
				pos: position{line: 440, col: 31, offset: 13977},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 440, col: 31, offset: 13977},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 440, col: 38, offset: 13984},
						expr: &ruleRefExpr{
							pos:  position{line: 440, col: 38, offset: 13984},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 440, col: 45, offset: 13991},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 442, col: 1, offset: 13996},
			expr: &choiceExpr{
				pos: position{line: 442, col: 29, offset: 14024},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 442, col: 30, offset: 14025},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 442, col: 30, offset: 14025},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 442, col: 37, offset: 14032},
								expr: &ruleRefExpr{
									pos:  position{line: 442, col: 37, offset: 14032},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 442, col: 44, offset: 14039},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 442, col: 51, offset: 14046},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 459, col: 1, offset: 14536},
			expr: &actionExpr{
				pos: position{line: 464, col: 5, offset: 14695},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 464, col: 5, offset: 14695},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 464, col: 14, offset: 14704},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 468, col: 1, offset: 14750},
			expr: &actionExpr{
				pos: position{line: 468, col: 12, offset: 14761},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 468, col: 12, offset: 14761},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 468, col: 12, offset: 14761},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 468, col: 20, offset: 14769},
								expr: &anyMatcher{
									line: 468, col: 21, offset: 14770,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 25, offset: 14774},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 472, col: 1, offset: 14827},
			expr: &actionExpr{
				pos: position{line: 472, col: 22, offset: 14848},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 472, col: 22, offset: 14848},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 472, col: 22, offset: 14848},
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 23, offset: 14849},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 472, col: 45, offset: 14871},
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 45, offset: 14871},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 472, col: 52, offset: 14878},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 472, col: 57, offset: 14883},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 66, offset: 14892},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 92, offset: 14918},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 476, col: 1, offset: 14991},
			expr: &actionExpr{
				pos: position{line: 476, col: 29, offset: 15019},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 476, col: 29, offset: 15019},
					expr: &charClassMatcher{
						pos:        position{line: 476, col: 29, offset: 15019},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 483, col: 1, offset: 15184},
			expr: &choiceExpr{
				pos: position{line: 483, col: 19, offset: 15202},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 483, col: 19, offset: 15202},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 483, col: 44, offset: 15227},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 485, col: 1, offset: 15252},
			expr: &choiceExpr{
				pos: position{line: 485, col: 27, offset: 15278},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 485, col: 27, offset: 15278},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 485, col: 27, offset: 15278},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 485, col: 27, offset: 15278},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 485, col: 32, offset: 15283},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 36, offset: 15287},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 485, col: 40, offset: 15291},
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 40, offset: 15291},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 485, col: 47, offset: 15298},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 485, col: 51, offset: 15302},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 58, offset: 15309},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 485, col: 79, offset: 15330},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 487, col: 9, offset: 15403},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 487, col: 9, offset: 15403},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 487, col: 9, offset: 15403},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 487, col: 14, offset: 15408},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 18, offset: 15412},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 22, offset: 15416},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 491, col: 1, offset: 15487},
			expr: &actionExpr{
				pos: position{line: 491, col: 27, offset: 15513},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 491, col: 27, offset: 15513},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 491, col: 27, offset: 15513},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 491, col: 35, offset: 15521},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 40, offset: 15526},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 54, offset: 15540},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 72, offset: 15558},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 495, col: 1, offset: 15692},
			expr: &oneOrMoreExpr{
				pos: position{line: 495, col: 24, offset: 15715},
				expr: &choiceExpr{
					pos: position{line: 496, col: 5, offset: 15721},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 496, col: 6, offset: 15722},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 496, col: 6, offset: 15722},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 496, col: 6, offset: 15722},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 496, col: 14, offset: 15730},
										expr: &charClassMatcher{
											pos:        position{line: 496, col: 14, offset: 15730},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 499, col: 7, offset: 15925},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 500, col: 8, offset: 15954},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 500, col: 8, offset: 15954},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 509, col: 1, offset: 16229},
			expr: &actionExpr{
				pos: position{line: 509, col: 19, offset: 16247},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 509, col: 19, offset: 16247},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 509, col: 19, offset: 16247},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 21, offset: 16249},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 5, offset: 16279},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 510, col: 16, offset: 16290},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 510, col: 16, offset: 16290},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 511, col: 7, offset: 16349},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 512, col: 7, offset: 16377},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 513, col: 7, offset: 16406},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 514, col: 7, offset: 16435},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 515, col: 7, offset: 16464},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 516, col: 7, offset: 16490},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 517, col: 7, offset: 16518},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 521, col: 1, offset: 16584},
			expr: &actionExpr{
				pos: position{line: 521, col: 26, offset: 16609},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 521, col: 26, offset: 16609},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 521, col: 26, offset: 16609},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 521, col: 33, offset: 16616},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 33, offset: 16616},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 40, offset: 16623},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 525, col: 1, offset: 16682},
			expr: &actionExpr{
				pos: position{line: 525, col: 25, offset: 16706},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 525, col: 25, offset: 16706},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 525, col: 25, offset: 16706},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 525, col: 31, offset: 16712},
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 31, offset: 16712},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 38, offset: 16719},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 529, col: 1, offset: 16777},
			expr: &actionExpr{
				pos: position{line: 529, col: 26, offset: 16802},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 529, col: 26, offset: 16802},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 529, col: 26, offset: 16802},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 529, col: 33, offset: 16809},
							expr: &ruleRefExpr{
								pos:  position{line: 529, col: 33, offset: 16809},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 533, col: 1, offset: 16871},
			expr: &ruleRefExpr{
				pos:  position{line: 533, col: 25, offset: 16895},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 535, col: 1, offset: 16918},
			expr: &actionExpr{
				pos: position{line: 535, col: 26, offset: 16943},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 535, col: 26, offset: 16943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 535, col: 26, offset: 16943},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 535, col: 33, offset: 16950},
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 33, offset: 16950},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 40, offset: 16957},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 539, col: 1, offset: 17016},
			expr: &actionExpr{
				pos: position{line: 539, col: 26, offset: 17041},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 539, col: 26, offset: 17041},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 26, offset: 17041},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 539, col: 33, offset: 17048},
							expr: &ruleRefExpr{
								pos:  position{line: 539, col: 33, offset: 17048},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 40, offset: 17055},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 543, col: 1, offset: 17114},
			expr: &actionExpr{
				pos: position{line: 543, col: 24, offset: 17137},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 543, col: 24, offset: 17137},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 24, offset: 17137},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 543, col: 31, offset: 17144},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 31, offset: 17144},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 38, offset: 17151},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 547, col: 1, offset: 17208},
			expr: &actionExpr{
				pos: position{line: 547, col: 26, offset: 17233},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 547, col: 26, offset: 17233},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 547, col: 26, offset: 17233},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 547, col: 33, offset: 17240},
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 33, offset: 17240},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 547, col: 40, offset: 17247},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 551, col: 1, offset: 17306},
			expr: &actionExpr{
				pos: position{line: 551, col: 30, offset: 17335},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 551, col: 30, offset: 17335},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 551, col: 30, offset: 17335},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 551, col: 37, offset: 17342},
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 37, offset: 17342},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 551, col: 44, offset: 17349},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 618, col: 1, offset: 19470},
			expr: &actionExpr{
				pos: position{line: 619, col: 9, offset: 19496},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 619, col: 9, offset: 19496},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 619, col: 9, offset: 19496},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 619, col: 13, offset: 19500},
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 13, offset: 19500},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 20, offset: 19507},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 27, offset: 19514},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 49, offset: 19536},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 619, col: 53, offset: 19540},
								expr: &ruleRefExpr{
									pos:  position{line: 619, col: 53, offset: 19540},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 71, offset: 19558},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 623, col: 1, offset: 19673},
			expr: &choiceExpr{
				pos: position{line: 624, col: 9, offset: 19709},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 624, col: 9, offset: 19709},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 11, offset: 19737},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 626, col: 11, offset: 19769},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 627, col: 11, offset: 19799},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 629, col: 1, offset: 19816},
			expr: &choiceExpr{
				pos: position{line: 630, col: 9, offset: 19853},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 630, col: 9, offset: 19853},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 631, col: 11, offset: 19881},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 632, col: 11, offset: 19913},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 633, col: 11, offset: 19943},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 635, col: 1, offset: 19961},
			expr: &choiceExpr{
				pos: position{line: 635, col: 20, offset: 19980},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 635, col: 20, offset: 19980},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 635, col: 48, offset: 20008},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 637, col: 1, offset: 20038},
			expr: &actionExpr{
				pos: position{line: 637, col: 30, offset: 20067},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 637, col: 30, offset: 20067},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 637, col: 30, offset: 20067},
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 30, offset: 20067},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 637, col: 37, offset: 20074},
							expr: &litMatcher{
								pos:        position{line: 637, col: 38, offset: 20075},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 637, col: 42, offset: 20079},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 637, col: 51, offset: 20088},
								expr: &ruleRefExpr{
									pos:  position{line: 637, col: 51, offset: 20088},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 68, offset: 20105},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 641, col: 1, offset: 20175},
			expr: &actionExpr{
				pos: position{line: 641, col: 33, offset: 20207},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 641, col: 33, offset: 20207},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 641, col: 33, offset: 20207},
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 33, offset: 20207},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 641, col: 40, offset: 20214},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 641, col: 51, offset: 20225},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 59, offset: 20233},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 641, col: 75, offset: 20249},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 645, col: 1, offset: 20328},
			expr: &actionExpr{
				pos: position{line: 645, col: 19, offset: 20346},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 645, col: 19, offset: 20346},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 645, col: 19, offset: 20346},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 19, offset: 20346},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 26, offset: 20353},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 36, offset: 20363},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 56, offset: 20383},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 645, col: 62, offset: 20389},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 63, offset: 20390},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 645, col: 85, offset: 20412},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 85, offset: 20412},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 645, col: 92, offset: 20419},
							expr: &litMatcher{
								pos:        position{line: 645, col: 92, offset: 20419},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 645, col: 97, offset: 20424},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 97, offset: 20424},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 650, col: 1, offset: 20569},
			expr: &actionExpr{
				pos: position{line: 650, col: 23, offset: 20591},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 650, col: 23, offset: 20591},
					expr: &charClassMatcher{
						pos:        position{line: 650, col: 23, offset: 20591},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 654, col: 1, offset: 20638},
			expr: &actionExpr{
				pos: position{line: 654, col: 24, offset: 20661},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 654, col: 24, offset: 20661},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 654, col: 24, offset: 20661},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 654, col: 28, offset: 20665},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 654, col: 35, offset: 20672},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 654, col: 36, offset: 20673},
									expr: &charClassMatcher{
										pos:        position{line: 654, col: 36, offset: 20673},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 656, col: 4, offset: 20720},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 662, col: 1, offset: 20881},
			expr: &actionExpr{
				pos: position{line: 662, col: 21, offset: 20901},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 662, col: 21, offset: 20901},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 662, col: 21, offset: 20901},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 21, offset: 20901},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 662, col: 28, offset: 20908},
							expr: &litMatcher{
								pos:        position{line: 662, col: 29, offset: 20909},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 662, col: 33, offset: 20913},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 663, col: 9, offset: 20932},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 663, col: 10, offset: 20933},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 663, col: 10, offset: 20933},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 663, col: 10, offset: 20933},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 663, col: 21, offset: 20944},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 663, col: 45, offset: 20968},
													expr: &litMatcher{
														pos:        position{line: 663, col: 45, offset: 20968},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 663, col: 50, offset: 20973},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 663, col: 58, offset: 20981},
														expr: &ruleRefExpr{
															pos:  position{line: 663, col: 59, offset: 20982},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 663, col: 82, offset: 21005},
													expr: &litMatcher{
														pos:        position{line: 663, col: 82, offset: 21005},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 663, col: 87, offset: 21010},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 663, col: 97, offset: 21020},
														expr: &ruleRefExpr{
															pos:  position{line: 663, col: 98, offset: 21021},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 665, col: 15, offset: 21138},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 665, col: 15, offset: 21138},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 665, col: 15, offset: 21138},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 665, col: 24, offset: 21147},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 665, col: 46, offset: 21169},
													expr: &litMatcher{
														pos:        position{line: 665, col: 46, offset: 21169},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 665, col: 51, offset: 21174},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 665, col: 61, offset: 21184},
														expr: &ruleRefExpr{
															pos:  position{line: 665, col: 62, offset: 21185},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 667, col: 13, offset: 21294},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 672, col: 1, offset: 21424},
			expr: &choiceExpr{
				pos: position{line: 672, col: 27, offset: 21450},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 672, col: 27, offset: 21450},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 672, col: 27, offset: 21450},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 672, col: 27, offset: 21450},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 672, col: 32, offset: 21455},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 672, col: 39, offset: 21462},
									expr: &charClassMatcher{
										pos:        position{line: 672, col: 39, offset: 21462},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 21510},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 21510},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 674, col: 5, offset: 21510},
									expr: &litMatcher{
										pos:        position{line: 674, col: 5, offset: 21510},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 674, col: 11, offset: 21516},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 674, col: 18, offset: 21523},
									expr: &charClassMatcher{
										pos:        position{line: 674, col: 18, offset: 21523},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 674, col: 29, offset: 21534},
									expr: &ruleRefExpr{
										pos:  position{line: 674, col: 29, offset: 21534},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 674, col: 36, offset: 21541},
									expr: &litMatcher{
										pos:        position{line: 674, col: 37, offset: 21542},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 678, col: 1, offset: 21582},
			expr: &actionExpr{
				pos: position{line: 678, col: 25, offset: 21606},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 678, col: 25, offset: 21606},
					expr: &charClassMatcher{
						pos:        position{line: 678, col: 25, offset: 21606},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 682, col: 1, offset: 21652},
			expr: &actionExpr{
				pos: position{line: 682, col: 27, offset: 21678},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 682, col: 27, offset: 21678},
					expr: &charClassMatcher{
						pos:        position{line: 682, col: 27, offset: 21678},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 689, col: 1, offset: 21853},
			expr: &litMatcher{
				pos:        position{line: 689, col: 32, offset: 21884},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 690, col: 1, offset: 21893},
			expr: &actionExpr{
				pos: position{line: 690, col: 23, offset: 21915},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 690, col: 23, offset: 21915},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 690, col: 23, offset: 21915},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 690, col: 51, offset: 21943},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 690, col: 56, offset: 21948},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 690, col: 56, offset: 21948},
									expr: &charClassMatcher{
										pos:        position{line: 690, col: 56, offset: 21948},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 690, col: 95, offset: 21987},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 697, col: 1, offset: 22257},
			expr: &actionExpr{
				pos: position{line: 697, col: 14, offset: 22270},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 697, col: 14, offset: 22270},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 697, col: 14, offset: 22270},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 697, col: 20, offset: 22276},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 697, col: 24, offset: 22280},
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 24, offset: 22280},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 697, col: 31, offset: 22287},
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 32, offset: 22288},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 704, col: 1, offset: 22452},
			expr: &actionExpr{
				pos: position{line: 705, col: 5, offset: 22474},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 705, col: 5, offset: 22474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 705, col: 5, offset: 22474},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 706, col: 9, offset: 22489},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 706, col: 9, offset: 22489},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 706, col: 9, offset: 22489},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 707, col: 9, offset: 22510},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 707, col: 15, offset: 22516},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 708, col: 9, offset: 22539},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 708, col: 27, offset: 22557},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 712, col: 5, offset: 22718},
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 5, offset: 22718},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 712, col: 12, offset: 22725},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 716, col: 1, offset: 22785},
			expr: &ruleRefExpr{
				pos:  position{line: 716, col: 26, offset: 22810},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 719, col: 1, offset: 22850},
			expr: &actionExpr{
				pos: position{line: 719, col: 15, offset: 22864},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 719, col: 15, offset: 22864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 719, col: 15, offset: 22864},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 719, col: 22, offset: 22871},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 719, col: 22, offset: 22871},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 720, col: 7, offset: 22897},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 721, col: 7, offset: 22919},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 722, col: 7, offset: 22942},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 726, col: 1, offset: 23032},
			expr: &actionExpr{
				pos: position{line: 726, col: 23, offset: 23054},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 726, col: 23, offset: 23054},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 726, col: 23, offset: 23054},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 726, col: 30, offset: 23061},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 726, col: 30, offset: 23061},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 47, offset: 23078},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 5, offset: 23100},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 727, col: 12, offset: 23107},
								expr: &actionExpr{
									pos: position{line: 728, col: 9, offset: 23117},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 728, col: 9, offset: 23117},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 728, col: 10, offset: 23118},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 728, col: 10, offset: 23118},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 728, col: 16, offset: 23124},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 729, col: 9, offset: 23235},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 729, col: 16, offset: 23242},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 729, col: 16, offset: 23242},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 729, col: 33, offset: 23259},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 735, col: 1, offset: 23401},
			expr: &actionExpr{
				pos: position{line: 735, col: 19, offset: 23419},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 735, col: 19, offset: 23419},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 735, col: 19, offset: 23419},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 26, offset: 23426},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 735, col: 34, offset: 23434},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 735, col: 39, offset: 23439},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 44, offset: 23444},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 739, col: 1, offset: 23540},
			expr: &actionExpr{
				pos: position{line: 739, col: 20, offset: 23559},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 739, col: 20, offset: 23559},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 739, col: 32, offset: 23571},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 744, col: 1, offset: 23694},
			expr: &actionExpr{
				pos: position{line: 744, col: 14, offset: 23707},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 744, col: 14, offset: 23707},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 744, col: 14, offset: 23707},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 21, offset: 23714},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 40, offset: 23733},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 748, col: 1, offset: 23823},
			expr: &actionExpr{
				pos: position{line: 748, col: 22, offset: 23844},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 748, col: 22, offset: 23844},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 748, col: 22, offset: 23844},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 29, offset: 23851},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 749, col: 5, offset: 23865},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 749, col: 12, offset: 23872},
								expr: &actionExpr{
									pos: position{line: 750, col: 9, offset: 23882},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 750, col: 9, offset: 23882},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 750, col: 10, offset: 23883},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 750, col: 10, offset: 23883},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 750, col: 16, offset: 23889},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 751, col: 9, offset: 24000},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 751, col: 16, offset: 24007},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 757, col: 1, offset: 24142},
			expr: &choiceExpr{
				pos: position{line: 757, col: 13, offset: 24154},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 757, col: 13, offset: 24154},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 757, col: 13, offset: 24154},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 757, col: 18, offset: 24159},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 757, col: 18, offset: 24159},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 757, col: 30, offset: 24171},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 9, offset: 24247},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 759, col: 9, offset: 24247},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 759, col: 9, offset: 24247},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 759, col: 13, offset: 24251},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 759, col: 18, offset: 24256},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 759, col: 18, offset: 24256},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 759, col: 30, offset: 24268},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 763, col: 1, offset: 24344},
			expr: &actionExpr{
				pos: position{line: 763, col: 16, offset: 24359},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 763, col: 16, offset: 24359},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 763, col: 16, offset: 24359},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 763, col: 23, offset: 24366},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 763, col: 23, offset: 24366},
									expr: &litMatcher{
										pos:        position{line: 763, col: 24, offset: 24367},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 766, col: 5, offset: 24421},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 773, col: 1, offset: 24588},
			expr: &actionExpr{
				pos: position{line: 773, col: 21, offset: 24608},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 773, col: 21, offset: 24608},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 773, col: 21, offset: 24608},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 773, col: 29, offset: 24616},
								expr: &choiceExpr{
									pos: position{line: 773, col: 30, offset: 24617},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 773, col: 30, offset: 24617},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 773, col: 53, offset: 24640},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 773, col: 74, offset: 24661},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 773, col: 74, offset: 24661,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 107, offset: 24694},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 777, col: 1, offset: 24773},
			expr: &actionExpr{
				pos: position{line: 777, col: 25, offset: 24797},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 777, col: 25, offset: 24797},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 777, col: 25, offset: 24797},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 777, col: 33, offset: 24805},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 777, col: 38, offset: 24810},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 777, col: 38, offset: 24810},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 777, col: 78, offset: 24850},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 781, col: 1, offset: 24923},
			expr: &actionExpr{
				pos: position{line: 781, col: 23, offset: 24945},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 781, col: 23, offset: 24945},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 781, col: 23, offset: 24945},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 781, col: 31, offset: 24953},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 781, col: 36, offset: 24958},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 781, col: 36, offset: 24958},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 781, col: 76, offset: 24998},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 800, col: 1, offset: 25543},
			expr: &choiceExpr{
				pos: position{line: 800, col: 24, offset: 25566},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 800, col: 24, offset: 25566},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 800, col: 47, offset: 25589},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 800, col: 59, offset: 25601},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 802, col: 1, offset: 25618},
			expr: &actionExpr{
				pos: position{line: 802, col: 26, offset: 25643},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 802, col: 26, offset: 25643},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 802, col: 26, offset: 25643},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 802, col: 32, offset: 25649},
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 32, offset: 25649},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 802, col: 39, offset: 25656},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 806, col: 1, offset: 25719},
			expr: &actionExpr{
				pos: position{line: 806, col: 20, offset: 25738},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 806, col: 20, offset: 25738},
					expr: &anyMatcher{
						line: 806, col: 21, offset: 25739,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 813, col: 1, offset: 25909},
			expr: &actionExpr{
				pos: position{line: 814, col: 5, offset: 25932},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 814, col: 5, offset: 25932},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 814, col: 15, offset: 25942},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 814, col: 15, offset: 25942},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 814, col: 15, offset: 25942},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 814, col: 24, offset: 25951},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 816, col: 9, offset: 26043},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 816, col: 9, offset: 26043},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 816, col: 9, offset: 26043},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 816, col: 18, offset: 26052},
												expr: &ruleRefExpr{
													pos:  position{line: 816, col: 19, offset: 26053},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 816, col: 35, offset: 26069},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 832, col: 1, offset: 26386},
			expr: &actionExpr{
				pos: position{line: 833, col: 5, offset: 26409},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 833, col: 5, offset: 26409},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 833, col: 14, offset: 26418},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 833, col: 14, offset: 26418},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 834, col: 11, offset: 26479},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 835, col: 11, offset: 26524},
								expr: &ruleRefExpr{
									pos:  position{line: 835, col: 11, offset: 26524},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 836, col: 11, offset: 26542},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 836, col: 11, offset: 26542},
										expr: &ruleRefExpr{
											pos:  position{line: 836, col: 12, offset: 26543},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 837, col: 13, offset: 26561},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 837, col: 13, offset: 26561},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 838, col: 15, offset: 26592},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 839, col: 15, offset: 26612},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 26649},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 841, col: 15, offset: 26675},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 842, col: 15, offset: 26701},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 843, col: 15, offset: 26731},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 845, col: 15, offset: 26831},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 877, col: 1, offset: 27847},
			expr: &actionExpr{
				pos: position{line: 877, col: 20, offset: 27866},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 877, col: 20, offset: 27866},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 877, col: 20, offset: 27866},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 877, col: 25, offset: 27871},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 29, offset: 27875},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 877, col: 33, offset: 27879},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 877, col: 38, offset: 27884},
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 38, offset: 27884},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 884, col: 1, offset: 28130},
			expr: &actionExpr{
				pos: position{line: 884, col: 14, offset: 28143},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 884, col: 14, offset: 28143},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 884, col: 14, offset: 28143},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 884, col: 19, offset: 28148},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 25, offset: 28154},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 884, col: 43, offset: 28172},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 888, col: 1, offset: 28237},
			expr: &actionExpr{
				pos: position{line: 888, col: 21, offset: 28257},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 888, col: 21, offset: 28257},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 888, col: 30, offset: 28266},
						expr: &choiceExpr{
							pos: position{line: 888, col: 31, offset: 28267},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 888, col: 31, offset: 28267},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 888, col: 38, offset: 28274},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 888, col: 53, offset: 28289},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 888, col: 66, offset: 28302},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 888, col: 74, offset: 28310},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 888, col: 93, offset: 28329},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 888, col: 114, offset: 28350},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 888, col: 115, offset: 28351},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 888, col: 115, offset: 28351},
												expr: &litMatcher{
													pos:        position{line: 888, col: 116, offset: 28352},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 888, col: 121, offset: 28357,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 894, col: 1, offset: 28463},
			expr: &actionExpr{
				pos: position{line: 894, col: 23, offset: 28485},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 894, col: 23, offset: 28485},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 894, col: 23, offset: 28485},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 894, col: 29, offset: 28491},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 36, offset: 28498},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 5, offset: 28530},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 895, col: 11, offset: 28536},
								expr: &actionExpr{
									pos: position{line: 895, col: 12, offset: 28537},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 895, col: 12, offset: 28537},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 895, col: 12, offset: 28537},
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 12, offset: 28537},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 895, col: 19, offset: 28544},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 895, col: 23, offset: 28548},
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 23, offset: 28548},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 895, col: 30, offset: 28555},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 39, offset: 28564},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 896, col: 5, offset: 28622},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 896, col: 11, offset: 28628},
								expr: &actionExpr{
									pos: position{line: 896, col: 12, offset: 28629},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 896, col: 12, offset: 28629},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 896, col: 12, offset: 28629},
												expr: &ruleRefExpr{
													pos:  position{line: 896, col: 12, offset: 28629},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 896, col: 19, offset: 28636},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 896, col: 23, offset: 28640},
												expr: &ruleRefExpr{
													pos:  position{line: 896, col: 23, offset: 28640},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 896, col: 30, offset: 28647},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 896, col: 39, offset: 28656},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 897, col: 5, offset: 28714},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 901, col: 1, offset: 28793},
			expr: &actionExpr{
				pos: position{line: 901, col: 30, offset: 28822},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 901, col: 30, offset: 28822},
					expr: &choiceExpr{
						pos: position{line: 901, col: 31, offset: 28823},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 901, col: 31, offset: 28823},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 901, col: 42, offset: 28834},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 908, col: 1, offset: 28980},
			expr: &actionExpr{
				pos: position{line: 913, col: 5, offset: 29163},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 913, col: 5, offset: 29163},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 913, col: 5, offset: 29163},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 917, col: 5, offset: 29291},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 917, col: 15, offset: 29301},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 21, offset: 29307},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 917, col: 31, offset: 29317},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 49, offset: 29335},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 917, col: 67, offset: 29353},
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 67, offset: 29353},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 923, col: 1, offset: 29638},
			expr: &actionExpr{
				pos: position{line: 923, col: 16, offset: 29653},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 923, col: 16, offset: 29653},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 923, col: 16, offset: 29653},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 923, col: 25, offset: 29662},
							expr: &litMatcher{
								pos:        position{line: 923, col: 26, offset: 29663},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 923, col: 30, offset: 29667},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 36, offset: 29673},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 923, col: 46, offset: 29683},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 64, offset: 29701},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 930, col: 1, offset: 30045},
			expr: &actionExpr{
				pos: position{line: 930, col: 15, offset: 30059},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 930, col: 15, offset: 30059},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 930, col: 15, offset: 30059},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 930, col: 23, offset: 30067},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 930, col: 29, offset: 30073},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 930, col: 29, offset: 30073},
									expr: &charClassMatcher{
										pos:        position{line: 930, col: 29, offset: 30073},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 930, col: 73, offset: 30117},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 930, col: 85, offset: 30129},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 937, col: 1, offset: 30409},
			expr: &choiceExpr{
				pos: position{line: 937, col: 19, offset: 30427},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 937, col: 19, offset: 30427},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 937, col: 19, offset: 30427},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 937, col: 19, offset: 30427},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 937, col: 32, offset: 30440},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 41, offset: 30449},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 937, col: 58, offset: 30466},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 9, offset: 30542},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 939, col: 9, offset: 30542},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 939, col: 9, offset: 30542},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 939, col: 21, offset: 30554},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 26, offset: 30559},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 39, offset: 30572},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 939, col: 43, offset: 30576},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 939, col: 51, offset: 30584},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 52, offset: 30585},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 70, offset: 30603},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 943, col: 1, offset: 30672},
			expr: &ruleRefExpr{
				pos:  position{line: 943, col: 16, offset: 30687},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 945, col: 1, offset: 30698},
			expr: &actionExpr{
				pos: position{line: 945, col: 20, offset: 30717},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 945, col: 20, offset: 30717},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 945, col: 29, offset: 30726},
						expr: &seqExpr{
							pos: position{line: 945, col: 30, offset: 30727},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 945, col: 30, offset: 30727},
									expr: &litMatcher{
										pos:        position{line: 945, col: 31, offset: 30728},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 945, col: 35, offset: 30732},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 953, col: 1, offset: 30975},
			expr: &litMatcher{
				pos:        position{line: 953, col: 32, offset: 31006},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 955, col: 1, offset: 31011},
			expr: &actionExpr{
				pos: position{line: 955, col: 26, offset: 31036},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 955, col: 26, offset: 31036},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 955, col: 26, offset: 31036},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 955, col: 54, offset: 31064},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 955, col: 63, offset: 31073},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 93, offset: 31103},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 955, col: 121, offset: 31131},
							expr: &ruleRefExpr{
								pos:  position{line: 955, col: 122, offset: 31132},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 959, col: 1, offset: 31245},
			expr: &choiceExpr{
				pos: position{line: 959, col: 33, offset: 31277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 959, col: 34, offset: 31278},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 959, col: 34, offset: 31278},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 959, col: 35, offset: 31279},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 959, col: 35, offset: 31279},
											expr: &ruleRefExpr{
												pos:  position{line: 959, col: 36, offset: 31280},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 959, col: 64, offset: 31308},
											expr: &ruleRefExpr{
												pos:  position{line: 959, col: 65, offset: 31309},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 959, col: 71, offset: 31315},
											expr: &ruleRefExpr{
												pos:  position{line: 959, col: 72, offset: 31316},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 959, col: 80, offset: 31324,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 959, col: 83, offset: 31327},
									expr: &seqExpr{
										pos: position{line: 959, col: 84, offset: 31328},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 959, col: 84, offset: 31328},
												expr: &seqExpr{
													pos: position{line: 959, col: 86, offset: 31330},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 959, col: 86, offset: 31330},
															expr: &ruleRefExpr{
																pos:  position{line: 959, col: 86, offset: 31330},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 959, col: 93, offset: 31337},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 959, col: 122, offset: 31366},
												expr: &ruleRefExpr{
													pos:  position{line: 959, col: 123, offset: 31367},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 959, col: 151, offset: 31395},
												expr: &ruleRefExpr{
													pos:  position{line: 959, col: 152, offset: 31396},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 959, col: 160, offset: 31404,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 11, offset: 31554},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 961, col: 12, offset: 31555},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 961, col: 12, offset: 31555},
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 13, offset: 31556},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 961, col: 19, offset: 31562},
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 20, offset: 31563},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 961, col: 28, offset: 31571},
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 29, offset: 31572},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 961, col: 57, offset: 31600,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 965, col: 1, offset: 31690},
			expr: &litMatcher{
				pos:        position{line: 965, col: 32, offset: 31721},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 967, col: 1, offset: 31728},
			expr: &actionExpr{
				pos: position{line: 967, col: 26, offset: 31753},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 967, col: 26, offset: 31753},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 967, col: 26, offset: 31753},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 967, col: 54, offset: 31781},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 63, offset: 31790},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 967, col: 93, offset: 31820},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 967, col: 121, offset: 31848},
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 122, offset: 31849},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 971, col: 1, offset: 31962},
			expr: &choiceExpr{
				pos: position{line: 971, col: 33, offset: 31994},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 971, col: 34, offset: 31995},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 971, col: 34, offset: 31995},
							expr: &seqExpr{
								pos: position{line: 971, col: 35, offset: 31996},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 971, col: 35, offset: 31996},
										expr: &ruleRefExpr{
											pos:  position{line: 971, col: 36, offset: 31997},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 971, col: 64, offset: 32025,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 11, offset: 32198},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 973, col: 11, offset: 32198},
							expr: &seqExpr{
								pos: position{line: 973, col: 12, offset: 32199},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 973, col: 12, offset: 32199},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 13, offset: 32200},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 973, col: 19, offset: 32206},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 20, offset: 32207},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 973, col: 28, offset: 32215},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 29, offset: 32216},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 973, col: 57, offset: 32244,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 977, col: 1, offset: 32335},
			expr: &choiceExpr{
				pos: position{line: 977, col: 21, offset: 32355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 977, col: 21, offset: 32355},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 977, col: 21, offset: 32355},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 977, col: 21, offset: 32355},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 977, col: 30, offset: 32364},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 977, col: 38, offset: 32372},
										expr: &ruleRefExpr{
											pos:  position{line: 977, col: 39, offset: 32373},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 977, col: 67, offset: 32401},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 979, col: 9, offset: 32505},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 979, col: 9, offset: 32505},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 979, col: 9, offset: 32505},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 979, col: 19, offset: 32515},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 979, col: 27, offset: 32523},
										expr: &choiceExpr{
											pos: position{line: 979, col: 28, offset: 32524},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 979, col: 28, offset: 32524},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 979, col: 41, offset: 32537},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 69, offset: 32565},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 983, col: 1, offset: 32669},
			expr: &actionExpr{
				pos: position{line: 983, col: 30, offset: 32698},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 983, col: 30, offset: 32698},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 990, col: 1, offset: 32868},
			expr: &choiceExpr{
				pos: position{line: 990, col: 9, offset: 32876},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 990, col: 9, offset: 32876},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 24, offset: 32891},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 993, col: 1, offset: 32972},
			expr: &actionExpr{
				pos: position{line: 993, col: 17, offset: 32988},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 993, col: 17, offset: 32988},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 993, col: 17, offset: 32988},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 993, col: 25, offset: 32996},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 30, offset: 33001},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 993, col: 40, offset: 33011},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 58, offset: 33029},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 997, col: 1, offset: 33151},
			expr: &actionExpr{
				pos: position{line: 997, col: 17, offset: 33167},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 997, col: 17, offset: 33167},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 997, col: 17, offset: 33167},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 997, col: 22, offset: 33172},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 997, col: 42, offset: 33192},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 997, col: 59, offset: 33209},
								expr: &ruleRefExpr{
									pos:  position{line: 997, col: 60, offset: 33210},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElement",
			pos:  position{line: 1005, col: 1, offset: 33492},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 9, offset: 33515},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1006, col: 9, offset: 33515},
						name: "OrderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 11, offset: 33545},
						name: "UnorderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 11, offset: 33661},
						name: "CalloutListElement",
					},
				},
			},
		},
		{
			name: "OrderedListElement",
			pos:  position{line: 1013, col: 1, offset: 33707},
			expr: &actionExpr{
				pos: position{line: 1013, col: 23, offset: 33729},
				run: (*parser).callonOrderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1013, col: 23, offset: 33729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1013, col: 23, offset: 33729},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 31, offset: 33737},
								name: "OrderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1013, col: 57, offset: 33763},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 66, offset: 33772},
								name: "OrderedListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementPrefix",
			pos:  position{line: 1017, col: 1, offset: 33909},
			expr: &actionExpr{
				pos: position{line: 1018, col: 5, offset: 33942},
				run: (*parser).callonOrderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1018, col: 5, offset: 33942},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1018, col: 5, offset: 33942},
							expr: &ruleRefExpr{
								pos:  position{line: 1018, col: 5, offset: 33942},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1018, col: 12, offset: 33949},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1020, col: 9, offset: 34012},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1020, col: 9, offset: 34012},
										run: (*parser).callonOrderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1020, col: 9, offset: 34012},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1020, col: 9, offset: 34012},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1020, col: 16, offset: 34019},
														run: (*parser).callonOrderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1020, col: 16, offset: 34019},
															expr: &litMatcher{
																pos:        position{line: 1020, col: 17, offset: 34020},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1024, col: 9, offset: 34120},
													run: (*parser).callonOrderedListElementPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1043, col: 11, offset: 34837},
										run: (*parser).callonOrderedListElementPrefix14,
										expr: &seqExpr{
											pos: position{line: 1043, col: 11, offset: 34837},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1043, col: 11, offset: 34837},
													expr: &charClassMatcher{
														pos:        position{line: 1043, col: 12, offset: 34838},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1043, col: 20, offset: 34846},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1045, col: 13, offset: 34957},
										run: (*parser).callonOrderedListElementPrefix19,
										expr: &seqExpr{
											pos: position{line: 1045, col: 13, offset: 34957},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1045, col: 14, offset: 34958},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1045, col: 21, offset: 34965},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1047, col: 13, offset: 35079},
										run: (*parser).callonOrderedListElementPrefix23,
										expr: &seqExpr{
											pos: position{line: 1047, col: 13, offset: 35079},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1047, col: 14, offset: 35080},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1047, col: 21, offset: 35087},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1049, col: 13, offset: 35201},
										run: (*parser).callonOrderedListElementPrefix27,
										expr: &seqExpr{
											pos: position{line: 1049, col: 13, offset: 35201},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1049, col: 13, offset: 35201},
													expr: &charClassMatcher{
														pos:        position{line: 1049, col: 14, offset: 35202},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1049, col: 26, offset: 35214},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1051, col: 13, offset: 35328},
										run: (*parser).callonOrderedListElementPrefix32,
										expr: &seqExpr{
											pos: position{line: 1051, col: 13, offset: 35328},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1051, col: 13, offset: 35328},
													expr: &charClassMatcher{
														pos:        position{line: 1051, col: 14, offset: 35329},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1051, col: 26, offset: 35341},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1053, col: 12, offset: 35454},
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 12, offset: 35454},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementContent",
			pos:  position{line: 1057, col: 1, offset: 35489},
			expr: &actionExpr{
				pos: position{line: 1057, col: 30, offset: 35518},
				run: (*parser).callonOrderedListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1057, col: 30, offset: 35518},
					expr: &charClassMatcher{
						pos:        position{line: 1057, col: 30, offset: 35518},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UnorderedListElement",
			pos:  position{line: 1068, col: 1, offset: 35734},
			expr: &actionExpr{
				pos: position{line: 1069, col: 5, offset: 35763},
				run: (*parser).callonUnorderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 5, offset: 35763},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1069, col: 5, offset: 35763},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 13, offset: 35771},
								name: "UnorderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 5, offset: 35804},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 1070, col: 16, offset: 35815},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 17, offset: 35816},
									name: "UnorderedListElementCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1071, col: 5, offset: 35854},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1071, col: 14, offset: 35863},
								name: "UnorderedListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementPrefix",
			pos:  position{line: 1075, col: 1, offset: 36026},
			expr: &actionExpr{
				pos: position{line: 1076, col: 5, offset: 36061},
				run: (*parser).callonUnorderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 5, offset: 36061},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1076, col: 5, offset: 36061},
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 5, offset: 36061},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 12, offset: 36068},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1076, col: 20, offset: 36076},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1078, col: 9, offset: 36133},
										run: (*parser).callonUnorderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1078, col: 9, offset: 36133},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1078, col: 9, offset: 36133},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1078, col: 16, offset: 36140},
														run: (*parser).callonUnorderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1078, col: 16, offset: 36140},
															expr: &litMatcher{
																pos:        position{line: 1078, col: 17, offset: 36141},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1082, col: 9, offset: 36241},
													run: (*parser).callonUnorderedListElementPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1099, col: 14, offset: 36948},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 1099, col: 21, offset: 36955},
											run: (*parser).callonUnorderedListElementPrefix15,
											expr: &litMatcher{
												pos:        position{line: 1099, col: 22, offset: 36956},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1101, col: 13, offset: 37042},
							expr: &ruleRefExpr{
								pos:  position{line: 1101, col: 13, offset: 37042},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementCheckStyle",
			pos:  position{line: 1105, col: 1, offset: 37078},
			expr: &actionExpr{
				pos: position{line: 1105, col: 35, offset: 37112},
				run: (*parser).callonUnorderedListElementCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 35, offset: 37112},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1105, col: 35, offset: 37112},
							expr: &litMatcher{
								pos:        position{line: 1105, col: 36, offset: 37113},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1105, col: 40, offset: 37117},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 1106, col: 7, offset: 37131},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1106, col: 7, offset: 37131},
										run: (*parser).callonUnorderedListElementCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 1106, col: 7, offset: 37131},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1107, col: 7, offset: 37176},
										run: (*parser).callonUnorderedListElementCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 1107, col: 7, offset: 37176},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1108, col: 7, offset: 37219},
										run: (*parser).callonUnorderedListElementCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 1108, col: 7, offset: 37219},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1109, col: 7, offset: 37261},
							expr: &ruleRefExpr{
								pos:  position{line: 1109, col: 7, offset: 37261},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementContent",
			pos:  position{line: 1117, col: 1, offset: 37555},
			expr: &actionExpr{
				pos: position{line: 1117, col: 32, offset: 37586},
				run: (*parser).callonUnorderedListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1117, col: 32, offset: 37586},
					expr: &charClassMatcher{
						pos:        position{line: 1117, col: 32, offset: 37586},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1127, col: 1, offset: 37775},
			expr: &actionExpr{
				pos: position{line: 1127, col: 28, offset: 37802},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1127, col: 28, offset: 37802},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1127, col: 28, offset: 37802},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1127, col: 32, offset: 37806},
							expr: &ruleRefExpr{
								pos:  position{line: 1127, col: 32, offset: 37806},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1134, col: 1, offset: 38101},
			expr: &choiceExpr{
				pos: position{line: 1135, col: 5, offset: 38120},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1136, col: 9, offset: 38130},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1136, col: 9, offset: 38130},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1136, col: 9, offset: 38130},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1136, col: 20, offset: 38141},
										expr: &ruleRefExpr{
											pos:  position{line: 1136, col: 21, offset: 38142},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 9, offset: 38268},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1137, col: 15, offset: 38274},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1137, col: 15, offset: 38274},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1137, col: 41, offset: 38300},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 7, offset: 38419},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1143, col: 1, offset: 38438},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 32, offset: 38469},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1143, col: 32, offset: 38469},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1143, col: 32, offset: 38469},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1143, col: 36, offset: 38473},
								expr: &litMatcher{
									pos:        position{line: 1143, col: 37, offset: 38474},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1143, col: 43, offset: 38480},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1143, col: 43, offset: 38480},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1143, col: 47, offset: 38484},
								expr: &litMatcher{
									pos:        position{line: 1143, col: 48, offset: 38485},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1143, col: 54, offset: 38491},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1143, col: 54, offset: 38491},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1143, col: 58, offset: 38495},
								expr: &litMatcher{
									pos:        position{line: 1143, col: 59, offset: 38496},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1143, col: 65, offset: 38502},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1143, col: 65, offset: 38502},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1143, col: 69, offset: 38506},
								expr: &litMatcher{
									pos:        position{line: 1143, col: 70, offset: 38507},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1145, col: 1, offset: 38512},
			expr: &choiceExpr{
				pos: position{line: 1145, col: 34, offset: 38545},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1145, col: 34, offset: 38545},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1145, col: 41, offset: 38552},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1145, col: 48, offset: 38559},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1145, col: 55, offset: 38566},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1145, col: 62, offset: 38573},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1145, col: 68, offset: 38579},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1147, col: 1, offset: 38584},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 5, offset: 38614},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1148, col: 5, offset: 38614},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 7, offset: 38641},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 7, offset: 38669},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 7, offset: 38697},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 7, offset: 38729},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 7, offset: 38750},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1155, col: 1, offset: 38768},
			expr: &choiceExpr{
				pos: position{line: 1156, col: 5, offset: 38800},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1156, col: 5, offset: 38800},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 7, offset: 38826},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 7, offset: 38854},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 7, offset: 38882},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1161, col: 1, offset: 38908},
			expr: &actionExpr{
				pos: position{line: 1162, col: 5, offset: 38989},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 5, offset: 38989},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1162, col: 5, offset: 38989},
							expr: &litMatcher{
								pos:        position{line: 1162, col: 7, offset: 38991},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1163, col: 5, offset: 39000},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1164, col: 9, offset: 39018},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1164, col: 9, offset: 39018},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1165, col: 11, offset: 39045},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1166, col: 11, offset: 39073},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1167, col: 11, offset: 39101},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1168, col: 11, offset: 39133},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 39165},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1175, col: 1, offset: 39232},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 33, offset: 39264},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1175, col: 33, offset: 39264},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1175, col: 39, offset: 39270},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1175, col: 39, offset: 39270},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1179, col: 1, offset: 39412},
			expr: &actionExpr{
				pos: position{line: 1179, col: 25, offset: 39436},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1179, col: 25, offset: 39436},
					expr: &litMatcher{
						pos:        position{line: 1179, col: 25, offset: 39436},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1183, col: 1, offset: 39485},
			expr: &actionExpr{
				pos: position{line: 1183, col: 25, offset: 39509},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 25, offset: 39509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1183, col: 25, offset: 39509},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1183, col: 30, offset: 39514},
							expr: &litMatcher{
								pos:        position{line: 1183, col: 30, offset: 39514},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1190, col: 1, offset: 39625},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 13, offset: 39637},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1190, col: 13, offset: 39637},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 35, offset: 39659},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1192, col: 1, offset: 39726},
			expr: &actionExpr{
				pos: position{line: 1192, col: 24, offset: 39749},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 24, offset: 39749},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1192, col: 24, offset: 39749},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 29, offset: 39754},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 39, offset: 39764},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1192, col: 68, offset: 39793},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1196, col: 1, offset: 39892},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1196, col: 32, offset: 39923},
				expr: &ruleRefExpr{
					pos:  position{line: 1196, col: 32, offset: 39923},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1198, col: 1, offset: 39954},
			expr: &actionExpr{
				pos: position{line: 1198, col: 31, offset: 39984},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 31, offset: 39984},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1198, col: 31, offset: 39984},
							expr: &litMatcher{
								pos:        position{line: 1198, col: 33, offset: 39986},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1198, col: 39, offset: 39992},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1198, col: 48, offset: 40001},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1198, col: 48, offset: 40001},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 7, offset: 40012},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1200, col: 7, offset: 40057},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1200, col: 7, offset: 40057},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1200, col: 15, offset: 40065},
												expr: &ruleRefExpr{
													pos:  position{line: 1200, col: 16, offset: 40066},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 7, offset: 40080},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 7, offset: 40108},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 7, offset: 40131},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 7, offset: 40149},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1205, col: 7, offset: 40168},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1206, col: 7, offset: 40206},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1207, col: 7, offset: 40231},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1211, col: 1, offset: 40306},
			expr: &actionExpr{
				pos: position{line: 1212, col: 5, offset: 40346},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 5, offset: 40346},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1212, col: 5, offset: 40346},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 16, offset: 40357},
								expr: &ruleRefExpr{
									pos:  position{line: 1212, col: 17, offset: 40358},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 5, offset: 40384},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1213, col: 11, offset: 40390},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1213, col: 11, offset: 40390},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1214, col: 11, offset: 40420},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1215, col: 11, offset: 40441},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1216, col: 11, offset: 40462},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1217, col: 11, offset: 40486},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1218, col: 11, offset: 40510},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1222, col: 1, offset: 40611},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 5, offset: 40655},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1223, col: 5, offset: 40655},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1224, col: 7, offset: 40752},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1224, col: 7, offset: 40752},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1224, col: 7, offset: 40752},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1224, col: 12, offset: 40757},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1228, col: 1, offset: 40928},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 40956},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 40956},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1229, col: 5, offset: 40956},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1229, col: 6, offset: 40957},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1229, col: 6, offset: 40957},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1229, col: 10, offset: 40961},
											expr: &litMatcher{
												pos:        position{line: 1229, col: 11, offset: 40962},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 16, offset: 40967},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 26, offset: 40977},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 55, offset: 41006},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1229, col: 59, offset: 41010},
									expr: &notExpr{
										pos: position{line: 1229, col: 61, offset: 41012},
										expr: &ruleRefExpr{
											pos:  position{line: 1229, col: 62, offset: 41013},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1231, col: 9, offset: 41219},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1231, col: 9, offset: 41219},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1231, col: 9, offset: 41219},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1231, col: 13, offset: 41223},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1231, col: 23, offset: 41233},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1231, col: 23, offset: 41233},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1231, col: 27, offset: 41237},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 56, offset: 41266},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1235, col: 1, offset: 41484},
			expr: &seqExpr{
				pos: position{line: 1235, col: 32, offset: 41515},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1235, col: 32, offset: 41515},
						expr: &ruleRefExpr{
							pos:  position{line: 1235, col: 33, offset: 41516},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1235, col: 39, offset: 41522},
						expr: &ruleRefExpr{
							pos:  position{line: 1235, col: 39, offset: 41522},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1237, col: 1, offset: 41551},
			expr: &choiceExpr{
				pos: position{line: 1238, col: 5, offset: 41586},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1238, col: 5, offset: 41586},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1239, col: 7, offset: 41597},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1239, col: 7, offset: 41597},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1239, col: 15, offset: 41605},
								expr: &ruleRefExpr{
									pos:  position{line: 1239, col: 16, offset: 41606},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 7, offset: 41620},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 7, offset: 41648},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 7, offset: 41671},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 7, offset: 41689},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1244, col: 7, offset: 41708},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1244, col: 7, offset: 41708},
								expr: &ruleRefExpr{
									pos:  position{line: 1244, col: 7, offset: 41708},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1244, col: 14, offset: 41715},
								expr: &seqExpr{
									pos: position{line: 1244, col: 15, offset: 41716},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1244, col: 15, offset: 41716},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1244, col: 19, offset: 41720},
											expr: &litMatcher{
												pos:        position{line: 1244, col: 20, offset: 41721},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 7, offset: 41733},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 7, offset: 41771},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 7, offset: 41796},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1249, col: 1, offset: 41834},
			expr: &actionExpr{
				pos: position{line: 1250, col: 5, offset: 41874},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 5, offset: 41874},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1250, col: 5, offset: 41874},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1250, col: 16, offset: 41885},
								expr: &ruleRefExpr{
									pos:  position{line: 1250, col: 17, offset: 41886},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 5, offset: 41912},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1251, col: 11, offset: 41918},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1251, col: 11, offset: 41918},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 11, offset: 41948},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1253, col: 11, offset: 41969},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1254, col: 11, offset: 41990},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1255, col: 11, offset: 42014},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1256, col: 11, offset: 42038},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1259, col: 1, offset: 42138},
			expr: &choiceExpr{
				pos: position{line: 1260, col: 5, offset: 42182},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1260, col: 5, offset: 42182},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1261, col: 7, offset: 42279},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1261, col: 7, offset: 42279},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1261, col: 7, offset: 42279},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1261, col: 11, offset: 42283},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1265, col: 1, offset: 42454},
			expr: &choiceExpr{
				pos: position{line: 1266, col: 5, offset: 42478},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1266, col: 5, offset: 42478},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1266, col: 5, offset: 42478},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1266, col: 5, offset: 42478},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1266, col: 18, offset: 42491},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 40, offset: 42513},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1266, col: 45, offset: 42518},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1266, col: 55, offset: 42528},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 84, offset: 42557},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1268, col: 9, offset: 42714},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1268, col: 9, offset: 42714},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1268, col: 9, offset: 42714},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1268, col: 22, offset: 42727},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1268, col: 44, offset: 42749},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1268, col: 49, offset: 42754},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1268, col: 59, offset: 42764},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1268, col: 88, offset: 42793},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1271, col: 9, offset: 42993},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1271, col: 9, offset: 42993},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1271, col: 9, offset: 42993},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1271, col: 22, offset: 43006},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1271, col: 44, offset: 43028},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1271, col: 48, offset: 43032},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1271, col: 58, offset: 43042},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1271, col: 87, offset: 43071},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1278, col: 1, offset: 43292},
			expr: &choiceExpr{
				pos: position{line: 1278, col: 15, offset: 43306},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1278, col: 15, offset: 43306},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 39, offset: 43330},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1280, col: 1, offset: 43353},
			expr: &actionExpr{
				pos: position{line: 1280, col: 26, offset: 43378},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 26, offset: 43378},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1280, col: 26, offset: 43378},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 31, offset: 43383},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 41, offset: 43393},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1280, col: 72, offset: 43424},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1284, col: 1, offset: 43570},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1284, col: 34, offset: 43603},
				expr: &ruleRefExpr{
					pos:  position{line: 1284, col: 34, offset: 43603},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1286, col: 1, offset: 43635},
			expr: &actionExpr{
				pos: position{line: 1287, col: 5, offset: 43672},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1287, col: 5, offset: 43672},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1287, col: 5, offset: 43672},
							expr: &litMatcher{
								pos:        position{line: 1287, col: 7, offset: 43674},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 13, offset: 43680},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1287, col: 22, offset: 43689},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1287, col: 22, offset: 43689},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 7, offset: 43700},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1289, col: 7, offset: 43745},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1289, col: 7, offset: 43745},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1289, col: 15, offset: 43753},
												expr: &ruleRefExpr{
													pos:  position{line: 1289, col: 16, offset: 43754},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1290, col: 7, offset: 43768},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1291, col: 7, offset: 43796},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1292, col: 7, offset: 43819},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1293, col: 7, offset: 43837},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1294, col: 7, offset: 43856},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1295, col: 7, offset: 43896},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1296, col: 7, offset: 43921},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1300, col: 1, offset: 43998},
			expr: &actionExpr{
				pos: position{line: 1301, col: 5, offset: 44040},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 5, offset: 44040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1301, col: 5, offset: 44040},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1301, col: 16, offset: 44051},
								expr: &ruleRefExpr{
									pos:  position{line: 1301, col: 17, offset: 44052},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1302, col: 5, offset: 44078},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1302, col: 11, offset: 44084},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1302, col: 11, offset: 44084},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1303, col: 11, offset: 44116},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1304, col: 11, offset: 44135},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1305, col: 11, offset: 44156},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1306, col: 11, offset: 44180},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1307, col: 11, offset: 44204},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1311, col: 1, offset: 44305},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 44351},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1312, col: 5, offset: 44351},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1313, col: 7, offset: 44450},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1313, col: 7, offset: 44450},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1313, col: 7, offset: 44450},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1313, col: 12, offset: 44455},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1317, col: 1, offset: 44628},
			expr: &choiceExpr{
				pos: position{line: 1318, col: 5, offset: 44658},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1318, col: 5, offset: 44658},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1318, col: 5, offset: 44658},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1318, col: 6, offset: 44659},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1318, col: 6, offset: 44659},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1318, col: 10, offset: 44663},
											expr: &litMatcher{
												pos:        position{line: 1318, col: 11, offset: 44664},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 16, offset: 44669},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1318, col: 26, offset: 44679},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1318, col: 57, offset: 44710},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 9, offset: 44912},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1320, col: 9, offset: 44912},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1320, col: 9, offset: 44912},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 13, offset: 44916},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1320, col: 23, offset: 44926},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1320, col: 23, offset: 44926},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1320, col: 27, offset: 44930},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 58, offset: 44961},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1324, col: 1, offset: 45183},
			expr: &actionExpr{
				pos: position{line: 1324, col: 34, offset: 45216},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1324, col: 34, offset: 45216},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1324, col: 34, offset: 45216},
							expr: &ruleRefExpr{
								pos:  position{line: 1324, col: 35, offset: 45217},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1324, col: 41, offset: 45223},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1324, col: 51, offset: 45233},
								expr: &ruleRefExpr{
									pos:  position{line: 1324, col: 51, offset: 45233},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1328, col: 1, offset: 45294},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 5, offset: 45331},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1329, col: 5, offset: 45331},
						name: "ItalicWord",
					},
					&seqExpr{
						pos: position{line: 1330, col: 7, offset: 45348},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1330, col: 7, offset: 45348},
								expr: &ruleRefExpr{
									pos:  position{line: 1330, col: 7, offset: 45348},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1330, col: 14, offset: 45355},
								expr: &seqExpr{
									pos: position{line: 1330, col: 15, offset: 45356},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1330, col: 15, offset: 45356},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1330, col: 19, offset: 45360},
											expr: &litMatcher{
												pos:        position{line: 1330, col: 20, offset: 45361},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1331, col: 7, offset: 45373},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1331, col: 7, offset: 45373},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1331, col: 15, offset: 45381},
								expr: &ruleRefExpr{
									pos:  position{line: 1331, col: 16, offset: 45382},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 7, offset: 45396},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 7, offset: 45424},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 7, offset: 45447},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 7, offset: 45465},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 7, offset: 45484},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 7, offset: 45524},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 7, offset: 45549},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "ItalicWord",
			pos:  position{line: 1341, col: 1, offset: 45644},
			expr: &actionExpr{
				pos: position{line: 1341, col: 15, offset: 45658},
				run: (*parser).callonItalicWord1,
				expr: &seqExpr{
					pos: position{line: 1341, col: 15, offset: 45658},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1341, col: 15, offset: 45658},
							expr: &charClassMatcher{
								pos:        position{line: 1341, col: 15, offset: 45658},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1341, col: 25, offset: 45668},
							expr: &choiceExpr{
								pos: position{line: 1341, col: 27, offset: 45670},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1341, col: 27, offset: 45670},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&litMatcher{
										pos:        position{line: 1341, col: 33, offset: 45676},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1345, col: 1, offset: 45736},
			expr: &actionExpr{
				pos: position{line: 1346, col: 5, offset: 45777},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1346, col: 5, offset: 45777},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1346, col: 5, offset: 45777},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1346, col: 16, offset: 45788},
								expr: &ruleRefExpr{
									pos:  position{line: 1346, col: 17, offset: 45789},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 5, offset: 45815},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1347, col: 11, offset: 45821},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1347, col: 11, offset: 45821},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1348, col: 11, offset: 45840},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1349, col: 11, offset: 45872},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1350, col: 11, offset: 45893},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1351, col: 11, offset: 45917},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1352, col: 11, offset: 45941},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1356, col: 1, offset: 46042},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 5, offset: 46088},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1357, col: 5, offset: 46088},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1358, col: 7, offset: 46187},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1358, col: 7, offset: 46187},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1358, col: 7, offset: 46187},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1358, col: 11, offset: 46191},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1362, col: 1, offset: 46365},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 5, offset: 46391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1363, col: 5, offset: 46391},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1363, col: 5, offset: 46391},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1363, col: 5, offset: 46391},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 18, offset: 46404},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 40, offset: 46426},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1363, col: 45, offset: 46431},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 55, offset: 46441},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 86, offset: 46472},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1365, col: 9, offset: 46629},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1365, col: 9, offset: 46629},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1365, col: 9, offset: 46629},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1365, col: 22, offset: 46642},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 44, offset: 46664},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1365, col: 49, offset: 46669},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1365, col: 59, offset: 46679},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 90, offset: 46710},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 9, offset: 46910},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1368, col: 9, offset: 46910},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1368, col: 9, offset: 46910},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1368, col: 22, offset: 46923},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 44, offset: 46945},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 48, offset: 46949},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1368, col: 58, offset: 46959},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 89, offset: 46990},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1375, col: 1, offset: 47217},
			expr: &choiceExpr{
				pos: position{line: 1375, col: 18, offset: 47234},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1375, col: 18, offset: 47234},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 45, offset: 47261},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1377, col: 1, offset: 47287},
			expr: &actionExpr{
				pos: position{line: 1377, col: 29, offset: 47315},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1377, col: 29, offset: 47315},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1377, col: 29, offset: 47315},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1377, col: 34, offset: 47320},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 44, offset: 47330},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1377, col: 78, offset: 47364},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1381, col: 1, offset: 47513},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1381, col: 37, offset: 47549},
				expr: &ruleRefExpr{
					pos:  position{line: 1381, col: 37, offset: 47549},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1383, col: 1, offset: 47616},
			expr: &actionExpr{
				pos: position{line: 1384, col: 5, offset: 47656},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1384, col: 5, offset: 47656},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1384, col: 5, offset: 47656},
							expr: &litMatcher{
								pos:        position{line: 1384, col: 7, offset: 47658},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 13, offset: 47664},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1384, col: 22, offset: 47673},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1384, col: 22, offset: 47673},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 7, offset: 47684},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1386, col: 7, offset: 47729},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1386, col: 7, offset: 47729},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1386, col: 15, offset: 47737},
												expr: &ruleRefExpr{
													pos:  position{line: 1386, col: 16, offset: 47738},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 7, offset: 47752},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 7, offset: 47780},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 7, offset: 47803},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 7, offset: 47821},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1391, col: 7, offset: 47840},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1392, col: 7, offset: 47903},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1393, col: 7, offset: 47946},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1394, col: 7, offset: 47971},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1398, col: 1, offset: 48051},
			expr: &actionExpr{
				pos: position{line: 1399, col: 5, offset: 48095},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1399, col: 5, offset: 48095},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1399, col: 5, offset: 48095},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1399, col: 16, offset: 48106},
								expr: &ruleRefExpr{
									pos:  position{line: 1399, col: 17, offset: 48107},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 5, offset: 48133},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1400, col: 11, offset: 48139},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1400, col: 11, offset: 48139},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1401, col: 11, offset: 48174},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1402, col: 11, offset: 48193},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1403, col: 11, offset: 48214},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1404, col: 11, offset: 48235},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1405, col: 11, offset: 48259},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1409, col: 1, offset: 48361},
			expr: &choiceExpr{
				pos: position{line: 1410, col: 5, offset: 48410},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1410, col: 5, offset: 48410},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1411, col: 7, offset: 48512},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1411, col: 7, offset: 48512},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1411, col: 7, offset: 48512},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1411, col: 12, offset: 48517},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1415, col: 1, offset: 48695},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 5, offset: 48728},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 48728},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1416, col: 5, offset: 48728},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1416, col: 6, offset: 48729},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1416, col: 6, offset: 48729},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1416, col: 10, offset: 48733},
											expr: &litMatcher{
												pos:        position{line: 1416, col: 11, offset: 48734},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1416, col: 16, offset: 48739},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1416, col: 26, offset: 48749},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 60, offset: 48783},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1418, col: 9, offset: 48988},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1418, col: 9, offset: 48988},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1418, col: 9, offset: 48988},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1418, col: 13, offset: 48992},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1418, col: 23, offset: 49002},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1418, col: 23, offset: 49002},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1418, col: 27, offset: 49006},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 61, offset: 49040},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1422, col: 1, offset: 49266},
			expr: &seqExpr{
				pos: position{line: 1422, col: 37, offset: 49302},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1422, col: 37, offset: 49302},
						expr: &ruleRefExpr{
							pos:  position{line: 1422, col: 38, offset: 49303},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1422, col: 44, offset: 49309},
						expr: &ruleRefExpr{
							pos:  position{line: 1422, col: 44, offset: 49309},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1424, col: 1, offset: 49343},
			expr: &choiceExpr{
				pos: position{line: 1425, col: 5, offset: 49384},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1425, col: 5, offset: 49384},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1426, col: 7, offset: 49395},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1426, col: 7, offset: 49395},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1426, col: 15, offset: 49403},
								expr: &ruleRefExpr{
									pos:  position{line: 1426, col: 16, offset: 49404},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 7, offset: 49418},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 7, offset: 49446},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 7, offset: 49469},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1430, col: 7, offset: 49487},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1431, col: 7, offset: 49506},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1431, col: 7, offset: 49506},
								expr: &ruleRefExpr{
									pos:  position{line: 1431, col: 7, offset: 49506},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1431, col: 14, offset: 49513},
								expr: &seqExpr{
									pos: position{line: 1431, col: 15, offset: 49514},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1431, col: 15, offset: 49514},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1431, col: 19, offset: 49518},
											expr: &litMatcher{
												pos:        position{line: 1431, col: 20, offset: 49519},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1432, col: 7, offset: 49643},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1433, col: 7, offset: 49686},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1434, col: 7, offset: 49706},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 7, offset: 49731},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1437, col: 1, offset: 49774},
			expr: &actionExpr{
				pos: position{line: 1438, col: 5, offset: 49818},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1438, col: 5, offset: 49818},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1438, col: 5, offset: 49818},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1438, col: 16, offset: 49829},
								expr: &ruleRefExpr{
									pos:  position{line: 1438, col: 17, offset: 49830},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 5, offset: 49856},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1439, col: 11, offset: 49862},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1439, col: 11, offset: 49862},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1440, col: 11, offset: 49897},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1441, col: 11, offset: 49916},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1442, col: 11, offset: 49937},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1443, col: 11, offset: 49958},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1444, col: 11, offset: 49982},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1448, col: 1, offset: 50084},
			expr: &actionExpr{
				pos: position{line: 1449, col: 5, offset: 50133},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1449, col: 6, offset: 50134},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1449, col: 6, offset: 50134},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1450, col: 7, offset: 50238},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1450, col: 7, offset: 50238},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1450, col: 11, offset: 50242},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1454, col: 1, offset: 50420},
			expr: &choiceExpr{
				pos: position{line: 1455, col: 5, offset: 50449},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1455, col: 5, offset: 50449},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1455, col: 5, offset: 50449},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1455, col: 5, offset: 50449},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1455, col: 18, offset: 50462},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1455, col: 40, offset: 50484},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1455, col: 45, offset: 50489},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1455, col: 55, offset: 50499},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1455, col: 89, offset: 50533},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1457, col: 9, offset: 50690},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1457, col: 9, offset: 50690},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1457, col: 9, offset: 50690},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1457, col: 22, offset: 50703},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1457, col: 44, offset: 50725},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1457, col: 49, offset: 50730},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1457, col: 59, offset: 50740},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1457, col: 93, offset: 50774},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1460, col: 9, offset: 50974},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1460, col: 9, offset: 50974},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1460, col: 9, offset: 50974},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1460, col: 22, offset: 50987},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1460, col: 44, offset: 51009},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1460, col: 48, offset: 51013},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1460, col: 58, offset: 51023},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1460, col: 92, offset: 51057},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1467, col: 1, offset: 51278},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 15, offset: 51292},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1467, col: 15, offset: 51292},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 39, offset: 51316},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1469, col: 1, offset: 51339},
			expr: &actionExpr{
				pos: position{line: 1469, col: 26, offset: 51364},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1469, col: 26, offset: 51364},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1469, col: 26, offset: 51364},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 31, offset: 51369},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 41, offset: 51379},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1469, col: 72, offset: 51410},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1473, col: 1, offset: 51556},
			expr: &seqExpr{
				pos: position{line: 1473, col: 34, offset: 51589},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1473, col: 34, offset: 51589},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1473, col: 63, offset: 51618},
						expr: &seqExpr{
							pos: position{line: 1473, col: 64, offset: 51619},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1473, col: 64, offset: 51619},
									expr: &litMatcher{
										pos:        position{line: 1473, col: 66, offset: 51621},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1473, col: 73, offset: 51628},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1473, col: 73, offset: 51628},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1473, col: 81, offset: 51636},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1475, col: 1, offset: 51703},
			expr: &choiceExpr{
				pos: position{line: 1475, col: 33, offset: 51735},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1475, col: 33, offset: 51735},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1476, col: 7, offset: 51746},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1476, col: 7, offset: 51746},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1476, col: 15, offset: 51754},
								expr: &ruleRefExpr{
									pos:  position{line: 1476, col: 16, offset: 51755},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 7, offset: 51769},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1478, col: 7, offset: 51797},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1479, col: 7, offset: 51820},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 7, offset: 51838},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 7, offset: 51857},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1482, col: 7, offset: 51888},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1483, col: 7, offset: 51913},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1485, col: 1, offset: 51953},
			expr: &actionExpr{
				pos: position{line: 1486, col: 5, offset: 51985},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1486, col: 5, offset: 51985},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1486, col: 5, offset: 51985},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1486, col: 16, offset: 51996},
								expr: &ruleRefExpr{
									pos:  position{line: 1486, col: 17, offset: 51997},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1487, col: 5, offset: 52023},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1487, col: 11, offset: 52029},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1487, col: 11, offset: 52029},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1488, col: 11, offset: 52048},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1489, col: 11, offset: 52069},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1490, col: 11, offset: 52093},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1491, col: 11, offset: 52125},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1492, col: 11, offset: 52149},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1496, col: 1, offset: 52251},
			expr: &choiceExpr{
				pos: position{line: 1497, col: 5, offset: 52297},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1497, col: 5, offset: 52297},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1498, col: 7, offset: 52396},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1498, col: 7, offset: 52396},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1498, col: 7, offset: 52396},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1498, col: 12, offset: 52401},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1502, col: 1, offset: 52574},
			expr: &choiceExpr{
				pos: position{line: 1502, col: 26, offset: 52599},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1502, col: 26, offset: 52599},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1502, col: 26, offset: 52599},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1502, col: 27, offset: 52600},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1502, col: 27, offset: 52600},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1502, col: 31, offset: 52604},
											expr: &litMatcher{
												pos:        position{line: 1502, col: 32, offset: 52605},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1502, col: 37, offset: 52610},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1502, col: 47, offset: 52620},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1502, col: 78, offset: 52651},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1504, col: 9, offset: 52853},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1504, col: 9, offset: 52853},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1504, col: 9, offset: 52853},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1504, col: 13, offset: 52857},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1504, col: 23, offset: 52867},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1504, col: 23, offset: 52867},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1504, col: 27, offset: 52871},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1504, col: 58, offset: 52902},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1508, col: 1, offset: 53123},
			expr: &seqExpr{
				pos: position{line: 1508, col: 34, offset: 53156},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1508, col: 34, offset: 53156},
						expr: &ruleRefExpr{
							pos:  position{line: 1508, col: 35, offset: 53157},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1508, col: 41, offset: 53163},
						expr: &ruleRefExpr{
							pos:  position{line: 1508, col: 41, offset: 53163},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1510, col: 1, offset: 53194},
			expr: &choiceExpr{
				pos: position{line: 1510, col: 33, offset: 53226},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1510, col: 33, offset: 53226},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1511, col: 7, offset: 53237},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1511, col: 7, offset: 53237},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1511, col: 15, offset: 53245},
								expr: &ruleRefExpr{
									pos:  position{line: 1511, col: 16, offset: 53246},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1512, col: 7, offset: 53260},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1513, col: 7, offset: 53288},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1514, col: 7, offset: 53311},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1515, col: 7, offset: 53329},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1516, col: 7, offset: 53348},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1516, col: 7, offset: 53348},
								expr: &ruleRefExpr{
									pos:  position{line: 1516, col: 7, offset: 53348},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1516, col: 14, offset: 53355},
								expr: &seqExpr{
									pos: position{line: 1516, col: 15, offset: 53356},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1516, col: 15, offset: 53356},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1516, col: 19, offset: 53360},
											expr: &litMatcher{
												pos:        position{line: 1516, col: 20, offset: 53361},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1517, col: 7, offset: 53373},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1518, col: 7, offset: 53404},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1519, col: 7, offset: 53429},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1521, col: 1, offset: 53469},
			expr: &actionExpr{
				pos: position{line: 1522, col: 5, offset: 53501},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1522, col: 5, offset: 53501},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1522, col: 5, offset: 53501},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1522, col: 16, offset: 53512},
								expr: &ruleRefExpr{
									pos:  position{line: 1522, col: 17, offset: 53513},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1523, col: 5, offset: 53539},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1523, col: 11, offset: 53545},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1523, col: 11, offset: 53545},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1524, col: 11, offset: 53577},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1525, col: 11, offset: 53596},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1526, col: 11, offset: 53617},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1527, col: 11, offset: 53641},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1528, col: 11, offset: 53665},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1531, col: 1, offset: 53766},
			expr: &choiceExpr{
				pos: position{line: 1532, col: 5, offset: 53812},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1532, col: 5, offset: 53812},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1533, col: 7, offset: 53909},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1533, col: 7, offset: 53909},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1533, col: 7, offset: 53909},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1533, col: 11, offset: 53913},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1537, col: 1, offset: 54084},
			expr: &choiceExpr{
				pos: position{line: 1538, col: 5, offset: 54109},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1538, col: 5, offset: 54109},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1538, col: 5, offset: 54109},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1538, col: 5, offset: 54109},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1538, col: 18, offset: 54122},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1538, col: 40, offset: 54144},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1538, col: 45, offset: 54149},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1538, col: 55, offset: 54159},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1538, col: 86, offset: 54190},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1540, col: 9, offset: 54347},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1540, col: 9, offset: 54347},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1540, col: 9, offset: 54347},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1540, col: 22, offset: 54360},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1540, col: 44, offset: 54382},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1540, col: 49, offset: 54387},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1540, col: 59, offset: 54397},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1540, col: 90, offset: 54428},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1543, col: 9, offset: 54628},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1543, col: 9, offset: 54628},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1543, col: 9, offset: 54628},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1543, col: 22, offset: 54641},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1543, col: 44, offset: 54663},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1543, col: 48, offset: 54667},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1543, col: 58, offset: 54677},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1543, col: 89, offset: 54708},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1550, col: 1, offset: 54936},
			expr: &actionExpr{
				pos: position{line: 1550, col: 18, offset: 54953},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 18, offset: 54953},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1550, col: 18, offset: 54953},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 22, offset: 54957},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 31, offset: 54966},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1550, col: 53, offset: 54988},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1554, col: 1, offset: 55096},
			expr: &choiceExpr{
				pos: position{line: 1554, col: 25, offset: 55120},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1554, col: 25, offset: 55120},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1554, col: 38, offset: 55133},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1556, col: 1, offset: 55152},
			expr: &actionExpr{
				pos: position{line: 1556, col: 21, offset: 55172},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1556, col: 21, offset: 55172},
					expr: &charClassMatcher{
						pos:        position{line: 1556, col: 21, offset: 55172},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1560, col: 1, offset: 55257},
			expr: &actionExpr{
				pos: position{line: 1560, col: 25, offset: 55281},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1560, col: 25, offset: 55281},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1560, col: 25, offset: 55281},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1560, col: 38, offset: 55294},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1560, col: 60, offset: 55316},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1560, col: 64, offset: 55320},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1560, col: 73, offset: 55329},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1560, col: 95, offset: 55351},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1567, col: 1, offset: 55569},
			expr: &actionExpr{
				pos: position{line: 1567, col: 20, offset: 55588},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1567, col: 20, offset: 55588},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1567, col: 20, offset: 55588},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1567, col: 24, offset: 55592},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1567, col: 33, offset: 55601},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1567, col: 57, offset: 55625},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1571, col: 1, offset: 55735},
			expr: &choiceExpr{
				pos: position{line: 1571, col: 27, offset: 55761},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1571, col: 27, offset: 55761},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1571, col: 40, offset: 55774},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1573, col: 1, offset: 55795},
			expr: &actionExpr{
				pos: position{line: 1573, col: 23, offset: 55817},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1573, col: 23, offset: 55817},
					expr: &charClassMatcher{
						pos:        position{line: 1573, col: 23, offset: 55817},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1577, col: 1, offset: 55902},
			expr: &actionExpr{
				pos: position{line: 1577, col: 27, offset: 55928},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1577, col: 27, offset: 55928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1577, col: 27, offset: 55928},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1577, col: 40, offset: 55941},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1577, col: 62, offset: 55963},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1577, col: 66, offset: 55967},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1577, col: 75, offset: 55976},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1577, col: 99, offset: 56000},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1585, col: 1, offset: 56312},
			expr: &choiceExpr{
				pos: position{line: 1585, col: 17, offset: 56328},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1585, col: 17, offset: 56328},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1585, col: 38, offset: 56349},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1587, col: 1, offset: 56369},
			expr: &actionExpr{
				pos: position{line: 1587, col: 23, offset: 56391},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1587, col: 23, offset: 56391},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1587, col: 23, offset: 56391},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1587, col: 46, offset: 56414},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1587, col: 55, offset: 56423},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1587, col: 82, offset: 56450},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1591, col: 1, offset: 56562},
			expr: &actionExpr{
				pos: position{line: 1591, col: 31, offset: 56592},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1591, col: 31, offset: 56592},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1591, col: 41, offset: 56602},
						expr: &ruleRefExpr{
							pos:  position{line: 1591, col: 41, offset: 56602},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1595, col: 1, offset: 56688},
			expr: &seqExpr{
				pos: position{line: 1595, col: 27, offset: 56714},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1595, col: 27, offset: 56714},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1595, col: 32, offset: 56719},
						expr: &charClassMatcher{
							pos:        position{line: 1595, col: 33, offset: 56720},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1597, col: 1, offset: 56731},
			expr: &litMatcher{
				pos:        position{line: 1597, col: 25, offset: 56755},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1600, col: 1, offset: 56843},
			expr: &actionExpr{
				pos: position{line: 1601, col: 5, offset: 56877},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1601, col: 5, offset: 56877},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1602, col: 9, offset: 56895},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1602, col: 9, offset: 56895},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1602, col: 9, offset: 56895},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1602, col: 19, offset: 56905},
										expr: &ruleRefExpr{
											pos:  position{line: 1602, col: 20, offset: 56906},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1603, col: 11, offset: 56962},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1603, col: 11, offset: 56962},
										expr: &ruleRefExpr{
											pos:  position{line: 1603, col: 11, offset: 56962},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1603, col: 18, offset: 56969},
										expr: &ruleRefExpr{
											pos:  position{line: 1603, col: 19, offset: 56970},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1604, col: 12, offset: 57002},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1604, col: 12, offset: 57002},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1604, col: 12, offset: 57002},
											expr: &litMatcher{
												pos:        position{line: 1604, col: 13, offset: 57003},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1604, col: 17, offset: 57007},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1604, col: 26, offset: 57016},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1605, col: 11, offset: 57088},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1606, col: 11, offset: 57129},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1607, col: 11, offset: 57158},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1612, col: 1, offset: 57237},
			expr: &actionExpr{
				pos: position{line: 1613, col: 5, offset: 57275},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 5, offset: 57275},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1613, col: 5, offset: 57275},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1613, col: 16, offset: 57286},
								expr: &ruleRefExpr{
									pos:  position{line: 1613, col: 17, offset: 57287},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1614, col: 5, offset: 57313},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1614, col: 11, offset: 57319},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1614, col: 11, offset: 57319},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1615, col: 11, offset: 57338},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1616, col: 12, offset: 57360},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1616, col: 12, offset: 57360},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1616, col: 12, offset: 57360},
													expr: &litMatcher{
														pos:        position{line: 1616, col: 13, offset: 57361},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1616, col: 18, offset: 57366},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1616, col: 27, offset: 57375},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1617, col: 11, offset: 57424},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1618, col: 11, offset: 57448},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1619, col: 11, offset: 57474},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1623, col: 1, offset: 57571},
			expr: &choiceExpr{
				pos: position{line: 1623, col: 41, offset: 57611},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1623, col: 41, offset: 57611},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1623, col: 55, offset: 57625},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1623, col: 55, offset: 57625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1623, col: 55, offset: 57625},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1623, col: 59, offset: 57629},
									expr: &litMatcher{
										pos:        position{line: 1623, col: 60, offset: 57630},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1627, col: 1, offset: 57702},
			expr: &actionExpr{
				pos: position{line: 1627, col: 23, offset: 57724},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1627, col: 23, offset: 57724},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1627, col: 23, offset: 57724},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 46, offset: 57747},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1627, col: 55, offset: 57756},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1627, col: 82, offset: 57783},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1631, col: 1, offset: 57895},
			expr: &actionExpr{
				pos: position{line: 1631, col: 31, offset: 57925},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1631, col: 31, offset: 57925},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1631, col: 41, offset: 57935},
						expr: &ruleRefExpr{
							pos:  position{line: 1631, col: 41, offset: 57935},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1636, col: 1, offset: 58103},
			expr: &actionExpr{
				pos: position{line: 1636, col: 30, offset: 58132},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1636, col: 30, offset: 58132},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1637, col: 5, offset: 58146},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1637, col: 5, offset: 58146},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1637, col: 5, offset: 58146},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1637, col: 15, offset: 58156},
										expr: &ruleRefExpr{
											pos:  position{line: 1637, col: 16, offset: 58157},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1638, col: 7, offset: 58209},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1638, col: 7, offset: 58209},
										expr: &ruleRefExpr{
											pos:  position{line: 1638, col: 7, offset: 58209},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1638, col: 14, offset: 58216},
										expr: &ruleRefExpr{
											pos:  position{line: 1638, col: 15, offset: 58217},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1639, col: 7, offset: 58244},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1640, col: 7, offset: 58281},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1641, col: 7, offset: 58306},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1645, col: 1, offset: 58380},
			expr: &actionExpr{
				pos: position{line: 1646, col: 5, offset: 58418},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1646, col: 5, offset: 58418},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1646, col: 5, offset: 58418},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1646, col: 16, offset: 58429},
								expr: &ruleRefExpr{
									pos:  position{line: 1646, col: 17, offset: 58430},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 5, offset: 58456},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1647, col: 11, offset: 58462},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1647, col: 11, offset: 58462},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1648, col: 11, offset: 58481},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1649, col: 12, offset: 58503},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1649, col: 12, offset: 58503},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1649, col: 12, offset: 58503},
													expr: &litMatcher{
														pos:        position{line: 1649, col: 13, offset: 58504},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1649, col: 19, offset: 58510},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1649, col: 28, offset: 58519},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1650, col: 11, offset: 58568},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1651, col: 11, offset: 58592},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1652, col: 11, offset: 58618},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1656, col: 1, offset: 58715},
			expr: &seqExpr{
				pos: position{line: 1656, col: 27, offset: 58741},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1656, col: 27, offset: 58741},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1656, col: 33, offset: 58747},
						expr: &charClassMatcher{
							pos:        position{line: 1656, col: 34, offset: 58748},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1658, col: 1, offset: 58759},
			expr: &litMatcher{
				pos:        position{line: 1658, col: 25, offset: 58783},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1660, col: 1, offset: 58790},
			expr: &actionExpr{
				pos: position{line: 1660, col: 41, offset: 58830},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1660, col: 42, offset: 58831},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1660, col: 42, offset: 58831},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1660, col: 56, offset: 58845},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1660, col: 56, offset: 58845},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1660, col: 60, offset: 58849},
									expr: &litMatcher{
										pos:        position{line: 1660, col: 61, offset: 58850},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1669, col: 1, offset: 59116},
			expr: &actionExpr{
				pos: position{line: 1670, col: 5, offset: 59132},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1670, col: 5, offset: 59132},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1670, col: 5, offset: 59132},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1670, col: 12, offset: 59139},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1670, col: 12, offset: 59139},
									expr: &litMatcher{
										pos:        position{line: 1670, col: 13, offset: 59140},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1674, col: 5, offset: 59248},
							run: (*parser).callonSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 1686, col: 5, offset: 59754},
							expr: &ruleRefExpr{
								pos:  position{line: 1686, col: 5, offset: 59754},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1686, col: 12, offset: 59761},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1686, col: 19, offset: 59768},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1686, col: 36, offset: 59785},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 1710, col: 1, offset: 60616},
			expr: &actionExpr{
				pos: position{line: 1710, col: 20, offset: 60635},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1710, col: 20, offset: 60635},
					expr: &charClassMatcher{
						pos:        position{line: 1710, col: 20, offset: 60635},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1721, col: 1, offset: 60982},
			expr: &actionExpr{
				pos: position{line: 1721, col: 20, offset: 61001},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1721, col: 20, offset: 61001},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1721, col: 20, offset: 61001},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1721, col: 29, offset: 61010},
								expr: &choiceExpr{
									pos: position{line: 1722, col: 5, offset: 61016},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1722, col: 5, offset: 61016},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1723, col: 7, offset: 61033},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1724, col: 7, offset: 61057},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1725, col: 7, offset: 61085},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1726, col: 7, offset: 61198},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1727, col: 7, offset: 61212},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1727, col: 17, offset: 61222},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 1732, col: 1, offset: 61319},
			expr: &actionExpr{
				pos: position{line: 1732, col: 27, offset: 61345},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1732, col: 27, offset: 61345},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1732, col: 27, offset: 61345},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1732, col: 36, offset: 61354},
								expr: &choiceExpr{
									pos: position{line: 1733, col: 5, offset: 61360},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1733, col: 5, offset: 61360},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1734, col: 7, offset: 61377},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1735, col: 7, offset: 61405},
											name: "Quotes",
										},
										&ruleRefExpr{
											pos:  position{line: 1736, col: 7, offset: 61418},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1737, col: 7, offset: 61531},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1738, col: 7, offset: 61545},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1738, col: 17, offset: 61555},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1743, col: 1, offset: 61655},
			expr: &actionExpr{
				pos: position{line: 1743, col: 16, offset: 61670},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1743, col: 16, offset: 61670},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1743, col: 16, offset: 61670},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1743, col: 25, offset: 61679},
								expr: &choiceExpr{
									pos: position{line: 1744, col: 5, offset: 61685},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1744, col: 5, offset: 61685},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1745, col: 7, offset: 61702},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1746, col: 7, offset: 61726},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1747, col: 7, offset: 61749},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1748, col: 7, offset: 61761},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1749, col: 7, offset: 61789},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1750, col: 7, offset: 61902},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1751, col: 7, offset: 61920},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1751, col: 17, offset: 61930},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1756, col: 1, offset: 62026},
			expr: &actionExpr{
				pos: position{line: 1756, col: 16, offset: 62041},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1756, col: 16, offset: 62041},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1756, col: 16, offset: 62041},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1756, col: 25, offset: 62050},
								expr: &choiceExpr{
									pos: position{line: 1757, col: 5, offset: 62056},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1757, col: 5, offset: 62056},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1758, col: 7, offset: 62073},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1759, col: 7, offset: 62091},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1760, col: 7, offset: 62204},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1761, col: 7, offset: 62218},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1761, col: 17, offset: 62228},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1766, col: 1, offset: 62311},
			expr: &actionExpr{
				pos: position{line: 1766, col: 14, offset: 62324},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1766, col: 14, offset: 62324},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1766, col: 14, offset: 62324},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1766, col: 22, offset: 62332},
								expr: &anyMatcher{
									line: 1766, col: 23, offset: 62333,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1766, col: 27, offset: 62337},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1773, col: 1, offset: 62642},
			expr: &actionExpr{
				pos: position{line: 1773, col: 16, offset: 62657},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 16, offset: 62657},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1773, col: 16, offset: 62657},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1773, col: 25, offset: 62666},
								expr: &ruleRefExpr{
									pos:  position{line: 1773, col: 26, offset: 62667},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 47, offset: 62688},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1777, col: 1, offset: 62744},
			expr: &actionExpr{
				pos: position{line: 1777, col: 23, offset: 62766},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1777, col: 23, offset: 62766},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1777, col: 23, offset: 62766},
							expr: &ruleRefExpr{
								pos:  position{line: 1777, col: 24, offset: 62767},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1778, col: 5, offset: 62775},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1779, col: 9, offset: 62793},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1779, col: 9, offset: 62793},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1780, col: 11, offset: 62814},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1781, col: 11, offset: 62830},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 1782, col: 11, offset: 62848},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1783, col: 11, offset: 62876},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1784, col: 11, offset: 62903},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1785, col: 11, offset: 62919},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1786, col: 11, offset: 62951},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1787, col: 11, offset: 62973},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1788, col: 11, offset: 62995},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1789, col: 11, offset: 63021},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1790, col: 11, offset: 63138},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1795, col: 1, offset: 63232},
			expr: &actionExpr{
				pos: position{line: 1795, col: 16, offset: 63247},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1795, col: 16, offset: 63247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1795, col: 16, offset: 63247},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1795, col: 25, offset: 63256},
								expr: &choiceExpr{
									pos: position{line: 1796, col: 5, offset: 63262},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1796, col: 5, offset: 63262},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1797, col: 7, offset: 63279},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1798, col: 7, offset: 63291},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1799, col: 7, offset: 63404},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1800, col: 7, offset: 63418},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1800, col: 17, offset: 63428},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1805, col: 1, offset: 63530},
			expr: &actionExpr{
				pos: position{line: 1805, col: 22, offset: 63551},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1805, col: 22, offset: 63551},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1805, col: 22, offset: 63551},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1805, col: 31, offset: 63560},
								expr: &choiceExpr{
									pos: position{line: 1806, col: 5, offset: 63566},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1806, col: 5, offset: 63566},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1807, col: 7, offset: 63583},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1808, col: 7, offset: 63601},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1809, col: 7, offset: 63714},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1810, col: 7, offset: 63728},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1810, col: 17, offset: 63738},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1815, col: 1, offset: 63865},
			expr: &actionExpr{
				pos: position{line: 1815, col: 27, offset: 63891},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1815, col: 27, offset: 63891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1815, col: 27, offset: 63891},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1815, col: 36, offset: 63900},
								expr: &choiceExpr{
									pos: position{line: 1816, col: 5, offset: 63906},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1816, col: 5, offset: 63906},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1817, col: 7, offset: 63923},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1818, col: 7, offset: 63946},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1819, col: 7, offset: 64059},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1820, col: 7, offset: 64073},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1820, col: 17, offset: 64083},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 1824, col: 1, offset: 64139},
			expr: &actionExpr{
				pos: position{line: 1824, col: 18, offset: 64156},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 1824, col: 18, offset: 64156},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1824, col: 18, offset: 64156},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1824, col: 27, offset: 64165},
								expr: &choiceExpr{
									pos: position{line: 1825, col: 5, offset: 64171},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1825, col: 5, offset: 64171},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1826, col: 7, offset: 64188},
											name: "Callout",
										},
										&ruleRefExpr{
											pos:  position{line: 1827, col: 7, offset: 64244},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1828, col: 7, offset: 64267},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1829, col: 7, offset: 64380},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1830, col: 7, offset: 64394},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1830, col: 17, offset: 64404},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1834, col: 1, offset: 64464},
			expr: &actionExpr{
				pos: position{line: 1836, col: 5, offset: 64546},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1836, col: 5, offset: 64546},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1836, col: 5, offset: 64546},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1839, col: 5, offset: 64606},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1840, col: 9, offset: 64624},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1840, col: 9, offset: 64624},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1841, col: 11, offset: 64645},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1842, col: 11, offset: 64668},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1843, col: 11, offset: 64684},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1844, col: 11, offset: 64713},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1845, col: 11, offset: 64739},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1846, col: 11, offset: 64765},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1847, col: 11, offset: 64792},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1848, col: 11, offset: 64818},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1849, col: 11, offset: 64847},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1853, col: 1, offset: 64903},
			expr: &actionExpr{
				pos: position{line: 1855, col: 5, offset: 64991},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1855, col: 5, offset: 64991},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1855, col: 5, offset: 64991},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1858, col: 5, offset: 65063},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1859, col: 9, offset: 65081},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1859, col: 9, offset: 65081},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1859, col: 33, offset: 65105},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1859, col: 57, offset: 65129},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1864, col: 1, offset: 65189},
			expr: &actionExpr{
				pos: position{line: 1866, col: 5, offset: 65275},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1866, col: 5, offset: 65275},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1866, col: 5, offset: 65275},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1869, col: 5, offset: 65345},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1870, col: 9, offset: 65363},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1875, col: 1, offset: 65416},
			expr: &actionExpr{
				pos: position{line: 1877, col: 5, offset: 65492},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1877, col: 5, offset: 65492},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1877, col: 5, offset: 65492},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1880, col: 5, offset: 65552},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1881, col: 9, offset: 65570},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1881, col: 9, offset: 65570},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1882, col: 11, offset: 65592},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1886, col: 1, offset: 65651},
			expr: &actionExpr{
				pos: position{line: 1888, col: 5, offset: 65733},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1888, col: 5, offset: 65733},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1888, col: 5, offset: 65733},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1891, col: 5, offset: 65799},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1892, col: 9, offset: 65817},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1897, col: 1, offset: 65867},
			expr: &actionExpr{
				pos: position{line: 1899, col: 5, offset: 65954},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1899, col: 5, offset: 65954},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1899, col: 5, offset: 65954},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1902, col: 5, offset: 66025},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1904, col: 9, offset: 66123},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1904, col: 9, offset: 66123},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1904, col: 9, offset: 66123},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1907, col: 11, offset: 66227},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1907, col: 12, offset: 66228},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1907, col: 12, offset: 66228},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1907, col: 18, offset: 66234},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1907, col: 24, offset: 66240},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1917, col: 1, offset: 66469},
			expr: &choiceExpr{
				pos: position{line: 1917, col: 11, offset: 66479},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1917, col: 11, offset: 66479},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1917, col: 24, offset: 66492},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1917, col: 36, offset: 66504},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1917, col: 48, offset: 66516},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1917, col: 61, offset: 66529},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1917, col: 72, offset: 66540},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1919, col: 1, offset: 66559},
			expr: &actionExpr{
				pos: position{line: 1919, col: 15, offset: 66573},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1919, col: 15, offset: 66573},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1923, col: 1, offset: 66635},
			expr: &litMatcher{
				pos:        position{line: 1923, col: 18, offset: 66652},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1925, col: 1, offset: 66675},
			expr: &actionExpr{
				pos: position{line: 1925, col: 14, offset: 66688},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1925, col: 14, offset: 66688},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1929, col: 1, offset: 66751},
			expr: &actionExpr{
				pos: position{line: 1929, col: 14, offset: 66764},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1929, col: 14, offset: 66764},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1933, col: 1, offset: 66828},
			expr: &actionExpr{
				pos: position{line: 1933, col: 15, offset: 66842},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1933, col: 15, offset: 66842},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1937, col: 1, offset: 66905},
			expr: &actionExpr{
				pos: position{line: 1937, col: 13, offset: 66917},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1937, col: 13, offset: 66917},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1945, col: 1, offset: 67202},
			expr: &actionExpr{
				pos: position{line: 1945, col: 22, offset: 67223},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1945, col: 22, offset: 67223},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1945, col: 22, offset: 67223},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1945, col: 31, offset: 67232},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1945, col: 35, offset: 67236},
							expr: &charClassMatcher{
								pos:        position{line: 1945, col: 36, offset: 67237},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1952, col: 1, offset: 67515},
			expr: &actionExpr{
				pos: position{line: 1952, col: 18, offset: 67532},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1952, col: 18, offset: 67532},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1952, col: 19, offset: 67533},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1952, col: 19, offset: 67533},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1952, col: 27, offset: 67541},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1952, col: 37, offset: 67551},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1952, col: 45, offset: 67559},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1952, col: 55, offset: 67569},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1952, col: 63, offset: 67577},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1952, col: 72, offset: 67586},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1959, col: 1, offset: 67745},
			expr: &actionExpr{
				pos: position{line: 1960, col: 5, offset: 67768},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1960, col: 5, offset: 67768},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1960, col: 5, offset: 67768},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1960, col: 11, offset: 67774},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1961, col: 5, offset: 67794},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1965, col: 5, offset: 67934},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1966, col: 5, offset: 67944},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1966, col: 12, offset: 67951},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1967, col: 5, offset: 67972},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1967, col: 23, offset: 67990},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1971, col: 1, offset: 68121},
			expr: &actionExpr{
				pos: position{line: 1972, col: 5, offset: 68145},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1972, col: 5, offset: 68145},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1972, col: 5, offset: 68145},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1972, col: 11, offset: 68151},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1973, col: 5, offset: 68171},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1977, col: 5, offset: 68311},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1978, col: 5, offset: 68320},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1978, col: 12, offset: 68327},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1979, col: 5, offset: 68348},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1979, col: 23, offset: 68366},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1983, col: 1, offset: 68498},
			expr: &actionExpr{
				pos: position{line: 1983, col: 18, offset: 68515},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1983, col: 19, offset: 68516},
					expr: &charClassMatcher{
						pos:        position{line: 1983, col: 19, offset: 68516},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1987, col: 1, offset: 68573},
			expr: &actionExpr{
				pos: position{line: 1987, col: 19, offset: 68591},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1987, col: 19, offset: 68591},
					expr: &charClassMatcher{
						pos:        position{line: 1987, col: 19, offset: 68591},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1994, col: 1, offset: 68753},
			expr: &charClassMatcher{
				pos:        position{line: 1994, col: 13, offset: 68765},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1996, col: 1, offset: 68775},
			expr: &choiceExpr{
				pos: position{line: 1996, col: 16, offset: 68790},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1996, col: 16, offset: 68790},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1996, col: 22, offset: 68796},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1996, col: 28, offset: 68802},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1996, col: 34, offset: 68808},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1996, col: 40, offset: 68814},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1996, col: 46, offset: 68820},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1998, col: 1, offset: 68826},
			expr: &actionExpr{
				pos: position{line: 1998, col: 14, offset: 68839},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1998, col: 14, offset: 68839},
					expr: &charClassMatcher{
						pos:        position{line: 1998, col: 14, offset: 68839},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2002, col: 1, offset: 68893},
			expr: &choiceExpr{
				pos: position{line: 2006, col: 5, offset: 69220},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2006, col: 5, offset: 69220},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2006, col: 5, offset: 69220},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2006, col: 5, offset: 69220},
									expr: &charClassMatcher{
										pos:        position{line: 2006, col: 5, offset: 69220},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2006, col: 15, offset: 69230},
									expr: &choiceExpr{
										pos: position{line: 2006, col: 17, offset: 69232},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2006, col: 17, offset: 69232},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2006, col: 30, offset: 69245},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2008, col: 9, offset: 69314},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2008, col: 9, offset: 69314},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2008, col: 9, offset: 69314},
									expr: &charClassMatcher{
										pos:        position{line: 2008, col: 9, offset: 69314},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2008, col: 19, offset: 69324},
									expr: &seqExpr{
										pos: position{line: 2008, col: 20, offset: 69325},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2008, col: 20, offset: 69325},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2008, col: 27, offset: 69332},
												expr: &charClassMatcher{
													pos:        position{line: 2008, col: 27, offset: 69332},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2013, col: 1, offset: 69424},
			expr: &choiceExpr{
				pos: position{line: 2017, col: 5, offset: 69617},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2017, col: 5, offset: 69617},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2017, col: 5, offset: 69617},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2017, col: 5, offset: 69617},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 2017, col: 14, offset: 69626},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 2017, col: 14, offset: 69626},
											expr: &charClassMatcher{
												pos:        position{line: 2017, col: 14, offset: 69626},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2020, col: 5, offset: 69707},
									expr: &choiceExpr{
										pos: position{line: 2020, col: 7, offset: 69709},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2020, col: 7, offset: 69709},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2020, col: 17, offset: 69719},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 2020, col: 47, offset: 69749},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2022, col: 9, offset: 69792},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2025, col: 1, offset: 69892},
			expr: &actionExpr{
				pos: position{line: 2025, col: 12, offset: 69903},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2025, col: 12, offset: 69903},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2029, col: 1, offset: 69976},
			expr: &actionExpr{
				pos: position{line: 2029, col: 17, offset: 69992},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2029, col: 17, offset: 69992},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2029, col: 22, offset: 69997},
						expr: &choiceExpr{
							pos: position{line: 2029, col: 23, offset: 69998},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2029, col: 23, offset: 69998},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2029, col: 34, offset: 70009},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2033, col: 1, offset: 70098},
			expr: &actionExpr{
				pos: position{line: 2033, col: 13, offset: 70110},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2033, col: 13, offset: 70110},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2033, col: 13, offset: 70110},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2033, col: 20, offset: 70117},
								expr: &ruleRefExpr{
									pos:  position{line: 2033, col: 21, offset: 70118},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2033, col: 30, offset: 70127},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2033, col: 35, offset: 70132},
								expr: &choiceExpr{
									pos: position{line: 2033, col: 36, offset: 70133},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2033, col: 36, offset: 70133},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2033, col: 47, offset: 70144},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2037, col: 1, offset: 70237},
			expr: &actionExpr{
				pos: position{line: 2037, col: 23, offset: 70259},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2037, col: 23, offset: 70259},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2037, col: 23, offset: 70259},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2037, col: 31, offset: 70267},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2037, col: 39, offset: 70275},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2037, col: 44, offset: 70280},
								expr: &choiceExpr{
									pos: position{line: 2037, col: 45, offset: 70281},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2037, col: 45, offset: 70281},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2037, col: 56, offset: 70292},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2041, col: 1, offset: 70385},
			expr: &actionExpr{
				pos: position{line: 2041, col: 13, offset: 70397},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 2041, col: 13, offset: 70397},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2041, col: 22, offset: 70406},
						expr: &choiceExpr{
							pos: position{line: 2043, col: 5, offset: 70445},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2043, col: 5, offset: 70445},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2043, col: 5, offset: 70445},
										expr: &charClassMatcher{
											pos:        position{line: 2043, col: 6, offset: 70446},
											val:        "[^\\r\\n[\\]\\uFFFD{&<> ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2046, col: 7, offset: 70585},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 2047, col: 7, offset: 70614},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 2048, col: 7, offset: 70637},
									run: (*parser).callonFilename10,
									expr: &litMatcher{
										pos:        position{line: 2048, col: 7, offset: 70637},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2054, col: 1, offset: 70775},
			expr: &choiceExpr{
				pos: position{line: 2054, col: 11, offset: 70785},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2054, col: 11, offset: 70785},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 23, offset: 70797},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 36, offset: 70810},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 47, offset: 70821},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 58, offset: 70832},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2056, col: 1, offset: 70843},
			expr: &actionExpr{
				pos: position{line: 2056, col: 7, offset: 70849},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2056, col: 7, offset: 70849},
					expr: &charClassMatcher{
						pos:        position{line: 2056, col: 7, offset: 70849},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2060, col: 1, offset: 70982},
			expr: &actionExpr{
				pos: position{line: 2060, col: 10, offset: 70991},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2060, col: 10, offset: 70991},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2064, col: 1, offset: 71041},
			expr: &actionExpr{
				pos: position{line: 2064, col: 11, offset: 71051},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2064, col: 11, offset: 71051},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2064, col: 11, offset: 71051},
							expr: &litMatcher{
								pos:        position{line: 2064, col: 11, offset: 71051},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2064, col: 16, offset: 71056},
							expr: &ruleRefExpr{
								pos:  position{line: 2064, col: 16, offset: 71056},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2068, col: 1, offset: 71116},
			expr: &choiceExpr{
				pos: position{line: 2068, col: 10, offset: 71125},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2068, col: 10, offset: 71125},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2068, col: 16, offset: 71131},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2068, col: 16, offset: 71131},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2072, col: 1, offset: 71180},
			expr: &choiceExpr{
				pos: position{line: 2072, col: 12, offset: 71191},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2072, col: 12, offset: 71191},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2072, col: 19, offset: 71198},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 2072, col: 28, offset: 71207},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 2072, col: 28, offset: 71207},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2076, col: 1, offset: 71291},
			expr: &notExpr{
				pos: position{line: 2076, col: 8, offset: 71298},
				expr: &anyMatcher{
					line: 2076, col: 9, offset: 71299,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2078, col: 1, offset: 71302},
			expr: &choiceExpr{
				pos: position{line: 2078, col: 8, offset: 71309},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2078, col: 8, offset: 71309},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 2078, col: 14, offset: 71315},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock7(delimiter interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block
	return c.isValidBlockDelimiter(delimiter.(types.BlockDelimiter))

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock7(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock3(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock3(stack["delimiter"])
}

func (c *current) onAttributeDeclaration3() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonAttributeDeclaration3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration3()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes13(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue15()
}

func (c *current) onSingleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue18()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue15()
}

func (c *current) onDoubleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue18()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue21() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue7(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue7(stack["element"])
}

func (c *current) onUnquotedAttributeValue23(elements interface{}) (bool, error) {
	// post-parsing condition to verify that the value is not an empty string
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue23(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListElement1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElement1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListElementPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListElementPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix5()
}

func (c *current) onCalloutListElementPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix1(stack["ref"])
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() error {
	// for images, we always enable the 'normal' substitutions
	return c.setSubstitutionPhase("normal")

}

func (p *parser) callonImageBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onOrderedListElement1(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content.([]interface{}))
}

func (p *parser) callonOrderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElement1(stack["prefix"], stack["content"])
}

func (c *current) onOrderedListElementPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix10()
}

func (c *current) onOrderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix13(stack["depth"])
}

func (c *current) onOrderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOrderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix7(stack["depth"])
}

func (c *current) onOrderedListElementPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOrderedListElementPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix14()
}

func (c *current) onOrderedListElementPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOrderedListElementPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix19()
}

func (c *current) onOrderedListElementPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOrderedListElementPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix23()
}

func (c *current) onOrderedListElementPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOrderedListElementPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix27()
}

func (c *current) onOrderedListElementPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOrderedListElementPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix32()
}

func (c *current) onOrderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix1(stack["prefix"])
}

func (c *current) onOrderedListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonOrderedListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementContent1()
}

func (c *current) onUnorderedListElement1(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content.([]interface{}))

}

func (p *parser) callonUnorderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElement1(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListElementPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix10()
}

func (c *current) onUnorderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix13(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonUnorderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix7(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix15() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonUnorderedListElementPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix15()
}

func (c *current) onUnorderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListElementCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle7()
}

func (c *current) onUnorderedListElementCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle9()
}

func (c *current) onUnorderedListElementCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle11()
}

func (c *current) onUnorderedListElementCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListElementCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonUnorderedListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementContent1()
}

func (c *current) onListElementContinuation1() (interface{}, error) {
	return types.NewListElementContinuation()
}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1()
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onItalicWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonItalicWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicWord1()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return []interface{}{
		types.StringElement{Content: string(c.text)},
	}, nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(content interface{}) (interface{}, error) {
	s, _ := types.NewStringElement(string(c.text))
	return []interface{}{s}, nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["content"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename10()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &actionExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				run: (*parser).callonDocumentRawBlock1,
				expr: &labeledExpr{
					pos:   position{line: 65, col: 9, offset: 1935},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 65, col: 16, offset: 1942},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 16, offset: 1942},
								name: "LabeledListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 66, col: 11, offset: 2007},
								name: "SimpleRawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2036},
								name: "BlankLine",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 2088},
								name: "Section",
							},
							&ruleRefExpr{
								pos:  position{line: 69, col: 11, offset: 2106},
								name: "DelimitedBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 2131},
								name: "ImageBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 71, col: 11, offset: 2152},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 72, col: 11, offset: 2180},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 73, col: 11, offset: 2196},
								name: "ThematicBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 74, col: 11, offset: 2220},
								name: "OrderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 75, col: 11, offset: 2246},
								name: "UnorderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 11, offset: 2275},
								name: "CalloutListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 77, col: 11, offset: 2301},
								name: "ContinuedListItemElement",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2336},
								name: "LiteralBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 79, col: 11, offset: 2360},
								name: "AttributeDeclaration",
							},
							&ruleRefExpr{
								pos:  position{line: 80, col: 11, offset: 2392},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 11, offset: 2418},
								name: "TableOfContentsPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 82, col: 11, offset: 2455},
								name: "UserMacroBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 11, offset: 2480},
								name: "RawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 84, col: 11, offset: 2503},
								name: "StandaloneAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 92, col: 1, offset: 2712},
			expr: &ruleRefExpr{
				pos:  position{line: 92, col: 16, offset: 2727},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 94, col: 1, offset: 2745},
			expr: &actionExpr{
				pos: position{line: 94, col: 20, offset: 2764},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 94, col: 20, offset: 2764},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 94, col: 20, offset: 2764},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 41, offset: 2785},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 49, offset: 2793},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 50, offset: 2794},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 75, offset: 2819},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 98, col: 1, offset: 2899},
			expr: &seqExpr{
				pos: position{line: 98, col: 26, offset: 2924},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 98, col: 26, offset: 2924},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 98, col: 32, offset: 2930},
						expr: &ruleRefExpr{
							pos:  position{line: 98, col: 32, offset: 2930},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 39, offset: 2937},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 100, col: 1, offset: 2942},
			expr: &actionExpr{
				pos: position{line: 100, col: 27, offset: 2968},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 100, col: 27, offset: 2968},
					expr: &oneOrMoreExpr{
						pos: position{line: 100, col: 28, offset: 2969},
						expr: &seqExpr{
							pos: position{line: 100, col: 29, offset: 2970},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 100, col: 29, offset: 2970},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 30, offset: 2971},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 100, col: 51, offset: 2992,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 107, col: 1, offset: 3158},
			expr: &actionExpr{
				pos: position{line: 107, col: 19, offset: 3176},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 107, col: 19, offset: 3176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 19, offset: 3176},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 107, col: 23, offset: 3180},
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 23, offset: 3180},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 30, offset: 3187},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 37, offset: 3194},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 52, offset: 3209},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 56, offset: 3213},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 56, offset: 3213},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 74, offset: 3231},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 9, offset: 3243},
							expr: &choiceExpr{
								pos: position{line: 108, col: 10, offset: 3244},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 108, col: 10, offset: 3244},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 108, col: 10, offset: 3244},
												expr: &ruleRefExpr{
													pos:  position{line: 108, col: 10, offset: 3244},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 108, col: 17, offset: 3251},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 108, col: 37, offset: 3271},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 9, offset: 3294},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 109, col: 18, offset: 3303},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 18, offset: 3303},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3330},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3331},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 110, col: 10, offset: 3331},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 110, col: 10, offset: 3331},
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 10, offset: 3331},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 17, offset: 3338},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 37, offset: 3358},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3381},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 19, offset: 3391},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 19, offset: 3391},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 115, col: 1, offset: 3492},
			expr: &choiceExpr{
				pos: position{line: 115, col: 20, offset: 3511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 115, col: 20, offset: 3511},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 48, offset: 3539},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 117, col: 1, offset: 3569},
			expr: &actionExpr{
				pos: position{line: 117, col: 30, offset: 3598},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 117, col: 30, offset: 3598},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 30, offset: 3598},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 30, offset: 3598},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 117, col: 37, offset: 3605},
							expr: &litMatcher{
								pos:        position{line: 117, col: 38, offset: 3606},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 42, offset: 3610},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 117, col: 51, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 51, offset: 3619},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 68, offset: 3636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 121, col: 1, offset: 3706},
			expr: &actionExpr{
				pos: position{line: 121, col: 33, offset: 3738},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 33, offset: 3738},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 33, offset: 3738},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 33, offset: 3738},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 40, offset: 3745},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 121, col: 51, offset: 3756},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 59, offset: 3764},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 75, offset: 3780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 125, col: 1, offset: 3859},
			expr: &actionExpr{
				pos: position{line: 125, col: 19, offset: 3877},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 125, col: 19, offset: 3877},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 19, offset: 3877},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 19, offset: 3877},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 26, offset: 3884},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 36, offset: 3894},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 56, offset: 3914},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 125, col: 62, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 63, offset: 3921},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 85, offset: 3943},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 85, offset: 3943},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 125, col: 92, offset: 3950},
							expr: &litMatcher{
								pos:        position{line: 125, col: 92, offset: 3950},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 97, offset: 3955},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 97, offset: 3955},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 130, col: 1, offset: 4100},
			expr: &actionExpr{
				pos: position{line: 130, col: 23, offset: 4122},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 130, col: 23, offset: 4122},
					expr: &charClassMatcher{
						pos:        position{line: 130, col: 23, offset: 4122},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 134, col: 1, offset: 4169},
			expr: &actionExpr{
				pos: position{line: 134, col: 24, offset: 4192},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 134, col: 24, offset: 4192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 134, col: 24, offset: 4192},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 28, offset: 4196},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 134, col: 35, offset: 4203},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 134, col: 36, offset: 4204},
									expr: &charClassMatcher{
										pos:        position{line: 134, col: 36, offset: 4204},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 4, offset: 4251},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 142, col: 1, offset: 4412},
			expr: &actionExpr{
				pos: position{line: 142, col: 21, offset: 4432},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 142, col: 21, offset: 4432},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 21, offset: 4432},
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 21, offset: 4432},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 142, col: 28, offset: 4439},
							expr: &litMatcher{
								pos:        position{line: 142, col: 29, offset: 4440},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 142, col: 33, offset: 4444},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 143, col: 9, offset: 4463},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 143, col: 10, offset: 4464},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 143, col: 10, offset: 4464},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 143, col: 10, offset: 4464},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 143, col: 21, offset: 4475},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 45, offset: 4499},
													expr: &litMatcher{
														pos:        position{line: 143, col: 45, offset: 4499},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 50, offset: 4504},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 58, offset: 4512},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 59, offset: 4513},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 82, offset: 4536},
													expr: &litMatcher{
														pos:        position{line: 143, col: 82, offset: 4536},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 87, offset: 4541},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 97, offset: 4551},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 98, offset: 4552},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 145, col: 15, offset: 4669},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 145, col: 15, offset: 4669},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 15, offset: 4669},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 24, offset: 4678},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 46, offset: 4700},
													expr: &litMatcher{
														pos:        position{line: 145, col: 46, offset: 4700},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 51, offset: 4705},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 61, offset: 4715},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 62, offset: 4716},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 4825},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 152, col: 1, offset: 4955},
			expr: &choiceExpr{
				pos: position{line: 152, col: 27, offset: 4981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 27, offset: 4981},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 152, col: 27, offset: 4981},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 152, col: 27, offset: 4981},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 32, offset: 4986},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 39, offset: 4993},
									expr: &charClassMatcher{
										pos:        position{line: 152, col: 39, offset: 4993},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 5041},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 5041},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 154, col: 5, offset: 5041},
									expr: &litMatcher{
										pos:        position{line: 154, col: 5, offset: 5041},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 11, offset: 5047},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 18, offset: 5054},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 18, offset: 5054},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 154, col: 29, offset: 5065},
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 29, offset: 5065},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 154, col: 36, offset: 5072},
									expr: &litMatcher{
										pos:        position{line: 154, col: 37, offset: 5073},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 158, col: 1, offset: 5113},
			expr: &actionExpr{
				pos: position{line: 158, col: 25, offset: 5137},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 158, col: 25, offset: 5137},
					expr: &charClassMatcher{
						pos:        position{line: 158, col: 25, offset: 5137},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 162, col: 1, offset: 5183},
			expr: &actionExpr{
				pos: position{line: 162, col: 27, offset: 5209},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 27, offset: 5209},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 27, offset: 5209},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 169, col: 1, offset: 5362},
			expr: &actionExpr{
				pos: position{line: 169, col: 25, offset: 5386},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 169, col: 25, offset: 5386},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 25, offset: 5386},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 29, offset: 5390},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 35, offset: 5396},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 169, col: 50, offset: 5411},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 9, offset: 5424},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 170, col: 15, offset: 5430},
								expr: &ruleRefExpr{
									pos:  position{line: 170, col: 16, offset: 5431},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 44, offset: 5459},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 177, col: 1, offset: 5732},
			expr: &actionExpr{
				pos: position{line: 177, col: 18, offset: 5749},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 177, col: 18, offset: 5749},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 177, col: 18, offset: 5749},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 177, col: 28, offset: 5759},
							expr: &charClassMatcher{
								pos:        position{line: 177, col: 29, offset: 5760},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 181, col: 1, offset: 5808},
			expr: &actionExpr{
				pos: position{line: 181, col: 30, offset: 5837},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 181, col: 30, offset: 5837},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 181, col: 30, offset: 5837},
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 30, offset: 5837},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 37, offset: 5844},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 46, offset: 5853},
								expr: &choiceExpr{
									pos: position{line: 182, col: 5, offset: 5859},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 182, col: 6, offset: 5860},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 182, col: 6, offset: 5860},
												expr: &charClassMatcher{
													pos:        position{line: 182, col: 6, offset: 5860},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 185, col: 5, offset: 5939},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 186, col: 6, offset: 5968},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 186, col: 6, offset: 5968},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 193, col: 1, offset: 6135},
			expr: &choiceExpr{
				pos: position{line: 193, col: 19, offset: 6153},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 193, col: 19, offset: 6153},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 193, col: 19, offset: 6153},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 19, offset: 6153},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 24, offset: 6158},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 30, offset: 6164},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 45, offset: 6179},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 49, offset: 6183},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 49, offset: 6183},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 56, offset: 6190},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 6250},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 195, col: 5, offset: 6250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 195, col: 5, offset: 6250},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 195, col: 9, offset: 6254},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 15, offset: 6260},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 195, col: 30, offset: 6275},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 195, col: 35, offset: 6280},
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 35, offset: 6280},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 195, col: 42, offset: 6287},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 199, col: 1, offset: 6346},
			expr: &choiceExpr{
				pos: position{line: 199, col: 26, offset: 6371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 26, offset: 6371},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 39, offset: 6384},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 201, col: 1, offset: 6393},
			expr: &actionExpr{
				pos: position{line: 201, col: 12, offset: 6404},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 201, col: 12, offset: 6404},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 201, col: 12, offset: 6404},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 16, offset: 6408},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 21, offset: 6413},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 201, col: 35, offset: 6427},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 205, col: 1, offset: 6493},
			expr: &choiceExpr{
				pos: position{line: 205, col: 15, offset: 6507},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 205, col: 15, offset: 6507},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 29, offset: 6521},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 43, offset: 6535},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 61, offset: 6553},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 80, offset: 6572},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 98, offset: 6590},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 207, col: 1, offset: 6608},
			expr: &actionExpr{
				pos: position{line: 207, col: 16, offset: 6623},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 207, col: 16, offset: 6623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 16, offset: 6623},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 28, offset: 6635},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 33, offset: 6640},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 47, offset: 6654},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 211, col: 1, offset: 6730},
			expr: &actionExpr{
				pos: position{line: 211, col: 16, offset: 6745},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 211, col: 16, offset: 6745},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 211, col: 16, offset: 6745},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 29, offset: 6758},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 34, offset: 6763},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 211, col: 48, offset: 6777},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 215, col: 1, offset: 6852},
			expr: &actionExpr{
				pos: position{line: 215, col: 20, offset: 6871},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 215, col: 20, offset: 6871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 215, col: 20, offset: 6871},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 32, offset: 6883},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 37, offset: 6888},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 215, col: 51, offset: 6902},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 55, offset: 6906},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 215, col: 61, offset: 6912},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 215, col: 70, offset: 6921},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 219, col: 1, offset: 6999},
			expr: &actionExpr{
				pos: position{line: 219, col: 21, offset: 7019},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 219, col: 21, offset: 7019},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 21, offset: 7019},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 34, offset: 7032},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 39, offset: 7037},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 53, offset: 7051},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 57, offset: 7055},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 219, col: 63, offset: 7061},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 72, offset: 7070},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 223, col: 1, offset: 7147},
			expr: &actionExpr{
				pos: position{line: 223, col: 20, offset: 7166},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 223, col: 20, offset: 7166},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 20, offset: 7166},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 32, offset: 7178},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 37, offset: 7183},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 51, offset: 7197},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 55, offset: 7201},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 223, col: 60, offset: 7206},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 223, col: 60, offset: 7206},
									expr: &charClassMatcher{
										pos:        position{line: 223, col: 60, offset: 7206},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 108, offset: 7254},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 227, col: 1, offset: 7336},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7356},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7356},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7356},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 34, offset: 7369},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 39, offset: 7374},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 53, offset: 7388},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 57, offset: 7392},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 227, col: 62, offset: 7397},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 227, col: 62, offset: 7397},
									expr: &charClassMatcher{
										pos:        position{line: 227, col: 62, offset: 7397},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 110, offset: 7445},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 231, col: 1, offset: 7526},
			expr: &actionExpr{
				pos: position{line: 231, col: 21, offset: 7546},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 231, col: 21, offset: 7546},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 231, col: 21, offset: 7546},
							expr: &choiceExpr{
								pos: position{line: 231, col: 23, offset: 7548},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 231, col: 23, offset: 7548},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 231, col: 29, offset: 7554},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 7678},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 232, col: 11, offset: 7684},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 232, col: 11, offset: 7684},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 233, col: 9, offset: 7705},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7729},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7766},
										name: "LiteralBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7799},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7827},
										name: "ExampleBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 238, col: 9, offset: 7859},
										name: "ListingBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 239, col: 9, offset: 7891},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 240, col: 9, offset: 7918},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 241, col: 9, offset: 7945},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 242, col: 9, offset: 7982},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 9, offset: 8018},
										name: "AttributeGroup",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 243, col: 25, offset: 8034},
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 25, offset: 8034},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 247, col: 1, offset: 8132},
			expr: &actionExpr{
				pos: position{line: 247, col: 14, offset: 8145},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 247, col: 14, offset: 8145},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 14, offset: 8145},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 19, offset: 8150},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 23, offset: 8154},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 27, offset: 8158},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 32, offset: 8163},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 32, offset: 8163},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 39, offset: 8170},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 251, col: 1, offset: 8215},
			expr: &actionExpr{
				pos: position{line: 251, col: 20, offset: 8234},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 251, col: 20, offset: 8234},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 20, offset: 8234},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 25, offset: 8239},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 29, offset: 8243},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 33, offset: 8247},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 38, offset: 8252},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 38, offset: 8252},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 257, col: 1, offset: 8531},
			expr: &actionExpr{
				pos: position{line: 257, col: 17, offset: 8547},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 257, col: 17, offset: 8547},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 17, offset: 8547},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 21, offset: 8551},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 28, offset: 8558},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 49, offset: 8579},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 49, offset: 8579},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 56, offset: 8586},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 261, col: 1, offset: 8653},
			expr: &oneOrMoreExpr{
				pos: position{line: 261, col: 24, offset: 8676},
				expr: &choiceExpr{
					pos: position{line: 262, col: 5, offset: 8682},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 262, col: 6, offset: 8683},
							run: (*parser).callonElementTitleContent3,
							expr: &seqExpr{
								pos: position{line: 262, col: 6, offset: 8683},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 262, col: 6, offset: 8683},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 262, col: 14, offset: 8691},
										expr: &charClassMatcher{
											pos:        position{line: 262, col: 14, offset: 8691},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 5, offset: 8886},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 266, col: 6, offset: 8901},
							run: (*parser).callonElementTitleContent9,
							expr: &litMatcher{
								pos:        position{line: 266, col: 6, offset: 8901},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 273, col: 1, offset: 9098},
			expr: &actionExpr{
				pos: position{line: 273, col: 31, offset: 9128},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 273, col: 31, offset: 9128},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 31, offset: 9128},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 35, offset: 9132},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 273, col: 47, offset: 9144},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 273, col: 47, offset: 9144},
										expr: &ruleRefExpr{
											pos:  position{line: 273, col: 47, offset: 9144},
											name: "ShortHandAttribute",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 273, col: 67, offset: 9164},
										expr: &ruleRefExpr{
											pos:  position{line: 273, col: 67, offset: 9164},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 84, offset: 9181},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 88, offset: 9185},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 88, offset: 9185},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 95, offset: 9192},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttributeList",
			pos:  position{line: 279, col: 1, offset: 9484},
			expr: &actionExpr{
				pos: position{line: 279, col: 23, offset: 9506},
				run: (*parser).callonBlockAttributeList1,
				expr: &seqExpr{
					pos: position{line: 279, col: 23, offset: 9506},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 23, offset: 9506},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 27, offset: 9510},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 279, col: 39, offset: 9522},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 279, col: 39, offset: 9522},
										expr: &ruleRefExpr{
											pos:  position{line: 279, col: 39, offset: 9522},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 279, col: 55, offset: 9538},
										expr: &ruleRefExpr{
											pos:  position{line: 279, col: 55, offset: 9538},
											name: "ShortHandAttribute",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 279, col: 75, offset: 9558},
										expr: &ruleRefExpr{
											pos:  position{line: 279, col: 75, offset: 9558},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 279, col: 97, offset: 9580},
										expr: &ruleRefExpr{
											pos:  position{line: 279, col: 97, offset: 9580},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 279, col: 119, offset: 9602},
										expr: &ruleRefExpr{
											pos:  position{line: 279, col: 119, offset: 9602},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 136, offset: 9619},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 140, offset: 9623},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 283, col: 1, offset: 9698},
			expr: &actionExpr{
				pos: position{line: 283, col: 19, offset: 9716},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 283, col: 19, offset: 9716},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 283, col: 25, offset: 9722},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 287, col: 1, offset: 9785},
			expr: &actionExpr{
				pos: position{line: 287, col: 25, offset: 9809},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 287, col: 25, offset: 9809},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 287, col: 25, offset: 9809},
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 25, offset: 9809},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 287, col: 32, offset: 9816},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 287, col: 36, offset: 9820},
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 36, offset: 9820},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 43, offset: 9827},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 287, col: 49, offset: 9833},
								expr: &ruleRefExpr{
									pos:  position{line: 287, col: 49, offset: 9833},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 294, col: 1, offset: 9972},
			expr: &actionExpr{
				pos: position{line: 294, col: 25, offset: 9996},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 294, col: 25, offset: 9996},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 25, offset: 9996},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 25, offset: 9996},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 294, col: 32, offset: 10003},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 36, offset: 10007},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 36, offset: 10007},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 294, col: 43, offset: 10014},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 294, col: 49, offset: 10020},
								expr: &ruleRefExpr{
									pos:  position{line: 294, col: 49, offset: 10020},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockAttribute",
			pos:  position{line: 301, col: 1, offset: 10159},
			expr: &actionExpr{
				pos: position{line: 301, col: 26, offset: 10184},
				run: (*parser).callonLiteralBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 301, col: 26, offset: 10184},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 26, offset: 10184},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 38, offset: 10196},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 38, offset: 10196},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 45, offset: 10203},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 305, col: 1, offset: 10260},
			expr: &actionExpr{
				pos: position{line: 305, col: 30, offset: 10289},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 305, col: 30, offset: 10289},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 305, col: 30, offset: 10289},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 39, offset: 10298},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 39, offset: 10298},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 46, offset: 10305},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockAttribute",
			pos:  position{line: 309, col: 1, offset: 10366},
			expr: &actionExpr{
				pos: position{line: 309, col: 26, offset: 10391},
				run: (*parser).callonExampleBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 309, col: 26, offset: 10391},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 26, offset: 10391},
							val:        "[example]",
							ignoreCase: false,
							want:       "\"[example]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 38, offset: 10403},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 38, offset: 10403},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 45, offset: 10410},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockAttribute",
			pos:  position{line: 313, col: 1, offset: 10463},
			expr: &actionExpr{
				pos: position{line: 313, col: 26, offset: 10488},
				run: (*parser).callonListingBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 313, col: 26, offset: 10488},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 313, col: 26, offset: 10488},
							val:        "[listing]",
							ignoreCase: false,
							want:       "\"[listing]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 313, col: 38, offset: 10500},
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 38, offset: 10500},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 313, col: 45, offset: 10507},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 318, col: 1, offset: 10640},
			expr: &actionExpr{
				pos: position{line: 318, col: 30, offset: 10669},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 318, col: 30, offset: 10669},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 318, col: 30, offset: 10669},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 34, offset: 10673},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 37, offset: 10676},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 318, col: 53, offset: 10692},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 57, offset: 10696},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 57, offset: 10696},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 64, offset: 10703},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 323, col: 1, offset: 10844},
			expr: &actionExpr{
				pos: position{line: 323, col: 21, offset: 10864},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 323, col: 21, offset: 10864},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 323, col: 21, offset: 10864},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 5, offset: 10879},
							label: "options",
							expr: &zeroOrMoreExpr{
								pos: position{line: 324, col: 13, offset: 10887},
								expr: &ruleRefExpr{
									pos:  position{line: 324, col: 14, offset: 10888},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 5, offset: 10913},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 14, offset: 10922},
								expr: &actionExpr{
									pos: position{line: 325, col: 15, offset: 10923},
									run: (*parser).callonSourceAttributes9,
									expr: &seqExpr{
										pos: position{line: 325, col: 15, offset: 10923},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 325, col: 15, offset: 10923},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 325, col: 19, offset: 10927},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 325, col: 24, offset: 10932},
													expr: &ruleRefExpr{
														pos:  position{line: 325, col: 25, offset: 10933},
														name: "AttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 326, col: 5, offset: 10978},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 326, col: 12, offset: 10985},
								expr: &actionExpr{
									pos: position{line: 326, col: 13, offset: 10986},
									run: (*parser).callonSourceAttributes17,
									expr: &seqExpr{
										pos: position{line: 326, col: 13, offset: 10986},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 326, col: 13, offset: 10986},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 326, col: 17, offset: 10990},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 326, col: 22, offset: 10995},
													expr: &choiceExpr{
														pos: position{line: 326, col: 23, offset: 10996},
														alternatives: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 326, col: 23, offset: 10996},
																name: "NamedAttribute",
															},
															&ruleRefExpr{
																pos:  position{line: 326, col: 40, offset: 11013},
																name: "StandaloneAttributeKey",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 327, col: 5, offset: 11066},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 327, col: 9, offset: 11070},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 9, offset: 11070},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 327, col: 16, offset: 11077},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 332, col: 1, offset: 11237},
			expr: &actionExpr{
				pos: position{line: 332, col: 19, offset: 11255},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 332, col: 19, offset: 11255},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 19, offset: 11255},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 332, col: 23, offset: 11259},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 35, offset: 11271},
								name: "Attributes",
							},
						},
						&litMatcher{
							pos:        position{line: 332, col: 47, offset: 11283},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 332, col: 51, offset: 11287},
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 51, offset: 11287},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 332, col: 58, offset: 11294},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 336, col: 1, offset: 11369},
			expr: &zeroOrMoreExpr{
				pos: position{line: 336, col: 15, offset: 11383},
				expr: &choiceExpr{
					pos: position{line: 336, col: 16, offset: 11384},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 336, col: 16, offset: 11384},
							name: "NamedAttribute",
						},
						&ruleRefExpr{
							pos:  position{line: 336, col: 33, offset: 11401},
							name: "StandaloneAttributeKey",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributes",
			pos:  position{line: 338, col: 1, offset: 11427},
			expr: &actionExpr{
				pos: position{line: 338, col: 20, offset: 11446},
				run: (*parser).callonNamedAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 338, col: 20, offset: 11446},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 338, col: 31, offset: 11457},
						expr: &ruleRefExpr{
							pos:  position{line: 338, col: 32, offset: 11458},
							name: "NamedAttribute",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 347, col: 1, offset: 11811},
			expr: &actionExpr{
				pos: position{line: 347, col: 22, offset: 11832},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 347, col: 22, offset: 11832},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 347, col: 22, offset: 11832},
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 23, offset: 11833},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 347, col: 29, offset: 11839},
							expr: &charClassMatcher{
								pos:        position{line: 347, col: 29, offset: 11839},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 347, col: 42, offset: 11852},
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 42, offset: 11852},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 351, col: 1, offset: 11914},
			expr: &actionExpr{
				pos: position{line: 351, col: 19, offset: 11932},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 351, col: 19, offset: 11932},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 351, col: 19, offset: 11932},
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 19, offset: 11932},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 26, offset: 11939},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 351, col: 33, offset: 11946},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 351, col: 33, offset: 11946},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 351, col: 62, offset: 11975},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 351, col: 91, offset: 12004},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 351, col: 115, offset: 12028},
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 115, offset: 12028},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 351, col: 122, offset: 12035},
							expr: &charClassMatcher{
								pos:        position{line: 351, col: 123, offset: 12036},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 355, col: 1, offset: 12069},
			expr: &actionExpr{
				pos: position{line: 355, col: 31, offset: 12099},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 355, col: 31, offset: 12099},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 31, offset: 12099},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 35, offset: 12103},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 355, col: 44, offset: 12112},
								expr: &choiceExpr{
									pos: position{line: 356, col: 5, offset: 12118},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 356, col: 6, offset: 12119},
											run: (*parser).callonSingleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 356, col: 6, offset: 12119},
												expr: &charClassMatcher{
													pos:        position{line: 356, col: 6, offset: 12119},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 359, col: 5, offset: 12254},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 360, col: 5, offset: 12279},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 361, col: 6, offset: 12294},
											run: (*parser).callonSingleQuotedAttributeValue12,
											expr: &litMatcher{
												pos:        position{line: 361, col: 6, offset: 12294},
												val:        "\\'",
												ignoreCase: false,
												want:       "\"\\\\'\"",
											},
										},
										&actionExpr{
											pos: position{line: 362, col: 6, offset: 12328},
											run: (*parser).callonSingleQuotedAttributeValue14,
											expr: &charClassMatcher{
												pos:        position{line: 362, col: 6, offset: 12328},
												val:        "[{\\\\]",
												chars:      []rune{'{', '\\'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 365, col: 4, offset: 12414},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 369, col: 1, offset: 12462},
			expr: &actionExpr{
				pos: position{line: 369, col: 31, offset: 12492},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 369, col: 31, offset: 12492},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 369, col: 31, offset: 12492},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 369, col: 36, offset: 12497},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 369, col: 45, offset: 12506},
								expr: &choiceExpr{
									pos: position{line: 370, col: 5, offset: 12512},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 370, col: 6, offset: 12513},
											run: (*parser).callonDoubleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 370, col: 6, offset: 12513},
												expr: &charClassMatcher{
													pos:        position{line: 370, col: 6, offset: 12513},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 373, col: 5, offset: 12647},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 374, col: 5, offset: 12672},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 375, col: 6, offset: 12687},
											run: (*parser).callonDoubleQuotedAttributeValue12,
											expr: &litMatcher{
												pos:        position{line: 375, col: 6, offset: 12687},
												val:        "\\\"",
												ignoreCase: false,
												want:       "\"\\\\\\\"\"",
											},
										},
										&actionExpr{
											pos: position{line: 378, col: 7, offset: 12778},
											run: (*parser).callonDoubleQuotedAttributeValue14,
											expr: &charClassMatcher{
												pos:        position{line: 378, col: 7, offset: 12778},
												val:        "[{\\\\]",
												chars:      []rune{'{', '\\'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 381, col: 4, offset: 12864},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 386, col: 1, offset: 12967},
			expr: &actionExpr{
				pos: position{line: 386, col: 27, offset: 12993},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 386, col: 27, offset: 12993},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 386, col: 36, offset: 13002},
						expr: &choiceExpr{
							pos: position{line: 387, col: 5, offset: 13008},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 387, col: 6, offset: 13009},
									run: (*parser).callonUnquotedAttributeValue5,
									expr: &oneOrMoreExpr{
										pos: position{line: 387, col: 6, offset: 13009},
										expr: &charClassMatcher{
											pos:        position{line: 387, col: 6, offset: 13009},
											val:        "[^,=\\r\\n\\uFFFD{\\]]",
											chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 390, col: 5, offset: 13099},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 391, col: 5, offset: 13124},
									name: "AttrSub",
								},
								&actionExpr{
									pos: position{line: 392, col: 6, offset: 13139},
									run: (*parser).callonUnquotedAttributeValue10,
									expr: &litMatcher{
										pos:        position{line: 392, col: 6, offset: 13139},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeKey",
			pos:  position{line: 398, col: 1, offset: 13280},
			expr: &actionExpr{
				pos: position{line: 398, col: 27, offset: 13306},
				run: (*parser).callonStandaloneAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 398, col: 27, offset: 13306},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 398, col: 27, offset: 13306},
							expr: &litMatcher{
								pos:        position{line: 398, col: 28, offset: 13307},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 398, col: 36, offset: 13315},
							expr: &litMatcher{
								pos:        position{line: 398, col: 37, offset: 13316},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 398, col: 45, offset: 13324},
							expr: &litMatcher{
								pos:        position{line: 398, col: 46, offset: 13325},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 398, col: 56, offset: 13335},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 61, offset: 13340},
								name: "NamedAttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 398, col: 80, offset: 13359},
							expr: &seqExpr{
								pos: position{line: 398, col: 81, offset: 13360},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 398, col: 81, offset: 13360},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 398, col: 85, offset: 13364},
										expr: &ruleRefExpr{
											pos:  position{line: 398, col: 85, offset: 13364},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 402, col: 1, offset: 13456},
			expr: &actionExpr{
				pos: position{line: 402, col: 20, offset: 13475},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 402, col: 20, offset: 13475},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 402, col: 20, offset: 13475},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 29, offset: 13484},
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 29, offset: 13484},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 402, col: 36, offset: 13491},
							expr: &litMatcher{
								pos:        position{line: 402, col: 36, offset: 13491},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 41, offset: 13496},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 402, col: 48, offset: 13503},
								expr: &ruleRefExpr{
									pos:  position{line: 402, col: 49, offset: 13504},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 402, col: 66, offset: 13521},
							expr: &litMatcher{
								pos:        position{line: 402, col: 66, offset: 13521},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 71, offset: 13526},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 402, col: 77, offset: 13532},
								expr: &ruleRefExpr{
									pos:  position{line: 402, col: 78, offset: 13533},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 95, offset: 13550},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 99, offset: 13554},
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 99, offset: 13554},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 106, offset: 13561},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 406, col: 1, offset: 13630},
			expr: &actionExpr{
				pos: position{line: 406, col: 20, offset: 13649},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 406, col: 20, offset: 13649},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 20, offset: 13649},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 406, col: 29, offset: 13658},
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 29, offset: 13658},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 406, col: 36, offset: 13665},
							expr: &litMatcher{
								pos:        position{line: 406, col: 36, offset: 13665},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 41, offset: 13670},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 48, offset: 13677},
								expr: &ruleRefExpr{
									pos:  position{line: 406, col: 49, offset: 13678},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 406, col: 66, offset: 13695},
							expr: &litMatcher{
								pos:        position{line: 406, col: 66, offset: 13695},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 71, offset: 13700},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 77, offset: 13706},
								expr: &ruleRefExpr{
									pos:  position{line: 406, col: 78, offset: 13707},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 95, offset: 13724},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 406, col: 99, offset: 13728},
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 99, offset: 13728},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 106, offset: 13735},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 410, col: 1, offset: 13822},
			expr: &actionExpr{
				pos: position{line: 410, col: 19, offset: 13840},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 410, col: 20, offset: 13841},
					expr: &charClassMatcher{
						pos:        position{line: 410, col: 20, offset: 13841},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttributes",
			pos:  position{line: 417, col: 1, offset: 14070},
			expr: &ruleRefExpr{
				pos:  position{line: 417, col: 25, offset: 14094},
				name: "LongHandAttributes",
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 419, col: 1, offset: 14114},
			expr: &actionExpr{
				pos: position{line: 419, col: 23, offset: 14136},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &seqExpr{
					pos: position{line: 419, col: 23, offset: 14136},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 419, col: 23, offset: 14136},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 28, offset: 14141},
								name: "PositionalValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 419, col: 44, offset: 14157},
							expr: &seqExpr{
								pos: position{line: 419, col: 45, offset: 14158},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 419, col: 45, offset: 14158},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 419, col: 49, offset: 14162},
										expr: &ruleRefExpr{
											pos:  position{line: 419, col: 49, offset: 14162},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 423, col: 1, offset: 14216},
			expr: &choiceExpr{
				pos: position{line: 423, col: 23, offset: 14238},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 423, col: 23, offset: 14238},
						name: "ShortHandID",
					},
					&ruleRefExpr{
						pos:  position{line: 423, col: 37, offset: 14252},
						name: "ShortHandOption",
					},
					&ruleRefExpr{
						pos:  position{line: 423, col: 55, offset: 14270},
						name: "ShortHandRole",
					},
				},
			},
		},
		{
			name: "ShortHandID",
			pos:  position{line: 425, col: 1, offset: 14285},
			expr: &actionExpr{
				pos: position{line: 425, col: 16, offset: 14300},
				run: (*parser).callonShortHandID1,
				expr: &seqExpr{
					pos: position{line: 425, col: 16, offset: 14300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 425, col: 16, offset: 14300},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 20, offset: 14304},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 24, offset: 14308},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 425, col: 40, offset: 14324},
							expr: &charClassMatcher{
								pos:        position{line: 425, col: 41, offset: 14325},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 425, col: 54, offset: 14338},
							expr: &seqExpr{
								pos: position{line: 425, col: 55, offset: 14339},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 425, col: 55, offset: 14339},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 425, col: 59, offset: 14343},
										expr: &ruleRefExpr{
											pos:  position{line: 425, col: 59, offset: 14343},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOption",
			pos:  position{line: 429, col: 1, offset: 14393},
			expr: &actionExpr{
				pos: position{line: 429, col: 20, offset: 14412},
				run: (*parser).callonShortHandOption1,
				expr: &seqExpr{
					pos: position{line: 429, col: 20, offset: 14412},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 429, col: 20, offset: 14412},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 429, col: 24, offset: 14416},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 32, offset: 14424},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 429, col: 48, offset: 14440},
							expr: &charClassMatcher{
								pos:        position{line: 429, col: 49, offset: 14441},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 429, col: 62, offset: 14454},
							expr: &seqExpr{
								pos: position{line: 429, col: 63, offset: 14455},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 429, col: 63, offset: 14455},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 429, col: 67, offset: 14459},
										expr: &ruleRefExpr{
											pos:  position{line: 429, col: 67, offset: 14459},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandRole",
			pos:  position{line: 433, col: 1, offset: 14517},
			expr: &actionExpr{
				pos: position{line: 433, col: 18, offset: 14534},
				run: (*parser).callonShortHandRole1,
				expr: &seqExpr{
					pos: position{line: 433, col: 18, offset: 14534},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 433, col: 18, offset: 14534},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 433, col: 22, offset: 14538},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 28, offset: 14544},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 433, col: 44, offset: 14560},
							expr: &charClassMatcher{
								pos:        position{line: 433, col: 45, offset: 14561},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 433, col: 58, offset: 14574},
							expr: &seqExpr{
								pos: position{line: 433, col: 59, offset: 14575},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 433, col: 59, offset: 14575},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 433, col: 63, offset: 14579},
										expr: &ruleRefExpr{
											pos:  position{line: 433, col: 63, offset: 14579},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 438, col: 1, offset: 14677},
			expr: &actionExpr{
				pos: position{line: 438, col: 20, offset: 14696},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 438, col: 20, offset: 14696},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 438, col: 20, offset: 14696},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 27, offset: 14703},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 438, col: 43, offset: 14719},
							expr: &charClassMatcher{
								pos:        position{line: 438, col: 44, offset: 14720},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 442, col: 1, offset: 14789},
			expr: &choiceExpr{
				pos: position{line: 442, col: 19, offset: 14807},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 442, col: 19, offset: 14807},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 442, col: 41, offset: 14829},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 442, col: 70, offset: 14858},
						name: "DoubleQuotedAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 446, col: 1, offset: 15061},
			expr: &actionExpr{
				pos: position{line: 446, col: 24, offset: 15084},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 446, col: 24, offset: 15084},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 446, col: 24, offset: 15084},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 446, col: 31, offset: 15091},
								run: (*parser).callonShortHandValuePlain4,
								expr: &zeroOrOneExpr{
									pos: position{line: 446, col: 31, offset: 15091},
									expr: &charClassMatcher{
										pos:        position{line: 446, col: 31, offset: 15091},
										val:        "[^,\\r\\n\"' \\t.#%=\\uFFFD\\]]",
										chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', '�', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 5, offset: 15190},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 449, col: 13, offset: 15198},
								expr: &choiceExpr{
									pos: position{line: 450, col: 9, offset: 15208},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 450, col: 9, offset: 15208},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 451, col: 12, offset: 15239},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 451, col: 12, offset: 15239},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 451, col: 34, offset: 15261},
													run: (*parser).callonShortHandValuePlain13,
													expr: &seqExpr{
														pos: position{line: 451, col: 34, offset: 15261},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 451, col: 34, offset: 15261},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 451, col: 39, offset: 15266},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 461, col: 1, offset: 15572},
			expr: &actionExpr{
				pos: position{line: 462, col: 5, offset: 15596},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 462, col: 5, offset: 15596},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 462, col: 16, offset: 15607},
						expr: &choiceExpr{
							pos: position{line: 464, col: 9, offset: 15674},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 464, col: 10, offset: 15675},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 464, col: 10, offset: 15675},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 464, col: 10, offset: 15675},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 464, col: 18, offset: 15683},
													name: "ShortHandAnchor",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 464, col: 35, offset: 15700},
												expr: &seqExpr{
													pos: position{line: 464, col: 36, offset: 15701},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 464, col: 36, offset: 15701},
															expr: &ruleRefExpr{
																pos:  position{line: 464, col: 36, offset: 15701},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 464, col: 43, offset: 15708},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 468, col: 12, offset: 15828},
									run: (*parser).callonBlockAttributes14,
									expr: &seqExpr{
										pos: position{line: 468, col: 12, offset: 15828},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 468, col: 12, offset: 15828},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 468, col: 19, offset: 15835},
													name: "ShortHandTitle",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 468, col: 35, offset: 15851},
												expr: &seqExpr{
													pos: position{line: 468, col: 36, offset: 15852},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 468, col: 36, offset: 15852},
															expr: &ruleRefExpr{
																pos:  position{line: 468, col: 36, offset: 15852},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 468, col: 43, offset: 15859},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 472, col: 12, offset: 15949},
									run: (*parser).callonBlockAttributes23,
									expr: &seqExpr{
										pos: position{line: 472, col: 12, offset: 15949},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 472, col: 12, offset: 15949},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 472, col: 24, offset: 15961},
													name: "LongHandAttributes",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 472, col: 44, offset: 15981},
												expr: &seqExpr{
													pos: position{line: 472, col: 45, offset: 15982},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 472, col: 45, offset: 15982},
															expr: &ruleRefExpr{
																pos:  position{line: 472, col: 45, offset: 15982},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 472, col: 52, offset: 15989},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 480, col: 1, offset: 16184},
			expr: &actionExpr{
				pos: position{line: 480, col: 25, offset: 16208},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 480, col: 25, offset: 16208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 480, col: 25, offset: 16208},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 37, offset: 16220},
								name: "BlockAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 480, col: 54, offset: 16237},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 54, offset: 16237},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 485, col: 1, offset: 16330},
			expr: &actionExpr{
				pos: position{line: 486, col: 4, offset: 16352},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 486, col: 4, offset: 16352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 486, col: 4, offset: 16352},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 487, col: 5, offset: 16362},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 488, col: 9, offset: 16375},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 488, col: 9, offset: 16375},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 488, col: 18, offset: 16384},
										expr: &choiceExpr{
											pos: position{line: 489, col: 13, offset: 16398},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 489, col: 14, offset: 16399},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 489, col: 14, offset: 16399},
														expr: &charClassMatcher{
															pos:        position{line: 489, col: 14, offset: 16399},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 492, col: 13, offset: 16566},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 493, col: 13, offset: 16599},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 494, col: 14, offset: 16622},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 494, col: 14, offset: 16622},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 500, col: 5, offset: 16808},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 505, col: 1, offset: 16909},
			expr: &actionExpr{
				pos: position{line: 505, col: 19, offset: 16927},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 505, col: 19, offset: 16927},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 505, col: 19, offset: 16927},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 505, col: 23, offset: 16931},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 506, col: 5, offset: 16943},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 506, col: 5, offset: 16943},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 506, col: 5, offset: 16943},
											expr: &charClassMatcher{
												pos:        position{line: 506, col: 6, offset: 16944},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 507, col: 5, offset: 17056},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 507, col: 14, offset: 17065},
												expr: &choiceExpr{
													pos: position{line: 508, col: 9, offset: 17075},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 508, col: 10, offset: 17076},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 508, col: 10, offset: 17076},
																expr: &charClassMatcher{
																	pos:        position{line: 508, col: 10, offset: 17076},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 511, col: 9, offset: 17174},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 512, col: 9, offset: 17203},
															name: "AttrSub",
														},
														&actionExpr{
															pos: position{line: 513, col: 10, offset: 17222},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 513, col: 10, offset: 17222},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 524, col: 1, offset: 17622},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 17648},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 17648},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 525, col: 5, offset: 17648},
							run: (*parser).callonLongHandAttributes3,
						},
						&litMatcher{
							pos:        position{line: 528, col: 5, offset: 17699},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 5, offset: 17765},
							label: "firstPositionalAttribute",
							expr: &zeroOrOneExpr{
								pos: position{line: 530, col: 30, offset: 17790},
								expr: &ruleRefExpr{
									pos:  position{line: 530, col: 31, offset: 17791},
									name: "FirstPositionalAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 531, col: 5, offset: 17822},
							label: "otherPositionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 531, col: 31, offset: 17848},
								expr: &ruleRefExpr{
									pos:  position{line: 531, col: 32, offset: 17849},
									name: "PositionalAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 5, offset: 17875},
							label: "namedAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 532, col: 21, offset: 17891},
								expr: &ruleRefExpr{
									pos:  position{line: 532, col: 22, offset: 17892},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 533, col: 5, offset: 17913},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttribute",
			pos:  position{line: 545, col: 1, offset: 18454},
			expr: &actionExpr{
				pos: position{line: 546, col: 5, offset: 18487},
				run: (*parser).callonFirstPositionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 546, col: 5, offset: 18487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 546, col: 5, offset: 18487},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 546, col: 10, offset: 18492},
								expr: &ruleRefExpr{
									pos:  position{line: 547, col: 9, offset: 18502},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 549, col: 5, offset: 18532},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 549, col: 12, offset: 18539},
								expr: &choiceExpr{
									pos: position{line: 550, col: 9, offset: 18550},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 550, col: 9, offset: 18550},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 551, col: 11, offset: 18582},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 552, col: 11, offset: 18617},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 553, col: 8, offset: 18650},
							expr: &seqExpr{
								pos: position{line: 553, col: 9, offset: 18651},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 553, col: 9, offset: 18651},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 553, col: 13, offset: 18655},
										expr: &ruleRefExpr{
											pos:  position{line: 553, col: 13, offset: 18655},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 554, col: 5, offset: 18669},
							run: (*parser).callonFirstPositionalAttribute17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 568, col: 1, offset: 19026},
			expr: &actionExpr{
				pos: position{line: 568, col: 25, offset: 19050},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 568, col: 25, offset: 19050},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 568, col: 25, offset: 19050},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 29, offset: 19054},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 33, offset: 19058},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 576, col: 1, offset: 19221},
			expr: &actionExpr{
				pos: position{line: 576, col: 23, offset: 19243},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 576, col: 23, offset: 19243},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 576, col: 30, offset: 19250},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 585, col: 1, offset: 19468},
			expr: &actionExpr{
				pos: position{line: 585, col: 30, offset: 19497},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 585, col: 30, offset: 19497},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 585, col: 30, offset: 19497},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 34, offset: 19501},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 40, offset: 19507},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 590, col: 1, offset: 19621},
			expr: &actionExpr{
				pos: position{line: 590, col: 29, offset: 19649},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 590, col: 29, offset: 19649},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 590, col: 29, offset: 19649},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 590, col: 33, offset: 19653},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 41, offset: 19661},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 600, col: 1, offset: 19911},
			expr: &choiceExpr{
				pos: position{line: 601, col: 5, offset: 19943},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 601, col: 5, offset: 19943},
						name: "RefactoredSingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 602, col: 7, offset: 19987},
						name: "RefactoredDoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 603, col: 7, offset: 20031},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 603, col: 7, offset: 20031},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 603, col: 7, offset: 20031},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 603, col: 16, offset: 20040},
										expr: &choiceExpr{
											pos: position{line: 606, col: 5, offset: 20210},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 606, col: 6, offset: 20211},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 606, col: 6, offset: 20211},
														expr: &charClassMatcher{
															pos:        position{line: 606, col: 6, offset: 20211},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 609, col: 5, offset: 20305},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 610, col: 5, offset: 20330},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 611, col: 6, offset: 20345},
													run: (*parser).callonShortHandAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 611, col: 6, offset: 20345},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 613, col: 10, offset: 20415},
									expr: &charClassMatcher{
										pos:        position{line: 613, col: 11, offset: 20416},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 654, col: 1, offset: 21720},
			expr: &choiceExpr{
				pos: position{line: 654, col: 24, offset: 21743},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 655, col: 5, offset: 21749},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 655, col: 5, offset: 21749},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 655, col: 5, offset: 21749},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 655, col: 12, offset: 21756},
										name: "RefactoredAttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 655, col: 39, offset: 21783},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 655, col: 39, offset: 21783},
											expr: &seqExpr{
												pos: position{line: 655, col: 40, offset: 21784},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 655, col: 40, offset: 21784},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 655, col: 44, offset: 21788},
														expr: &ruleRefExpr{
															pos:  position{line: 655, col: 44, offset: 21788},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 655, col: 55, offset: 21799},
											expr: &litMatcher{
												pos:        position{line: 655, col: 56, offset: 21800},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 664, col: 6, offset: 22051},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 664, col: 6, offset: 22051},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 664, col: 6, offset: 22051},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 664, col: 13, offset: 22058},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 664, col: 13, offset: 22058},
												expr: &ruleRefExpr{
													pos:  position{line: 664, col: 13, offset: 22058},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 664, col: 21, offset: 22066},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 664, col: 22, offset: 22067},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 664, col: 22, offset: 22067},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 664, col: 26, offset: 22071},
																expr: &ruleRefExpr{
																	pos:  position{line: 664, col: 26, offset: 22071},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 664, col: 36, offset: 22081},
														expr: &litMatcher{
															pos:        position{line: 664, col: 37, offset: 22082},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 665, col: 5, offset: 22092},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 680, col: 1, offset: 22527},
			expr: &actionExpr{
				pos: position{line: 680, col: 19, offset: 22545},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 680, col: 19, offset: 22545},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 680, col: 19, offset: 22545},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 24, offset: 22550},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 680, col: 43, offset: 22569},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 680, col: 47, offset: 22573},
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 47, offset: 22573},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 54, offset: 22580},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 61, offset: 22587},
								name: "RefactoredAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 680, col: 87, offset: 22613},
							expr: &seqExpr{
								pos: position{line: 680, col: 88, offset: 22614},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 680, col: 88, offset: 22614},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 680, col: 92, offset: 22618},
										expr: &ruleRefExpr{
											pos:  position{line: 680, col: 92, offset: 22618},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RefactoredAttributeValue",
			pos:  position{line: 684, col: 1, offset: 22723},
			expr: &actionExpr{
				pos: position{line: 685, col: 5, offset: 22756},
				run: (*parser).callonRefactoredAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 685, col: 5, offset: 22756},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 685, col: 5, offset: 22756},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 686, col: 9, offset: 22772},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 686, col: 9, offset: 22772},
										name: "RefactoredSingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 22820},
										name: "RefactoredDoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 22868},
										name: "RefactoredUnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 690, col: 5, offset: 22912},
							expr: &notExpr{
								pos: position{line: 690, col: 7, offset: 22914},
								expr: &seqExpr{
									pos: position{line: 690, col: 9, offset: 22916},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 690, col: 9, offset: 22916},
											expr: &ruleRefExpr{
												pos:  position{line: 690, col: 9, offset: 22916},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 690, col: 16, offset: 22923},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RefactoredSingleQuotedAttributeValue",
			pos:  position{line: 694, col: 1, offset: 22964},
			expr: &actionExpr{
				pos: position{line: 695, col: 5, offset: 23009},
				run: (*parser).callonRefactoredSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 695, col: 5, offset: 23009},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 695, col: 5, offset: 23009},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 23018},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 696, col: 14, offset: 23027},
								expr: &choiceExpr{
									pos: position{line: 697, col: 9, offset: 23037},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 697, col: 10, offset: 23038},
											run: (*parser).callonRefactoredSingleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 697, col: 10, offset: 23038},
												expr: &charClassMatcher{
													pos:        position{line: 697, col: 10, offset: 23038},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 700, col: 11, offset: 23184},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 701, col: 11, offset: 23213},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 702, col: 12, offset: 23232},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 702, col: 12, offset: 23232},
													run: (*parser).callonRefactoredSingleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 702, col: 12, offset: 23232},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 705, col: 11, offset: 23324},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 705, col: 17, offset: 23330},
													run: (*parser).callonRefactoredSingleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 705, col: 17, offset: 23330},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 709, col: 5, offset: 23419},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "RefactoredDoubleQuotedAttributeValue",
			pos:  position{line: 713, col: 1, offset: 23475},
			expr: &actionExpr{
				pos: position{line: 714, col: 5, offset: 23520},
				run: (*parser).callonRefactoredDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 714, col: 5, offset: 23520},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 714, col: 5, offset: 23520},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 715, col: 5, offset: 23530},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 715, col: 14, offset: 23539},
								expr: &choiceExpr{
									pos: position{line: 716, col: 9, offset: 23549},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 716, col: 10, offset: 23550},
											run: (*parser).callonRefactoredDoubleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 716, col: 10, offset: 23550},
												expr: &charClassMatcher{
													pos:        position{line: 716, col: 10, offset: 23550},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 719, col: 11, offset: 23696},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 720, col: 11, offset: 23725},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 721, col: 12, offset: 23744},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 721, col: 12, offset: 23744},
													run: (*parser).callonRefactoredDoubleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 721, col: 12, offset: 23744},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 724, col: 11, offset: 23836},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 724, col: 17, offset: 23842},
													run: (*parser).callonRefactoredDoubleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 724, col: 17, offset: 23842},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 728, col: 5, offset: 23931},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "RefactoredUnquotedAttributeValue",
			pos:  position{line: 733, col: 1, offset: 24066},
			expr: &actionExpr{
				pos: position{line: 734, col: 5, offset: 24107},
				run: (*parser).callonRefactoredUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 734, col: 5, offset: 24107},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 734, col: 5, offset: 24107},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 6, offset: 24108},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 735, col: 5, offset: 24118},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 735, col: 14, offset: 24127},
								expr: &choiceExpr{
									pos: position{line: 736, col: 9, offset: 24137},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 736, col: 10, offset: 24138},
											run: (*parser).callonRefactoredUnquotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 736, col: 10, offset: 24138},
												expr: &charClassMatcher{
													pos:        position{line: 736, col: 10, offset: 24138},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 739, col: 11, offset: 24240},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 740, col: 11, offset: 24269},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 741, col: 12, offset: 24288},
											run: (*parser).callonRefactoredUnquotedAttributeValue13,
											expr: &litMatcher{
												pos:        position{line: 741, col: 12, offset: 24288},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 745, col: 5, offset: 24376},
							run: (*parser).callonRefactoredUnquotedAttributeValue15,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 756, col: 1, offset: 24677},
			expr: &actionExpr{
				pos: position{line: 756, col: 12, offset: 24688},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 756, col: 12, offset: 24688},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 756, col: 12, offset: 24688},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 756, col: 23, offset: 24699},
								expr: &ruleRefExpr{
									pos:  position{line: 756, col: 24, offset: 24700},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 757, col: 5, offset: 24722},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 757, col: 12, offset: 24729},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 757, col: 12, offset: 24729},
									expr: &litMatcher{
										pos:        position{line: 757, col: 13, offset: 24730},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 761, col: 5, offset: 24821},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 765, col: 5, offset: 24973},
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 5, offset: 24973},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 12, offset: 24980},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 19, offset: 24987},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 34, offset: 25002},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 765, col: 38, offset: 25006},
								expr: &ruleRefExpr{
									pos:  position{line: 765, col: 38, offset: 25006},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 765, col: 56, offset: 25024},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 769, col: 1, offset: 25130},
			expr: &actionExpr{
				pos: position{line: 769, col: 18, offset: 25147},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 769, col: 18, offset: 25147},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 769, col: 27, offset: 25156},
						expr: &seqExpr{
							pos: position{line: 769, col: 28, offset: 25157},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 769, col: 28, offset: 25157},
									expr: &ruleRefExpr{
										pos:  position{line: 769, col: 29, offset: 25158},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 769, col: 37, offset: 25166},
									expr: &ruleRefExpr{
										pos:  position{line: 769, col: 38, offset: 25167},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 769, col: 54, offset: 25183},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 773, col: 1, offset: 25304},
			expr: &actionExpr{
				pos: position{line: 773, col: 17, offset: 25320},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 773, col: 17, offset: 25320},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 773, col: 26, offset: 25329},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 773, col: 26, offset: 25329},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 774, col: 11, offset: 25344},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 775, col: 11, offset: 25389},
								expr: &ruleRefExpr{
									pos:  position{line: 775, col: 11, offset: 25389},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 776, col: 11, offset: 25407},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 777, col: 11, offset: 25436},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 784, col: 1, offset: 25587},
			expr: &seqExpr{
				pos: position{line: 784, col: 31, offset: 25617},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 784, col: 31, offset: 25617},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 784, col: 41, offset: 25627},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 789, col: 1, offset: 25738},
			expr: &actionExpr{
				pos: position{line: 789, col: 19, offset: 25756},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 789, col: 19, offset: 25756},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 789, col: 19, offset: 25756},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 25, offset: 25762},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 789, col: 40, offset: 25777},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 789, col: 45, offset: 25782},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 52, offset: 25789},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 68, offset: 25805},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 80, offset: 25817},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 793, col: 1, offset: 25937},
			expr: &actionExpr{
				pos: position{line: 793, col: 20, offset: 25956},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 793, col: 20, offset: 25956},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 793, col: 20, offset: 25956},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 26, offset: 25962},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 793, col: 41, offset: 25977},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 793, col: 45, offset: 25981},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 52, offset: 25988},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 793, col: 68, offset: 26004},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 80, offset: 26016},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 797, col: 1, offset: 26137},
			expr: &actionExpr{
				pos: position{line: 797, col: 18, offset: 26154},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 797, col: 18, offset: 26154},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 797, col: 18, offset: 26154},
							expr: &litMatcher{
								pos:        position{line: 797, col: 19, offset: 26155},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 797, col: 30, offset: 26166},
							expr: &charClassMatcher{
								pos:        position{line: 797, col: 30, offset: 26166},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 801, col: 1, offset: 26215},
			expr: &actionExpr{
				pos: position{line: 801, col: 19, offset: 26233},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 801, col: 19, offset: 26233},
					expr: &charClassMatcher{
						pos:        position{line: 801, col: 19, offset: 26233},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 805, col: 1, offset: 26281},
			expr: &actionExpr{
				pos: position{line: 805, col: 24, offset: 26304},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 805, col: 24, offset: 26304},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 805, col: 24, offset: 26304},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 805, col: 28, offset: 26308},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 805, col: 39, offset: 26319},
								expr: &ruleRefExpr{
									pos:  position{line: 805, col: 40, offset: 26320},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 805, col: 57, offset: 26337},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 812, col: 1, offset: 26523},
			expr: &actionExpr{
				pos: position{line: 812, col: 18, offset: 26540},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 812, col: 18, offset: 26540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 812, col: 18, offset: 26540},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 812, col: 24, offset: 26546},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 812, col: 24, offset: 26546},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 812, col: 24, offset: 26546},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 812, col: 36, offset: 26558},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 812, col: 42, offset: 26564},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 812, col: 56, offset: 26578},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 812, col: 74, offset: 26596},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 814, col: 8, offset: 26743},
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 8, offset: 26743},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 15, offset: 26750},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 818, col: 1, offset: 26802},
			expr: &actionExpr{
				pos: position{line: 818, col: 26, offset: 26827},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 818, col: 26, offset: 26827},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 818, col: 26, offset: 26827},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 818, col: 30, offset: 26831},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 818, col: 41, offset: 26842},
								expr: &choiceExpr{
									pos: position{line: 818, col: 42, offset: 26843},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 818, col: 42, offset: 26843},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 818, col: 64, offset: 26865},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 818, col: 85, offset: 26886},
											name: "NamedAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 818, col: 102, offset: 26903},
											name: "StandaloneAttributeKey",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 818, col: 127, offset: 26928},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 822, col: 1, offset: 27004},
			expr: &actionExpr{
				pos: position{line: 822, col: 24, offset: 27027},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 822, col: 24, offset: 27027},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 822, col: 24, offset: 27027},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 822, col: 33, offset: 27036},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 822, col: 40, offset: 27043},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 822, col: 66, offset: 27069},
							expr: &litMatcher{
								pos:        position{line: 822, col: 66, offset: 27069},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 826, col: 1, offset: 27128},
			expr: &actionExpr{
				pos: position{line: 826, col: 29, offset: 27156},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 826, col: 29, offset: 27156},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 826, col: 29, offset: 27156},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 826, col: 36, offset: 27163},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 826, col: 36, offset: 27163},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 827, col: 11, offset: 27280},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 828, col: 11, offset: 27316},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 829, col: 11, offset: 27342},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 830, col: 11, offset: 27374},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 831, col: 11, offset: 27406},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 832, col: 11, offset: 27433},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 832, col: 31, offset: 27453},
							expr: &ruleRefExpr{
								pos:  position{line: 832, col: 31, offset: 27453},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 832, col: 39, offset: 27461},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 832, col: 39, offset: 27461},
									expr: &litMatcher{
										pos:        position{line: 832, col: 40, offset: 27462},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 832, col: 46, offset: 27468},
									expr: &litMatcher{
										pos:        position{line: 832, col: 47, offset: 27469},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 836, col: 1, offset: 27501},
			expr: &actionExpr{
				pos: position{line: 836, col: 23, offset: 27523},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 836, col: 23, offset: 27523},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 836, col: 23, offset: 27523},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 836, col: 30, offset: 27530},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 836, col: 30, offset: 27530},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 836, col: 47, offset: 27547},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 837, col: 5, offset: 27569},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 837, col: 12, offset: 27576},
								expr: &actionExpr{
									pos: position{line: 837, col: 13, offset: 27577},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 837, col: 13, offset: 27577},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 837, col: 13, offset: 27577},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 837, col: 17, offset: 27581},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 837, col: 24, offset: 27588},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 837, col: 24, offset: 27588},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 837, col: 41, offset: 27605},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 843, col: 1, offset: 27743},
			expr: &actionExpr{
				pos: position{line: 843, col: 29, offset: 27771},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 843, col: 29, offset: 27771},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 843, col: 29, offset: 27771},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 843, col: 34, offset: 27776},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 843, col: 41, offset: 27783},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 843, col: 41, offset: 27783},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 843, col: 58, offset: 27800},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 844, col: 5, offset: 27822},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 844, col: 12, offset: 27829},
								expr: &actionExpr{
									pos: position{line: 844, col: 13, offset: 27830},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 844, col: 13, offset: 27830},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 844, col: 13, offset: 27830},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 844, col: 17, offset: 27834},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 844, col: 24, offset: 27841},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 844, col: 24, offset: 27841},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 844, col: 41, offset: 27858},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 846, col: 9, offset: 27911},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 850, col: 1, offset: 28001},
			expr: &actionExpr{
				pos: position{line: 850, col: 19, offset: 28019},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 850, col: 19, offset: 28019},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 850, col: 19, offset: 28019},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 26, offset: 28026},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 850, col: 34, offset: 28034},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 850, col: 39, offset: 28039},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 44, offset: 28044},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 854, col: 1, offset: 28132},
			expr: &actionExpr{
				pos: position{line: 854, col: 25, offset: 28156},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 854, col: 25, offset: 28156},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 854, col: 25, offset: 28156},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 854, col: 30, offset: 28161},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 854, col: 37, offset: 28168},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 854, col: 45, offset: 28176},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 854, col: 50, offset: 28181},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 854, col: 55, offset: 28186},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 854, col: 63, offset: 28194},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 858, col: 1, offset: 28279},
			expr: &actionExpr{
				pos: position{line: 858, col: 20, offset: 28298},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 858, col: 20, offset: 28298},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 858, col: 32, offset: 28310},
						name: "Number",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 862, col: 1, offset: 28405},
			expr: &actionExpr{
				pos: position{line: 862, col: 26, offset: 28430},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 862, col: 26, offset: 28430},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 862, col: 26, offset: 28430},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 862, col: 31, offset: 28435},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 43, offset: 28447},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 862, col: 51, offset: 28455},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 866, col: 1, offset: 28547},
			expr: &actionExpr{
				pos: position{line: 866, col: 23, offset: 28569},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 866, col: 23, offset: 28569},
					expr: &charClassMatcher{
						pos:        position{line: 866, col: 23, offset: 28569},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 870, col: 1, offset: 28614},
			expr: &actionExpr{
				pos: position{line: 870, col: 23, offset: 28636},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 870, col: 23, offset: 28636},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 870, col: 24, offset: 28637},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 870, col: 24, offset: 28637},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 870, col: 34, offset: 28647},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 870, col: 42, offset: 28655},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 48, offset: 28661},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 870, col: 73, offset: 28686},
							expr: &litMatcher{
								pos:        position{line: 870, col: 73, offset: 28686},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 874, col: 1, offset: 28835},
			expr: &actionExpr{
				pos: position{line: 874, col: 28, offset: 28862},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 874, col: 28, offset: 28862},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 874, col: 28, offset: 28862},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 35, offset: 28869},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 874, col: 54, offset: 28888},
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 54, offset: 28888},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 874, col: 62, offset: 28896},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 874, col: 62, offset: 28896},
									expr: &litMatcher{
										pos:        position{line: 874, col: 63, offset: 28897},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 874, col: 69, offset: 28903},
									expr: &litMatcher{
										pos:        position{line: 874, col: 70, offset: 28904},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 878, col: 1, offset: 28936},
			expr: &actionExpr{
				pos: position{line: 878, col: 22, offset: 28957},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 878, col: 22, offset: 28957},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 878, col: 22, offset: 28957},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 878, col: 29, offset: 28964},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 879, col: 5, offset: 28978},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 879, col: 12, offset: 28985},
								expr: &actionExpr{
									pos: position{line: 879, col: 13, offset: 28986},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 879, col: 13, offset: 28986},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 879, col: 13, offset: 28986},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 879, col: 17, offset: 28990},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 879, col: 24, offset: 28997},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 885, col: 1, offset: 29128},
			expr: &choiceExpr{
				pos: position{line: 885, col: 13, offset: 29140},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 885, col: 13, offset: 29140},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 885, col: 13, offset: 29140},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 885, col: 18, offset: 29145},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 885, col: 18, offset: 29145},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 885, col: 30, offset: 29157},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 887, col: 5, offset: 29225},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 887, col: 5, offset: 29225},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 887, col: 5, offset: 29225},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 887, col: 9, offset: 29229},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 887, col: 14, offset: 29234},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 887, col: 14, offset: 29234},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 26, offset: 29246},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 891, col: 1, offset: 29314},
			expr: &actionExpr{
				pos: position{line: 891, col: 16, offset: 29329},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 891, col: 16, offset: 29329},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 891, col: 16, offset: 29329},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 891, col: 23, offset: 29336},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 891, col: 23, offset: 29336},
									expr: &litMatcher{
										pos:        position{line: 891, col: 24, offset: 29337},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 894, col: 5, offset: 29391},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 904, col: 1, offset: 29685},
			expr: &actionExpr{
				pos: position{line: 904, col: 21, offset: 29705},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 904, col: 21, offset: 29705},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 904, col: 21, offset: 29705},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 904, col: 29, offset: 29713},
								expr: &choiceExpr{
									pos: position{line: 904, col: 30, offset: 29714},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 904, col: 30, offset: 29714},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 904, col: 53, offset: 29737},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 904, col: 74, offset: 29758},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 904, col: 74, offset: 29758,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 904, col: 107, offset: 29791},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 908, col: 1, offset: 29862},
			expr: &actionExpr{
				pos: position{line: 908, col: 25, offset: 29886},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 908, col: 25, offset: 29886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 908, col: 25, offset: 29886},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 908, col: 33, offset: 29894},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 908, col: 38, offset: 29899},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 908, col: 38, offset: 29899},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 908, col: 78, offset: 29939},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 912, col: 1, offset: 30004},
			expr: &actionExpr{
				pos: position{line: 912, col: 23, offset: 30026},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 912, col: 23, offset: 30026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 912, col: 23, offset: 30026},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 912, col: 31, offset: 30034},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 912, col: 36, offset: 30039},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 912, col: 36, offset: 30039},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 912, col: 76, offset: 30079},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 919, col: 1, offset: 30243},
			expr: &choiceExpr{
				pos: position{line: 919, col: 18, offset: 30260},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 18, offset: 30260},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 919, col: 18, offset: 30260},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 27, offset: 30269},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 921, col: 9, offset: 30326},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 921, col: 9, offset: 30326},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 921, col: 15, offset: 30332},
								expr: &ruleRefExpr{
									pos:  position{line: 921, col: 16, offset: 30333},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 925, col: 1, offset: 30425},
			expr: &actionExpr{
				pos: position{line: 925, col: 22, offset: 30446},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 925, col: 22, offset: 30446},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 925, col: 22, offset: 30446},
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 23, offset: 30447},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 926, col: 5, offset: 30455},
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 6, offset: 30456},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 927, col: 5, offset: 30470},
							expr: &ruleRefExpr{
								pos:  position{line: 927, col: 6, offset: 30471},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 928, col: 5, offset: 30493},
							expr: &ruleRefExpr{
								pos:  position{line: 928, col: 6, offset: 30494},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 929, col: 5, offset: 30520},
							expr: &ruleRefExpr{
								pos:  position{line: 929, col: 6, offset: 30521},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 930, col: 5, offset: 30549},
							expr: &ruleRefExpr{
								pos:  position{line: 930, col: 6, offset: 30550},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 931, col: 5, offset: 30576},
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 6, offset: 30577},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 932, col: 5, offset: 30602},
							expr: &ruleRefExpr{
								pos:  position{line: 932, col: 6, offset: 30603},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 933, col: 5, offset: 30624},
							expr: &ruleRefExpr{
								pos:  position{line: 933, col: 6, offset: 30625},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 934, col: 5, offset: 30644},
							expr: &ruleRefExpr{
								pos:  position{line: 934, col: 6, offset: 30645},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 935, col: 5, offset: 30672},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 935, col: 11, offset: 30678},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 935, col: 11, offset: 30678},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 935, col: 11, offset: 30678},
											expr: &ruleRefExpr{
												pos:  position{line: 935, col: 11, offset: 30678},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 935, col: 18, offset: 30685},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 935, col: 27, offset: 30694},
												expr: &ruleRefExpr{
													pos:  position{line: 935, col: 28, offset: 30695},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 937, col: 12, offset: 30794},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 941, col: 1, offset: 30833},
			expr: &seqExpr{
				pos: position{line: 941, col: 25, offset: 30857},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 941, col: 25, offset: 30857},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 941, col: 29, offset: 30861},
						expr: &ruleRefExpr{
							pos:  position{line: 941, col: 29, offset: 30861},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 36, offset: 30868},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 943, col: 1, offset: 30940},
			expr: &actionExpr{
				pos: position{line: 943, col: 29, offset: 30968},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 943, col: 29, offset: 30968},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 943, col: 29, offset: 30968},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 943, col: 50, offset: 30989},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 943, col: 58, offset: 30997},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 947, col: 1, offset: 31103},
			expr: &actionExpr{
				pos: position{line: 947, col: 29, offset: 31131},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 947, col: 29, offset: 31131},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 947, col: 29, offset: 31131},
							expr: &ruleRefExpr{
								pos:  position{line: 947, col: 30, offset: 31132},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 948, col: 5, offset: 31141},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 948, col: 14, offset: 31150},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 948, col: 14, offset: 31150},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 949, col: 11, offset: 31175},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 950, col: 11, offset: 31203},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 951, col: 11, offset: 31219},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 952, col: 11, offset: 31240},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 953, col: 11, offset: 31264},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 954, col: 11, offset: 31291},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 955, col: 11, offset: 31320},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 956, col: 11, offset: 31347},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 957, col: 11, offset: 31398},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 958, col: 11, offset: 31422},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 959, col: 11, offset: 31454},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 960, col: 11, offset: 31480},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 961, col: 11, offset: 31517},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 962, col: 11, offset: 31542},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 969, col: 1, offset: 31708},
			expr: &actionExpr{
				pos: position{line: 969, col: 20, offset: 31727},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 969, col: 20, offset: 31727},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 969, col: 20, offset: 31727},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 969, col: 31, offset: 31738},
								expr: &ruleRefExpr{
									pos:  position{line: 969, col: 32, offset: 31739},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 969, col: 50, offset: 31757},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 58, offset: 31765},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 969, col: 81, offset: 31788},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 90, offset: 31797},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 973, col: 1, offset: 31937},
			expr: &actionExpr{
				pos: position{line: 974, col: 5, offset: 31967},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 974, col: 5, offset: 31967},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 974, col: 5, offset: 31967},
							expr: &ruleRefExpr{
								pos:  position{line: 974, col: 5, offset: 31967},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 974, col: 12, offset: 31974},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 976, col: 9, offset: 32037},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 976, col: 9, offset: 32037},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 976, col: 9, offset: 32037},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 976, col: 9, offset: 32037},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 976, col: 16, offset: 32044},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 976, col: 16, offset: 32044},
															expr: &litMatcher{
																pos:        position{line: 976, col: 17, offset: 32045},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 980, col: 9, offset: 32145},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 999, col: 11, offset: 32862},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 999, col: 11, offset: 32862},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 999, col: 11, offset: 32862},
													expr: &charClassMatcher{
														pos:        position{line: 999, col: 12, offset: 32863},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 999, col: 20, offset: 32871},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1001, col: 13, offset: 32982},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 1001, col: 13, offset: 32982},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1001, col: 14, offset: 32983},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1001, col: 21, offset: 32990},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1003, col: 13, offset: 33104},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 1003, col: 13, offset: 33104},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1003, col: 14, offset: 33105},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1003, col: 21, offset: 33112},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1005, col: 13, offset: 33226},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 1005, col: 13, offset: 33226},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1005, col: 13, offset: 33226},
													expr: &charClassMatcher{
														pos:        position{line: 1005, col: 14, offset: 33227},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1005, col: 26, offset: 33239},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1007, col: 13, offset: 33353},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 1007, col: 13, offset: 33353},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1007, col: 13, offset: 33353},
													expr: &charClassMatcher{
														pos:        position{line: 1007, col: 14, offset: 33354},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1007, col: 26, offset: 33366},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1009, col: 12, offset: 33479},
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 12, offset: 33479},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 1013, col: 1, offset: 33514},
			expr: &actionExpr{
				pos: position{line: 1013, col: 27, offset: 33540},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 1013, col: 27, offset: 33540},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1013, col: 37, offset: 33550},
						expr: &ruleRefExpr{
							pos:  position{line: 1013, col: 37, offset: 33550},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1020, col: 1, offset: 33750},
			expr: &actionExpr{
				pos: position{line: 1020, col: 22, offset: 33771},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1020, col: 22, offset: 33771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1020, col: 22, offset: 33771},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1020, col: 33, offset: 33782},
								expr: &ruleRefExpr{
									pos:  position{line: 1020, col: 34, offset: 33783},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 52, offset: 33801},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 60, offset: 33809},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 85, offset: 33834},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 1020, col: 96, offset: 33845},
								expr: &ruleRefExpr{
									pos:  position{line: 1020, col: 97, offset: 33846},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 127, offset: 33876},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 136, offset: 33885},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 1024, col: 1, offset: 34043},
			expr: &actionExpr{
				pos: position{line: 1025, col: 5, offset: 34075},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1025, col: 5, offset: 34075},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1025, col: 5, offset: 34075},
							expr: &ruleRefExpr{
								pos:  position{line: 1025, col: 5, offset: 34075},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1025, col: 12, offset: 34082},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1025, col: 20, offset: 34090},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1027, col: 9, offset: 34147},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 1027, col: 9, offset: 34147},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1027, col: 9, offset: 34147},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1027, col: 16, offset: 34154},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1027, col: 16, offset: 34154},
															expr: &litMatcher{
																pos:        position{line: 1027, col: 17, offset: 34155},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1031, col: 9, offset: 34255},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1048, col: 14, offset: 34962},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 1048, col: 21, offset: 34969},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 1048, col: 22, offset: 34970},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1050, col: 13, offset: 35056},
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 13, offset: 35056},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 1054, col: 1, offset: 35092},
			expr: &actionExpr{
				pos: position{line: 1054, col: 32, offset: 35123},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 1054, col: 32, offset: 35123},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1054, col: 32, offset: 35123},
							expr: &litMatcher{
								pos:        position{line: 1054, col: 33, offset: 35124},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1054, col: 37, offset: 35128},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 1055, col: 7, offset: 35142},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1055, col: 7, offset: 35142},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 1055, col: 7, offset: 35142},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1056, col: 7, offset: 35187},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 1056, col: 7, offset: 35187},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1057, col: 7, offset: 35230},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 1057, col: 7, offset: 35230},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1058, col: 7, offset: 35272},
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 7, offset: 35272},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 1062, col: 1, offset: 35314},
			expr: &actionExpr{
				pos: position{line: 1062, col: 29, offset: 35342},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 1062, col: 29, offset: 35342},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1062, col: 39, offset: 35352},
						expr: &ruleRefExpr{
							pos:  position{line: 1062, col: 39, offset: 35352},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 1069, col: 1, offset: 35668},
			expr: &actionExpr{
				pos: position{line: 1069, col: 20, offset: 35687},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 20, offset: 35687},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1069, col: 20, offset: 35687},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1069, col: 31, offset: 35698},
								expr: &ruleRefExpr{
									pos:  position{line: 1069, col: 32, offset: 35699},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 50, offset: 35717},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 56, offset: 35723},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 85, offset: 35752},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 96, offset: 35763},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 122, offset: 35789},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 1069, col: 134, offset: 35801},
								expr: &ruleRefExpr{
									pos:  position{line: 1069, col: 135, offset: 35802},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 1073, col: 1, offset: 35948},
			expr: &seqExpr{
				pos: position{line: 1073, col: 26, offset: 35973},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1073, col: 26, offset: 35973},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1073, col: 54, offset: 36001},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 1075, col: 1, offset: 36027},
			expr: &choiceExpr{
				pos: position{line: 1075, col: 33, offset: 36059},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 1075, col: 33, offset: 36059},
						expr: &charClassMatcher{
							pos:        position{line: 1075, col: 33, offset: 36059},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 1075, col: 45, offset: 36071},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1075, col: 45, offset: 36071},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 1075, col: 49, offset: 36075},
								expr: &litMatcher{
									pos:        position{line: 1075, col: 50, offset: 36076},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 1076, col: 1, offset: 36080},
			expr: &actionExpr{
				pos: position{line: 1076, col: 32, offset: 36111},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1076, col: 32, offset: 36111},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 1076, col: 42, offset: 36121},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 1076, col: 42, offset: 36121},
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 42, offset: 36121},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 1082, col: 1, offset: 36276},
			expr: &actionExpr{
				pos: position{line: 1082, col: 24, offset: 36299},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1082, col: 24, offset: 36299},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1082, col: 33, offset: 36308},
						expr: &seqExpr{
							pos: position{line: 1082, col: 34, offset: 36309},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1082, col: 34, offset: 36309},
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 35, offset: 36310},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1082, col: 43, offset: 36318},
									expr: &litMatcher{
										pos:        position{line: 1082, col: 44, offset: 36319},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1082, col: 49, offset: 36324},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 1086, col: 1, offset: 36451},
			expr: &actionExpr{
				pos: position{line: 1086, col: 31, offset: 36481},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 1086, col: 31, offset: 36481},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1086, col: 40, offset: 36490},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1086, col: 40, offset: 36490},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 1087, col: 11, offset: 36505},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1088, col: 11, offset: 36554},
								expr: &ruleRefExpr{
									pos:  position{line: 1088, col: 11, offset: 36554},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1089, col: 11, offset: 36572},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 1090, col: 11, offset: 36597},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 1091, col: 11, offset: 36626},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 1092, col: 11, offset: 36646},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1093, col: 11, offset: 36735},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 1094, col: 11, offset: 36756},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1095, col: 11, offset: 36779},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 1096, col: 11, offset: 36794},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 1097, col: 11, offset: 36819},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1098, col: 11, offset: 36842},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1099, col: 11, offset: 36863},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 1100, col: 11, offset: 36890},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 1101, col: 11, offset: 36907},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 1102, col: 11, offset: 36939},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 1106, col: 1, offset: 36978},
			expr: &actionExpr{
				pos: position{line: 1107, col: 5, offset: 37011},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 5, offset: 37011},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1107, col: 5, offset: 37011},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 1107, col: 16, offset: 37022},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1107, col: 16, offset: 37022},
									expr: &litMatcher{
										pos:        position{line: 1107, col: 17, offset: 37023},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1110, col: 5, offset: 37081},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 1114, col: 6, offset: 37257},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1114, col: 6, offset: 37257},
									expr: &choiceExpr{
										pos: position{line: 1114, col: 7, offset: 37258},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1114, col: 7, offset: 37258},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 1114, col: 15, offset: 37266},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 27, offset: 37278},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 1118, col: 1, offset: 37318},
			expr: &actionExpr{
				pos: position{line: 1118, col: 31, offset: 37348},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 1118, col: 31, offset: 37348},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1118, col: 40, offset: 37357},
						expr: &ruleRefExpr{
							pos:  position{line: 1118, col: 41, offset: 37358},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 1125, col: 1, offset: 37549},
			expr: &choiceExpr{
				pos: position{line: 1125, col: 19, offset: 37567},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1125, col: 19, offset: 37567},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 1125, col: 19, offset: 37567},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 1127, col: 5, offset: 37605},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 1127, col: 5, offset: 37605},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 1129, col: 5, offset: 37645},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 1129, col: 5, offset: 37645},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 1131, col: 5, offset: 37695},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 1131, col: 5, offset: 37695},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 1133, col: 5, offset: 37741},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 1133, col: 5, offset: 37741},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 1145, col: 1, offset: 38121},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 6, offset: 38172},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1147, col: 6, offset: 38172},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1147, col: 6, offset: 38172},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1147, col: 6, offset: 38172},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1147, col: 17, offset: 38183},
										expr: &ruleRefExpr{
											pos:  position{line: 1147, col: 18, offset: 38184},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1147, col: 36, offset: 38202},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1147, col: 39, offset: 38205},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1147, col: 55, offset: 38221},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1147, col: 60, offset: 38226},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1147, col: 66, offset: 38232},
										expr: &choiceExpr{
											pos: position{line: 1147, col: 67, offset: 38233},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1147, col: 67, offset: 38233},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 1147, col: 87, offset: 38253},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1152, col: 5, offset: 38474},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 1152, col: 5, offset: 38474},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1152, col: 5, offset: 38474},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1152, col: 16, offset: 38485},
										expr: &ruleRefExpr{
											pos:  position{line: 1152, col: 17, offset: 38486},
											name: "BlockAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1152, col: 35, offset: 38504},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 1152, col: 40, offset: 38509},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 49, offset: 38518},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1156, col: 5, offset: 38691},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 1156, col: 5, offset: 38691},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1156, col: 5, offset: 38691},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1156, col: 16, offset: 38702},
										expr: &ruleRefExpr{
											pos:  position{line: 1156, col: 17, offset: 38703},
											name: "BlockAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1156, col: 35, offset: 38721},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 1159, col: 7, offset: 38899},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 1159, col: 15, offset: 38907},
										expr: &ruleRefExpr{
											pos:  position{line: 1159, col: 16, offset: 38908},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1163, col: 5, offset: 39074},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 1163, col: 5, offset: 39074},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1163, col: 5, offset: 39074},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1163, col: 16, offset: 39085},
										expr: &ruleRefExpr{
											pos:  position{line: 1163, col: 17, offset: 39086},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1163, col: 35, offset: 39104},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1163, col: 41, offset: 39110},
										expr: &choiceExpr{
											pos: position{line: 1163, col: 42, offset: 39111},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1163, col: 42, offset: 39111},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 1163, col: 62, offset: 39131},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 1167, col: 1, offset: 39229},
			expr: &oneOrMoreExpr{
				pos: position{line: 1167, col: 33, offset: 39261},
				expr: &actionExpr{
					pos: position{line: 1167, col: 34, offset: 39262},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1167, col: 34, offset: 39262},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1167, col: 34, offset: 39262},
								expr: &ruleRefExpr{
									pos:  position{line: 1167, col: 35, offset: 39263},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1167, col: 45, offset: 39273},
								expr: &litMatcher{
									pos:        position{line: 1167, col: 45, offset: 39273},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1167, col: 51, offset: 39279},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1167, col: 60, offset: 39288},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 1171, col: 1, offset: 39329},
			expr: &actionExpr{
				pos: position{line: 1171, col: 21, offset: 39349},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 21, offset: 39349},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1171, col: 21, offset: 39349},
							expr: &ruleRefExpr{
								pos:  position{line: 1171, col: 22, offset: 39350},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 5, offset: 39370},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 14, offset: 39379},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1172, col: 39, offset: 39404},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 1172, col: 43, offset: 39408},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 1182, col: 1, offset: 39643},
			expr: &actionExpr{
				pos: position{line: 1182, col: 28, offset: 39670},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1182, col: 28, offset: 39670},
					expr: &charClassMatcher{
						pos:        position{line: 1182, col: 28, offset: 39670},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 1187, col: 1, offset: 39787},
			expr: &actionExpr{
				pos: position{line: 1187, col: 23, offset: 39809},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 23, offset: 39809},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1187, col: 23, offset: 39809},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1187, col: 34, offset: 39820},
								expr: &ruleRefExpr{
									pos:  position{line: 1187, col: 35, offset: 39821},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1188, col: 5, offset: 39844},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 5, offset: 39956},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 16, offset: 39967},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 5, offset: 39993},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1192, col: 16, offset: 40004},
								expr: &choiceExpr{
									pos: position{line: 1192, col: 17, offset: 40005},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1192, col: 17, offset: 40005},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1192, col: 37, offset: 40025},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 1196, col: 1, offset: 40157},
			expr: &actionExpr{
				pos: position{line: 1197, col: 5, offset: 40187},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 5, offset: 40187},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1197, col: 5, offset: 40187},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1197, col: 14, offset: 40196},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1197, col: 14, offset: 40196},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1197, col: 14, offset: 40196},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 1197, col: 23, offset: 40205},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1197, col: 28, offset: 40210},
											expr: &charClassMatcher{
												pos:        position{line: 1197, col: 28, offset: 40210},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1197, col: 68, offset: 40250},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 1208, col: 1, offset: 40502},
			expr: &choiceExpr{
				pos: position{line: 1210, col: 5, offset: 40561},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1210, col: 5, offset: 40561},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1210, col: 5, offset: 40561},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1210, col: 5, offset: 40561},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1210, col: 16, offset: 40572},
										expr: &ruleRefExpr{
											pos:  position{line: 1210, col: 17, offset: 40573},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1210, col: 35, offset: 40591},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1210, col: 38, offset: 40594},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1210, col: 54, offset: 40610},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1210, col: 59, offset: 40615},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1210, col: 66, offset: 40622},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 40811},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 1214, col: 5, offset: 40811},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1214, col: 5, offset: 40811},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1214, col: 16, offset: 40822},
										expr: &ruleRefExpr{
											pos:  position{line: 1214, col: 17, offset: 40823},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 35, offset: 40841},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 42, offset: 40848},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 1218, col: 1, offset: 40952},
			expr: &actionExpr{
				pos: position{line: 1218, col: 31, offset: 40982},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 31, offset: 40982},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1218, col: 31, offset: 40982},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 42, offset: 40993},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 65, offset: 41016},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1218, col: 76, offset: 41027},
								expr: &actionExpr{
									pos: position{line: 1218, col: 77, offset: 41028},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 1218, col: 77, offset: 41028},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1218, col: 77, offset: 41028},
												expr: &ruleRefExpr{
													pos:  position{line: 1218, col: 78, offset: 41029},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 1218, col: 99, offset: 41050},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1218, col: 105, offset: 41056},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1218, col: 105, offset: 41056},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 1218, col: 125, offset: 41076},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1226, col: 1, offset: 41318},
			expr: &actionExpr{
				pos: position{line: 1226, col: 19, offset: 41336},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 19, offset: 41336},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1226, col: 19, offset: 41336},
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 20, offset: 41337},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1227, col: 5, offset: 41351},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1227, col: 15, offset: 41361},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1227, col: 15, offset: 41361},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1227, col: 15, offset: 41361},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1227, col: 24, offset: 41370},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1229, col: 9, offset: 41462},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1229, col: 9, offset: 41462},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1229, col: 9, offset: 41462},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1229, col: 18, offset: 41471},
														expr: &ruleRefExpr{
															pos:  position{line: 1229, col: 19, offset: 41472},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1229, col: 35, offset: 41488},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1235, col: 1, offset: 41605},
			expr: &actionExpr{
				pos: position{line: 1236, col: 5, offset: 41628},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1236, col: 5, offset: 41628},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1236, col: 14, offset: 41637},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1236, col: 14, offset: 41637},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1237, col: 11, offset: 41698},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1238, col: 11, offset: 41743},
								expr: &ruleRefExpr{
									pos:  position{line: 1238, col: 11, offset: 41743},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1239, col: 11, offset: 41761},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1239, col: 11, offset: 41761},
										expr: &ruleRefExpr{
											pos:  position{line: 1239, col: 12, offset: 41762},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1240, col: 13, offset: 41780},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1240, col: 13, offset: 41780},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1241, col: 15, offset: 41807},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1242, col: 15, offset: 41832},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1243, col: 15, offset: 41857},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1244, col: 15, offset: 41884},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1245, col: 15, offset: 41904},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1246, col: 15, offset: 41997},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1247, col: 15, offset: 42027},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1248, col: 15, offset: 42095},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1249, col: 15, offset: 42126},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1250, col: 15, offset: 42147},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1251, col: 15, offset: 42178},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1252, col: 15, offset: 42215},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1253, col: 15, offset: 42245},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1254, col: 15, offset: 42278},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1255, col: 15, offset: 42302},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 1256, col: 15, offset: 42335},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1263, col: 1, offset: 42558},
			expr: &actionExpr{
				pos: position{line: 1263, col: 14, offset: 42571},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 14, offset: 42571},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1263, col: 14, offset: 42571},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1263, col: 20, offset: 42577},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1263, col: 24, offset: 42581},
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 24, offset: 42581},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1263, col: 31, offset: 42588},
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 32, offset: 42589},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1270, col: 1, offset: 42873},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 15, offset: 42887},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1270, col: 15, offset: 42887},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 41, offset: 42913},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 65, offset: 42937},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1272, col: 1, offset: 42956},
			expr: &choiceExpr{
				pos: position{line: 1272, col: 32, offset: 42987},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1272, col: 32, offset: 42987},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1272, col: 32, offset: 42987},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1272, col: 36, offset: 42991},
								expr: &litMatcher{
									pos:        position{line: 1272, col: 37, offset: 42992},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1272, col: 43, offset: 42998},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1272, col: 43, offset: 42998},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1272, col: 47, offset: 43002},
								expr: &litMatcher{
									pos:        position{line: 1272, col: 48, offset: 43003},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1272, col: 54, offset: 43009},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1272, col: 54, offset: 43009},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1272, col: 58, offset: 43013},
								expr: &litMatcher{
									pos:        position{line: 1272, col: 59, offset: 43014},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1272, col: 65, offset: 43020},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1272, col: 65, offset: 43020},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1272, col: 69, offset: 43024},
								expr: &litMatcher{
									pos:        position{line: 1272, col: 70, offset: 43025},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1274, col: 1, offset: 43030},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 34, offset: 43063},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1274, col: 34, offset: 43063},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1274, col: 41, offset: 43070},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1274, col: 48, offset: 43077},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1274, col: 55, offset: 43084},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1274, col: 62, offset: 43091},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1274, col: 68, offset: 43097},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1276, col: 1, offset: 43102},
			expr: &actionExpr{
				pos: position{line: 1276, col: 26, offset: 43127},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1276, col: 26, offset: 43127},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1276, col: 32, offset: 43133},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1276, col: 32, offset: 43133},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1277, col: 15, offset: 43168},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1278, col: 15, offset: 43204},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1279, col: 15, offset: 43240},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1280, col: 15, offset: 43280},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1281, col: 15, offset: 43309},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1282, col: 15, offset: 43340},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1286, col: 1, offset: 43494},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 28, offset: 43521},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1286, col: 28, offset: 43521},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 15, offset: 43555},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 15, offset: 43591},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 15, offset: 43627},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1291, col: 1, offset: 43653},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 22, offset: 43674},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1291, col: 22, offset: 43674},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 15, offset: 43705},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 15, offset: 43737},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 15, offset: 43769},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 15, offset: 43805},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 15, offset: 43841},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1298, col: 1, offset: 43865},
			expr: &choiceExpr{
				pos: position{line: 1298, col: 33, offset: 43897},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1298, col: 33, offset: 43897},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1298, col: 39, offset: 43903},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1298, col: 39, offset: 43903},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1302, col: 1, offset: 44036},
			expr: &actionExpr{
				pos: position{line: 1302, col: 25, offset: 44060},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1302, col: 25, offset: 44060},
					expr: &litMatcher{
						pos:        position{line: 1302, col: 25, offset: 44060},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1306, col: 1, offset: 44101},
			expr: &actionExpr{
				pos: position{line: 1306, col: 25, offset: 44125},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 25, offset: 44125},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1306, col: 25, offset: 44125},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1306, col: 30, offset: 44130},
							expr: &litMatcher{
								pos:        position{line: 1306, col: 30, offset: 44130},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1314, col: 1, offset: 44227},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 13, offset: 44239},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1314, col: 13, offset: 44239},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1314, col: 35, offset: 44261},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1316, col: 1, offset: 44328},
			expr: &actionExpr{
				pos: position{line: 1316, col: 24, offset: 44351},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1316, col: 24, offset: 44351},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1316, col: 24, offset: 44351},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1316, col: 35, offset: 44362},
								expr: &ruleRefExpr{
									pos:  position{line: 1316, col: 36, offset: 44363},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1316, col: 59, offset: 44386},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1316, col: 64, offset: 44391},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1316, col: 74, offset: 44401},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1316, col: 103, offset: 44430},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1320, col: 1, offset: 44522},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1320, col: 32, offset: 44553},
				expr: &ruleRefExpr{
					pos:  position{line: 1320, col: 32, offset: 44553},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1322, col: 1, offset: 44584},
			expr: &actionExpr{
				pos: position{line: 1322, col: 31, offset: 44614},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 31, offset: 44614},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1322, col: 31, offset: 44614},
							expr: &litMatcher{
								pos:        position{line: 1322, col: 33, offset: 44616},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 39, offset: 44622},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1322, col: 48, offset: 44631},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1322, col: 48, offset: 44631},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1323, col: 11, offset: 44646},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1324, col: 11, offset: 44695},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1324, col: 11, offset: 44695},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1324, col: 19, offset: 44703},
												expr: &ruleRefExpr{
													pos:  position{line: 1324, col: 20, offset: 44704},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 11, offset: 44722},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1326, col: 11, offset: 44752},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1327, col: 11, offset: 44775},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 11, offset: 44796},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1329, col: 11, offset: 44817},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 11, offset: 44841},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 11, offset: 44865},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 11, offset: 44891},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 11, offset: 44920},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1337, col: 1, offset: 44987},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 5, offset: 45031},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1338, col: 5, offset: 45031},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1339, col: 7, offset: 45128},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1339, col: 7, offset: 45128},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1339, col: 7, offset: 45128},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1339, col: 12, offset: 45133},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1343, col: 1, offset: 45296},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 24, offset: 45319},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1343, col: 24, offset: 45319},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1343, col: 24, offset: 45319},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1343, col: 24, offset: 45319},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1343, col: 35, offset: 45330},
										expr: &ruleRefExpr{
											pos:  position{line: 1343, col: 36, offset: 45331},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1343, col: 61, offset: 45356},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1343, col: 61, offset: 45356},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1343, col: 65, offset: 45360},
											expr: &litMatcher{
												pos:        position{line: 1343, col: 66, offset: 45361},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1343, col: 71, offset: 45366},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1343, col: 81, offset: 45376},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1343, col: 110, offset: 45405},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1343, col: 114, offset: 45409},
									expr: &notExpr{
										pos: position{line: 1343, col: 116, offset: 45411},
										expr: &ruleRefExpr{
											pos:  position{line: 1343, col: 117, offset: 45412},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1345, col: 5, offset: 45611},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1345, col: 5, offset: 45611},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1345, col: 5, offset: 45611},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1345, col: 16, offset: 45622},
										expr: &ruleRefExpr{
											pos:  position{line: 1345, col: 17, offset: 45623},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1345, col: 40, offset: 45646},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1345, col: 44, offset: 45650},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1345, col: 54, offset: 45660},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1345, col: 54, offset: 45660},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1345, col: 58, offset: 45664},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1345, col: 87, offset: 45693},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1349, col: 1, offset: 45904},
			expr: &seqExpr{
				pos: position{line: 1349, col: 32, offset: 45935},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1349, col: 32, offset: 45935},
						expr: &ruleRefExpr{
							pos:  position{line: 1349, col: 33, offset: 45936},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1349, col: 39, offset: 45942},
						expr: &ruleRefExpr{
							pos:  position{line: 1349, col: 39, offset: 45942},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1351, col: 1, offset: 45971},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 31, offset: 46001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1351, col: 31, offset: 46001},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1352, col: 11, offset: 46016},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1352, col: 11, offset: 46016},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1352, col: 19, offset: 46024},
								expr: &ruleRefExpr{
									pos:  position{line: 1352, col: 20, offset: 46025},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 11, offset: 46043},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 11, offset: 46073},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1355, col: 11, offset: 46096},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1355, col: 11, offset: 46096},
								expr: &ruleRefExpr{
									pos:  position{line: 1355, col: 11, offset: 46096},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1355, col: 18, offset: 46103},
								expr: &seqExpr{
									pos: position{line: 1355, col: 19, offset: 46104},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1355, col: 19, offset: 46104},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1355, col: 23, offset: 46108},
											expr: &litMatcher{
												pos:        position{line: 1355, col: 24, offset: 46109},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 11, offset: 46125},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 11, offset: 46146},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 11, offset: 46167},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 11, offset: 46191},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 11, offset: 46215},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 11, offset: 46241},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 11, offset: 46270},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1364, col: 1, offset: 46308},
			expr: &choiceExpr{
				pos: position{line: 1365, col: 5, offset: 46352},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1365, col: 5, offset: 46352},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1366, col: 7, offset: 46449},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1366, col: 7, offset: 46449},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1366, col: 7, offset: 46449},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1366, col: 11, offset: 46453},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1370, col: 1, offset: 46616},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 5, offset: 46640},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 46640},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1371, col: 5, offset: 46640},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1371, col: 5, offset: 46640},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 18, offset: 46653},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 40, offset: 46675},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1371, col: 45, offset: 46680},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 55, offset: 46690},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 84, offset: 46719},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1373, col: 9, offset: 46876},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1373, col: 9, offset: 46876},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1373, col: 9, offset: 46876},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1373, col: 22, offset: 46889},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1373, col: 44, offset: 46911},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1373, col: 49, offset: 46916},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1373, col: 59, offset: 46926},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1373, col: 88, offset: 46955},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1376, col: 9, offset: 47155},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1376, col: 9, offset: 47155},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1376, col: 9, offset: 47155},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1376, col: 22, offset: 47168},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1376, col: 44, offset: 47190},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1376, col: 48, offset: 47194},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1376, col: 58, offset: 47204},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1376, col: 87, offset: 47233},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1384, col: 1, offset: 47441},
			expr: &choiceExpr{
				pos: position{line: 1384, col: 15, offset: 47455},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1384, col: 15, offset: 47455},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 39, offset: 47479},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1386, col: 1, offset: 47502},
			expr: &actionExpr{
				pos: position{line: 1386, col: 26, offset: 47527},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 26, offset: 47527},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1386, col: 26, offset: 47527},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1386, col: 37, offset: 47538},
								expr: &ruleRefExpr{
									pos:  position{line: 1386, col: 38, offset: 47539},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 61, offset: 47562},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1386, col: 66, offset: 47567},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 76, offset: 47577},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 107, offset: 47608},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1390, col: 1, offset: 47747},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1390, col: 34, offset: 47780},
				expr: &ruleRefExpr{
					pos:  position{line: 1390, col: 34, offset: 47780},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1392, col: 1, offset: 47812},
			expr: &actionExpr{
				pos: position{line: 1392, col: 33, offset: 47844},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1392, col: 33, offset: 47844},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1392, col: 33, offset: 47844},
							expr: &litMatcher{
								pos:        position{line: 1392, col: 35, offset: 47846},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1392, col: 41, offset: 47852},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1392, col: 50, offset: 47861},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1392, col: 50, offset: 47861},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1393, col: 11, offset: 47876},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1394, col: 11, offset: 47925},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1394, col: 11, offset: 47925},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1394, col: 19, offset: 47933},
												expr: &ruleRefExpr{
													pos:  position{line: 1394, col: 20, offset: 47934},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1395, col: 11, offset: 47952},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1396, col: 11, offset: 47984},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1397, col: 11, offset: 48007},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1398, col: 11, offset: 48026},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1399, col: 11, offset: 48047},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1400, col: 11, offset: 48071},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1401, col: 11, offset: 48095},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1402, col: 11, offset: 48121},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1403, col: 11, offset: 48150},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1407, col: 1, offset: 48219},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 5, offset: 48265},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1408, col: 5, offset: 48265},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1409, col: 7, offset: 48364},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1409, col: 7, offset: 48364},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1409, col: 7, offset: 48364},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1409, col: 12, offset: 48369},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1413, col: 1, offset: 48534},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 26, offset: 48559},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1413, col: 26, offset: 48559},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1413, col: 26, offset: 48559},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1413, col: 26, offset: 48559},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1413, col: 37, offset: 48570},
										expr: &ruleRefExpr{
											pos:  position{line: 1413, col: 38, offset: 48571},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1413, col: 62, offset: 48595},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1413, col: 62, offset: 48595},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1413, col: 66, offset: 48599},
											expr: &litMatcher{
												pos:        position{line: 1413, col: 67, offset: 48600},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 72, offset: 48605},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1413, col: 82, offset: 48615},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1413, col: 113, offset: 48646},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1415, col: 5, offset: 48841},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1415, col: 5, offset: 48841},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1415, col: 5, offset: 48841},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1415, col: 16, offset: 48852},
										expr: &ruleRefExpr{
											pos:  position{line: 1415, col: 17, offset: 48853},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1415, col: 40, offset: 48876},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1415, col: 44, offset: 48880},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1415, col: 54, offset: 48890},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1415, col: 54, offset: 48890},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1415, col: 58, offset: 48894},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1415, col: 89, offset: 48925},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1419, col: 1, offset: 49140},
			expr: &seqExpr{
				pos: position{line: 1419, col: 34, offset: 49173},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1419, col: 34, offset: 49173},
						expr: &ruleRefExpr{
							pos:  position{line: 1419, col: 35, offset: 49174},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1419, col: 41, offset: 49180},
						expr: &ruleRefExpr{
							pos:  position{line: 1419, col: 41, offset: 49180},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1421, col: 1, offset: 49211},
			expr: &choiceExpr{
				pos: position{line: 1421, col: 33, offset: 49243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1421, col: 33, offset: 49243},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1422, col: 11, offset: 49258},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1422, col: 11, offset: 49258},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1422, col: 19, offset: 49266},
								expr: &ruleRefExpr{
									pos:  position{line: 1422, col: 20, offset: 49267},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1423, col: 11, offset: 49285},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1424, col: 11, offset: 49317},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1425, col: 11, offset: 49340},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1425, col: 11, offset: 49340},
								expr: &ruleRefExpr{
									pos:  position{line: 1425, col: 11, offset: 49340},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1425, col: 18, offset: 49347},
								expr: &seqExpr{
									pos: position{line: 1425, col: 19, offset: 49348},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1425, col: 19, offset: 49348},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1425, col: 23, offset: 49352},
											expr: &litMatcher{
												pos:        position{line: 1425, col: 24, offset: 49353},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1426, col: 11, offset: 49369},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 11, offset: 49388},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 11, offset: 49409},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 11, offset: 49433},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1430, col: 11, offset: 49457},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1431, col: 11, offset: 49483},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1432, col: 11, offset: 49512},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1434, col: 1, offset: 49552},
			expr: &choiceExpr{
				pos: position{line: 1435, col: 5, offset: 49598},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1435, col: 5, offset: 49598},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1436, col: 7, offset: 49697},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1436, col: 7, offset: 49697},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1436, col: 7, offset: 49697},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1436, col: 11, offset: 49701},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1440, col: 1, offset: 49867},
			expr: &choiceExpr{
				pos: position{line: 1441, col: 5, offset: 49893},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1441, col: 5, offset: 49893},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1441, col: 5, offset: 49893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1441, col: 5, offset: 49893},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1441, col: 18, offset: 49906},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 40, offset: 49928},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1441, col: 45, offset: 49933},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1441, col: 55, offset: 49943},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 86, offset: 49974},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1443, col: 9, offset: 50131},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1443, col: 9, offset: 50131},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1443, col: 9, offset: 50131},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1443, col: 22, offset: 50144},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1443, col: 44, offset: 50166},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1443, col: 49, offset: 50171},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1443, col: 59, offset: 50181},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1443, col: 90, offset: 50212},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1446, col: 9, offset: 50412},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1446, col: 9, offset: 50412},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1446, col: 9, offset: 50412},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1446, col: 22, offset: 50425},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1446, col: 44, offset: 50447},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1446, col: 48, offset: 50451},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1446, col: 58, offset: 50461},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1446, col: 89, offset: 50492},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1453, col: 1, offset: 50702},
			expr: &choiceExpr{
				pos: position{line: 1453, col: 18, offset: 50719},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1453, col: 18, offset: 50719},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1453, col: 45, offset: 50746},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1455, col: 1, offset: 50772},
			expr: &actionExpr{
				pos: position{line: 1455, col: 29, offset: 50800},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 29, offset: 50800},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1455, col: 29, offset: 50800},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1455, col: 40, offset: 50811},
								expr: &ruleRefExpr{
									pos:  position{line: 1455, col: 41, offset: 50812},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1455, col: 64, offset: 50835},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 69, offset: 50840},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1455, col: 79, offset: 50850},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1455, col: 113, offset: 50884},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1459, col: 1, offset: 51026},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1459, col: 37, offset: 51062},
				expr: &ruleRefExpr{
					pos:  position{line: 1459, col: 37, offset: 51062},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1461, col: 1, offset: 51129},
			expr: &actionExpr{
				pos: position{line: 1461, col: 36, offset: 51164},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1461, col: 36, offset: 51164},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1461, col: 36, offset: 51164},
							expr: &litMatcher{
								pos:        position{line: 1461, col: 38, offset: 51166},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1461, col: 44, offset: 51172},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1461, col: 53, offset: 51181},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1461, col: 53, offset: 51181},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1462, col: 11, offset: 51196},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1463, col: 11, offset: 51245},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1463, col: 11, offset: 51245},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1463, col: 19, offset: 51253},
												expr: &ruleRefExpr{
													pos:  position{line: 1463, col: 20, offset: 51254},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1464, col: 11, offset: 51272},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1465, col: 11, offset: 51295},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1465, col: 11, offset: 51295},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1469, col: 11, offset: 51479},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1470, col: 11, offset: 51514},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1471, col: 11, offset: 51533},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1472, col: 11, offset: 51554},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1473, col: 11, offset: 51575},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1474, col: 11, offset: 51599},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1475, col: 11, offset: 51625},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1476, col: 11, offset: 51654},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1480, col: 1, offset: 51726},
			expr: &choiceExpr{
				pos: position{line: 1481, col: 5, offset: 51775},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1481, col: 5, offset: 51775},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1482, col: 7, offset: 51877},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1482, col: 7, offset: 51877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1482, col: 7, offset: 51877},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1482, col: 12, offset: 51882},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1486, col: 1, offset: 52050},
			expr: &choiceExpr{
				pos: position{line: 1486, col: 29, offset: 52078},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1486, col: 29, offset: 52078},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1486, col: 29, offset: 52078},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1486, col: 29, offset: 52078},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1486, col: 40, offset: 52089},
										expr: &ruleRefExpr{
											pos:  position{line: 1486, col: 41, offset: 52090},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1486, col: 65, offset: 52114},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1486, col: 65, offset: 52114},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1486, col: 69, offset: 52118},
											expr: &litMatcher{
												pos:        position{line: 1486, col: 70, offset: 52119},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1486, col: 75, offset: 52124},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1486, col: 85, offset: 52134},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1486, col: 119, offset: 52168},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1488, col: 5, offset: 52366},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1488, col: 5, offset: 52366},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1488, col: 5, offset: 52366},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1488, col: 16, offset: 52377},
										expr: &ruleRefExpr{
											pos:  position{line: 1488, col: 17, offset: 52378},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1488, col: 40, offset: 52401},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1488, col: 44, offset: 52405},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1488, col: 54, offset: 52415},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1488, col: 54, offset: 52415},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1488, col: 58, offset: 52419},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1488, col: 92, offset: 52453},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1492, col: 1, offset: 52672},
			expr: &seqExpr{
				pos: position{line: 1492, col: 37, offset: 52708},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1492, col: 37, offset: 52708},
						expr: &ruleRefExpr{
							pos:  position{line: 1492, col: 38, offset: 52709},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1492, col: 44, offset: 52715},
						expr: &ruleRefExpr{
							pos:  position{line: 1492, col: 44, offset: 52715},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1494, col: 1, offset: 52749},
			expr: &choiceExpr{
				pos: position{line: 1494, col: 37, offset: 52785},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1494, col: 37, offset: 52785},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1495, col: 11, offset: 52800},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1495, col: 11, offset: 52800},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1495, col: 19, offset: 52808},
								expr: &ruleRefExpr{
									pos:  position{line: 1495, col: 20, offset: 52809},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1496, col: 11, offset: 52827},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1497, col: 11, offset: 52862},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1498, col: 11, offset: 52885},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1498, col: 11, offset: 52885},
								expr: &ruleRefExpr{
									pos:  position{line: 1498, col: 11, offset: 52885},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1498, col: 18, offset: 52892},
								expr: &seqExpr{
									pos: position{line: 1498, col: 19, offset: 52893},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1498, col: 19, offset: 52893},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1498, col: 23, offset: 52897},
											expr: &litMatcher{
												pos:        position{line: 1498, col: 24, offset: 52898},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1499, col: 11, offset: 53026},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1500, col: 11, offset: 53045},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1501, col: 11, offset: 53066},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1502, col: 11, offset: 53087},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1503, col: 11, offset: 53111},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1504, col: 11, offset: 53137},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1504, col: 11, offset: 53137},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1508, col: 11, offset: 53278},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1509, col: 11, offset: 53307},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1511, col: 1, offset: 53350},
			expr: &choiceExpr{
				pos: position{line: 1512, col: 5, offset: 53399},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1512, col: 5, offset: 53399},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1513, col: 7, offset: 53501},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1513, col: 7, offset: 53501},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1513, col: 7, offset: 53501},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1513, col: 11, offset: 53505},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1517, col: 1, offset: 53674},
			expr: &choiceExpr{
				pos: position{line: 1518, col: 5, offset: 53703},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1518, col: 5, offset: 53703},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1518, col: 5, offset: 53703},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1518, col: 5, offset: 53703},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1518, col: 18, offset: 53716},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1518, col: 40, offset: 53738},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1518, col: 45, offset: 53743},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1518, col: 55, offset: 53753},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1518, col: 89, offset: 53787},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1520, col: 9, offset: 53944},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1520, col: 9, offset: 53944},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1520, col: 9, offset: 53944},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1520, col: 22, offset: 53957},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1520, col: 44, offset: 53979},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1520, col: 49, offset: 53984},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1520, col: 59, offset: 53994},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1520, col: 93, offset: 54028},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1523, col: 9, offset: 54228},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1523, col: 9, offset: 54228},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1523, col: 9, offset: 54228},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1523, col: 22, offset: 54241},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1523, col: 44, offset: 54263},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1523, col: 48, offset: 54267},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1523, col: 58, offset: 54277},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1523, col: 92, offset: 54311},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1531, col: 1, offset: 54636},
			expr: &choiceExpr{
				pos: position{line: 1531, col: 17, offset: 54652},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1531, col: 17, offset: 54652},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1531, col: 38, offset: 54673},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1533, col: 1, offset: 54693},
			expr: &actionExpr{
				pos: position{line: 1533, col: 23, offset: 54715},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1533, col: 23, offset: 54715},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1533, col: 23, offset: 54715},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 46, offset: 54738},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 55, offset: 54747},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1533, col: 82, offset: 54774},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1537, col: 1, offset: 54878},
			expr: &actionExpr{
				pos: position{line: 1537, col: 31, offset: 54908},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1537, col: 31, offset: 54908},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1537, col: 41, offset: 54918},
						expr: &ruleRefExpr{
							pos:  position{line: 1537, col: 41, offset: 54918},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1541, col: 1, offset: 54996},
			expr: &seqExpr{
				pos: position{line: 1541, col: 27, offset: 55022},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1541, col: 27, offset: 55022},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1541, col: 32, offset: 55027},
						expr: &charClassMatcher{
							pos:        position{line: 1541, col: 33, offset: 55028},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1543, col: 1, offset: 55039},
			expr: &litMatcher{
				pos:        position{line: 1543, col: 25, offset: 55063},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1546, col: 1, offset: 55151},
			expr: &actionExpr{
				pos: position{line: 1546, col: 30, offset: 55180},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1546, col: 30, offset: 55180},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1547, col: 9, offset: 55198},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1547, col: 9, offset: 55198},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1547, col: 9, offset: 55198},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1547, col: 19, offset: 55208},
										expr: &ruleRefExpr{
											pos:  position{line: 1547, col: 20, offset: 55209},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1548, col: 11, offset: 55265},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1548, col: 11, offset: 55265},
										expr: &ruleRefExpr{
											pos:  position{line: 1548, col: 11, offset: 55265},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1548, col: 18, offset: 55272},
										expr: &ruleRefExpr{
											pos:  position{line: 1548, col: 19, offset: 55273},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1549, col: 11, offset: 55304},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1549, col: 11, offset: 55304},
										expr: &litMatcher{
											pos:        position{line: 1549, col: 12, offset: 55305},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1549, col: 16, offset: 55309},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1550, col: 11, offset: 55357},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1551, col: 11, offset: 55376},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1552, col: 11, offset: 55397},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1553, col: 11, offset: 55418},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1554, col: 11, offset: 55442},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1555, col: 11, offset: 55468},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1555, col: 11, offset: 55468},
										expr: &litMatcher{
											pos:        position{line: 1555, col: 12, offset: 55469},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1555, col: 17, offset: 55474},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1556, col: 11, offset: 55498},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1557, col: 11, offset: 55527},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1561, col: 1, offset: 55593},
			expr: &choiceExpr{
				pos: position{line: 1561, col: 41, offset: 55633},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1561, col: 41, offset: 55633},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1561, col: 55, offset: 55647},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1561, col: 55, offset: 55647},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1561, col: 55, offset: 55647},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1561, col: 59, offset: 55651},
									expr: &litMatcher{
										pos:        position{line: 1561, col: 60, offset: 55652},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1565, col: 1, offset: 55711},
			expr: &actionExpr{
				pos: position{line: 1565, col: 23, offset: 55733},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1565, col: 23, offset: 55733},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1565, col: 23, offset: 55733},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1565, col: 46, offset: 55756},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 55, offset: 55765},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1565, col: 82, offset: 55792},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1569, col: 1, offset: 55896},
			expr: &actionExpr{
				pos: position{line: 1569, col: 31, offset: 55926},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1569, col: 31, offset: 55926},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1569, col: 41, offset: 55936},
						expr: &ruleRefExpr{
							pos:  position{line: 1569, col: 41, offset: 55936},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1574, col: 1, offset: 56096},
			expr: &actionExpr{
				pos: position{line: 1574, col: 30, offset: 56125},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1574, col: 30, offset: 56125},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1575, col: 9, offset: 56143},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1575, col: 9, offset: 56143},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1575, col: 9, offset: 56143},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1575, col: 19, offset: 56153},
										expr: &ruleRefExpr{
											pos:  position{line: 1575, col: 20, offset: 56154},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1576, col: 11, offset: 56210},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1576, col: 11, offset: 56210},
										expr: &ruleRefExpr{
											pos:  position{line: 1576, col: 11, offset: 56210},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1576, col: 18, offset: 56217},
										expr: &ruleRefExpr{
											pos:  position{line: 1576, col: 19, offset: 56218},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1577, col: 11, offset: 56249},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1578, col: 11, offset: 56268},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1579, col: 11, offset: 56289},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1580, col: 11, offset: 56310},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1581, col: 11, offset: 56334},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1582, col: 11, offset: 56360},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1582, col: 11, offset: 56360},
										expr: &litMatcher{
											pos:        position{line: 1582, col: 12, offset: 56361},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1582, col: 18, offset: 56367},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1583, col: 10, offset: 56390},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1584, col: 11, offset: 56419},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1588, col: 1, offset: 56493},
			expr: &seqExpr{
				pos: position{line: 1588, col: 27, offset: 56519},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1588, col: 27, offset: 56519},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1588, col: 33, offset: 56525},
						expr: &charClassMatcher{
							pos:        position{line: 1588, col: 34, offset: 56526},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1590, col: 1, offset: 56537},
			expr: &litMatcher{
				pos:        position{line: 1590, col: 25, offset: 56561},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1592, col: 1, offset: 56568},
			expr: &actionExpr{
				pos: position{line: 1592, col: 41, offset: 56608},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1592, col: 42, offset: 56609},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1592, col: 42, offset: 56609},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1592, col: 56, offset: 56623},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1592, col: 56, offset: 56623},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1592, col: 60, offset: 56627},
									expr: &litMatcher{
										pos:        position{line: 1592, col: 61, offset: 56628},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1601, col: 1, offset: 56748},
			expr: &choiceExpr{
				pos: position{line: 1601, col: 15, offset: 56762},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1601, col: 15, offset: 56762},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1601, col: 39, offset: 56786},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1603, col: 1, offset: 56809},
			expr: &actionExpr{
				pos: position{line: 1603, col: 26, offset: 56834},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1603, col: 26, offset: 56834},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1603, col: 26, offset: 56834},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1603, col: 37, offset: 56845},
								expr: &ruleRefExpr{
									pos:  position{line: 1603, col: 38, offset: 56846},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1603, col: 61, offset: 56869},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 66, offset: 56874},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1603, col: 76, offset: 56884},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1603, col: 107, offset: 56915},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1607, col: 1, offset: 57054},
			expr: &seqExpr{
				pos: position{line: 1607, col: 34, offset: 57087},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1607, col: 34, offset: 57087},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1607, col: 63, offset: 57116},
						expr: &seqExpr{
							pos: position{line: 1607, col: 64, offset: 57117},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1607, col: 64, offset: 57117},
									expr: &litMatcher{
										pos:        position{line: 1607, col: 66, offset: 57119},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1607, col: 73, offset: 57126},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1607, col: 73, offset: 57126},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1607, col: 81, offset: 57134},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1609, col: 1, offset: 57201},
			expr: &choiceExpr{
				pos: position{line: 1609, col: 33, offset: 57233},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1609, col: 33, offset: 57233},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1610, col: 11, offset: 57248},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1611, col: 11, offset: 57280},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1611, col: 11, offset: 57280},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1611, col: 19, offset: 57288},
								expr: &ruleRefExpr{
									pos:  position{line: 1611, col: 20, offset: 57289},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1612, col: 11, offset: 57307},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1613, col: 11, offset: 57330},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1614, col: 11, offset: 57349},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1615, col: 11, offset: 57370},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1616, col: 11, offset: 57394},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1617, col: 11, offset: 57418},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1618, col: 11, offset: 57444},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1619, col: 11, offset: 57473},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1621, col: 1, offset: 57513},
			expr: &choiceExpr{
				pos: position{line: 1622, col: 5, offset: 57559},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1622, col: 5, offset: 57559},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1623, col: 7, offset: 57658},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1623, col: 7, offset: 57658},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1623, col: 7, offset: 57658},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1623, col: 12, offset: 57663},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1627, col: 1, offset: 57828},
			expr: &choiceExpr{
				pos: position{line: 1627, col: 26, offset: 57853},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1627, col: 26, offset: 57853},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1627, col: 26, offset: 57853},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1627, col: 26, offset: 57853},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1627, col: 37, offset: 57864},
										expr: &ruleRefExpr{
											pos:  position{line: 1627, col: 38, offset: 57865},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1627, col: 62, offset: 57889},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1627, col: 62, offset: 57889},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1627, col: 66, offset: 57893},
											expr: &litMatcher{
												pos:        position{line: 1627, col: 67, offset: 57894},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1627, col: 72, offset: 57899},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1627, col: 82, offset: 57909},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1627, col: 113, offset: 57940},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1629, col: 5, offset: 58135},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1629, col: 5, offset: 58135},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1629, col: 5, offset: 58135},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1629, col: 16, offset: 58146},
										expr: &ruleRefExpr{
											pos:  position{line: 1629, col: 17, offset: 58147},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1629, col: 40, offset: 58170},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1629, col: 44, offset: 58174},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1629, col: 54, offset: 58184},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1629, col: 54, offset: 58184},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1629, col: 58, offset: 58188},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1629, col: 89, offset: 58219},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1633, col: 1, offset: 58433},
			expr: &seqExpr{
				pos: position{line: 1633, col: 34, offset: 58466},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1633, col: 34, offset: 58466},
						expr: &ruleRefExpr{
							pos:  position{line: 1633, col: 35, offset: 58467},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1633, col: 41, offset: 58473},
						expr: &ruleRefExpr{
							pos:  position{line: 1633, col: 41, offset: 58473},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1635, col: 1, offset: 58504},
			expr: &choiceExpr{
				pos: position{line: 1635, col: 33, offset: 58536},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1635, col: 33, offset: 58536},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1636, col: 11, offset: 58551},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1637, col: 11, offset: 58583},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1637, col: 11, offset: 58583},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1637, col: 19, offset: 58591},
								expr: &ruleRefExpr{
									pos:  position{line: 1637, col: 20, offset: 58592},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 11, offset: 58610},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1639, col: 11, offset: 58633},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1639, col: 11, offset: 58633},
								expr: &ruleRefExpr{
									pos:  position{line: 1639, col: 11, offset: 58633},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1639, col: 18, offset: 58640},
								expr: &seqExpr{
									pos: position{line: 1639, col: 19, offset: 58641},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1639, col: 19, offset: 58641},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1639, col: 23, offset: 58645},
											expr: &litMatcher{
												pos:        position{line: 1639, col: 24, offset: 58646},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1640, col: 11, offset: 58662},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1641, col: 11, offset: 58681},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1642, col: 11, offset: 58702},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1643, col: 11, offset: 58726},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1644, col: 11, offset: 58750},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1645, col: 11, offset: 58776},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1646, col: 11, offset: 58805},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1648, col: 1, offset: 58845},
			expr: &choiceExpr{
				pos: position{line: 1649, col: 5, offset: 58891},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1649, col: 5, offset: 58891},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1650, col: 7, offset: 58988},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1650, col: 7, offset: 58988},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1650, col: 7, offset: 58988},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1650, col: 11, offset: 58992},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1654, col: 1, offset: 59155},
			expr: &choiceExpr{
				pos: position{line: 1655, col: 5, offset: 59180},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1655, col: 5, offset: 59180},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1655, col: 5, offset: 59180},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1655, col: 5, offset: 59180},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1655, col: 18, offset: 59193},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1655, col: 40, offset: 59215},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1655, col: 45, offset: 59220},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1655, col: 55, offset: 59230},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1655, col: 86, offset: 59261},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1657, col: 9, offset: 59418},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1657, col: 9, offset: 59418},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1657, col: 9, offset: 59418},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1657, col: 22, offset: 59431},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1657, col: 44, offset: 59453},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1657, col: 49, offset: 59458},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1657, col: 59, offset: 59468},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1657, col: 90, offset: 59499},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1660, col: 9, offset: 59699},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1660, col: 9, offset: 59699},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1660, col: 9, offset: 59699},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1660, col: 22, offset: 59712},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1660, col: 44, offset: 59734},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1660, col: 48, offset: 59738},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1660, col: 58, offset: 59748},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1660, col: 89, offset: 59779},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1665, col: 1, offset: 59929},
			expr: &actionExpr{
				pos: position{line: 1665, col: 18, offset: 59946},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1665, col: 18, offset: 59946},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1665, col: 18, offset: 59946},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1665, col: 29, offset: 59957},
								expr: &ruleRefExpr{
									pos:  position{line: 1665, col: 30, offset: 59958},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1665, col: 53, offset: 59981},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1665, col: 57, offset: 59985},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1665, col: 66, offset: 59994},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1665, col: 88, offset: 60016},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1669, col: 1, offset: 60117},
			expr: &choiceExpr{
				pos: position{line: 1669, col: 25, offset: 60141},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1669, col: 25, offset: 60141},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1669, col: 38, offset: 60154},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1671, col: 1, offset: 60173},
			expr: &actionExpr{
				pos: position{line: 1671, col: 21, offset: 60193},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1671, col: 21, offset: 60193},
					expr: &charClassMatcher{
						pos:        position{line: 1671, col: 21, offset: 60193},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1675, col: 1, offset: 60270},
			expr: &actionExpr{
				pos: position{line: 1675, col: 25, offset: 60294},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1675, col: 25, offset: 60294},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1675, col: 25, offset: 60294},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1675, col: 38, offset: 60307},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1675, col: 60, offset: 60329},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1675, col: 64, offset: 60333},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1675, col: 73, offset: 60342},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1675, col: 95, offset: 60364},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1679, col: 1, offset: 60493},
			expr: &actionExpr{
				pos: position{line: 1679, col: 20, offset: 60512},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1679, col: 20, offset: 60512},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1679, col: 20, offset: 60512},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1679, col: 31, offset: 60523},
								expr: &ruleRefExpr{
									pos:  position{line: 1679, col: 32, offset: 60524},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1679, col: 55, offset: 60547},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1679, col: 59, offset: 60551},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1679, col: 68, offset: 60560},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1679, col: 92, offset: 60584},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1683, col: 1, offset: 60687},
			expr: &choiceExpr{
				pos: position{line: 1683, col: 27, offset: 60713},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1683, col: 27, offset: 60713},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1683, col: 40, offset: 60726},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1685, col: 1, offset: 60747},
			expr: &actionExpr{
				pos: position{line: 1685, col: 23, offset: 60769},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1685, col: 23, offset: 60769},
					expr: &charClassMatcher{
						pos:        position{line: 1685, col: 23, offset: 60769},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1689, col: 1, offset: 60846},
			expr: &actionExpr{
				pos: position{line: 1689, col: 27, offset: 60872},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1689, col: 27, offset: 60872},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1689, col: 27, offset: 60872},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1689, col: 40, offset: 60885},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1689, col: 62, offset: 60907},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1689, col: 66, offset: 60911},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1689, col: 75, offset: 60920},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1689, col: 99, offset: 60944},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1696, col: 1, offset: 61186},
			expr: &choiceExpr{
				pos: position{line: 1696, col: 22, offset: 61207},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1696, col: 22, offset: 61207},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1696, col: 46, offset: 61231},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1696, col: 70, offset: 61255},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1698, col: 1, offset: 61273},
			expr: &litMatcher{
				pos:        position{line: 1698, col: 32, offset: 61304},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1700, col: 1, offset: 61309},
			expr: &actionExpr{
				pos: position{line: 1700, col: 26, offset: 61334},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1700, col: 26, offset: 61334},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1700, col: 26, offset: 61334},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1700, col: 54, offset: 61362},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1700, col: 63, offset: 61371},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1700, col: 93, offset: 61401},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1700, col: 121, offset: 61429},
							expr: &ruleRefExpr{
								pos:  position{line: 1700, col: 122, offset: 61430},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1704, col: 1, offset: 61535},
			expr: &choiceExpr{
				pos: position{line: 1704, col: 33, offset: 61567},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1704, col: 34, offset: 61568},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1704, col: 34, offset: 61568},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1704, col: 35, offset: 61569},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1704, col: 35, offset: 61569},
											expr: &ruleRefExpr{
												pos:  position{line: 1704, col: 36, offset: 61570},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1704, col: 64, offset: 61598},
											expr: &ruleRefExpr{
												pos:  position{line: 1704, col: 65, offset: 61599},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1704, col: 71, offset: 61605},
											expr: &ruleRefExpr{
												pos:  position{line: 1704, col: 72, offset: 61606},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1704, col: 80, offset: 61614,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1704, col: 83, offset: 61617},
									expr: &seqExpr{
										pos: position{line: 1704, col: 84, offset: 61618},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1704, col: 84, offset: 61618},
												expr: &seqExpr{
													pos: position{line: 1704, col: 86, offset: 61620},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1704, col: 86, offset: 61620},
															expr: &ruleRefExpr{
																pos:  position{line: 1704, col: 86, offset: 61620},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1704, col: 93, offset: 61627},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1704, col: 122, offset: 61656},
												expr: &ruleRefExpr{
													pos:  position{line: 1704, col: 123, offset: 61657},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1704, col: 151, offset: 61685},
												expr: &ruleRefExpr{
													pos:  position{line: 1704, col: 152, offset: 61686},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1704, col: 160, offset: 61694,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1706, col: 7, offset: 61836},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1706, col: 8, offset: 61837},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1706, col: 8, offset: 61837},
									expr: &ruleRefExpr{
										pos:  position{line: 1706, col: 9, offset: 61838},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1706, col: 15, offset: 61844},
									expr: &ruleRefExpr{
										pos:  position{line: 1706, col: 16, offset: 61845},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1706, col: 24, offset: 61853},
									expr: &ruleRefExpr{
										pos:  position{line: 1706, col: 25, offset: 61854},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1706, col: 53, offset: 61882,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1710, col: 1, offset: 61964},
			expr: &litMatcher{
				pos:        position{line: 1710, col: 32, offset: 61995},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1712, col: 1, offset: 62002},
			expr: &actionExpr{
				pos: position{line: 1712, col: 26, offset: 62027},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1712, col: 26, offset: 62027},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1712, col: 26, offset: 62027},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 54, offset: 62055},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1712, col: 63, offset: 62064},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1712, col: 93, offset: 62094},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1712, col: 121, offset: 62122},
							expr: &ruleRefExpr{
								pos:  position{line: 1712, col: 122, offset: 62123},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1716, col: 1, offset: 62228},
			expr: &choiceExpr{
				pos: position{line: 1716, col: 33, offset: 62260},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1716, col: 34, offset: 62261},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1716, col: 34, offset: 62261},
							expr: &seqExpr{
								pos: position{line: 1716, col: 35, offset: 62262},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1716, col: 35, offset: 62262},
										expr: &ruleRefExpr{
											pos:  position{line: 1716, col: 36, offset: 62263},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1716, col: 64, offset: 62291,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1718, col: 7, offset: 62456},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1718, col: 7, offset: 62456},
							expr: &seqExpr{
								pos: position{line: 1718, col: 8, offset: 62457},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1718, col: 8, offset: 62457},
										expr: &ruleRefExpr{
											pos:  position{line: 1718, col: 9, offset: 62458},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1718, col: 15, offset: 62464},
										expr: &ruleRefExpr{
											pos:  position{line: 1718, col: 16, offset: 62465},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1718, col: 24, offset: 62473},
										expr: &ruleRefExpr{
											pos:  position{line: 1718, col: 25, offset: 62474},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1718, col: 53, offset: 62502,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1722, col: 1, offset: 62585},
			expr: &choiceExpr{
				pos: position{line: 1722, col: 21, offset: 62605},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1722, col: 21, offset: 62605},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1722, col: 21, offset: 62605},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1722, col: 21, offset: 62605},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1722, col: 30, offset: 62614},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1722, col: 38, offset: 62622},
										expr: &ruleRefExpr{
											pos:  position{line: 1722, col: 39, offset: 62623},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1722, col: 67, offset: 62651},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1724, col: 5, offset: 62747},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1724, col: 5, offset: 62747},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1724, col: 5, offset: 62747},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1724, col: 15, offset: 62757},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1724, col: 23, offset: 62765},
										expr: &choiceExpr{
											pos: position{line: 1724, col: 24, offset: 62766},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1724, col: 24, offset: 62766},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1724, col: 37, offset: 62779},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1724, col: 65, offset: 62807},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1728, col: 1, offset: 62903},
			expr: &actionExpr{
				pos: position{line: 1728, col: 30, offset: 62932},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1728, col: 30, offset: 62932},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1735, col: 1, offset: 63105},
			expr: &choiceExpr{
				pos: position{line: 1735, col: 19, offset: 63123},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1735, col: 19, offset: 63123},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1735, col: 44, offset: 63148},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1737, col: 1, offset: 63173},
			expr: &choiceExpr{
				pos: position{line: 1737, col: 27, offset: 63199},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1737, col: 27, offset: 63199},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1737, col: 27, offset: 63199},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1737, col: 27, offset: 63199},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1737, col: 32, offset: 63204},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1737, col: 36, offset: 63208},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1737, col: 40, offset: 63212},
									expr: &ruleRefExpr{
										pos:  position{line: 1737, col: 40, offset: 63212},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1737, col: 47, offset: 63219},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1737, col: 51, offset: 63223},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1737, col: 58, offset: 63230},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1737, col: 79, offset: 63251},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1739, col: 5, offset: 63316},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1739, col: 5, offset: 63316},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1739, col: 5, offset: 63316},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1739, col: 10, offset: 63321},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1739, col: 14, offset: 63325},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 1739, col: 18, offset: 63329},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1743, col: 1, offset: 63392},
			expr: &actionExpr{
				pos: position{line: 1743, col: 27, offset: 63418},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1743, col: 27, offset: 63418},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1743, col: 27, offset: 63418},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1743, col: 35, offset: 63426},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1743, col: 40, offset: 63431},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1743, col: 54, offset: 63445},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1743, col: 72, offset: 63463},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1747, col: 1, offset: 63586},
			expr: &ruleRefExpr{
				pos:  position{line: 1747, col: 24, offset: 63609},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1752, col: 1, offset: 63731},
			expr: &choiceExpr{
				pos: position{line: 1752, col: 9, offset: 63739},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1752, col: 9, offset: 63739},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1752, col: 24, offset: 63754},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1755, col: 1, offset: 63835},
			expr: &actionExpr{
				pos: position{line: 1755, col: 17, offset: 63851},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1755, col: 17, offset: 63851},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1755, col: 17, offset: 63851},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1755, col: 25, offset: 63859},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1755, col: 30, offset: 63864},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1755, col: 40, offset: 63874},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1755, col: 58, offset: 63892},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1759, col: 1, offset: 64003},
			expr: &actionExpr{
				pos: position{line: 1759, col: 17, offset: 64019},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1759, col: 17, offset: 64019},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1759, col: 17, offset: 64019},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1759, col: 22, offset: 64024},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1759, col: 42, offset: 64044},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1759, col: 59, offset: 64061},
								expr: &ruleRefExpr{
									pos:  position{line: 1759, col: 60, offset: 64062},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1764, col: 1, offset: 64234},
			expr: &actionExpr{
				pos: position{line: 1765, col: 5, offset: 64258},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1765, col: 5, offset: 64258},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 1765, col: 5, offset: 64258},
							run: (*parser).callonLinkAttributes3,
						},
						&litMatcher{
							pos:        position{line: 1768, col: 5, offset: 64309},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1769, col: 5, offset: 64317},
							label: "positionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1769, col: 26, offset: 64338},
								expr: &ruleRefExpr{
									pos:  position{line: 1769, col: 27, offset: 64339},
									name: "PositionalAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1770, col: 5, offset: 64365},
							label: "namedAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1770, col: 21, offset: 64381},
								expr: &ruleRefExpr{
									pos:  position{line: 1770, col: 22, offset: 64382},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1771, col: 5, offset: 64403},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1783, col: 1, offset: 64885},
			expr: &actionExpr{
				pos: position{line: 1783, col: 30, offset: 64914},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1783, col: 30, offset: 64914},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1785, col: 5, offset: 64965},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1785, col: 6, offset: 64966},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1785, col: 6, offset: 64966},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1785, col: 6, offset: 64966},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1785, col: 11, offset: 64971},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1785, col: 20, offset: 64980},
												expr: &choiceExpr{
													pos: position{line: 1785, col: 21, offset: 64981},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1785, col: 21, offset: 64981},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1785, col: 36, offset: 64996},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1785, col: 49, offset: 65009},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1785, col: 70, offset: 65030},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1785, col: 92, offset: 65052},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1785, col: 97, offset: 65057},
											expr: &notExpr{
												pos: position{line: 1785, col: 99, offset: 65059},
												expr: &litMatcher{
													pos:        position{line: 1785, col: 100, offset: 65060},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1785, col: 105, offset: 65065},
											expr: &litMatcher{
												pos:        position{line: 1785, col: 105, offset: 65065},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1789, col: 6, offset: 65192},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1789, col: 6, offset: 65192},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1789, col: 6, offset: 65192},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1789, col: 15, offset: 65201},
												expr: &choiceExpr{
													pos: position{line: 1789, col: 16, offset: 65202},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1789, col: 16, offset: 65202},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1789, col: 31, offset: 65217},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1789, col: 44, offset: 65230},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1789, col: 65, offset: 65251},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1789, col: 89, offset: 65275},
											expr: &notExpr{
												pos: position{line: 1789, col: 91, offset: 65277},
												expr: &litMatcher{
													pos:        position{line: 1789, col: 92, offset: 65278},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1789, col: 97, offset: 65283},
											expr: &litMatcher{
												pos:        position{line: 1789, col: 97, offset: 65283},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1795, col: 1, offset: 65397},
			expr: &actionExpr{
				pos: position{line: 1795, col: 18, offset: 65414},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1795, col: 18, offset: 65414},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1799, col: 1, offset: 65500},
			expr: &actionExpr{
				pos: position{line: 1799, col: 24, offset: 65523},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1799, col: 24, offset: 65523},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1803, col: 1, offset: 65616},
			expr: &actionExpr{
				pos: position{line: 1803, col: 26, offset: 65641},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1803, col: 26, offset: 65641},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1810, col: 1, offset: 65851},
			expr: &actionExpr{
				pos: position{line: 1811, col: 5, offset: 65870},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1811, col: 5, offset: 65870},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1811, col: 5, offset: 65870},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1811, col: 16, offset: 65881},
								expr: &ruleRefExpr{
									pos:  position{line: 1811, col: 17, offset: 65882},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1812, col: 5, offset: 65905},
							run: (*parser).callonImageBlock6,
						},
						&litMatcher{
							pos:        position{line: 1816, col: 5, offset: 66038},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1816, col: 15, offset: 66048},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1816, col: 21, offset: 66054},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1816, col: 31, offset: 66064},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1816, col: 49, offset: 66082},
								name: "InlineImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1816, col: 72, offset: 66105},
							expr: &ruleRefExpr{
								pos:  position{line: 1816, col: 72, offset: 66105},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1816, col: 79, offset: 66112},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageBlockAttributes",
			pos:  position{line: 1821, col: 1, offset: 66327},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1821, col: 25, offset: 66351},
				expr: &actionExpr{
					pos: position{line: 1821, col: 26, offset: 66352},
					run: (*parser).callonImageBlockAttributes2,
					expr: &seqExpr{
						pos: position{line: 1821, col: 26, offset: 66352},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1821, col: 26, offset: 66352},
								expr: &ruleRefExpr{
									pos:  position{line: 1821, col: 27, offset: 66353},
									name: "VerseAttributes",
								},
							},
							&labeledExpr{
								pos:   position{line: 1821, col: 43, offset: 66369},
								label: "attribute",
								expr: &choiceExpr{
									pos: position{line: 1821, col: 54, offset: 66380},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1821, col: 54, offset: 66380},
											name: "ElementShortHandAttributes",
										},
										&ruleRefExpr{
											pos:  position{line: 1821, col: 83, offset: 66409},
											name: "ElementTitle",
										},
										&ruleRefExpr{
											pos:  position{line: 1821, col: 98, offset: 66424},
											name: "ElementID",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1823, col: 1, offset: 66465},
			expr: &actionExpr{
				pos: position{line: 1823, col: 18, offset: 66482},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1823, col: 18, offset: 66482},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1823, col: 18, offset: 66482},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 22, offset: 66486},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1823, col: 26, offset: 66490},
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 27, offset: 66491},
									name: "ImageAlt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 38, offset: 66502},
							label: "shortHands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1823, col: 49, offset: 66513},
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 50, offset: 66514},
									name: "ShortHandAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1823, col: 71, offset: 66535},
							expr: &seqExpr{
								pos: position{line: 1823, col: 72, offset: 66536},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1823, col: 72, offset: 66536},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1823, col: 76, offset: 66540},
										expr: &ruleRefExpr{
											pos:  position{line: 1823, col: 76, offset: 66540},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 85, offset: 66549},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1823, col: 91, offset: 66555},
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 92, offset: 66556},
									name: "ImageWidth",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1823, col: 105, offset: 66569},
							expr: &seqExpr{
								pos: position{line: 1823, col: 106, offset: 66570},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1823, col: 106, offset: 66570},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1823, col: 110, offset: 66574},
										expr: &ruleRefExpr{
											pos:  position{line: 1823, col: 110, offset: 66574},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 119, offset: 66583},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1823, col: 126, offset: 66590},
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 127, offset: 66591},
									name: "ImageHeight",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1823, col: 141, offset: 66605},
							expr: &seqExpr{
								pos: position{line: 1823, col: 142, offset: 66606},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1823, col: 142, offset: 66606},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1823, col: 146, offset: 66610},
										expr: &ruleRefExpr{
											pos:  position{line: 1823, col: 146, offset: 66610},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 155, offset: 66619},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1823, col: 163, offset: 66627},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1823, col: 180, offset: 66644},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1823, col: 184, offset: 66648},
							expr: &ruleRefExpr{
								pos:  position{line: 1823, col: 184, offset: 66648},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1823, col: 191, offset: 66655},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1827, col: 1, offset: 66727},
			expr: &actionExpr{
				pos: position{line: 1827, col: 16, offset: 66742},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1827, col: 16, offset: 66742},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1827, col: 16, offset: 66742},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1827, col: 25, offset: 66751},
							expr: &litMatcher{
								pos:        position{line: 1827, col: 26, offset: 66752},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1827, col: 30, offset: 66756},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1827, col: 36, offset: 66762},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1827, col: 46, offset: 66772},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1827, col: 64, offset: 66790},
								name: "InlineImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttributes",
			pos:  position{line: 1831, col: 1, offset: 66938},
			expr: &actionExpr{
				pos: position{line: 1832, col: 5, offset: 66969},
				run: (*parser).callonInlineImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1832, col: 5, offset: 66969},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 1832, col: 5, offset: 66969},
							run: (*parser).callonInlineImageAttributes3,
						},
						&litMatcher{
							pos:        position{line: 1835, col: 5, offset: 67020},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1836, col: 5, offset: 67028},
							label: "positionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1836, col: 26, offset: 67049},
								expr: &ruleRefExpr{
									pos:  position{line: 1836, col: 27, offset: 67050},
									name: "PositionalAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1837, col: 5, offset: 67076},
							label: "namedAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1837, col: 21, offset: 67092},
								expr: &ruleRefExpr{
									pos:  position{line: 1837, col: 22, offset: 67093},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1838, col: 5, offset: 67114},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1864, col: 1, offset: 68141},
			expr: &actionExpr{
				pos: position{line: 1864, col: 15, offset: 68155},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1864, col: 15, offset: 68155},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1864, col: 15, offset: 68155},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1864, col: 23, offset: 68163},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1864, col: 29, offset: 68169},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1864, col: 29, offset: 68169},
									expr: &charClassMatcher{
										pos:        position{line: 1864, col: 29, offset: 68169},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1864, col: 73, offset: 68213},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1864, col: 85, offset: 68225},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1868, col: 1, offset: 68298},
			expr: &actionExpr{
				pos: position{line: 1868, col: 19, offset: 68316},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1868, col: 19, offset: 68316},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1868, col: 19, offset: 68316},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1868, col: 23, offset: 68320},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1868, col: 28, offset: 68325},
								expr: &ruleRefExpr{
									pos:  position{line: 1868, col: 29, offset: 68326},
									name: "IconSize",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1868, col: 40, offset: 68337},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1868, col: 48, offset: 68345},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1868, col: 65, offset: 68362},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1873, col: 1, offset: 68455},
			expr: &actionExpr{
				pos: position{line: 1873, col: 13, offset: 68467},
				run: (*parser).callonIconSize1,
				expr: &seqExpr{
					pos: position{line: 1873, col: 13, offset: 68467},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1873, col: 13, offset: 68467},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1873, col: 20, offset: 68474},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1873, col: 36, offset: 68490},
							expr: &seqExpr{
								pos: position{line: 1873, col: 37, offset: 68491},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1873, col: 37, offset: 68491},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1873, col: 41, offset: 68495},
										expr: &ruleRefExpr{
											pos:  position{line: 1873, col: 41, offset: 68495},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1880, col: 1, offset: 68769},
			expr: &choiceExpr{
				pos: position{line: 1880, col: 19, offset: 68787},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1880, col: 19, offset: 68787},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1880, col: 19, offset: 68787},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1880, col: 19, offset: 68787},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1880, col: 32, offset: 68800},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1880, col: 41, offset: 68809},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1880, col: 58, offset: 68826},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1882, col: 5, offset: 68894},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1882, col: 5, offset: 68894},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1882, col: 5, offset: 68894},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1882, col: 17, offset: 68906},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1882, col: 22, offset: 68911},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1882, col: 35, offset: 68924},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1882, col: 39, offset: 68928},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1882, col: 47, offset: 68936},
										expr: &ruleRefExpr{
											pos:  position{line: 1882, col: 48, offset: 68937},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1882, col: 66, offset: 68955},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1886, col: 1, offset: 69016},
			expr: &ruleRefExpr{
				pos:  position{line: 1886, col: 16, offset: 69031},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1888, col: 1, offset: 69042},
			expr: &actionExpr{
				pos: position{line: 1888, col: 20, offset: 69061},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1888, col: 20, offset: 69061},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1888, col: 29, offset: 69070},
						expr: &seqExpr{
							pos: position{line: 1888, col: 30, offset: 69071},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1888, col: 30, offset: 69071},
									expr: &litMatcher{
										pos:        position{line: 1888, col: 31, offset: 69072},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1888, col: 35, offset: 69076},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1896, col: 1, offset: 69392},
			expr: &actionExpr{
				pos: position{line: 1896, col: 12, offset: 69403},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1896, col: 12, offset: 69403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1896, col: 12, offset: 69403},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1896, col: 16, offset: 69407},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1896, col: 21, offset: 69412},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1896, col: 21, offset: 69412},
									expr: &charClassMatcher{
										pos:        position{line: 1896, col: 21, offset: 69412},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1896, col: 69, offset: 69460},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1896, col: 73, offset: 69464},
							expr: &ruleRefExpr{
								pos:  position{line: 1896, col: 73, offset: 69464},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1896, col: 80, offset: 69471},
							expr: &choiceExpr{
								pos: position{line: 1896, col: 82, offset: 69473},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1896, col: 82, offset: 69473},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1896, col: 88, offset: 69479},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1900, col: 1, offset: 69532},
			expr: &actionExpr{
				pos: position{line: 1900, col: 20, offset: 69551},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1900, col: 20, offset: 69551},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1900, col: 20, offset: 69551},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1900, col: 25, offset: 69556},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1900, col: 48, offset: 69579},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1900, col: 61, offset: 69592},
								expr: &ruleRefExpr{
									pos:  position{line: 1900, col: 61, offset: 69592},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1904, col: 1, offset: 69689},
			expr: &actionExpr{
				pos: position{line: 1904, col: 26, offset: 69714},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1904, col: 26, offset: 69714},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1904, col: 26, offset: 69714},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1904, col: 30, offset: 69718},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1904, col: 35, offset: 69723},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1904, col: 35, offset: 69723},
									expr: &charClassMatcher{
										pos:        position{line: 1904, col: 35, offset: 69723},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1904, col: 83, offset: 69771},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1904, col: 87, offset: 69775},
							expr: &ruleRefExpr{
								pos:  position{line: 1904, col: 87, offset: 69775},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1913, col: 1, offset: 70022},
			expr: &actionExpr{
				pos: position{line: 1913, col: 18, offset: 70039},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1913, col: 18, offset: 70039},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1913, col: 19, offset: 70040},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1913, col: 19, offset: 70040},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1913, col: 27, offset: 70048},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1913, col: 37, offset: 70058},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1913, col: 45, offset: 70066},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1913, col: 55, offset: 70076},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1913, col: 63, offset: 70084},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1913, col: 72, offset: 70093},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1923, col: 1, offset: 70343},
			expr: &actionExpr{
				pos: position{line: 1923, col: 19, offset: 70361},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1923, col: 19, offset: 70361},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1923, col: 19, offset: 70361},
							expr: &ruleRefExpr{
								pos:  position{line: 1923, col: 20, offset: 70362},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1924, col: 5, offset: 70450},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1924, col: 12, offset: 70457},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1924, col: 12, offset: 70457},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1925, col: 11, offset: 70480},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1926, col: 11, offset: 70504},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1927, col: 11, offset: 70528},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1928, col: 11, offset: 70549},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1929, col: 11, offset: 70570},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1930, col: 11, offset: 70593},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1931, col: 11, offset: 70620},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1935, col: 1, offset: 70661},
			expr: &choiceExpr{
				pos: position{line: 1935, col: 19, offset: 70679},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1935, col: 19, offset: 70679},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1935, col: 19, offset: 70679},
								expr: &ruleRefExpr{
									pos:  position{line: 1935, col: 21, offset: 70681},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1935, col: 31, offset: 70691},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1936, col: 19, offset: 70762},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1937, col: 19, offset: 70802},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1938, col: 19, offset: 70843},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1939, col: 19, offset: 70884},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 19, offset: 70925},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1941, col: 19, offset: 70963},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1942, col: 19, offset: 71003},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1947, col: 1, offset: 71226},
			expr: &actionExpr{
				pos: position{line: 1947, col: 17, offset: 71242},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 17, offset: 71242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1947, col: 17, offset: 71242},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1947, col: 28, offset: 71253},
								expr: &ruleRefExpr{
									pos:  position{line: 1947, col: 29, offset: 71254},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1947, col: 47, offset: 71272},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1947, col: 74, offset: 71299},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1947, col: 82, offset: 71307},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1947, col: 106, offset: 71331},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1951, col: 1, offset: 71430},
			expr: &seqExpr{
				pos: position{line: 1951, col: 26, offset: 71455},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1951, col: 26, offset: 71455},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1951, col: 33, offset: 71462},
						expr: &ruleRefExpr{
							pos:  position{line: 1951, col: 33, offset: 71462},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1951, col: 40, offset: 71469},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1953, col: 1, offset: 71474},
			expr: &seqExpr{
				pos: position{line: 1953, col: 31, offset: 71504},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1953, col: 31, offset: 71504},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1953, col: 38, offset: 71511},
						expr: &ruleRefExpr{
							pos:  position{line: 1953, col: 38, offset: 71511},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1953, col: 45, offset: 71518},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1955, col: 1, offset: 71523},
			expr: &choiceExpr{
				pos: position{line: 1955, col: 29, offset: 71551},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1955, col: 30, offset: 71552},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1955, col: 30, offset: 71552},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1955, col: 37, offset: 71559},
								expr: &ruleRefExpr{
									pos:  position{line: 1955, col: 37, offset: 71559},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1955, col: 44, offset: 71566},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1955, col: 51, offset: 71573},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1957, col: 1, offset: 71578},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1957, col: 27, offset: 71604},
				expr: &actionExpr{
					pos: position{line: 1958, col: 8, offset: 71613},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1958, col: 8, offset: 71613},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1958, col: 8, offset: 71613},
								expr: &ruleRefExpr{
									pos:  position{line: 1958, col: 9, offset: 71614},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1959, col: 8, offset: 71647},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1959, col: 17, offset: 71656},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1959, col: 17, offset: 71656},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1960, col: 15, offset: 71680},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1961, col: 15, offset: 71705},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1962, col: 15, offset: 71733},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1963, col: 15, offset: 71764},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1964, col: 15, offset: 71797},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1965, col: 15, offset: 71828},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1966, col: 15, offset: 71867},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1967, col: 15, offset: 71894},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1968, col: 15, offset: 71922},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1969, col: 15, offset: 71947},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1970, col: 15, offset: 71972},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1971, col: 15, offset: 71999},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1972, col: 15, offset: 72031},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1973, col: 15, offset: 72062},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1974, col: 15, offset: 72082},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1975, col: 15, offset: 72109},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1976, col: 15, offset: 72137},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1977, col: 15, offset: 72164},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1984, col: 1, offset: 72420},
			expr: &actionExpr{
				pos: position{line: 1984, col: 15, offset: 72434},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1984, col: 15, offset: 72434},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1984, col: 15, offset: 72434},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1984, col: 26, offset: 72445},
								expr: &ruleRefExpr{
									pos:  position{line: 1984, col: 27, offset: 72446},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1985, col: 5, offset: 72469},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1993, col: 5, offset: 72779},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1993, col: 30, offset: 72804},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1993, col: 39, offset: 72813},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1993, col: 61, offset: 72835},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1997, col: 1, offset: 72939},
			expr: &seqExpr{
				pos: position{line: 1997, col: 24, offset: 72962},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1997, col: 24, offset: 72962},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1997, col: 31, offset: 72969},
						expr: &ruleRefExpr{
							pos:  position{line: 1997, col: 31, offset: 72969},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1997, col: 38, offset: 72976},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1999, col: 1, offset: 73006},
			expr: &seqExpr{
				pos: position{line: 1999, col: 29, offset: 73034},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1999, col: 29, offset: 73034},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1999, col: 36, offset: 73041},
						expr: &ruleRefExpr{
							pos:  position{line: 1999, col: 36, offset: 73041},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 43, offset: 73048},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 2001, col: 1, offset: 73078},
			expr: &choiceExpr{
				pos: position{line: 2001, col: 27, offset: 73104},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2001, col: 28, offset: 73105},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2001, col: 28, offset: 73105},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2001, col: 35, offset: 73112},
								expr: &ruleRefExpr{
									pos:  position{line: 2001, col: 35, offset: 73112},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2001, col: 42, offset: 73119},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2001, col: 49, offset: 73126},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 2003, col: 1, offset: 73156},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2003, col: 25, offset: 73180},
				expr: &actionExpr{
					pos: position{line: 2004, col: 8, offset: 73189},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2004, col: 8, offset: 73189},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2004, col: 8, offset: 73189},
								expr: &ruleRefExpr{
									pos:  position{line: 2004, col: 9, offset: 73190},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2005, col: 8, offset: 73221},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 2005, col: 17, offset: 73230},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2005, col: 17, offset: 73230},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 2006, col: 15, offset: 73254},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2007, col: 15, offset: 73279},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 2008, col: 15, offset: 73307},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 2009, col: 15, offset: 73338},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 2010, col: 15, offset: 73371},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 2011, col: 15, offset: 73402},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 2012, col: 15, offset: 73441},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2013, col: 15, offset: 73468},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2014, col: 15, offset: 73496},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2015, col: 15, offset: 73521},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2016, col: 15, offset: 73548},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2017, col: 15, offset: 73575},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 2018, col: 15, offset: 73607},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2019, col: 15, offset: 73638},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 2020, col: 15, offset: 73658},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2021, col: 15, offset: 73685},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2022, col: 15, offset: 73713},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 2023, col: 15, offset: 73740},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 2030, col: 1, offset: 73998},
			expr: &actionExpr{
				pos: position{line: 2030, col: 17, offset: 74014},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 2030, col: 17, offset: 74014},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2030, col: 17, offset: 74014},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2030, col: 28, offset: 74025},
								expr: &ruleRefExpr{
									pos:  position{line: 2030, col: 29, offset: 74026},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2030, col: 47, offset: 74044},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2030, col: 74, offset: 74071},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2030, col: 83, offset: 74080},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2030, col: 107, offset: 74104},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 2034, col: 1, offset: 74204},
			expr: &seqExpr{
				pos: position{line: 2034, col: 26, offset: 74229},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2034, col: 26, offset: 74229},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2034, col: 33, offset: 74236},
						expr: &ruleRefExpr{
							pos:  position{line: 2034, col: 33, offset: 74236},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 40, offset: 74243},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 2036, col: 1, offset: 74248},
			expr: &seqExpr{
				pos: position{line: 2036, col: 31, offset: 74278},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2036, col: 31, offset: 74278},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2036, col: 38, offset: 74285},
						expr: &ruleRefExpr{
							pos:  position{line: 2036, col: 38, offset: 74285},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2036, col: 45, offset: 74292},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 2038, col: 1, offset: 74297},
			expr: &choiceExpr{
				pos: position{line: 2038, col: 29, offset: 74325},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2038, col: 30, offset: 74326},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2038, col: 30, offset: 74326},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2038, col: 37, offset: 74333},
								expr: &ruleRefExpr{
									pos:  position{line: 2038, col: 37, offset: 74333},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2038, col: 44, offset: 74340},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2038, col: 51, offset: 74347},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 2040, col: 1, offset: 74352},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2040, col: 27, offset: 74378},
				expr: &actionExpr{
					pos: position{line: 2041, col: 8, offset: 74387},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2041, col: 8, offset: 74387},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2041, col: 8, offset: 74387},
								expr: &ruleRefExpr{
									pos:  position{line: 2041, col: 9, offset: 74388},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2042, col: 8, offset: 74421},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 2042, col: 17, offset: 74430},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2042, col: 17, offset: 74430},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 2043, col: 15, offset: 74454},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2044, col: 15, offset: 74479},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 2045, col: 15, offset: 74507},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 2046, col: 15, offset: 74538},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 2047, col: 15, offset: 74571},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 2048, col: 15, offset: 74602},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 2049, col: 15, offset: 74641},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2050, col: 15, offset: 74668},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2051, col: 15, offset: 74695},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2052, col: 15, offset: 74721},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2053, col: 15, offset: 74748},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2054, col: 15, offset: 74773},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 2055, col: 15, offset: 74805},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2056, col: 15, offset: 74836},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 2057, col: 15, offset: 74856},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2058, col: 15, offset: 74883},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 2059, col: 15, offset: 74911},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 2060, col: 15, offset: 74938},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 2067, col: 1, offset: 75195},
			expr: &actionExpr{
				pos: position{line: 2067, col: 16, offset: 75210},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 2067, col: 16, offset: 75210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2067, col: 16, offset: 75210},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2067, col: 27, offset: 75221},
								expr: &ruleRefExpr{
									pos:  position{line: 2067, col: 28, offset: 75222},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2067, col: 46, offset: 75240},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2067, col: 72, offset: 75266},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2067, col: 81, offset: 75275},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2067, col: 104, offset: 75298},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 2071, col: 1, offset: 75396},
			expr: &seqExpr{
				pos: position{line: 2071, col: 25, offset: 75420},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2071, col: 25, offset: 75420},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2071, col: 31, offset: 75426},
						expr: &ruleRefExpr{
							pos:  position{line: 2071, col: 31, offset: 75426},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2071, col: 38, offset: 75433},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 2073, col: 1, offset: 75493},
			expr: &seqExpr{
				pos: position{line: 2073, col: 30, offset: 75522},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2073, col: 30, offset: 75522},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2073, col: 36, offset: 75528},
						expr: &ruleRefExpr{
							pos:  position{line: 2073, col: 36, offset: 75528},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2073, col: 43, offset: 75535},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 2075, col: 1, offset: 75540},
			expr: &choiceExpr{
				pos: position{line: 2075, col: 28, offset: 75567},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2075, col: 29, offset: 75568},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2075, col: 29, offset: 75568},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2075, col: 35, offset: 75574},
								expr: &ruleRefExpr{
									pos:  position{line: 2075, col: 35, offset: 75574},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2075, col: 42, offset: 75581},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2075, col: 49, offset: 75588},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 2077, col: 1, offset: 75593},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2077, col: 26, offset: 75618},
				expr: &actionExpr{
					pos: position{line: 2077, col: 27, offset: 75619},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2077, col: 27, offset: 75619},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2077, col: 27, offset: 75619},
								expr: &ruleRefExpr{
									pos:  position{line: 2077, col: 28, offset: 75620},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2077, col: 52, offset: 75644},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2077, col: 58, offset: 75650},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 2084, col: 1, offset: 75884},
			expr: &actionExpr{
				pos: position{line: 2084, col: 17, offset: 75900},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 2084, col: 17, offset: 75900},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2084, col: 17, offset: 75900},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2084, col: 28, offset: 75911},
								expr: &ruleRefExpr{
									pos:  position{line: 2084, col: 29, offset: 75912},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2084, col: 47, offset: 75930},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2084, col: 74, offset: 75957},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2084, col: 83, offset: 75966},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2084, col: 107, offset: 75990},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 2088, col: 1, offset: 76090},
			expr: &seqExpr{
				pos: position{line: 2088, col: 26, offset: 76115},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2088, col: 26, offset: 76115},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2088, col: 33, offset: 76122},
						expr: &ruleRefExpr{
							pos:  position{line: 2088, col: 33, offset: 76122},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2088, col: 40, offset: 76129},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 2090, col: 1, offset: 76134},
			expr: &seqExpr{
				pos: position{line: 2090, col: 31, offset: 76164},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2090, col: 31, offset: 76164},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2090, col: 38, offset: 76171},
						expr: &ruleRefExpr{
							pos:  position{line: 2090, col: 38, offset: 76171},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2090, col: 45, offset: 76178},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 2092, col: 1, offset: 76183},
			expr: &choiceExpr{
				pos: position{line: 2092, col: 29, offset: 76211},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2092, col: 30, offset: 76212},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2092, col: 30, offset: 76212},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2092, col: 37, offset: 76219},
								expr: &ruleRefExpr{
									pos:  position{line: 2092, col: 37, offset: 76219},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2092, col: 44, offset: 76226},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2092, col: 51, offset: 76233},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 2094, col: 1, offset: 76238},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2094, col: 27, offset: 76264},
				expr: &actionExpr{
					pos: position{line: 2094, col: 28, offset: 76265},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2094, col: 28, offset: 76265},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2094, col: 28, offset: 76265},
								expr: &ruleRefExpr{
									pos:  position{line: 2094, col: 29, offset: 76266},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2094, col: 54, offset: 76291},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2094, col: 60, offset: 76297},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 2101, col: 1, offset: 76529},
			expr: &actionExpr{
				pos: position{line: 2101, col: 15, offset: 76543},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 2101, col: 15, offset: 76543},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2101, col: 15, offset: 76543},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2101, col: 26, offset: 76554},
								expr: &ruleRefExpr{
									pos:  position{line: 2101, col: 27, offset: 76555},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2102, col: 5, offset: 76578},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 2106, col: 5, offset: 76739},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2106, col: 30, offset: 76764},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2106, col: 39, offset: 76773},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2106, col: 61, offset: 76795},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 2110, col: 1, offset: 76899},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2110, col: 25, offset: 76923},
				expr: &actionExpr{
					pos: position{line: 2110, col: 26, offset: 76924},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2110, col: 26, offset: 76924},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2110, col: 26, offset: 76924},
								expr: &ruleRefExpr{
									pos:  position{line: 2110, col: 27, offset: 76925},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2110, col: 50, offset: 76948},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2110, col: 56, offset: 76954},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 2117, col: 1, offset: 77192},
			expr: &actionExpr{
				pos: position{line: 2117, col: 21, offset: 77212},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 2117, col: 21, offset: 77212},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2117, col: 21, offset: 77212},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2117, col: 32, offset: 77223},
								expr: &ruleRefExpr{
									pos:  position{line: 2117, col: 33, offset: 77224},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2117, col: 51, offset: 77242},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2117, col: 82, offset: 77273},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2117, col: 91, offset: 77282},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2117, col: 119, offset: 77310},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 2121, col: 1, offset: 77418},
			expr: &seqExpr{
				pos: position{line: 2121, col: 30, offset: 77447},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2121, col: 30, offset: 77447},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2121, col: 37, offset: 77454},
						expr: &ruleRefExpr{
							pos:  position{line: 2121, col: 37, offset: 77454},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2121, col: 44, offset: 77461},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 2123, col: 1, offset: 77466},
			expr: &seqExpr{
				pos: position{line: 2123, col: 35, offset: 77500},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2123, col: 35, offset: 77500},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2123, col: 42, offset: 77507},
						expr: &ruleRefExpr{
							pos:  position{line: 2123, col: 42, offset: 77507},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2123, col: 49, offset: 77514},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 2125, col: 1, offset: 77519},
			expr: &choiceExpr{
				pos: position{line: 2125, col: 33, offset: 77551},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2125, col: 34, offset: 77552},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2125, col: 34, offset: 77552},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2125, col: 41, offset: 77559},
								expr: &ruleRefExpr{
									pos:  position{line: 2125, col: 41, offset: 77559},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2125, col: 48, offset: 77566},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2125, col: 55, offset: 77573},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 2127, col: 1, offset: 77578},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2127, col: 31, offset: 77608},
				expr: &actionExpr{
					pos: position{line: 2127, col: 32, offset: 77609},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2127, col: 32, offset: 77609},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2127, col: 32, offset: 77609},
								expr: &ruleRefExpr{
									pos:  position{line: 2127, col: 33, offset: 77610},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2127, col: 62, offset: 77639},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2127, col: 68, offset: 77645},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 2134, col: 1, offset: 77879},
			expr: &seqExpr{
				pos: position{line: 2134, col: 26, offset: 77904},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2134, col: 26, offset: 77904},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2134, col: 33, offset: 77911},
						expr: &ruleRefExpr{
							pos:  position{line: 2134, col: 33, offset: 77911},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2134, col: 40, offset: 77918},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 2136, col: 1, offset: 77923},
			expr: &seqExpr{
				pos: position{line: 2136, col: 31, offset: 77953},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2136, col: 31, offset: 77953},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2136, col: 38, offset: 77960},
						expr: &ruleRefExpr{
							pos:  position{line: 2136, col: 38, offset: 77960},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2136, col: 45, offset: 77967},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 2138, col: 1, offset: 77972},
			expr: &choiceExpr{
				pos: position{line: 2138, col: 29, offset: 78000},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2138, col: 30, offset: 78001},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2138, col: 30, offset: 78001},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2138, col: 37, offset: 78008},
								expr: &ruleRefExpr{
									pos:  position{line: 2138, col: 37, offset: 78008},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2138, col: 44, offset: 78015},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2138, col: 51, offset: 78022},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 2140, col: 1, offset: 78027},
			expr: &actionExpr{
				pos: position{line: 2140, col: 17, offset: 78043},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 2140, col: 17, offset: 78043},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2140, col: 17, offset: 78043},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2140, col: 44, offset: 78070},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2140, col: 53, offset: 78079},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2140, col: 78, offset: 78104},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 2144, col: 1, offset: 78197},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2144, col: 27, offset: 78223},
				expr: &actionExpr{
					pos: position{line: 2144, col: 28, offset: 78224},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2144, col: 28, offset: 78224},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2144, col: 28, offset: 78224},
								expr: &ruleRefExpr{
									pos:  position{line: 2144, col: 29, offset: 78225},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2144, col: 54, offset: 78250},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2144, col: 60, offset: 78256},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 2148, col: 1, offset: 78294},
			expr: &actionExpr{
				pos: position{line: 2148, col: 22, offset: 78315},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 2148, col: 22, offset: 78315},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2148, col: 22, offset: 78315},
							expr: &ruleRefExpr{
								pos:  position{line: 2148, col: 23, offset: 78316},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 2148, col: 45, offset: 78338},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 2148, col: 50, offset: 78343},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2148, col: 59, offset: 78352},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2148, col: 85, offset: 78378},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 2152, col: 1, offset: 78443},
			expr: &actionExpr{
				pos: position{line: 2152, col: 29, offset: 78471},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2152, col: 29, offset: 78471},
					expr: &charClassMatcher{
						pos:        position{line: 2152, col: 29, offset: 78471},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 2160, col: 1, offset: 78760},
			expr: &choiceExpr{
				pos: position{line: 2160, col: 17, offset: 78776},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2160, col: 17, offset: 78776},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 2161, col: 19, offset: 78805},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 2162, col: 19, offset: 78836},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 2163, col: 19, offset: 78860},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 2164, col: 19, offset: 78897},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 2165, col: 19, offset: 78931},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 2166, col: 19, offset: 78965},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 2167, col: 19, offset: 79000},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 2168, col: 19, offset: 79034},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 2169, col: 19, offset: 79071},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 2171, col: 1, offset: 79082},
			expr: &actionExpr{
				pos: position{line: 2171, col: 23, offset: 79104},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 2171, col: 23, offset: 79104},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2171, col: 23, offset: 79104},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 2171, col: 32, offset: 79113},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 2171, col: 37, offset: 79118},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2171, col: 37, offset: 79118},
									expr: &charClassMatcher{
										pos:        position{line: 2171, col: 37, offset: 79118},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2171, col: 76, offset: 79157},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 2176, col: 1, offset: 79309},
			expr: &seqExpr{
				pos: position{line: 2177, col: 5, offset: 79339},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2177, col: 5, offset: 79339},
						expr: &choiceExpr{
							pos: position{line: 2177, col: 6, offset: 79340},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2177, col: 6, offset: 79340},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 2178, col: 11, offset: 79369},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 2179, col: 11, offset: 79430},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 2180, col: 11, offset: 79459},
									expr: &ruleRefExpr{
										pos:  position{line: 2180, col: 11, offset: 79459},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2181, col: 11, offset: 79477},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2182, col: 11, offset: 79495},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2182, col: 21, offset: 79505},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 2185, col: 1, offset: 79626},
			expr: &seqExpr{
				pos: position{line: 2186, col: 5, offset: 79655},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2186, col: 5, offset: 79655},
						expr: &choiceExpr{
							pos: position{line: 2186, col: 6, offset: 79656},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2186, col: 6, offset: 79656},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 2187, col: 11, offset: 79717},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2188, col: 11, offset: 79744},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 2189, col: 11, offset: 79773},
									expr: &ruleRefExpr{
										pos:  position{line: 2189, col: 11, offset: 79773},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2190, col: 11, offset: 79790},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2191, col: 11, offset: 79808},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2191, col: 21, offset: 79818},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 2194, col: 1, offset: 79872},
			expr: &seqExpr{
				pos: position{line: 2195, col: 5, offset: 79895},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2195, col: 5, offset: 79895},
						expr: &choiceExpr{
							pos: position{line: 2195, col: 6, offset: 79896},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2195, col: 6, offset: 79896},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 2196, col: 11, offset: 79957},
									expr: &ruleRefExpr{
										pos:  position{line: 2196, col: 11, offset: 79957},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2197, col: 11, offset: 79975},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2198, col: 11, offset: 79997},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2199, col: 11, offset: 80020},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 2200, col: 11, offset: 80049},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2201, col: 11, offset: 80067},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2201, col: 21, offset: 80077},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 2204, col: 1, offset: 80135},
			expr: &seqExpr{
				pos: position{line: 2205, col: 5, offset: 80157},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2205, col: 5, offset: 80157},
						expr: &choiceExpr{
							pos: position{line: 2205, col: 6, offset: 80158},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2205, col: 6, offset: 80158},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 2206, col: 11, offset: 80219},
									expr: &ruleRefExpr{
										pos:  position{line: 2206, col: 11, offset: 80219},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2207, col: 11, offset: 80237},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 2208, col: 11, offset: 80269},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 2209, col: 11, offset: 80298},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2210, col: 11, offset: 80316},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2210, col: 21, offset: 80326},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 2213, col: 1, offset: 80380},
			expr: &seqExpr{
				pos: position{line: 2214, col: 5, offset: 80404},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2214, col: 5, offset: 80404},
						expr: &choiceExpr{
							pos: position{line: 2214, col: 6, offset: 80405},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2214, col: 6, offset: 80405},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 2215, col: 11, offset: 80466},
									expr: &ruleRefExpr{
										pos:  position{line: 2215, col: 11, offset: 80466},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2216, col: 11, offset: 80484},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 2217, col: 11, offset: 80507},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 2218, col: 11, offset: 80536},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2219, col: 11, offset: 80554},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2219, col: 21, offset: 80564},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 2222, col: 1, offset: 80644},
			expr: &actionExpr{
				pos: position{line: 2222, col: 27, offset: 80670},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 2222, col: 27, offset: 80670},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2222, col: 27, offset: 80670},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2222, col: 33, offset: 80676},
								expr: &ruleRefExpr{
									pos:  position{line: 2222, col: 34, offset: 80677},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2222, col: 54, offset: 80697},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 2226, col: 1, offset: 80764},
			expr: &actionExpr{
				pos: position{line: 2227, col: 5, offset: 80790},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 2227, col: 5, offset: 80790},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2227, col: 5, offset: 80790},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2227, col: 14, offset: 80799},
								expr: &choiceExpr{
									pos: position{line: 2227, col: 15, offset: 80800},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2227, col: 15, offset: 80800},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 2228, col: 11, offset: 80861},
											expr: &ruleRefExpr{
												pos:  position{line: 2228, col: 11, offset: 80861},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2229, col: 11, offset: 80879},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 2230, col: 11, offset: 80902},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2231, col: 11, offset: 80931},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2231, col: 21, offset: 80941},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 2235, col: 1, offset: 81012},
			expr: &actionExpr{
				pos: position{line: 2235, col: 29, offset: 81040},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 2235, col: 29, offset: 81040},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2235, col: 29, offset: 81040},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 2235, col: 35, offset: 81046},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 2235, col: 43, offset: 81054},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2235, col: 44, offset: 81055},
									expr: &charClassMatcher{
										pos:        position{line: 2235, col: 44, offset: 81055},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2237, col: 8, offset: 81105},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 2242, col: 1, offset: 81192},
			expr: &seqExpr{
				pos: position{line: 2243, col: 5, offset: 81216},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2243, col: 5, offset: 81216},
						expr: &choiceExpr{
							pos: position{line: 2243, col: 6, offset: 81217},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2243, col: 6, offset: 81217},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 2244, col: 11, offset: 81278},
									expr: &ruleRefExpr{
										pos:  position{line: 2244, col: 11, offset: 81278},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2245, col: 11, offset: 81296},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 2246, col: 11, offset: 81314},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 2247, col: 11, offset: 81343},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2248, col: 11, offset: 81361},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2248, col: 21, offset: 81371},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 2252, col: 1, offset: 81519},
			expr: &seqExpr{
				pos: position{line: 2252, col: 24, offset: 81542},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2252, col: 24, offset: 81542},
						expr: &choiceExpr{
							pos: position{line: 2253, col: 5, offset: 81548},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2253, col: 5, offset: 81548},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 2254, col: 7, offset: 81605},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 2255, col: 7, offset: 81630},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 2256, col: 7, offset: 81673},
									expr: &ruleRefExpr{
										pos:  position{line: 2256, col: 7, offset: 81673},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2257, col: 7, offset: 81687},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2258, col: 7, offset: 81701},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2258, col: 17, offset: 81711},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 2261, col: 1, offset: 81768},
			expr: &seqExpr{
				pos: position{line: 2262, col: 5, offset: 81788},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2262, col: 5, offset: 81788},
						expr: &choiceExpr{
							pos: position{line: 2262, col: 6, offset: 81789},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2262, col: 6, offset: 81789},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 2263, col: 11, offset: 81850},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 2264, col: 11, offset: 81879},
									expr: &ruleRefExpr{
										pos:  position{line: 2264, col: 11, offset: 81879},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2265, col: 11, offset: 81896},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 2266, col: 11, offset: 81914},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2267, col: 11, offset: 81932},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2267, col: 21, offset: 81942},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 2270, col: 1, offset: 81994},
			expr: &seqExpr{
				pos: position{line: 2270, col: 13, offset: 82006},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2270, col: 13, offset: 82006},
						expr: &choiceExpr{
							pos: position{line: 2271, col: 5, offset: 82012},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2271, col: 5, offset: 82012},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2272, col: 8, offset: 82039},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 2272, col: 8, offset: 82039},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2272, col: 8, offset: 82039},
												expr: &ruleRefExpr{
													pos:  position{line: 2272, col: 9, offset: 82040},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2272, col: 13, offset: 82044},
												expr: &charClassMatcher{
													pos:        position{line: 2272, col: 13, offset: 82044},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2272, col: 22, offset: 82053},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2274, col: 10, offset: 82158},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2279, col: 1, offset: 82351},
			expr: &actionExpr{
				pos: position{line: 2279, col: 10, offset: 82360},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2279, col: 10, offset: 82360},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2279, col: 10, offset: 82360},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2279, col: 21, offset: 82371},
								expr: &ruleRefExpr{
									pos:  position{line: 2279, col: 22, offset: 82372},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2279, col: 40, offset: 82390},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2280, col: 5, offset: 82409},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2280, col: 12, offset: 82416},
								expr: &ruleRefExpr{
									pos:  position{line: 2280, col: 13, offset: 82417},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2281, col: 5, offset: 82439},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2281, col: 11, offset: 82445},
								expr: &ruleRefExpr{
									pos:  position{line: 2281, col: 12, offset: 82446},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2282, col: 6, offset: 82463},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2282, col: 6, offset: 82463},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2282, col: 23, offset: 82480},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 2286, col: 1, offset: 82599},
			expr: &seqExpr{
				pos: position{line: 2286, col: 23, offset: 82621},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2286, col: 23, offset: 82621},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2286, col: 27, offset: 82625},
						expr: &ruleRefExpr{
							pos:  position{line: 2286, col: 27, offset: 82625},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2288, col: 1, offset: 82633},
			expr: &seqExpr{
				pos: position{line: 2288, col: 19, offset: 82651},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2288, col: 19, offset: 82651},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2288, col: 26, offset: 82658},
						expr: &ruleRefExpr{
							pos:  position{line: 2288, col: 26, offset: 82658},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2288, col: 33, offset: 82665},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2291, col: 1, offset: 82733},
			expr: &actionExpr{
				pos: position{line: 2291, col: 20, offset: 82752},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2291, col: 20, offset: 82752},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2291, col: 20, offset: 82752},
							expr: &ruleRefExpr{
								pos:  position{line: 2291, col: 21, offset: 82753},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2291, col: 36, offset: 82768},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2291, col: 42, offset: 82774},
								expr: &ruleRefExpr{
									pos:  position{line: 2291, col: 43, offset: 82775},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2291, col: 55, offset: 82787},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 2291, col: 59, offset: 82791},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2295, col: 1, offset: 82859},
			expr: &actionExpr{
				pos: position{line: 2295, col: 14, offset: 82872},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2295, col: 14, offset: 82872},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2295, col: 14, offset: 82872},
							expr: &ruleRefExpr{
								pos:  position{line: 2295, col: 15, offset: 82873},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2295, col: 30, offset: 82888},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2295, col: 36, offset: 82894},
								expr: &ruleRefExpr{
									pos:  position{line: 2295, col: 37, offset: 82895},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2295, col: 49, offset: 82907},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2295, col: 53, offset: 82911},
							expr: &ruleRefExpr{
								pos:  position{line: 2295, col: 53, offset: 82911},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2299, col: 1, offset: 82980},
			expr: &actionExpr{
				pos: position{line: 2299, col: 14, offset: 82993},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2299, col: 14, offset: 82993},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2299, col: 14, offset: 82993},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 2299, col: 33, offset: 83012},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2299, col: 42, offset: 83021},
								expr: &seqExpr{
									pos: position{line: 2299, col: 43, offset: 83022},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2299, col: 43, offset: 83022},
											expr: &ruleRefExpr{
												pos:  position{line: 2299, col: 44, offset: 83023},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 2299, col: 63, offset: 83042},
											expr: &ruleRefExpr{
												pos:  position{line: 2299, col: 64, offset: 83043},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2299, col: 68, offset: 83047},
											expr: &ruleRefExpr{
												pos:  position{line: 2299, col: 68, offset: 83047},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2299, col: 75, offset: 83054},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2299, col: 89, offset: 83068},
											expr: &ruleRefExpr{
												pos:  position{line: 2299, col: 89, offset: 83068},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2306, col: 1, offset: 83394},
			expr: &choiceExpr{
				pos: position{line: 2306, col: 17, offset: 83410},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2306, col: 17, offset: 83410},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2306, col: 49, offset: 83442},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2306, col: 78, offset: 83471},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2308, col: 1, offset: 83507},
			expr: &litMatcher{
				pos:        position{line: 2308, col: 26, offset: 83532},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2311, col: 1, offset: 83604},
			expr: &actionExpr{
				pos: position{line: 2311, col: 31, offset: 83634},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2311, col: 31, offset: 83634},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2311, col: 31, offset: 83634},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2311, col: 42, offset: 83645},
								expr: &ruleRefExpr{
									pos:  position{line: 2311, col: 43, offset: 83646},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2311, col: 61, offset: 83664},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2311, col: 68, offset: 83671},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2316, col: 1, offset: 83901},
			expr: &actionExpr{
				pos: position{line: 2317, col: 5, offset: 83941},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2317, col: 5, offset: 83941},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2317, col: 5, offset: 83941},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 2317, col: 16, offset: 83952},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2318, col: 5, offset: 83988},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2318, col: 16, offset: 83999},
								expr: &ruleRefExpr{
									pos:  position{line: 2318, col: 17, offset: 84000},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 2322, col: 1, offset: 84109},
			expr: &actionExpr{
				pos: position{line: 2322, col: 35, offset: 84143},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 2322, col: 35, offset: 84143},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2322, col: 35, offset: 84143},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2322, col: 41, offset: 84149},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 2322, col: 41, offset: 84149},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2322, col: 41, offset: 84149},
											expr: &ruleRefExpr{
												pos:  position{line: 2322, col: 41, offset: 84149},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2322, col: 48, offset: 84156},
											expr: &charClassMatcher{
												pos:        position{line: 2322, col: 48, offset: 84156},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2324, col: 8, offset: 84222},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2329, col: 1, offset: 84362},
			expr: &actionExpr{
				pos: position{line: 2329, col: 39, offset: 84400},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2329, col: 39, offset: 84400},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2329, col: 39, offset: 84400},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2329, col: 50, offset: 84411},
								expr: &ruleRefExpr{
									pos:  position{line: 2329, col: 51, offset: 84412},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2330, col: 9, offset: 84438},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2330, col: 31, offset: 84460},
							expr: &ruleRefExpr{
								pos:  position{line: 2330, col: 31, offset: 84460},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2330, col: 38, offset: 84467},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2330, col: 46, offset: 84475},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2330, col: 53, offset: 84482},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2330, col: 95, offset: 84524},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2330, col: 96, offset: 84525},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2330, col: 96, offset: 84525},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2330, col: 118, offset: 84547},
											expr: &ruleRefExpr{
												pos:  position{line: 2330, col: 118, offset: 84547},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2330, col: 125, offset: 84554},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2330, col: 132, offset: 84561},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2335, col: 1, offset: 84720},
			expr: &actionExpr{
				pos: position{line: 2335, col: 44, offset: 84763},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2335, col: 44, offset: 84763},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2335, col: 50, offset: 84769},
						expr: &ruleRefExpr{
							pos:  position{line: 2335, col: 51, offset: 84770},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2339, col: 1, offset: 84854},
			expr: &actionExpr{
				pos: position{line: 2340, col: 5, offset: 84909},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2340, col: 5, offset: 84909},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2340, col: 5, offset: 84909},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2340, col: 11, offset: 84915},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2340, col: 11, offset: 84915},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2340, col: 11, offset: 84915},
											expr: &ruleRefExpr{
												pos:  position{line: 2340, col: 12, offset: 84916},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2340, col: 34, offset: 84938},
											expr: &charClassMatcher{
												pos:        position{line: 2340, col: 34, offset: 84938},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2342, col: 8, offset: 85004},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2347, col: 1, offset: 85130},
			expr: &actionExpr{
				pos: position{line: 2348, col: 5, offset: 85168},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2348, col: 5, offset: 85168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2348, col: 5, offset: 85168},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2348, col: 16, offset: 85179},
								expr: &ruleRefExpr{
									pos:  position{line: 2348, col: 17, offset: 85180},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2349, col: 5, offset: 85202},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2352, col: 5, offset: 85313},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2352, col: 11, offset: 85319},
								expr: &ruleRefExpr{
									pos:  position{line: 2352, col: 12, offset: 85320},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2356, col: 1, offset: 85457},
			expr: &actionExpr{
				pos: position{line: 2356, col: 16, offset: 85472},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2356, col: 16, offset: 85472},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2360, col: 1, offset: 85518},
			expr: &actionExpr{
				pos: position{line: 2360, col: 25, offset: 85542},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2360, col: 25, offset: 85542},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2360, col: 25, offset: 85542},
							expr: &ruleRefExpr{
								pos:  position{line: 2360, col: 26, offset: 85543},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2360, col: 36, offset: 85553},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2360, col: 45, offset: 85562},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2360, col: 45, offset: 85562},
									expr: &charClassMatcher{
										pos:        position{line: 2360, col: 45, offset: 85562},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2362, col: 4, offset: 85620},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2369, col: 1, offset: 85797},
			expr: &actionExpr{
				pos: position{line: 2369, col: 14, offset: 85810},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2369, col: 14, offset: 85810},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2369, col: 14, offset: 85810},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2369, col: 19, offset: 85815},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2369, col: 25, offset: 85821},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2369, col: 43, offset: 85839},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2373, col: 1, offset: 85904},
			expr: &actionExpr{
				pos: position{line: 2373, col: 21, offset: 85924},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2373, col: 21, offset: 85924},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2373, col: 30, offset: 85933},
						expr: &choiceExpr{
							pos: position{line: 2373, col: 31, offset: 85934},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2373, col: 31, offset: 85934},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2373, col: 38, offset: 85941},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2373, col: 53, offset: 85956},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2373, col: 66, offset: 85969},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2373, col: 74, offset: 85977},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2373, col: 93, offset: 85996},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2373, col: 114, offset: 86017},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2373, col: 115, offset: 86018},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2373, col: 115, offset: 86018},
												expr: &litMatcher{
													pos:        position{line: 2373, col: 116, offset: 86019},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2373, col: 121, offset: 86024,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2379, col: 1, offset: 86130},
			expr: &actionExpr{
				pos: position{line: 2379, col: 23, offset: 86152},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2379, col: 23, offset: 86152},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2379, col: 23, offset: 86152},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2379, col: 29, offset: 86158},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2379, col: 36, offset: 86165},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2380, col: 5, offset: 86197},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2380, col: 11, offset: 86203},
								expr: &actionExpr{
									pos: position{line: 2380, col: 12, offset: 86204},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2380, col: 12, offset: 86204},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2380, col: 12, offset: 86204},
												expr: &ruleRefExpr{
													pos:  position{line: 2380, col: 12, offset: 86204},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2380, col: 19, offset: 86211},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2380, col: 23, offset: 86215},
												expr: &ruleRefExpr{
													pos:  position{line: 2380, col: 23, offset: 86215},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2380, col: 30, offset: 86222},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2380, col: 39, offset: 86231},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2381, col: 5, offset: 86289},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2381, col: 11, offset: 86295},
								expr: &actionExpr{
									pos: position{line: 2381, col: 12, offset: 86296},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2381, col: 12, offset: 86296},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2381, col: 12, offset: 86296},
												expr: &ruleRefExpr{
													pos:  position{line: 2381, col: 12, offset: 86296},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2381, col: 19, offset: 86303},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2381, col: 23, offset: 86307},
												expr: &ruleRefExpr{
													pos:  position{line: 2381, col: 23, offset: 86307},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2381, col: 30, offset: 86314},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2381, col: 39, offset: 86323},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2382, col: 5, offset: 86381},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2386, col: 1, offset: 86460},
			expr: &actionExpr{
				pos: position{line: 2386, col: 30, offset: 86489},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2386, col: 30, offset: 86489},
					expr: &choiceExpr{
						pos: position{line: 2386, col: 31, offset: 86490},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2386, col: 31, offset: 86490},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2386, col: 42, offset: 86501},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2393, col: 1, offset: 86650},
			expr: &actionExpr{
				pos: position{line: 2393, col: 14, offset: 86663},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2393, col: 14, offset: 86663},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2393, col: 14, offset: 86663},
							expr: &ruleRefExpr{
								pos:  position{line: 2393, col: 15, offset: 86664},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2393, col: 19, offset: 86668},
							expr: &ruleRefExpr{
								pos:  position{line: 2393, col: 19, offset: 86668},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2393, col: 26, offset: 86675},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2401, col: 1, offset: 86820},
			expr: &choiceExpr{
				pos: position{line: 2401, col: 11, offset: 86830},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2401, col: 11, offset: 86830},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2401, col: 24, offset: 86843},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2401, col: 36, offset: 86855},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2401, col: 48, offset: 86867},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2401, col: 61, offset: 86880},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2401, col: 72, offset: 86891},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2403, col: 1, offset: 86910},
			expr: &actionExpr{
				pos: position{line: 2403, col: 15, offset: 86924},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2403, col: 15, offset: 86924},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2406, col: 1, offset: 86977},
			expr: &actionExpr{
				pos: position{line: 2406, col: 14, offset: 86990},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2406, col: 14, offset: 86990},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2409, col: 1, offset: 87044},
			expr: &actionExpr{
				pos: position{line: 2409, col: 14, offset: 87057},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2409, col: 14, offset: 87057},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2412, col: 1, offset: 87112},
			expr: &actionExpr{
				pos: position{line: 2412, col: 15, offset: 87126},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2412, col: 15, offset: 87126},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2415, col: 1, offset: 87180},
			expr: &actionExpr{
				pos: position{line: 2415, col: 13, offset: 87192},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2415, col: 13, offset: 87192},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2423, col: 1, offset: 87469},
			expr: &actionExpr{
				pos: position{line: 2423, col: 22, offset: 87490},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2423, col: 22, offset: 87490},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2423, col: 22, offset: 87490},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2423, col: 31, offset: 87499},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2423, col: 35, offset: 87503},
							expr: &charClassMatcher{
								pos:        position{line: 2423, col: 36, offset: 87504},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2432, col: 1, offset: 87866},
			expr: &choiceExpr{
				pos: position{line: 2432, col: 21, offset: 87886},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2432, col: 21, offset: 87886},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2432, col: 21, offset: 87886},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2435, col: 9, offset: 88049},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2435, col: 10, offset: 88050},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2435, col: 10, offset: 88050},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2435, col: 16, offset: 88056},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2435, col: 22, offset: 88062},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2442, col: 1, offset: 88240},
			expr: &charClassMatcher{
				pos:        position{line: 2442, col: 13, offset: 88252},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2444, col: 1, offset: 88262},
			expr: &choiceExpr{
				pos: position{line: 2444, col: 16, offset: 88277},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2444, col: 16, offset: 88277},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2444, col: 22, offset: 88283},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2444, col: 28, offset: 88289},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2444, col: 34, offset: 88295},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2444, col: 40, offset: 88301},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2444, col: 46, offset: 88307},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2446, col: 1, offset: 88313},
			expr: &actionExpr{
				pos: position{line: 2446, col: 14, offset: 88326},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2446, col: 14, offset: 88326},
					expr: &charClassMatcher{
						pos:        position{line: 2446, col: 14, offset: 88326},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2450, col: 1, offset: 88372},
			expr: &choiceExpr{
				pos: position{line: 2454, col: 5, offset: 88699},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2454, col: 5, offset: 88699},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2454, col: 5, offset: 88699},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2454, col: 5, offset: 88699},
									expr: &charClassMatcher{
										pos:        position{line: 2454, col: 5, offset: 88699},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2454, col: 15, offset: 88709},
									expr: &choiceExpr{
										pos: position{line: 2454, col: 17, offset: 88711},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2454, col: 17, offset: 88711},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2454, col: 30, offset: 88724},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2456, col: 9, offset: 88794},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2456, col: 9, offset: 88794},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2456, col: 9, offset: 88794},
									expr: &charClassMatcher{
										pos:        position{line: 2456, col: 9, offset: 88794},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2456, col: 19, offset: 88804},
									expr: &seqExpr{
										pos: position{line: 2456, col: 20, offset: 88805},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2456, col: 20, offset: 88805},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2456, col: 27, offset: 88812},
												expr: &charClassMatcher{
													pos:        position{line: 2456, col: 27, offset: 88812},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2460, col: 1, offset: 88899},
			expr: &choiceExpr{
				pos: position{line: 2461, col: 5, offset: 88980},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2461, col: 5, offset: 88980},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2461, col: 5, offset: 88980},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2461, col: 5, offset: 88980},
									expr: &charClassMatcher{
										pos:        position{line: 2461, col: 5, offset: 88980},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2461, col: 19, offset: 88994},
									expr: &choiceExpr{
										pos: position{line: 2461, col: 21, offset: 88996},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2461, col: 21, offset: 88996},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2461, col: 31, offset: 89006},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2463, col: 9, offset: 89075},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2466, col: 1, offset: 89175},
			expr: &actionExpr{
				pos: position{line: 2466, col: 12, offset: 89186},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2466, col: 12, offset: 89186},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2470, col: 1, offset: 89251},
			expr: &actionExpr{
				pos: position{line: 2470, col: 17, offset: 89267},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2470, col: 17, offset: 89267},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2470, col: 22, offset: 89272},
						expr: &choiceExpr{
							pos: position{line: 2470, col: 23, offset: 89273},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2470, col: 23, offset: 89273},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2470, col: 34, offset: 89284},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2474, col: 1, offset: 89365},
			expr: &actionExpr{
				pos: position{line: 2474, col: 13, offset: 89377},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2474, col: 13, offset: 89377},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2474, col: 13, offset: 89377},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2474, col: 20, offset: 89384},
								expr: &ruleRefExpr{
									pos:  position{line: 2474, col: 21, offset: 89385},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2474, col: 30, offset: 89394},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2474, col: 35, offset: 89399},
								expr: &choiceExpr{
									pos: position{line: 2474, col: 36, offset: 89400},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2474, col: 36, offset: 89400},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2474, col: 47, offset: 89411},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2478, col: 1, offset: 89496},
			expr: &actionExpr{
				pos: position{line: 2478, col: 23, offset: 89518},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2478, col: 23, offset: 89518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2478, col: 23, offset: 89518},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2478, col: 31, offset: 89526},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2478, col: 39, offset: 89534},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2478, col: 44, offset: 89539},
								expr: &choiceExpr{
									pos: position{line: 2478, col: 45, offset: 89540},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2478, col: 45, offset: 89540},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2478, col: 56, offset: 89551},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2482, col: 1, offset: 89636},
			expr: &actionExpr{
				pos: position{line: 2482, col: 13, offset: 89648},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2482, col: 13, offset: 89648},
					expr: &charClassMatcher{
						pos:        position{line: 2482, col: 14, offset: 89649},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2486, col: 1, offset: 89771},
			expr: &choiceExpr{
				pos: position{line: 2486, col: 11, offset: 89781},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2486, col: 11, offset: 89781},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2486, col: 23, offset: 89793},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2486, col: 36, offset: 89806},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2486, col: 47, offset: 89817},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2486, col: 58, offset: 89828},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2488, col: 1, offset: 89839},
			expr: &actionExpr{
				pos: position{line: 2488, col: 7, offset: 89845},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2488, col: 7, offset: 89845},
					expr: &charClassMatcher{
						pos:        position{line: 2488, col: 7, offset: 89845},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2492, col: 1, offset: 89970},
			expr: &actionExpr{
				pos: position{line: 2492, col: 10, offset: 89979},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2492, col: 10, offset: 89979},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2496, col: 1, offset: 90021},
			expr: &actionExpr{
				pos: position{line: 2496, col: 11, offset: 90031},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2496, col: 11, offset: 90031},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2496, col: 11, offset: 90031},
							expr: &litMatcher{
								pos:        position{line: 2496, col: 11, offset: 90031},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2496, col: 16, offset: 90036},
							expr: &ruleRefExpr{
								pos:  position{line: 2496, col: 16, offset: 90036},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2500, col: 1, offset: 90088},
			expr: &choiceExpr{
				pos: position{line: 2500, col: 10, offset: 90097},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2500, col: 10, offset: 90097},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2500, col: 16, offset: 90103},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2500, col: 16, offset: 90103},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2504, col: 1, offset: 90144},
			expr: &choiceExpr{
				pos: position{line: 2504, col: 12, offset: 90155},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2504, col: 12, offset: 90155},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2504, col: 21, offset: 90164},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2504, col: 28, offset: 90171},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2506, col: 1, offset: 90177},
			expr: &notExpr{
				pos: position{line: 2506, col: 8, offset: 90184},
				expr: &anyMatcher{
					line: 2506, col: 9, offset: 90185,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2508, col: 1, offset: 90188},
			expr: &choiceExpr{
				pos: position{line: 2508, col: 8, offset: 90195},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2508, col: 8, offset: 90195},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2508, col: 18, offset: 90205},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentRawBlock1(block interface{}) (interface{}, error) {
	log.Debugf("new raw block of kind '%T'", block)
	return block, nil
}

func (p *parser) callonDocumentRawBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title.([]interface{}))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementTitleContent3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent3()
}

func (c *current) onElementTitleContent9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementTitleContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent9()
}

func (c *current) onElementShortHandAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attributes"])
}

func (c *current) onBlockAttributeList1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonBlockAttributeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributeList1(stack["attributes"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewStyleAttribute(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewNamedAttribute(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewNamedAttribute(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralBlockAttribute1() (interface{}, error) {
	return types.NewLiteralBlockAttribute()
}

func (p *parser) callonLiteralBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onExampleBlockAttribute1() (interface{}, error) {
	return types.NewExampleBlockAttribute()
}

func (p *parser) callonExampleBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockAttribute1()
}

func (c *current) onListingBlockAttribute1() (interface{}, error) {
	return types.NewListingBlockAttribute()
}

func (p *parser) callonListingBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(string))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes9(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes9(stack["attr"])
}

func (c *current) onSourceAttributes17(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes17(stack["attr"])
}

func (c *current) onSourceAttributes1(options, language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, options, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["options"], stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onNamedAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonNamedAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue7()
}

func (c *current) onSingleQuotedAttributeValue12() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonSingleQuotedAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue12()
}

func (c *current) onSingleQuotedAttributeValue14() (interface{}, error) {
	// `{` or `\`
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue14()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil
}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue7()
}

func (c *current) onDoubleQuotedAttributeValue12() (interface{}, error) {
	// escaped "
	return types.NewStringElement(`"`) // escaped "

}

func (p *parser) callonDoubleQuotedAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue12()
}

func (c *current) onDoubleQuotedAttributeValue14() (interface{}, error) {
	// `{` or `\`
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue14()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil
}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue5()
}

func (c *current) onUnquotedAttributeValue10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue10()
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onStandaloneAttributeKey1(key interface{}) (interface{}, error) {
	// value is not defined
	return types.NewNamedAttribute(key.(string), nil)
}

func (p *parser) callonStandaloneAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeKey1(stack["key"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onShortHandID1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)
}

func (p *parser) callonShortHandID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandID1(stack["id"])
}

func (c *current) onShortHandOption1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)
}

func (p *parser) callonShortHandOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOption1(stack["option"])
}

func (c *current) onShortHandRole1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)
}

func (p *parser) callonShortHandRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return types.Reduce(value, strings.TrimSpace), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	// '"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain13() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain13()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes14(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes14(stack["title"])
}

func (c *current) onBlockAttributes23(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {

	return attributes, nil
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonLongHandAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes3()
}

func (c *current) onLongHandAttributes1(firstPositionalAttribute, otherPositionalAttributes, namedAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttribute != nil {
		attributes = append(attributes, firstPositionalAttribute.([]interface{})...)
	}
	attributes = append(attributes, otherPositionalAttributes.([]interface{})...)
	attributes = append(attributes, namedAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttribute"], stack["otherPositionalAttributes"], stack["namedAttributes"])
}

func (c *current) onFirstPositionalAttribute17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttribute17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttribute1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	_, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewIDAttribute(id)
}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)
}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)
}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)
}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue14()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)
}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onRefactoredAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonRefactoredAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredAttributeValue1(stack["value"])
}

func (c *current) onRefactoredSingleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRefactoredSingleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredSingleQuotedAttributeValue7()
}

func (c *current) onRefactoredSingleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonRefactoredSingleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredSingleQuotedAttributeValue13()
}

func (c *current) onRefactoredSingleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRefactoredSingleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredSingleQuotedAttributeValue16()
}

func (c *current) onRefactoredSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonRefactoredSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onRefactoredDoubleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRefactoredDoubleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredDoubleQuotedAttributeValue7()
}

func (c *current) onRefactoredDoubleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonRefactoredDoubleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredDoubleQuotedAttributeValue13()
}

func (c *current) onRefactoredDoubleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRefactoredDoubleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredDoubleQuotedAttributeValue16()
}

func (c *current) onRefactoredDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonRefactoredDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onRefactoredUnquotedAttributeValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRefactoredUnquotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredUnquotedAttributeValue8()
}

func (c *current) onRefactoredUnquotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRefactoredUnquotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredUnquotedAttributeValue13()
}

func (c *current) onRefactoredUnquotedAttributeValue15(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonRefactoredUnquotedAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredUnquotedAttributeValue15(stack["elements"])
}

func (c *current) onRefactoredUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonRefactoredUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRefactoredUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attributes"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attributes"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Passthrough), nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	return !types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attributes, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attributes, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attributes, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonLinkAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes3()
}

func (c *current) onLinkAttributes1(positionalAttributes, namedAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	attributes = append(attributes, positionalAttributes.([]interface{})...)
	attributes = append(attributes, namedAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["positionalAttributes"], stack["namedAttributes"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma and double quotes (")
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onImageBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(attributes, types.AttrPositional1), nil

}

func (p *parser) callonImageBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock6(stack["attributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageBlockAttributes2(attribute interface{}) (interface{}, error) {
	return attribute, nil
}

func (p *parser) callonImageBlockAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlockAttributes2(stack["attribute"])
}

func (c *current) onImageAttrList1(alt, shortHands, width, height, others interface{}) (interface{}, error) {
	return types.NewAttributeGroup(alt, width, height, others)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["alt"], stack["shortHands"], stack["width"], stack["height"], stack["others"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImageAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonInlineImageAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttributes3()
}

func (c *current) onInlineImageAttributes1(positionalAttributes, namedAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	attributes = append(attributes, positionalAttributes.([]interface{})...)
	attributes = append(attributes, namedAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonInlineImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttributes1(stack["positionalAttributes"], stack["namedAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {
	// TODO: use ellipsis on `nv`?
	return types.NewAttributeGroup(size, others)
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 may be missing or must be equal to `quote`
	if types.HasNotAttribute(attributes, types.AttrPositional1) ||
		types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Quote) {
		return true, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 must be equal to `verse`
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Verse), nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

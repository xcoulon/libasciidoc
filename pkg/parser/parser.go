// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AttributeDeclaration",
			pos:  position{line: 20, col: 1, offset: 343},
			expr: &actionExpr{
				pos: position{line: 20, col: 25, offset: 367},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 20, col: 25, offset: 367},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 20, col: 25, offset: 367},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 20, col: 29, offset: 371},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 20, col: 35, offset: 377},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 20, col: 50, offset: 392},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 9, offset: 405},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 15, offset: 411},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 16, offset: 412},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 44, offset: 440},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 30, col: 1, offset: 777},
			expr: &actionExpr{
				pos: position{line: 30, col: 18, offset: 794},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 30, col: 18, offset: 794},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 30, col: 18, offset: 794},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 30, col: 28, offset: 804},
							expr: &charClassMatcher{
								pos:        position{line: 30, col: 29, offset: 805},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 34, col: 1, offset: 853},
			expr: &actionExpr{
				pos: position{line: 34, col: 30, offset: 882},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 34, col: 30, offset: 882},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 34, col: 30, offset: 882},
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 30, offset: 882},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 34, col: 37, offset: 889},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 34, col: 46, offset: 898},
								expr: &choiceExpr{
									pos: position{line: 35, col: 5, offset: 904},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 35, col: 6, offset: 905},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 35, col: 6, offset: 905},
												expr: &charClassMatcher{
													pos:        position{line: 35, col: 6, offset: 905},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 38, col: 5, offset: 984},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 39, col: 6, offset: 1013},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 39, col: 6, offset: 1013},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 46, col: 1, offset: 1180},
			expr: &choiceExpr{
				pos: position{line: 46, col: 19, offset: 1198},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 46, col: 19, offset: 1198},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 46, col: 19, offset: 1198},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 19, offset: 1198},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 46, col: 24, offset: 1203},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 30, offset: 1209},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 46, col: 45, offset: 1224},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 46, col: 49, offset: 1228},
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 49, offset: 1228},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 56, offset: 1235},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1295},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 48, col: 5, offset: 1295},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 48, col: 5, offset: 1295},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 48, col: 9, offset: 1299},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 48, col: 15, offset: 1305},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 48, col: 30, offset: 1320},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 48, col: 35, offset: 1325},
									expr: &ruleRefExpr{
										pos:  position{line: 48, col: 35, offset: 1325},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 48, col: 42, offset: 1332},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 55, col: 1, offset: 1514},
			expr: &actionExpr{
				pos: position{line: 56, col: 5, offset: 1538},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 56, col: 5, offset: 1538},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 56, col: 16, offset: 1549},
						expr: &choiceExpr{
							pos: position{line: 58, col: 9, offset: 1616},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 58, col: 10, offset: 1617},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 58, col: 10, offset: 1617},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 58, col: 10, offset: 1617},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 58, col: 18, offset: 1625},
													name: "ShortHandAnchor",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 58, col: 35, offset: 1642},
												expr: &ruleRefExpr{
													pos:  position{line: 58, col: 35, offset: 1642},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 58, col: 42, offset: 1649},
												name: "Newline",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 62, col: 12, offset: 1767},
									run: (*parser).callonBlockAttributes12,
									expr: &seqExpr{
										pos: position{line: 62, col: 12, offset: 1767},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 62, col: 12, offset: 1767},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 62, col: 19, offset: 1774},
													name: "ShortHandTitle",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 62, col: 35, offset: 1790},
												expr: &ruleRefExpr{
													pos:  position{line: 62, col: 35, offset: 1790},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 62, col: 42, offset: 1797},
												name: "Newline",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 66, col: 12, offset: 1885},
									run: (*parser).callonBlockAttributes19,
									expr: &seqExpr{
										pos: position{line: 66, col: 12, offset: 1885},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 66, col: 12, offset: 1885},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 66, col: 24, offset: 1897},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 66, col: 44, offset: 1917},
												expr: &ruleRefExpr{
													pos:  position{line: 66, col: 44, offset: 1917},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 66, col: 51, offset: 1924},
												name: "Newline",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 82, col: 1, offset: 2296},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2320},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 83, col: 5, offset: 2320},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 2328},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 84, col: 16, offset: 2339},
								expr: &choiceExpr{
									pos: position{line: 84, col: 17, offset: 2340},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 84, col: 17, offset: 2340},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 84, col: 37, offset: 2360},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 85, col: 5, offset: 2381},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 90, col: 1, offset: 2509},
			expr: &actionExpr{
				pos: position{line: 91, col: 4, offset: 2531},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 91, col: 4, offset: 2531},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 4, offset: 2531},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 5, offset: 2541},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 93, col: 9, offset: 2554},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 93, col: 9, offset: 2554},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 93, col: 18, offset: 2563},
										expr: &choiceExpr{
											pos: position{line: 94, col: 13, offset: 2577},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 94, col: 14, offset: 2578},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 94, col: 14, offset: 2578},
														expr: &charClassMatcher{
															pos:        position{line: 94, col: 14, offset: 2578},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 97, col: 13, offset: 2745},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 98, col: 13, offset: 2778},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 99, col: 14, offset: 2801},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 99, col: 14, offset: 2801},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 105, col: 5, offset: 2987},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 110, col: 1, offset: 3088},
			expr: &actionExpr{
				pos: position{line: 110, col: 19, offset: 3106},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 110, col: 19, offset: 3106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 110, col: 19, offset: 3106},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 110, col: 23, offset: 3110},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 111, col: 5, offset: 3122},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 111, col: 5, offset: 3122},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 111, col: 5, offset: 3122},
											expr: &charClassMatcher{
												pos:        position{line: 111, col: 6, offset: 3123},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 112, col: 5, offset: 3235},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 112, col: 14, offset: 3244},
												expr: &choiceExpr{
													pos: position{line: 113, col: 9, offset: 3254},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 113, col: 10, offset: 3255},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 113, col: 10, offset: 3255},
																expr: &charClassMatcher{
																	pos:        position{line: 113, col: 10, offset: 3255},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 116, col: 9, offset: 3353},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 117, col: 9, offset: 3382},
															name: "AttrSub",
														},
														&actionExpr{
															pos: position{line: 118, col: 10, offset: 3401},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 118, col: 10, offset: 3401},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 129, col: 1, offset: 3801},
			expr: &actionExpr{
				pos: position{line: 130, col: 5, offset: 3827},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 130, col: 5, offset: 3827},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 130, col: 5, offset: 3827},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 130, col: 9, offset: 3831},
							expr: &litMatcher{
								pos:        position{line: 130, col: 10, offset: 3832},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 132, col: 5, offset: 4002},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 132, col: 31, offset: 4028},
								expr: &ruleRefExpr{
									pos:  position{line: 132, col: 32, offset: 4029},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 5, offset: 4061},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 133, col: 21, offset: 4077},
								expr: &choiceExpr{
									pos: position{line: 133, col: 22, offset: 4078},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 133, col: 22, offset: 4078},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 133, col: 44, offset: 4100},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 134, col: 5, offset: 4121},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 145, col: 1, offset: 4581},
			expr: &actionExpr{
				pos: position{line: 146, col: 5, offset: 4615},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 146, col: 5, offset: 4615},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 146, col: 5, offset: 4615},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 146, col: 10, offset: 4620},
								expr: &ruleRefExpr{
									pos:  position{line: 147, col: 9, offset: 4630},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 149, col: 5, offset: 4660},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 149, col: 12, offset: 4667},
								expr: &choiceExpr{
									pos: position{line: 150, col: 9, offset: 4678},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 150, col: 9, offset: 4678},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 151, col: 11, offset: 4710},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 152, col: 11, offset: 4745},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 153, col: 8, offset: 4778},
							expr: &seqExpr{
								pos: position{line: 153, col: 9, offset: 4779},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 153, col: 9, offset: 4779},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 153, col: 13, offset: 4783},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 13, offset: 4783},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 154, col: 5, offset: 4797},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 168, col: 1, offset: 5154},
			expr: &actionExpr{
				pos: position{line: 168, col: 25, offset: 5178},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 168, col: 25, offset: 5178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 168, col: 25, offset: 5178},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 168, col: 29, offset: 5182},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 33, offset: 5186},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 172, col: 1, offset: 5260},
			expr: &actionExpr{
				pos: position{line: 172, col: 23, offset: 5282},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 172, col: 23, offset: 5282},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 172, col: 30, offset: 5289},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 177, col: 1, offset: 5415},
			expr: &actionExpr{
				pos: position{line: 177, col: 30, offset: 5444},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 177, col: 30, offset: 5444},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 177, col: 30, offset: 5444},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 34, offset: 5448},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 40, offset: 5454},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 182, col: 1, offset: 5576},
			expr: &actionExpr{
				pos: position{line: 182, col: 29, offset: 5604},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 182, col: 29, offset: 5604},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 182, col: 29, offset: 5604},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 33, offset: 5608},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 41, offset: 5616},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 187, col: 1, offset: 5729},
			expr: &choiceExpr{
				pos: position{line: 188, col: 5, offset: 5761},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 5761},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 7, offset: 5795},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 190, col: 7, offset: 5829},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 190, col: 7, offset: 5829},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 190, col: 7, offset: 5829},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 190, col: 16, offset: 5838},
										expr: &choiceExpr{
											pos: position{line: 193, col: 5, offset: 6008},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 193, col: 6, offset: 6009},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 193, col: 6, offset: 6009},
														expr: &charClassMatcher{
															pos:        position{line: 193, col: 6, offset: 6009},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 196, col: 5, offset: 6103},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 197, col: 5, offset: 6120},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 198, col: 5, offset: 6145},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 199, col: 6, offset: 6160},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 199, col: 6, offset: 6160},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 201, col: 10, offset: 6230},
									expr: &charClassMatcher{
										pos:        position{line: 201, col: 11, offset: 6231},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 205, col: 1, offset: 6307},
			expr: &choiceExpr{
				pos: position{line: 205, col: 24, offset: 6330},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 206, col: 5, offset: 6336},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 206, col: 5, offset: 6336},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 206, col: 5, offset: 6336},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 12, offset: 6343},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 206, col: 29, offset: 6360},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 206, col: 29, offset: 6360},
											expr: &seqExpr{
												pos: position{line: 206, col: 30, offset: 6361},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 206, col: 30, offset: 6361},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 206, col: 34, offset: 6365},
														expr: &ruleRefExpr{
															pos:  position{line: 206, col: 34, offset: 6365},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 206, col: 45, offset: 6376},
											expr: &litMatcher{
												pos:        position{line: 206, col: 46, offset: 6377},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 211, col: 6, offset: 6614},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 211, col: 6, offset: 6614},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 211, col: 6, offset: 6614},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 211, col: 13, offset: 6621},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 211, col: 13, offset: 6621},
												expr: &ruleRefExpr{
													pos:  position{line: 211, col: 13, offset: 6621},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 211, col: 21, offset: 6629},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 211, col: 22, offset: 6630},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 211, col: 22, offset: 6630},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 211, col: 26, offset: 6634},
																expr: &ruleRefExpr{
																	pos:  position{line: 211, col: 26, offset: 6634},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 211, col: 36, offset: 6644},
														expr: &litMatcher{
															pos:        position{line: 211, col: 37, offset: 6645},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 212, col: 5, offset: 6655},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 223, col: 1, offset: 6968},
			expr: &actionExpr{
				pos: position{line: 223, col: 19, offset: 6986},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 223, col: 19, offset: 6986},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 223, col: 19, offset: 6986},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 24, offset: 6991},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 43, offset: 7010},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 223, col: 47, offset: 7014},
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 47, offset: 7014},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 223, col: 54, offset: 7021},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 61, offset: 7028},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 223, col: 77, offset: 7044},
							expr: &seqExpr{
								pos: position{line: 223, col: 78, offset: 7045},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 223, col: 78, offset: 7045},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 223, col: 82, offset: 7049},
										expr: &ruleRefExpr{
											pos:  position{line: 223, col: 82, offset: 7049},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 228, col: 1, offset: 7273},
			expr: &actionExpr{
				pos: position{line: 228, col: 22, offset: 7294},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 228, col: 22, offset: 7294},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 228, col: 22, offset: 7294},
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 23, offset: 7295},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 228, col: 29, offset: 7301},
							expr: &charClassMatcher{
								pos:        position{line: 228, col: 29, offset: 7301},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 228, col: 42, offset: 7314},
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 42, offset: 7314},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 232, col: 1, offset: 7384},
			expr: &actionExpr{
				pos: position{line: 233, col: 5, offset: 7407},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 233, col: 5, offset: 7407},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 233, col: 5, offset: 7407},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 234, col: 9, offset: 7423},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7423},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 11, offset: 7461},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 11, offset: 7499},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 238, col: 5, offset: 7533},
							expr: &notExpr{
								pos: position{line: 238, col: 7, offset: 7535},
								expr: &seqExpr{
									pos: position{line: 238, col: 9, offset: 7537},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 238, col: 9, offset: 7537},
											expr: &ruleRefExpr{
												pos:  position{line: 238, col: 9, offset: 7537},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 238, col: 16, offset: 7544},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 242, col: 1, offset: 7585},
			expr: &actionExpr{
				pos: position{line: 243, col: 5, offset: 7620},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 243, col: 5, offset: 7620},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 5, offset: 7620},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 5, offset: 7629},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 244, col: 14, offset: 7638},
								expr: &choiceExpr{
									pos: position{line: 245, col: 9, offset: 7648},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 245, col: 9, offset: 7648},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 246, col: 12, offset: 7671},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 246, col: 12, offset: 7671},
												expr: &charClassMatcher{
													pos:        position{line: 246, col: 12, offset: 7671},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 249, col: 11, offset: 7817},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 250, col: 11, offset: 7846},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 251, col: 12, offset: 7865},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 251, col: 12, offset: 7865},
													run: (*parser).callonSingleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 251, col: 12, offset: 7865},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 254, col: 11, offset: 7957},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 254, col: 17, offset: 7963},
													run: (*parser).callonSingleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 254, col: 17, offset: 7963},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 258, col: 5, offset: 8052},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 262, col: 1, offset: 8108},
			expr: &actionExpr{
				pos: position{line: 263, col: 5, offset: 8143},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 263, col: 5, offset: 8143},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 263, col: 5, offset: 8143},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 5, offset: 8153},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 264, col: 14, offset: 8162},
								expr: &choiceExpr{
									pos: position{line: 265, col: 9, offset: 8172},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 265, col: 9, offset: 8172},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 266, col: 12, offset: 8195},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 266, col: 12, offset: 8195},
												expr: &charClassMatcher{
													pos:        position{line: 266, col: 12, offset: 8195},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 11, offset: 8341},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 270, col: 11, offset: 8370},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 271, col: 12, offset: 8389},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 271, col: 12, offset: 8389},
													run: (*parser).callonDoubleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 271, col: 12, offset: 8389},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 274, col: 11, offset: 8481},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 274, col: 17, offset: 8487},
													run: (*parser).callonDoubleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 274, col: 17, offset: 8487},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 5, offset: 8576},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 283, col: 1, offset: 8711},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8742},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8742},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 284, col: 5, offset: 8742},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 6, offset: 8743},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 5, offset: 8753},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 14, offset: 8762},
								expr: &choiceExpr{
									pos: position{line: 286, col: 9, offset: 8772},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 286, col: 9, offset: 8772},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 287, col: 12, offset: 8794},
											run: (*parser).callonUnquotedAttributeValue9,
											expr: &oneOrMoreExpr{
												pos: position{line: 287, col: 12, offset: 8794},
												expr: &charClassMatcher{
													pos:        position{line: 287, col: 12, offset: 8794},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 290, col: 11, offset: 8896},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 291, col: 11, offset: 8925},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 292, col: 12, offset: 8944},
											run: (*parser).callonUnquotedAttributeValue14,
											expr: &litMatcher{
												pos:        position{line: 292, col: 12, offset: 8944},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 296, col: 5, offset: 9032},
							run: (*parser).callonUnquotedAttributeValue16,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 307, col: 1, offset: 9346},
			expr: &choiceExpr{
				pos: position{line: 307, col: 26, offset: 9371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 307, col: 26, offset: 9371},
						name: "CounterSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 307, col: 48, offset: 9393},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 309, col: 1, offset: 9402},
			expr: &actionExpr{
				pos: position{line: 309, col: 12, offset: 9413},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 309, col: 12, offset: 9413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 12, offset: 9413},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 16, offset: 9417},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 21, offset: 9422},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 309, col: 35, offset: 9436},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 314, col: 1, offset: 9551},
			expr: &choiceExpr{
				pos: position{line: 314, col: 24, offset: 9574},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 314, col: 24, offset: 9574},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 314, col: 47, offset: 9597},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 316, col: 1, offset: 9733},
			expr: &actionExpr{
				pos: position{line: 316, col: 25, offset: 9757},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 316, col: 25, offset: 9757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 316, col: 25, offset: 9757},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 316, col: 37, offset: 9769},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 316, col: 42, offset: 9774},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 56, offset: 9788},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 316, col: 62, offset: 9794},
								expr: &ruleRefExpr{
									pos:  position{line: 316, col: 63, offset: 9795},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 316, col: 78, offset: 9810},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 320, col: 1, offset: 9888},
			expr: &actionExpr{
				pos: position{line: 320, col: 25, offset: 9912},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 320, col: 25, offset: 9912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 25, offset: 9912},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 38, offset: 9925},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 43, offset: 9930},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 57, offset: 9944},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 63, offset: 9950},
								expr: &ruleRefExpr{
									pos:  position{line: 320, col: 64, offset: 9951},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 320, col: 79, offset: 9966},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 324, col: 1, offset: 10041},
			expr: &actionExpr{
				pos: position{line: 324, col: 17, offset: 10057},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 324, col: 17, offset: 10057},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 324, col: 17, offset: 10057},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 21, offset: 10061},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 324, col: 28, offset: 10068},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 324, col: 28, offset: 10068},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 324, col: 28, offset: 10068},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 326, col: 9, offset: 10122},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 326, col: 9, offset: 10122},
											expr: &charClassMatcher{
												pos:        position{line: 326, col: 9, offset: 10122},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 335, col: 1, offset: 10324},
			expr: &actionExpr{
				pos: position{line: 335, col: 14, offset: 10337},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 335, col: 14, offset: 10337},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 335, col: 14, offset: 10337},
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 14, offset: 10337},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 335, col: 21, offset: 10344},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 342, col: 1, offset: 10581},
			expr: &actionExpr{
				pos: position{line: 342, col: 12, offset: 10592},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 342, col: 12, offset: 10592},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 12, offset: 10592},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 342, col: 16, offset: 10596},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 342, col: 21, offset: 10601},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 342, col: 21, offset: 10601},
									expr: &charClassMatcher{
										pos:        position{line: 342, col: 21, offset: 10601},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 342, col: 69, offset: 10649},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 73, offset: 10653},
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 73, offset: 10653},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 342, col: 80, offset: 10660},
							expr: &choiceExpr{
								pos: position{line: 342, col: 82, offset: 10662},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 342, col: 82, offset: 10662},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 342, col: 88, offset: 10668},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 346, col: 1, offset: 10729},
			expr: &actionExpr{
				pos: position{line: 346, col: 20, offset: 10748},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 346, col: 20, offset: 10748},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 346, col: 20, offset: 10748},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 25, offset: 10753},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 346, col: 48, offset: 10776},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 61, offset: 10789},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 350, col: 1, offset: 10901},
			expr: &actionExpr{
				pos: position{line: 350, col: 26, offset: 10926},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 350, col: 26, offset: 10926},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 26, offset: 10926},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 30, offset: 10930},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 350, col: 35, offset: 10935},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 350, col: 35, offset: 10935},
									expr: &charClassMatcher{
										pos:        position{line: 350, col: 35, offset: 10935},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 350, col: 83, offset: 10983},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 350, col: 87, offset: 10987},
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 87, offset: 10987},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 358, col: 1, offset: 11218},
			expr: &seqExpr{
				pos: position{line: 358, col: 31, offset: 11248},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 358, col: 31, offset: 11248},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 358, col: 38, offset: 11255},
						expr: &ruleRefExpr{
							pos:  position{line: 358, col: 38, offset: 11255},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 358, col: 45, offset: 11262},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 360, col: 1, offset: 11267},
			expr: &choiceExpr{
				pos: position{line: 360, col: 29, offset: 11295},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 360, col: 30, offset: 11296},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 360, col: 30, offset: 11296},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 360, col: 37, offset: 11303},
								expr: &ruleRefExpr{
									pos:  position{line: 360, col: 37, offset: 11303},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 360, col: 44, offset: 11310},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 360, col: 51, offset: 11317},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 377, col: 1, offset: 11807},
			expr: &actionExpr{
				pos: position{line: 379, col: 5, offset: 11883},
				run: (*parser).callonCommentBlockContent1,
				expr: &seqExpr{
					pos: position{line: 379, col: 5, offset: 11883},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 379, col: 5, offset: 11883},
							run: (*parser).callonCommentBlockContent3,
						},
						&labeledExpr{
							pos:   position{line: 382, col: 5, offset: 11957},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 14, offset: 11966},
								name: "RawLine",
							},
						},
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 386, col: 1, offset: 12012},
			expr: &actionExpr{
				pos: position{line: 386, col: 12, offset: 12023},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 386, col: 12, offset: 12023},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 386, col: 12, offset: 12023},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 386, col: 20, offset: 12031},
								expr: &anyMatcher{
									line: 386, col: 21, offset: 12032,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 25, offset: 12036},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 390, col: 1, offset: 12089},
			expr: &actionExpr{
				pos: position{line: 390, col: 22, offset: 12110},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 390, col: 22, offset: 12110},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 390, col: 22, offset: 12110},
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 23, offset: 12111},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 390, col: 45, offset: 12133},
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 45, offset: 12133},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 390, col: 52, offset: 12140},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 57, offset: 12145},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 66, offset: 12154},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 92, offset: 12180},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 394, col: 1, offset: 12253},
			expr: &actionExpr{
				pos: position{line: 394, col: 29, offset: 12281},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 394, col: 29, offset: 12281},
					expr: &charClassMatcher{
						pos:        position{line: 394, col: 29, offset: 12281},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 401, col: 1, offset: 12446},
			expr: &choiceExpr{
				pos: position{line: 401, col: 19, offset: 12464},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 401, col: 19, offset: 12464},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 401, col: 44, offset: 12489},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 403, col: 1, offset: 12514},
			expr: &choiceExpr{
				pos: position{line: 403, col: 27, offset: 12540},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 403, col: 27, offset: 12540},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 403, col: 27, offset: 12540},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 403, col: 27, offset: 12540},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 403, col: 32, offset: 12545},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 403, col: 36, offset: 12549},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 403, col: 40, offset: 12553},
									expr: &ruleRefExpr{
										pos:  position{line: 403, col: 40, offset: 12553},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 403, col: 47, offset: 12560},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 403, col: 51, offset: 12564},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 403, col: 58, offset: 12571},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 403, col: 79, offset: 12592},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 405, col: 9, offset: 12665},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 405, col: 9, offset: 12665},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 405, col: 9, offset: 12665},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 405, col: 14, offset: 12670},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 405, col: 18, offset: 12674},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 405, col: 22, offset: 12678},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 409, col: 1, offset: 12749},
			expr: &actionExpr{
				pos: position{line: 409, col: 27, offset: 12775},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 409, col: 27, offset: 12775},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 409, col: 27, offset: 12775},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 409, col: 35, offset: 12783},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 40, offset: 12788},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 54, offset: 12802},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 72, offset: 12820},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 413, col: 1, offset: 12953},
			expr: &oneOrMoreExpr{
				pos: position{line: 413, col: 24, offset: 12976},
				expr: &choiceExpr{
					pos: position{line: 414, col: 5, offset: 12982},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 414, col: 6, offset: 12983},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 414, col: 6, offset: 12983},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 414, col: 6, offset: 12983},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 414, col: 14, offset: 12991},
										expr: &charClassMatcher{
											pos:        position{line: 414, col: 14, offset: 12991},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 417, col: 5, offset: 13186},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 418, col: 6, offset: 13201},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 418, col: 6, offset: 13201},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 427, col: 1, offset: 13476},
			expr: &actionExpr{
				pos: position{line: 427, col: 19, offset: 13494},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 427, col: 19, offset: 13494},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 427, col: 19, offset: 13494},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 21, offset: 13496},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 13526},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 428, col: 16, offset: 13537},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 428, col: 16, offset: 13537},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 429, col: 7, offset: 13596},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 430, col: 7, offset: 13624},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 431, col: 7, offset: 13653},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 432, col: 7, offset: 13682},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 433, col: 7, offset: 13711},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 434, col: 7, offset: 13737},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 435, col: 7, offset: 13765},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 439, col: 1, offset: 13831},
			expr: &actionExpr{
				pos: position{line: 439, col: 26, offset: 13856},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 439, col: 26, offset: 13856},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 439, col: 26, offset: 13856},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 33, offset: 13863},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 33, offset: 13863},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 40, offset: 13870},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 443, col: 1, offset: 13929},
			expr: &actionExpr{
				pos: position{line: 443, col: 25, offset: 13953},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 443, col: 25, offset: 13953},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 443, col: 25, offset: 13953},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 443, col: 31, offset: 13959},
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 31, offset: 13959},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 443, col: 38, offset: 13966},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 447, col: 1, offset: 14024},
			expr: &actionExpr{
				pos: position{line: 447, col: 26, offset: 14049},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 447, col: 26, offset: 14049},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 447, col: 26, offset: 14049},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 447, col: 33, offset: 14056},
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 33, offset: 14056},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 447, col: 40, offset: 14063},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 451, col: 1, offset: 14122},
			expr: &ruleRefExpr{
				pos:  position{line: 451, col: 25, offset: 14146},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 453, col: 1, offset: 14169},
			expr: &actionExpr{
				pos: position{line: 453, col: 26, offset: 14194},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 453, col: 26, offset: 14194},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 453, col: 26, offset: 14194},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 453, col: 33, offset: 14201},
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 33, offset: 14201},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 40, offset: 14208},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 457, col: 1, offset: 14267},
			expr: &actionExpr{
				pos: position{line: 457, col: 26, offset: 14292},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 457, col: 26, offset: 14292},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 26, offset: 14292},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 457, col: 33, offset: 14299},
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 33, offset: 14299},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 40, offset: 14306},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 461, col: 1, offset: 14365},
			expr: &actionExpr{
				pos: position{line: 461, col: 24, offset: 14388},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 461, col: 24, offset: 14388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 24, offset: 14388},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 461, col: 31, offset: 14395},
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 31, offset: 14395},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 38, offset: 14402},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 465, col: 1, offset: 14459},
			expr: &actionExpr{
				pos: position{line: 465, col: 26, offset: 14484},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 465, col: 26, offset: 14484},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 465, col: 26, offset: 14484},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 465, col: 33, offset: 14491},
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 33, offset: 14491},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 465, col: 40, offset: 14498},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 469, col: 1, offset: 14557},
			expr: &actionExpr{
				pos: position{line: 469, col: 30, offset: 14586},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 469, col: 30, offset: 14586},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 469, col: 30, offset: 14586},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 469, col: 37, offset: 14593},
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 37, offset: 14593},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 44, offset: 14600},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentBodyFragment",
			pos:  position{line: 478, col: 1, offset: 14808},
			expr: &actionExpr{
				pos: position{line: 478, col: 25, offset: 14832},
				run: (*parser).callonDocumentBodyFragment1,
				expr: &seqExpr{
					pos: position{line: 478, col: 25, offset: 14832},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 478, col: 25, offset: 14832},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 26, offset: 14833},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 479, col: 5, offset: 14841},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 480, col: 9, offset: 14856},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 480, col: 9, offset: 14856},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 481, col: 11, offset: 14874},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 482, col: 11, offset: 14894},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 11, offset: 14918},
										name: "BlockAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 484, col: 11, offset: 14944},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 485, col: 11, offset: 14975},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 486, col: 11, offset: 15007},
										name: "BlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 487, col: 11, offset: 15032},
										name: "CalloutListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 488, col: 11, offset: 15058},
										name: "InlineElements",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockFragments",
			pos:  position{line: 494, col: 1, offset: 15192},
			expr: &zeroOrMoreExpr{
				pos: position{line: 494, col: 25, offset: 15216},
				expr: &seqExpr{
					pos: position{line: 494, col: 26, offset: 15217},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 494, col: 26, offset: 15217},
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 27, offset: 15218},
								name: "FencedBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 48, offset: 15239},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockFragments",
			pos:  position{line: 496, col: 1, offset: 15268},
			expr: &zeroOrMoreExpr{
				pos: position{line: 496, col: 26, offset: 15293},
				expr: &seqExpr{
					pos: position{line: 496, col: 27, offset: 15294},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 496, col: 27, offset: 15294},
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 28, offset: 15295},
								name: "ListingBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 50, offset: 15317},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockFragments",
			pos:  position{line: 498, col: 1, offset: 15346},
			expr: &zeroOrMoreExpr{
				pos: position{line: 498, col: 26, offset: 15371},
				expr: &seqExpr{
					pos: position{line: 498, col: 27, offset: 15372},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 498, col: 27, offset: 15372},
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 28, offset: 15373},
								name: "LiteralBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 50, offset: 15395},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "LiteralParagraphFragments",
			pos:  position{line: 500, col: 1, offset: 15424},
			expr: &zeroOrMoreExpr{
				pos: position{line: 500, col: 30, offset: 15453},
				expr: &seqExpr{
					pos: position{line: 500, col: 31, offset: 15454},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 500, col: 31, offset: 15454},
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 32, offset: 15455},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 42, offset: 15465},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockFragments",
			pos:  position{line: 502, col: 1, offset: 15494},
			expr: &zeroOrMoreExpr{
				pos: position{line: 502, col: 25, offset: 15518},
				expr: &seqExpr{
					pos: position{line: 502, col: 26, offset: 15519},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 502, col: 26, offset: 15519},
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 27, offset: 15520},
								name: "SourceBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 502, col: 48, offset: 15541},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 536, col: 1, offset: 16646},
			expr: &actionExpr{
				pos: position{line: 537, col: 9, offset: 16672},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 537, col: 9, offset: 16672},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 537, col: 9, offset: 16672},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 537, col: 13, offset: 16676},
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 13, offset: 16676},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 20, offset: 16683},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 27, offset: 16690},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 49, offset: 16712},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 537, col: 53, offset: 16716},
								expr: &ruleRefExpr{
									pos:  position{line: 537, col: 53, offset: 16716},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 71, offset: 16734},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentMetadata",
			pos:  position{line: 541, col: 1, offset: 16849},
			expr: &choiceExpr{
				pos: position{line: 542, col: 9, offset: 16878},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 542, col: 9, offset: 16878},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 543, col: 11, offset: 16906},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 544, col: 11, offset: 16938},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 545, col: 11, offset: 16968},
						name: "DocumentAuthors",
					},
					&ruleRefExpr{
						pos:  position{line: 546, col: 11, offset: 16994},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 548, col: 1, offset: 17012},
			expr: &choiceExpr{
				pos: position{line: 548, col: 20, offset: 17031},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 548, col: 20, offset: 17031},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 48, offset: 17059},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 550, col: 1, offset: 17089},
			expr: &actionExpr{
				pos: position{line: 550, col: 30, offset: 17118},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 550, col: 30, offset: 17118},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 550, col: 30, offset: 17118},
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 30, offset: 17118},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 550, col: 37, offset: 17125},
							expr: &litMatcher{
								pos:        position{line: 550, col: 38, offset: 17126},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 42, offset: 17130},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 550, col: 51, offset: 17139},
								expr: &ruleRefExpr{
									pos:  position{line: 550, col: 51, offset: 17139},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 550, col: 68, offset: 17156},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 554, col: 1, offset: 17226},
			expr: &actionExpr{
				pos: position{line: 554, col: 33, offset: 17258},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 554, col: 33, offset: 17258},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 554, col: 33, offset: 17258},
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 33, offset: 17258},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 554, col: 40, offset: 17265},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 554, col: 51, offset: 17276},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 59, offset: 17284},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 75, offset: 17300},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 558, col: 1, offset: 17379},
			expr: &actionExpr{
				pos: position{line: 558, col: 19, offset: 17397},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 558, col: 19, offset: 17397},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 558, col: 19, offset: 17397},
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 19, offset: 17397},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 26, offset: 17404},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 36, offset: 17414},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 56, offset: 17434},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 558, col: 62, offset: 17440},
								expr: &ruleRefExpr{
									pos:  position{line: 558, col: 63, offset: 17441},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 558, col: 85, offset: 17463},
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 85, offset: 17463},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 558, col: 92, offset: 17470},
							expr: &litMatcher{
								pos:        position{line: 558, col: 92, offset: 17470},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 558, col: 97, offset: 17475},
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 97, offset: 17475},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 563, col: 1, offset: 17620},
			expr: &actionExpr{
				pos: position{line: 563, col: 23, offset: 17642},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 563, col: 23, offset: 17642},
					expr: &charClassMatcher{
						pos:        position{line: 563, col: 23, offset: 17642},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 567, col: 1, offset: 17689},
			expr: &actionExpr{
				pos: position{line: 567, col: 24, offset: 17712},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 567, col: 24, offset: 17712},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 567, col: 24, offset: 17712},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 567, col: 28, offset: 17716},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 567, col: 35, offset: 17723},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 567, col: 36, offset: 17724},
									expr: &charClassMatcher{
										pos:        position{line: 567, col: 36, offset: 17724},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 569, col: 4, offset: 17771},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 575, col: 1, offset: 17932},
			expr: &actionExpr{
				pos: position{line: 575, col: 21, offset: 17952},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 575, col: 21, offset: 17952},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 575, col: 21, offset: 17952},
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 21, offset: 17952},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 575, col: 28, offset: 17959},
							expr: &litMatcher{
								pos:        position{line: 575, col: 29, offset: 17960},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 575, col: 33, offset: 17964},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 576, col: 9, offset: 17983},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 576, col: 10, offset: 17984},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 576, col: 10, offset: 17984},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 576, col: 10, offset: 17984},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 576, col: 21, offset: 17995},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 576, col: 45, offset: 18019},
													expr: &litMatcher{
														pos:        position{line: 576, col: 45, offset: 18019},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 576, col: 50, offset: 18024},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 576, col: 58, offset: 18032},
														expr: &ruleRefExpr{
															pos:  position{line: 576, col: 59, offset: 18033},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 576, col: 82, offset: 18056},
													expr: &litMatcher{
														pos:        position{line: 576, col: 82, offset: 18056},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 576, col: 87, offset: 18061},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 576, col: 97, offset: 18071},
														expr: &ruleRefExpr{
															pos:  position{line: 576, col: 98, offset: 18072},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 578, col: 15, offset: 18189},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 578, col: 15, offset: 18189},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 578, col: 15, offset: 18189},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 578, col: 24, offset: 18198},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 578, col: 46, offset: 18220},
													expr: &litMatcher{
														pos:        position{line: 578, col: 46, offset: 18220},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 578, col: 51, offset: 18225},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 578, col: 61, offset: 18235},
														expr: &ruleRefExpr{
															pos:  position{line: 578, col: 62, offset: 18236},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 580, col: 13, offset: 18345},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 585, col: 1, offset: 18475},
			expr: &choiceExpr{
				pos: position{line: 585, col: 27, offset: 18501},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 585, col: 27, offset: 18501},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 585, col: 27, offset: 18501},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 585, col: 27, offset: 18501},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 585, col: 32, offset: 18506},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 585, col: 39, offset: 18513},
									expr: &charClassMatcher{
										pos:        position{line: 585, col: 39, offset: 18513},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 587, col: 5, offset: 18561},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 587, col: 5, offset: 18561},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 587, col: 5, offset: 18561},
									expr: &litMatcher{
										pos:        position{line: 587, col: 5, offset: 18561},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 587, col: 11, offset: 18567},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 587, col: 18, offset: 18574},
									expr: &charClassMatcher{
										pos:        position{line: 587, col: 18, offset: 18574},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 587, col: 29, offset: 18585},
									expr: &ruleRefExpr{
										pos:  position{line: 587, col: 29, offset: 18585},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 587, col: 36, offset: 18592},
									expr: &litMatcher{
										pos:        position{line: 587, col: 37, offset: 18593},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 591, col: 1, offset: 18633},
			expr: &actionExpr{
				pos: position{line: 591, col: 25, offset: 18657},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 591, col: 25, offset: 18657},
					expr: &charClassMatcher{
						pos:        position{line: 591, col: 25, offset: 18657},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 595, col: 1, offset: 18703},
			expr: &actionExpr{
				pos: position{line: 595, col: 27, offset: 18729},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 595, col: 27, offset: 18729},
					expr: &charClassMatcher{
						pos:        position{line: 595, col: 27, offset: 18729},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 602, col: 1, offset: 18904},
			expr: &actionExpr{
				pos: position{line: 602, col: 23, offset: 18926},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 602, col: 23, offset: 18926},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 602, col: 23, offset: 18926},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 602, col: 32, offset: 18935},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 602, col: 37, offset: 18940},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 602, col: 37, offset: 18940},
									expr: &charClassMatcher{
										pos:        position{line: 602, col: 37, offset: 18940},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 602, col: 76, offset: 18979},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 609, col: 1, offset: 19230},
			expr: &actionExpr{
				pos: position{line: 609, col: 14, offset: 19243},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 609, col: 14, offset: 19243},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 609, col: 14, offset: 19243},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 609, col: 20, offset: 19249},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 609, col: 24, offset: 19253},
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 24, offset: 19253},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 609, col: 31, offset: 19260},
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 32, offset: 19261},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 616, col: 1, offset: 19425},
			expr: &actionExpr{
				pos: position{line: 617, col: 5, offset: 19447},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 617, col: 5, offset: 19447},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 617, col: 5, offset: 19447},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 618, col: 9, offset: 19462},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 618, col: 9, offset: 19462},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 618, col: 9, offset: 19462},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 619, col: 9, offset: 19483},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 619, col: 15, offset: 19489},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 620, col: 9, offset: 19512},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 620, col: 27, offset: 19530},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 624, col: 5, offset: 19690},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 5, offset: 19690},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 12, offset: 19697},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 628, col: 1, offset: 19757},
			expr: &ruleRefExpr{
				pos:  position{line: 628, col: 26, offset: 19782},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 631, col: 1, offset: 19822},
			expr: &actionExpr{
				pos: position{line: 631, col: 15, offset: 19836},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 631, col: 15, offset: 19836},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 631, col: 15, offset: 19836},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 631, col: 22, offset: 19843},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 631, col: 22, offset: 19843},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 632, col: 7, offset: 19869},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 633, col: 7, offset: 19891},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 634, col: 7, offset: 19914},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 638, col: 1, offset: 20004},
			expr: &actionExpr{
				pos: position{line: 638, col: 23, offset: 20026},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 638, col: 23, offset: 20026},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 638, col: 23, offset: 20026},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 638, col: 30, offset: 20033},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 638, col: 30, offset: 20033},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 638, col: 47, offset: 20050},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 20072},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 639, col: 12, offset: 20079},
								expr: &actionExpr{
									pos: position{line: 640, col: 9, offset: 20089},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 640, col: 9, offset: 20089},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 640, col: 10, offset: 20090},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 640, col: 10, offset: 20090},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 640, col: 16, offset: 20096},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 641, col: 9, offset: 20207},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 641, col: 16, offset: 20214},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 641, col: 16, offset: 20214},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 641, col: 33, offset: 20231},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 647, col: 1, offset: 20373},
			expr: &actionExpr{
				pos: position{line: 647, col: 19, offset: 20391},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 647, col: 19, offset: 20391},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 647, col: 19, offset: 20391},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 26, offset: 20398},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 647, col: 34, offset: 20406},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 647, col: 39, offset: 20411},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 44, offset: 20416},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 651, col: 1, offset: 20512},
			expr: &actionExpr{
				pos: position{line: 651, col: 20, offset: 20531},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 651, col: 20, offset: 20531},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 651, col: 32, offset: 20543},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 656, col: 1, offset: 20666},
			expr: &actionExpr{
				pos: position{line: 656, col: 14, offset: 20679},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 656, col: 14, offset: 20679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 14, offset: 20679},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 21, offset: 20686},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 40, offset: 20705},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 660, col: 1, offset: 20795},
			expr: &actionExpr{
				pos: position{line: 660, col: 22, offset: 20816},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 660, col: 22, offset: 20816},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 22, offset: 20816},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 29, offset: 20823},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 20837},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 661, col: 12, offset: 20844},
								expr: &actionExpr{
									pos: position{line: 662, col: 9, offset: 20854},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 662, col: 9, offset: 20854},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 662, col: 10, offset: 20855},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 662, col: 10, offset: 20855},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 662, col: 16, offset: 20861},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 663, col: 9, offset: 20972},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 663, col: 16, offset: 20979},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 669, col: 1, offset: 21114},
			expr: &choiceExpr{
				pos: position{line: 669, col: 13, offset: 21126},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 669, col: 13, offset: 21126},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 669, col: 13, offset: 21126},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 669, col: 18, offset: 21131},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 669, col: 18, offset: 21131},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 30, offset: 21143},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 671, col: 9, offset: 21219},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 671, col: 9, offset: 21219},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 671, col: 9, offset: 21219},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 671, col: 13, offset: 21223},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 671, col: 18, offset: 21228},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 671, col: 18, offset: 21228},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 671, col: 30, offset: 21240},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 675, col: 1, offset: 21316},
			expr: &actionExpr{
				pos: position{line: 675, col: 16, offset: 21331},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 675, col: 16, offset: 21331},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 675, col: 16, offset: 21331},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 675, col: 23, offset: 21338},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 675, col: 23, offset: 21338},
									expr: &litMatcher{
										pos:        position{line: 675, col: 24, offset: 21339},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 678, col: 5, offset: 21393},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 685, col: 1, offset: 21560},
			expr: &actionExpr{
				pos: position{line: 685, col: 21, offset: 21580},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 685, col: 21, offset: 21580},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 685, col: 21, offset: 21580},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 685, col: 29, offset: 21588},
								expr: &choiceExpr{
									pos: position{line: 685, col: 30, offset: 21589},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 685, col: 30, offset: 21589},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 685, col: 53, offset: 21612},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 685, col: 74, offset: 21633},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 685, col: 74, offset: 21633,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 107, offset: 21666},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 689, col: 1, offset: 21745},
			expr: &actionExpr{
				pos: position{line: 689, col: 25, offset: 21769},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 689, col: 25, offset: 21769},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 689, col: 25, offset: 21769},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 689, col: 33, offset: 21777},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 689, col: 38, offset: 21782},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 689, col: 38, offset: 21782},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 689, col: 78, offset: 21822},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 693, col: 1, offset: 21895},
			expr: &actionExpr{
				pos: position{line: 693, col: 23, offset: 21917},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 693, col: 23, offset: 21917},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 693, col: 23, offset: 21917},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 693, col: 31, offset: 21925},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 693, col: 36, offset: 21930},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 693, col: 36, offset: 21930},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 693, col: 76, offset: 21970},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 712, col: 1, offset: 22515},
			expr: &choiceExpr{
				pos: position{line: 712, col: 24, offset: 22538},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 712, col: 24, offset: 22538},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 712, col: 47, offset: 22561},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 712, col: 59, offset: 22573},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 714, col: 1, offset: 22590},
			expr: &actionExpr{
				pos: position{line: 714, col: 26, offset: 22615},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 714, col: 26, offset: 22615},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 714, col: 26, offset: 22615},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 714, col: 32, offset: 22621},
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 32, offset: 22621},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 39, offset: 22628},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 718, col: 1, offset: 22691},
			expr: &actionExpr{
				pos: position{line: 718, col: 20, offset: 22710},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 718, col: 20, offset: 22710},
					expr: &anyMatcher{
						line: 718, col: 21, offset: 22711,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 725, col: 1, offset: 22881},
			expr: &actionExpr{
				pos: position{line: 726, col: 5, offset: 22904},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 726, col: 5, offset: 22904},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 726, col: 15, offset: 22914},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 726, col: 15, offset: 22914},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 726, col: 15, offset: 22914},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 726, col: 24, offset: 22923},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 728, col: 9, offset: 23015},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 728, col: 9, offset: 23015},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 728, col: 9, offset: 23015},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 728, col: 18, offset: 23024},
												expr: &ruleRefExpr{
													pos:  position{line: 728, col: 19, offset: 23025},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 728, col: 35, offset: 23041},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 744, col: 1, offset: 23358},
			expr: &actionExpr{
				pos: position{line: 745, col: 5, offset: 23381},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 745, col: 5, offset: 23381},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 745, col: 14, offset: 23390},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 745, col: 14, offset: 23390},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 746, col: 11, offset: 23451},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 747, col: 11, offset: 23496},
								expr: &ruleRefExpr{
									pos:  position{line: 747, col: 11, offset: 23496},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 748, col: 11, offset: 23514},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 748, col: 11, offset: 23514},
										expr: &ruleRefExpr{
											pos:  position{line: 748, col: 12, offset: 23515},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 749, col: 13, offset: 23533},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 749, col: 13, offset: 23533},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 750, col: 15, offset: 23564},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 751, col: 15, offset: 23584},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 752, col: 15, offset: 23621},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 753, col: 15, offset: 23647},
												name: "Macro",
											},
											&ruleRefExpr{
												pos:  position{line: 754, col: 15, offset: 23667},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 755, col: 15, offset: 23697},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 757, col: 15, offset: 23797},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 789, col: 1, offset: 24813},
			expr: &actionExpr{
				pos: position{line: 789, col: 20, offset: 24832},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 789, col: 20, offset: 24832},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 789, col: 20, offset: 24832},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 789, col: 25, offset: 24837},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 29, offset: 24841},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 789, col: 33, offset: 24845},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 789, col: 38, offset: 24850},
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 38, offset: 24850},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 796, col: 1, offset: 25096},
			expr: &actionExpr{
				pos: position{line: 796, col: 14, offset: 25109},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 796, col: 14, offset: 25109},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 796, col: 14, offset: 25109},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 796, col: 19, offset: 25114},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 796, col: 25, offset: 25120},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 796, col: 43, offset: 25138},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 800, col: 1, offset: 25203},
			expr: &actionExpr{
				pos: position{line: 800, col: 21, offset: 25223},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 800, col: 21, offset: 25223},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 800, col: 30, offset: 25232},
						expr: &choiceExpr{
							pos: position{line: 800, col: 31, offset: 25233},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 800, col: 31, offset: 25233},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 38, offset: 25240},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 53, offset: 25255},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 66, offset: 25268},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 74, offset: 25276},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 93, offset: 25295},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 800, col: 114, offset: 25316},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 800, col: 115, offset: 25317},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 800, col: 115, offset: 25317},
												expr: &litMatcher{
													pos:        position{line: 800, col: 116, offset: 25318},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 800, col: 121, offset: 25323,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 806, col: 1, offset: 25429},
			expr: &actionExpr{
				pos: position{line: 806, col: 23, offset: 25451},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 806, col: 23, offset: 25451},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 806, col: 23, offset: 25451},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 806, col: 29, offset: 25457},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 36, offset: 25464},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 807, col: 5, offset: 25496},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 807, col: 11, offset: 25502},
								expr: &actionExpr{
									pos: position{line: 807, col: 12, offset: 25503},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 807, col: 12, offset: 25503},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 807, col: 12, offset: 25503},
												expr: &ruleRefExpr{
													pos:  position{line: 807, col: 12, offset: 25503},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 807, col: 19, offset: 25510},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 807, col: 23, offset: 25514},
												expr: &ruleRefExpr{
													pos:  position{line: 807, col: 23, offset: 25514},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 807, col: 30, offset: 25521},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 807, col: 39, offset: 25530},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 808, col: 5, offset: 25588},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 808, col: 11, offset: 25594},
								expr: &actionExpr{
									pos: position{line: 808, col: 12, offset: 25595},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 808, col: 12, offset: 25595},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 808, col: 12, offset: 25595},
												expr: &ruleRefExpr{
													pos:  position{line: 808, col: 12, offset: 25595},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 808, col: 19, offset: 25602},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 808, col: 23, offset: 25606},
												expr: &ruleRefExpr{
													pos:  position{line: 808, col: 23, offset: 25606},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 808, col: 30, offset: 25613},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 808, col: 39, offset: 25622},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 809, col: 5, offset: 25680},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 813, col: 1, offset: 25759},
			expr: &actionExpr{
				pos: position{line: 813, col: 30, offset: 25788},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 813, col: 30, offset: 25788},
					expr: &choiceExpr{
						pos: position{line: 813, col: 31, offset: 25789},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 813, col: 31, offset: 25789},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 42, offset: 25800},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 820, col: 1, offset: 25946},
			expr: &actionExpr{
				pos: position{line: 821, col: 5, offset: 25965},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 821, col: 5, offset: 25965},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 821, col: 5, offset: 25965},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 825, col: 5, offset: 26117},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 825, col: 15, offset: 26127},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 21, offset: 26133},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 825, col: 31, offset: 26143},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 49, offset: 26161},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 825, col: 67, offset: 26179},
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 67, offset: 26179},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 825, col: 74, offset: 26186},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 830, col: 1, offset: 26432},
			expr: &actionExpr{
				pos: position{line: 830, col: 16, offset: 26447},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 830, col: 16, offset: 26447},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 830, col: 16, offset: 26447},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 830, col: 25, offset: 26456},
							expr: &litMatcher{
								pos:        position{line: 830, col: 26, offset: 26457},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 830, col: 30, offset: 26461},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 830, col: 36, offset: 26467},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 830, col: 46, offset: 26477},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 830, col: 64, offset: 26495},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 837, col: 1, offset: 26838},
			expr: &actionExpr{
				pos: position{line: 837, col: 15, offset: 26852},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 837, col: 15, offset: 26852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 837, col: 15, offset: 26852},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 837, col: 23, offset: 26860},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 837, col: 29, offset: 26866},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 837, col: 29, offset: 26866},
									expr: &charClassMatcher{
										pos:        position{line: 837, col: 29, offset: 26866},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 837, col: 73, offset: 26910},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 85, offset: 26922},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 844, col: 1, offset: 27202},
			expr: &choiceExpr{
				pos: position{line: 844, col: 19, offset: 27220},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 844, col: 19, offset: 27220},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 844, col: 19, offset: 27220},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 844, col: 19, offset: 27220},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 844, col: 32, offset: 27233},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 41, offset: 27242},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 844, col: 58, offset: 27259},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 846, col: 9, offset: 27335},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 846, col: 9, offset: 27335},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 846, col: 9, offset: 27335},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 846, col: 21, offset: 27347},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 846, col: 26, offset: 27352},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 846, col: 39, offset: 27365},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 846, col: 43, offset: 27369},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 846, col: 51, offset: 27377},
										expr: &ruleRefExpr{
											pos:  position{line: 846, col: 52, offset: 27378},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 846, col: 70, offset: 27396},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 850, col: 1, offset: 27465},
			expr: &ruleRefExpr{
				pos:  position{line: 850, col: 16, offset: 27480},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 852, col: 1, offset: 27491},
			expr: &actionExpr{
				pos: position{line: 852, col: 20, offset: 27510},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 852, col: 20, offset: 27510},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 852, col: 29, offset: 27519},
						expr: &seqExpr{
							pos: position{line: 852, col: 30, offset: 27520},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 852, col: 30, offset: 27520},
									expr: &litMatcher{
										pos:        position{line: 852, col: 31, offset: 27521},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 35, offset: 27525},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 859, col: 1, offset: 27774},
			expr: &choiceExpr{
				pos: position{line: 859, col: 22, offset: 27795},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 859, col: 22, offset: 27795},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 46, offset: 27819},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 70, offset: 27843},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 861, col: 1, offset: 27861},
			expr: &litMatcher{
				pos:        position{line: 861, col: 32, offset: 27892},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 863, col: 1, offset: 27897},
			expr: &actionExpr{
				pos: position{line: 863, col: 26, offset: 27922},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 863, col: 26, offset: 27922},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 863, col: 26, offset: 27922},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 863, col: 54, offset: 27950},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 63, offset: 27959},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 863, col: 93, offset: 27989},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 863, col: 121, offset: 28017},
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 122, offset: 28018},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 867, col: 1, offset: 28131},
			expr: &choiceExpr{
				pos: position{line: 867, col: 33, offset: 28163},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 867, col: 34, offset: 28164},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 867, col: 34, offset: 28164},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 867, col: 35, offset: 28165},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 867, col: 35, offset: 28165},
											expr: &ruleRefExpr{
												pos:  position{line: 867, col: 36, offset: 28166},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 867, col: 64, offset: 28194},
											expr: &ruleRefExpr{
												pos:  position{line: 867, col: 65, offset: 28195},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 867, col: 71, offset: 28201},
											expr: &ruleRefExpr{
												pos:  position{line: 867, col: 72, offset: 28202},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 867, col: 80, offset: 28210,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 867, col: 83, offset: 28213},
									expr: &seqExpr{
										pos: position{line: 867, col: 84, offset: 28214},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 867, col: 84, offset: 28214},
												expr: &seqExpr{
													pos: position{line: 867, col: 86, offset: 28216},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 867, col: 86, offset: 28216},
															expr: &ruleRefExpr{
																pos:  position{line: 867, col: 86, offset: 28216},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 867, col: 93, offset: 28223},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 867, col: 122, offset: 28252},
												expr: &ruleRefExpr{
													pos:  position{line: 867, col: 123, offset: 28253},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 867, col: 151, offset: 28281},
												expr: &ruleRefExpr{
													pos:  position{line: 867, col: 152, offset: 28282},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 867, col: 160, offset: 28290,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 869, col: 11, offset: 28440},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 869, col: 12, offset: 28441},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 869, col: 12, offset: 28441},
									expr: &ruleRefExpr{
										pos:  position{line: 869, col: 13, offset: 28442},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 869, col: 19, offset: 28448},
									expr: &ruleRefExpr{
										pos:  position{line: 869, col: 20, offset: 28449},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 869, col: 28, offset: 28457},
									expr: &ruleRefExpr{
										pos:  position{line: 869, col: 29, offset: 28458},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 869, col: 57, offset: 28486,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 873, col: 1, offset: 28576},
			expr: &litMatcher{
				pos:        position{line: 873, col: 32, offset: 28607},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 875, col: 1, offset: 28614},
			expr: &actionExpr{
				pos: position{line: 875, col: 26, offset: 28639},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 875, col: 26, offset: 28639},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 875, col: 26, offset: 28639},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 875, col: 54, offset: 28667},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 63, offset: 28676},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 875, col: 93, offset: 28706},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 875, col: 121, offset: 28734},
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 122, offset: 28735},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 879, col: 1, offset: 28848},
			expr: &choiceExpr{
				pos: position{line: 879, col: 33, offset: 28880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 879, col: 34, offset: 28881},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 879, col: 34, offset: 28881},
							expr: &seqExpr{
								pos: position{line: 879, col: 35, offset: 28882},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 879, col: 35, offset: 28882},
										expr: &ruleRefExpr{
											pos:  position{line: 879, col: 36, offset: 28883},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 879, col: 64, offset: 28911,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 11, offset: 29084},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 881, col: 11, offset: 29084},
							expr: &seqExpr{
								pos: position{line: 881, col: 12, offset: 29085},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 881, col: 12, offset: 29085},
										expr: &ruleRefExpr{
											pos:  position{line: 881, col: 13, offset: 29086},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 881, col: 19, offset: 29092},
										expr: &ruleRefExpr{
											pos:  position{line: 881, col: 20, offset: 29093},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 881, col: 28, offset: 29101},
										expr: &ruleRefExpr{
											pos:  position{line: 881, col: 29, offset: 29102},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 881, col: 57, offset: 29130,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 885, col: 1, offset: 29221},
			expr: &choiceExpr{
				pos: position{line: 885, col: 21, offset: 29241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 885, col: 21, offset: 29241},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 885, col: 21, offset: 29241},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 885, col: 21, offset: 29241},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 885, col: 30, offset: 29250},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 885, col: 38, offset: 29258},
										expr: &ruleRefExpr{
											pos:  position{line: 885, col: 39, offset: 29259},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 885, col: 67, offset: 29287},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 887, col: 9, offset: 29391},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 887, col: 9, offset: 29391},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 887, col: 9, offset: 29391},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 887, col: 19, offset: 29401},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 887, col: 27, offset: 29409},
										expr: &choiceExpr{
											pos: position{line: 887, col: 28, offset: 29410},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 887, col: 28, offset: 29410},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 887, col: 41, offset: 29423},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 887, col: 69, offset: 29451},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 891, col: 1, offset: 29555},
			expr: &actionExpr{
				pos: position{line: 891, col: 30, offset: 29584},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 891, col: 30, offset: 29584},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 898, col: 1, offset: 29754},
			expr: &choiceExpr{
				pos: position{line: 898, col: 9, offset: 29762},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 898, col: 9, offset: 29762},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 898, col: 24, offset: 29777},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 901, col: 1, offset: 29858},
			expr: &actionExpr{
				pos: position{line: 901, col: 17, offset: 29874},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 901, col: 17, offset: 29874},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 901, col: 17, offset: 29874},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 25, offset: 29882},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 30, offset: 29887},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 901, col: 40, offset: 29897},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 58, offset: 29915},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 905, col: 1, offset: 30036},
			expr: &actionExpr{
				pos: position{line: 905, col: 17, offset: 30052},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 905, col: 17, offset: 30052},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 905, col: 17, offset: 30052},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 905, col: 22, offset: 30057},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 905, col: 42, offset: 30077},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 905, col: 59, offset: 30094},
								expr: &ruleRefExpr{
									pos:  position{line: 905, col: 60, offset: 30095},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Macro",
			pos:  position{line: 913, col: 1, offset: 30368},
			expr: &choiceExpr{
				pos: position{line: 913, col: 10, offset: 30377},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 913, col: 10, offset: 30377},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 7, offset: 30394},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 915, col: 7, offset: 30413},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 916, col: 7, offset: 30425},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 917, col: 7, offset: 30450},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 918, col: 7, offset: 30472},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 919, col: 7, offset: 30494},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 920, col: 7, offset: 30517},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 921, col: 7, offset: 30539},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 7, offset: 30564},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 928, col: 1, offset: 30755},
			expr: &ruleRefExpr{
				pos:  position{line: 928, col: 20, offset: 30774},
				name: "LineBreak",
			},
		},
		{
			name: "Quote",
			pos:  position{line: 935, col: 1, offset: 30961},
			expr: &choiceExpr{
				pos: position{line: 935, col: 10, offset: 30970},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 935, col: 10, offset: 30970},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 935, col: 23, offset: 30983},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 942, col: 1, offset: 31241},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 31260},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 944, col: 9, offset: 31270},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 944, col: 9, offset: 31270},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 9, offset: 31270},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 944, col: 20, offset: 31281},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 21, offset: 31282},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 945, col: 9, offset: 31312},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 945, col: 15, offset: 31318},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 945, col: 15, offset: 31318},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 945, col: 41, offset: 31344},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 7, offset: 31462},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 951, col: 1, offset: 31481},
			expr: &choiceExpr{
				pos: position{line: 951, col: 32, offset: 31512},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 951, col: 32, offset: 31512},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 951, col: 32, offset: 31512},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 951, col: 36, offset: 31516},
								expr: &litMatcher{
									pos:        position{line: 951, col: 37, offset: 31517},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 951, col: 43, offset: 31523},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 951, col: 43, offset: 31523},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 951, col: 47, offset: 31527},
								expr: &litMatcher{
									pos:        position{line: 951, col: 48, offset: 31528},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 951, col: 54, offset: 31534},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 951, col: 54, offset: 31534},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 951, col: 58, offset: 31538},
								expr: &litMatcher{
									pos:        position{line: 951, col: 59, offset: 31539},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 951, col: 65, offset: 31545},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 951, col: 65, offset: 31545},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 951, col: 69, offset: 31549},
								expr: &litMatcher{
									pos:        position{line: 951, col: 70, offset: 31550},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 953, col: 1, offset: 31555},
			expr: &choiceExpr{
				pos: position{line: 953, col: 34, offset: 31588},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 953, col: 34, offset: 31588},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 953, col: 41, offset: 31595},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 953, col: 48, offset: 31602},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 953, col: 55, offset: 31609},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 953, col: 62, offset: 31616},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 953, col: 68, offset: 31622},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 955, col: 1, offset: 31627},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 31657},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 956, col: 5, offset: 31657},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 7, offset: 31684},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 7, offset: 31712},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 959, col: 7, offset: 31740},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 7, offset: 31772},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 961, col: 7, offset: 31793},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 963, col: 1, offset: 31811},
			expr: &choiceExpr{
				pos: position{line: 964, col: 5, offset: 31843},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 964, col: 5, offset: 31843},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 965, col: 7, offset: 31869},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 966, col: 7, offset: 31897},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 967, col: 7, offset: 31925},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 969, col: 1, offset: 31951},
			expr: &choiceExpr{
				pos: position{line: 970, col: 5, offset: 31977},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 970, col: 5, offset: 31977},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 7, offset: 32000},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 972, col: 7, offset: 32024},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 7, offset: 32048},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 974, col: 7, offset: 32076},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 7, offset: 32104},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 977, col: 1, offset: 32128},
			expr: &choiceExpr{
				pos: position{line: 977, col: 33, offset: 32160},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 977, col: 33, offset: 32160},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 977, col: 39, offset: 32166},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 977, col: 39, offset: 32166},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 981, col: 1, offset: 32308},
			expr: &actionExpr{
				pos: position{line: 981, col: 25, offset: 32332},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 981, col: 25, offset: 32332},
					expr: &litMatcher{
						pos:        position{line: 981, col: 25, offset: 32332},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 985, col: 1, offset: 32381},
			expr: &actionExpr{
				pos: position{line: 985, col: 25, offset: 32405},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 985, col: 25, offset: 32405},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 985, col: 25, offset: 32405},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 985, col: 30, offset: 32410},
							expr: &litMatcher{
								pos:        position{line: 985, col: 30, offset: 32410},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 992, col: 1, offset: 32514},
			expr: &choiceExpr{
				pos: position{line: 992, col: 13, offset: 32526},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 992, col: 13, offset: 32526},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 35, offset: 32548},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 994, col: 1, offset: 32615},
			expr: &actionExpr{
				pos: position{line: 994, col: 24, offset: 32638},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 994, col: 24, offset: 32638},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 994, col: 24, offset: 32638},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 994, col: 29, offset: 32643},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 39, offset: 32653},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 994, col: 68, offset: 32682},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 998, col: 1, offset: 32781},
			expr: &zeroOrMoreExpr{
				pos: position{line: 998, col: 32, offset: 32812},
				expr: &ruleRefExpr{
					pos:  position{line: 998, col: 32, offset: 32812},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1000, col: 1, offset: 32843},
			expr: &actionExpr{
				pos: position{line: 1000, col: 31, offset: 32873},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1000, col: 31, offset: 32873},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1000, col: 31, offset: 32873},
							expr: &litMatcher{
								pos:        position{line: 1000, col: 33, offset: 32875},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1000, col: 39, offset: 32881},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1000, col: 48, offset: 32890},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1000, col: 48, offset: 32890},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1001, col: 7, offset: 32901},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1002, col: 7, offset: 32946},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1002, col: 7, offset: 32946},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1002, col: 15, offset: 32954},
												expr: &ruleRefExpr{
													pos:  position{line: 1002, col: 16, offset: 32955},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1003, col: 7, offset: 32969},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1004, col: 7, offset: 32988},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1005, col: 7, offset: 33026},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1006, col: 7, offset: 33051},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1010, col: 1, offset: 33126},
			expr: &actionExpr{
				pos: position{line: 1011, col: 5, offset: 33166},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 5, offset: 33166},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1011, col: 5, offset: 33166},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1011, col: 16, offset: 33177},
								expr: &ruleRefExpr{
									pos:  position{line: 1011, col: 17, offset: 33178},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1012, col: 5, offset: 33204},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1012, col: 11, offset: 33210},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1012, col: 11, offset: 33210},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1013, col: 11, offset: 33240},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1014, col: 11, offset: 33261},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1015, col: 11, offset: 33282},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1016, col: 11, offset: 33306},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1017, col: 11, offset: 33330},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1021, col: 1, offset: 33430},
			expr: &choiceExpr{
				pos: position{line: 1022, col: 5, offset: 33474},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1022, col: 5, offset: 33474},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1023, col: 7, offset: 33571},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1023, col: 7, offset: 33571},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1023, col: 7, offset: 33571},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1023, col: 12, offset: 33576},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1027, col: 1, offset: 33747},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 5, offset: 33775},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 33775},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 33775},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1028, col: 6, offset: 33776},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1028, col: 6, offset: 33776},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1028, col: 10, offset: 33780},
											expr: &litMatcher{
												pos:        position{line: 1028, col: 11, offset: 33781},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 16, offset: 33786},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 26, offset: 33796},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1028, col: 55, offset: 33825},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1028, col: 59, offset: 33829},
									expr: &notExpr{
										pos: position{line: 1028, col: 61, offset: 33831},
										expr: &ruleRefExpr{
											pos:  position{line: 1028, col: 62, offset: 33832},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 9, offset: 34038},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1030, col: 9, offset: 34038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1030, col: 9, offset: 34038},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 13, offset: 34042},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1030, col: 23, offset: 34052},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1030, col: 23, offset: 34052},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1030, col: 27, offset: 34056},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 56, offset: 34085},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1034, col: 1, offset: 34303},
			expr: &seqExpr{
				pos: position{line: 1034, col: 32, offset: 34334},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1034, col: 32, offset: 34334},
						expr: &ruleRefExpr{
							pos:  position{line: 1034, col: 33, offset: 34335},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1034, col: 39, offset: 34341},
						expr: &ruleRefExpr{
							pos:  position{line: 1034, col: 39, offset: 34341},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1036, col: 1, offset: 34370},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 5, offset: 34405},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1037, col: 5, offset: 34405},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1038, col: 7, offset: 34416},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1038, col: 7, offset: 34416},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1038, col: 15, offset: 34424},
								expr: &ruleRefExpr{
									pos:  position{line: 1038, col: 16, offset: 34425},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 7, offset: 34439},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1040, col: 7, offset: 34458},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1040, col: 7, offset: 34458},
								expr: &ruleRefExpr{
									pos:  position{line: 1040, col: 7, offset: 34458},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1040, col: 14, offset: 34465},
								expr: &seqExpr{
									pos: position{line: 1040, col: 15, offset: 34466},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1040, col: 15, offset: 34466},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1040, col: 19, offset: 34470},
											expr: &litMatcher{
												pos:        position{line: 1040, col: 20, offset: 34471},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1041, col: 7, offset: 34483},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 7, offset: 34521},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 7, offset: 34546},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1045, col: 1, offset: 34584},
			expr: &actionExpr{
				pos: position{line: 1046, col: 5, offset: 34624},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1046, col: 5, offset: 34624},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1046, col: 5, offset: 34624},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1046, col: 16, offset: 34635},
								expr: &ruleRefExpr{
									pos:  position{line: 1046, col: 17, offset: 34636},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1047, col: 5, offset: 34662},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1047, col: 11, offset: 34668},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1047, col: 11, offset: 34668},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1048, col: 11, offset: 34698},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1049, col: 11, offset: 34719},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1050, col: 11, offset: 34740},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1051, col: 11, offset: 34764},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1052, col: 11, offset: 34788},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1055, col: 1, offset: 34887},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 5, offset: 34931},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1056, col: 5, offset: 34931},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1057, col: 7, offset: 35028},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1057, col: 7, offset: 35028},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1057, col: 7, offset: 35028},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1057, col: 11, offset: 35032},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1061, col: 1, offset: 35203},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 35227},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 35227},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1062, col: 5, offset: 35227},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1062, col: 5, offset: 35227},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 18, offset: 35240},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1062, col: 40, offset: 35262},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 45, offset: 35267},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 55, offset: 35277},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1062, col: 84, offset: 35306},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1064, col: 9, offset: 35463},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1064, col: 9, offset: 35463},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1064, col: 9, offset: 35463},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1064, col: 22, offset: 35476},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1064, col: 44, offset: 35498},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1064, col: 49, offset: 35503},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1064, col: 59, offset: 35513},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1064, col: 88, offset: 35542},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1067, col: 9, offset: 35742},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1067, col: 9, offset: 35742},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1067, col: 9, offset: 35742},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1067, col: 22, offset: 35755},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1067, col: 44, offset: 35777},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1067, col: 48, offset: 35781},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1067, col: 58, offset: 35791},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1067, col: 87, offset: 35820},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1074, col: 1, offset: 36030},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 15, offset: 36044},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1074, col: 15, offset: 36044},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1074, col: 39, offset: 36068},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1076, col: 1, offset: 36091},
			expr: &actionExpr{
				pos: position{line: 1076, col: 26, offset: 36116},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 26, offset: 36116},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1076, col: 26, offset: 36116},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 31, offset: 36121},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 41, offset: 36131},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1076, col: 72, offset: 36162},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1080, col: 1, offset: 36308},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1080, col: 34, offset: 36341},
				expr: &ruleRefExpr{
					pos:  position{line: 1080, col: 34, offset: 36341},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1082, col: 1, offset: 36373},
			expr: &actionExpr{
				pos: position{line: 1083, col: 5, offset: 36410},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1083, col: 5, offset: 36410},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1083, col: 5, offset: 36410},
							expr: &litMatcher{
								pos:        position{line: 1083, col: 7, offset: 36412},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1083, col: 13, offset: 36418},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1083, col: 22, offset: 36427},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1083, col: 22, offset: 36427},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1084, col: 7, offset: 36438},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1085, col: 7, offset: 36483},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1085, col: 7, offset: 36483},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1085, col: 15, offset: 36491},
												expr: &ruleRefExpr{
													pos:  position{line: 1085, col: 16, offset: 36492},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1086, col: 7, offset: 36506},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1087, col: 7, offset: 36525},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1088, col: 7, offset: 36565},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1089, col: 7, offset: 36590},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1093, col: 1, offset: 36667},
			expr: &actionExpr{
				pos: position{line: 1094, col: 5, offset: 36709},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1094, col: 5, offset: 36709},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1094, col: 5, offset: 36709},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1094, col: 16, offset: 36720},
								expr: &ruleRefExpr{
									pos:  position{line: 1094, col: 17, offset: 36721},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 5, offset: 36747},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1095, col: 11, offset: 36753},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1095, col: 11, offset: 36753},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1096, col: 11, offset: 36785},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1097, col: 11, offset: 36804},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 36825},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 11, offset: 36849},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1100, col: 11, offset: 36873},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1104, col: 1, offset: 36973},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 5, offset: 37019},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1105, col: 5, offset: 37019},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1106, col: 7, offset: 37118},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1106, col: 7, offset: 37118},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1106, col: 7, offset: 37118},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1106, col: 12, offset: 37123},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1110, col: 1, offset: 37296},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 5, offset: 37326},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 37326},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1111, col: 5, offset: 37326},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1111, col: 6, offset: 37327},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1111, col: 6, offset: 37327},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1111, col: 10, offset: 37331},
											expr: &litMatcher{
												pos:        position{line: 1111, col: 11, offset: 37332},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 16, offset: 37337},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 26, offset: 37347},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1111, col: 57, offset: 37378},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 9, offset: 37580},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1113, col: 9, offset: 37580},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 9, offset: 37580},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 13, offset: 37584},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1113, col: 23, offset: 37594},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1113, col: 23, offset: 37594},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1113, col: 27, offset: 37598},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 58, offset: 37629},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1117, col: 1, offset: 37851},
			expr: &seqExpr{
				pos: position{line: 1117, col: 34, offset: 37884},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1117, col: 34, offset: 37884},
						expr: &ruleRefExpr{
							pos:  position{line: 1117, col: 35, offset: 37885},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1117, col: 41, offset: 37891},
						expr: &ruleRefExpr{
							pos:  position{line: 1117, col: 41, offset: 37891},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1119, col: 1, offset: 37922},
			expr: &choiceExpr{
				pos: position{line: 1120, col: 5, offset: 37959},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1120, col: 5, offset: 37959},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1121, col: 7, offset: 37970},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1121, col: 7, offset: 37970},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1121, col: 15, offset: 37978},
								expr: &ruleRefExpr{
									pos:  position{line: 1121, col: 16, offset: 37979},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1122, col: 7, offset: 37993},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1123, col: 7, offset: 38012},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1123, col: 7, offset: 38012},
								expr: &ruleRefExpr{
									pos:  position{line: 1123, col: 7, offset: 38012},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1123, col: 14, offset: 38019},
								expr: &seqExpr{
									pos: position{line: 1123, col: 15, offset: 38020},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1123, col: 15, offset: 38020},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1123, col: 19, offset: 38024},
											expr: &litMatcher{
												pos:        position{line: 1123, col: 20, offset: 38025},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1124, col: 7, offset: 38037},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 7, offset: 38077},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 7, offset: 38102},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1128, col: 1, offset: 38142},
			expr: &actionExpr{
				pos: position{line: 1129, col: 5, offset: 38183},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 5, offset: 38183},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1129, col: 5, offset: 38183},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1129, col: 16, offset: 38194},
								expr: &ruleRefExpr{
									pos:  position{line: 1129, col: 17, offset: 38195},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1130, col: 5, offset: 38221},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1130, col: 11, offset: 38227},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1130, col: 11, offset: 38227},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 11, offset: 38246},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1132, col: 11, offset: 38278},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 11, offset: 38299},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1134, col: 11, offset: 38323},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1135, col: 11, offset: 38347},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1139, col: 1, offset: 38447},
			expr: &choiceExpr{
				pos: position{line: 1140, col: 5, offset: 38493},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1140, col: 5, offset: 38493},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1141, col: 7, offset: 38592},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1141, col: 7, offset: 38592},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1141, col: 7, offset: 38592},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1141, col: 11, offset: 38596},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1145, col: 1, offset: 38770},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 5, offset: 38796},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 38796},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1146, col: 5, offset: 38796},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1146, col: 5, offset: 38796},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 18, offset: 38809},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 40, offset: 38831},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 45, offset: 38836},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 55, offset: 38846},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 86, offset: 38877},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 9, offset: 39034},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1148, col: 9, offset: 39034},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1148, col: 9, offset: 39034},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 22, offset: 39047},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 44, offset: 39069},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 49, offset: 39074},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 59, offset: 39084},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 90, offset: 39115},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1151, col: 9, offset: 39315},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1151, col: 9, offset: 39315},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1151, col: 9, offset: 39315},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 22, offset: 39328},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 44, offset: 39350},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 48, offset: 39354},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 58, offset: 39364},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 89, offset: 39395},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1158, col: 1, offset: 39605},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 18, offset: 39622},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 18, offset: 39622},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 45, offset: 39649},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1160, col: 1, offset: 39675},
			expr: &actionExpr{
				pos: position{line: 1160, col: 29, offset: 39703},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 29, offset: 39703},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1160, col: 29, offset: 39703},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 34, offset: 39708},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 44, offset: 39718},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1160, col: 78, offset: 39752},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1164, col: 1, offset: 39901},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1164, col: 37, offset: 39937},
				expr: &ruleRefExpr{
					pos:  position{line: 1164, col: 37, offset: 39937},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1166, col: 1, offset: 40004},
			expr: &actionExpr{
				pos: position{line: 1167, col: 5, offset: 40044},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 5, offset: 40044},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1167, col: 5, offset: 40044},
							expr: &litMatcher{
								pos:        position{line: 1167, col: 7, offset: 40046},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 13, offset: 40052},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1167, col: 22, offset: 40061},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1167, col: 22, offset: 40061},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1168, col: 7, offset: 40072},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1169, col: 7, offset: 40117},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1169, col: 7, offset: 40117},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1169, col: 15, offset: 40125},
												expr: &ruleRefExpr{
													pos:  position{line: 1169, col: 16, offset: 40126},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1170, col: 7, offset: 40140},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1171, col: 7, offset: 40159},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1172, col: 7, offset: 40222},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1173, col: 7, offset: 40265},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 7, offset: 40290},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1178, col: 1, offset: 40370},
			expr: &actionExpr{
				pos: position{line: 1179, col: 5, offset: 40414},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 5, offset: 40414},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1179, col: 5, offset: 40414},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1179, col: 16, offset: 40425},
								expr: &ruleRefExpr{
									pos:  position{line: 1179, col: 17, offset: 40426},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 5, offset: 40452},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1180, col: 11, offset: 40458},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1180, col: 11, offset: 40458},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1181, col: 11, offset: 40493},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1182, col: 11, offset: 40512},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1183, col: 11, offset: 40533},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1184, col: 11, offset: 40554},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1185, col: 11, offset: 40578},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1189, col: 1, offset: 40679},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 5, offset: 40728},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1190, col: 5, offset: 40728},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1191, col: 7, offset: 40830},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1191, col: 7, offset: 40830},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1191, col: 7, offset: 40830},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1191, col: 12, offset: 40835},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1195, col: 1, offset: 41013},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 5, offset: 41046},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 41046},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1196, col: 5, offset: 41046},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1196, col: 6, offset: 41047},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1196, col: 6, offset: 41047},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1196, col: 10, offset: 41051},
											expr: &litMatcher{
												pos:        position{line: 1196, col: 11, offset: 41052},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 16, offset: 41057},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 26, offset: 41067},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 60, offset: 41101},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1198, col: 9, offset: 41306},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1198, col: 9, offset: 41306},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1198, col: 9, offset: 41306},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1198, col: 13, offset: 41310},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1198, col: 23, offset: 41320},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1198, col: 23, offset: 41320},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1198, col: 27, offset: 41324},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1198, col: 61, offset: 41358},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1202, col: 1, offset: 41584},
			expr: &seqExpr{
				pos: position{line: 1202, col: 37, offset: 41620},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1202, col: 37, offset: 41620},
						expr: &ruleRefExpr{
							pos:  position{line: 1202, col: 38, offset: 41621},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1202, col: 44, offset: 41627},
						expr: &ruleRefExpr{
							pos:  position{line: 1202, col: 44, offset: 41627},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1204, col: 1, offset: 41661},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 5, offset: 41702},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 5, offset: 41702},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1206, col: 7, offset: 41713},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1206, col: 7, offset: 41713},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1206, col: 15, offset: 41721},
								expr: &ruleRefExpr{
									pos:  position{line: 1206, col: 16, offset: 41722},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 7, offset: 41736},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1208, col: 7, offset: 41755},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1208, col: 7, offset: 41755},
								expr: &ruleRefExpr{
									pos:  position{line: 1208, col: 7, offset: 41755},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1208, col: 14, offset: 41762},
								expr: &seqExpr{
									pos: position{line: 1208, col: 15, offset: 41763},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1208, col: 15, offset: 41763},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1208, col: 19, offset: 41767},
											expr: &litMatcher{
												pos:        position{line: 1208, col: 20, offset: 41768},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 7, offset: 41892},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 7, offset: 41935},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 7, offset: 41955},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 7, offset: 41980},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1214, col: 1, offset: 42023},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 42067},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 42067},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1215, col: 5, offset: 42067},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1215, col: 16, offset: 42078},
								expr: &ruleRefExpr{
									pos:  position{line: 1215, col: 17, offset: 42079},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 5, offset: 42105},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1216, col: 11, offset: 42111},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1216, col: 11, offset: 42111},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1217, col: 11, offset: 42146},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1218, col: 11, offset: 42165},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1219, col: 11, offset: 42186},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1220, col: 11, offset: 42207},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1221, col: 11, offset: 42231},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1225, col: 1, offset: 42332},
			expr: &actionExpr{
				pos: position{line: 1226, col: 5, offset: 42381},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1226, col: 6, offset: 42382},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1226, col: 6, offset: 42382},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1227, col: 7, offset: 42486},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1227, col: 7, offset: 42486},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1227, col: 11, offset: 42490},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1231, col: 1, offset: 42668},
			expr: &choiceExpr{
				pos: position{line: 1232, col: 5, offset: 42697},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1232, col: 5, offset: 42697},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1232, col: 5, offset: 42697},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1232, col: 5, offset: 42697},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 18, offset: 42710},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 40, offset: 42732},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1232, col: 45, offset: 42737},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 55, offset: 42747},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 89, offset: 42781},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1234, col: 9, offset: 42938},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1234, col: 9, offset: 42938},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1234, col: 9, offset: 42938},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 22, offset: 42951},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 44, offset: 42973},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1234, col: 49, offset: 42978},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 59, offset: 42988},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 93, offset: 43022},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1237, col: 9, offset: 43222},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1237, col: 9, offset: 43222},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1237, col: 9, offset: 43222},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 22, offset: 43235},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1237, col: 44, offset: 43257},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1237, col: 48, offset: 43261},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 58, offset: 43271},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1237, col: 92, offset: 43305},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1244, col: 1, offset: 43515},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 15, offset: 43529},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1244, col: 15, offset: 43529},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 39, offset: 43553},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1246, col: 1, offset: 43576},
			expr: &actionExpr{
				pos: position{line: 1246, col: 26, offset: 43601},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1246, col: 26, offset: 43601},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1246, col: 26, offset: 43601},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1246, col: 31, offset: 43606},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1246, col: 41, offset: 43616},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1246, col: 72, offset: 43647},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1250, col: 1, offset: 43793},
			expr: &seqExpr{
				pos: position{line: 1250, col: 34, offset: 43826},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1250, col: 34, offset: 43826},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1250, col: 63, offset: 43855},
						expr: &seqExpr{
							pos: position{line: 1250, col: 64, offset: 43856},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1250, col: 64, offset: 43856},
									expr: &litMatcher{
										pos:        position{line: 1250, col: 66, offset: 43858},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1250, col: 73, offset: 43865},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1250, col: 73, offset: 43865},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1250, col: 81, offset: 43873},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1252, col: 1, offset: 43940},
			expr: &choiceExpr{
				pos: position{line: 1252, col: 33, offset: 43972},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1252, col: 33, offset: 43972},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1253, col: 7, offset: 43983},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1253, col: 7, offset: 43983},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1253, col: 15, offset: 43991},
								expr: &ruleRefExpr{
									pos:  position{line: 1253, col: 16, offset: 43992},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 7, offset: 44006},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 7, offset: 44025},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 7, offset: 44056},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 7, offset: 44081},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1259, col: 1, offset: 44121},
			expr: &actionExpr{
				pos: position{line: 1260, col: 5, offset: 44153},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1260, col: 5, offset: 44153},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1260, col: 5, offset: 44153},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1260, col: 16, offset: 44164},
								expr: &ruleRefExpr{
									pos:  position{line: 1260, col: 17, offset: 44165},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1261, col: 5, offset: 44191},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1261, col: 11, offset: 44197},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1261, col: 11, offset: 44197},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1262, col: 11, offset: 44216},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1263, col: 11, offset: 44237},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1264, col: 11, offset: 44261},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1265, col: 11, offset: 44293},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1266, col: 11, offset: 44317},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1270, col: 1, offset: 44418},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 5, offset: 44464},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1271, col: 5, offset: 44464},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1272, col: 7, offset: 44563},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1272, col: 7, offset: 44563},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1272, col: 7, offset: 44563},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1272, col: 12, offset: 44568},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1276, col: 1, offset: 44741},
			expr: &choiceExpr{
				pos: position{line: 1276, col: 26, offset: 44766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1276, col: 26, offset: 44766},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1276, col: 26, offset: 44766},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1276, col: 27, offset: 44767},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1276, col: 27, offset: 44767},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1276, col: 31, offset: 44771},
											expr: &litMatcher{
												pos:        position{line: 1276, col: 32, offset: 44772},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 37, offset: 44777},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 47, offset: 44787},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 78, offset: 44818},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1278, col: 9, offset: 45020},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1278, col: 9, offset: 45020},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1278, col: 9, offset: 45020},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 13, offset: 45024},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1278, col: 23, offset: 45034},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1278, col: 23, offset: 45034},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1278, col: 27, offset: 45038},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1278, col: 58, offset: 45069},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1282, col: 1, offset: 45290},
			expr: &seqExpr{
				pos: position{line: 1282, col: 34, offset: 45323},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1282, col: 34, offset: 45323},
						expr: &ruleRefExpr{
							pos:  position{line: 1282, col: 35, offset: 45324},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1282, col: 41, offset: 45330},
						expr: &ruleRefExpr{
							pos:  position{line: 1282, col: 41, offset: 45330},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1284, col: 1, offset: 45361},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 33, offset: 45393},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1284, col: 33, offset: 45393},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1285, col: 7, offset: 45404},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1285, col: 7, offset: 45404},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1285, col: 15, offset: 45412},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 16, offset: 45413},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 7, offset: 45427},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1287, col: 7, offset: 45446},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1287, col: 7, offset: 45446},
								expr: &ruleRefExpr{
									pos:  position{line: 1287, col: 7, offset: 45446},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1287, col: 14, offset: 45453},
								expr: &seqExpr{
									pos: position{line: 1287, col: 15, offset: 45454},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1287, col: 15, offset: 45454},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1287, col: 19, offset: 45458},
											expr: &litMatcher{
												pos:        position{line: 1287, col: 20, offset: 45459},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 7, offset: 45471},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 7, offset: 45502},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 7, offset: 45527},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1292, col: 1, offset: 45567},
			expr: &actionExpr{
				pos: position{line: 1293, col: 5, offset: 45599},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1293, col: 5, offset: 45599},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1293, col: 5, offset: 45599},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1293, col: 16, offset: 45610},
								expr: &ruleRefExpr{
									pos:  position{line: 1293, col: 17, offset: 45611},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 5, offset: 45637},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1294, col: 11, offset: 45643},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1294, col: 11, offset: 45643},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1295, col: 11, offset: 45675},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1296, col: 11, offset: 45694},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1297, col: 11, offset: 45715},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1298, col: 11, offset: 45739},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1299, col: 11, offset: 45763},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1302, col: 1, offset: 45863},
			expr: &choiceExpr{
				pos: position{line: 1303, col: 5, offset: 45909},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1303, col: 5, offset: 45909},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1304, col: 7, offset: 46006},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1304, col: 7, offset: 46006},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1304, col: 7, offset: 46006},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1304, col: 11, offset: 46010},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1308, col: 1, offset: 46181},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 5, offset: 46206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 46206},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1309, col: 5, offset: 46206},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1309, col: 5, offset: 46206},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 18, offset: 46219},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 40, offset: 46241},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 45, offset: 46246},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 55, offset: 46256},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 86, offset: 46287},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1311, col: 9, offset: 46444},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1311, col: 9, offset: 46444},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1311, col: 9, offset: 46444},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1311, col: 22, offset: 46457},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1311, col: 44, offset: 46479},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1311, col: 49, offset: 46484},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1311, col: 59, offset: 46494},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1311, col: 90, offset: 46525},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1314, col: 9, offset: 46725},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1314, col: 9, offset: 46725},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1314, col: 9, offset: 46725},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1314, col: 22, offset: 46738},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1314, col: 44, offset: 46760},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1314, col: 48, offset: 46764},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1314, col: 58, offset: 46774},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1314, col: 89, offset: 46805},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1321, col: 1, offset: 47018},
			expr: &actionExpr{
				pos: position{line: 1321, col: 18, offset: 47035},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1321, col: 18, offset: 47035},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1321, col: 18, offset: 47035},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1321, col: 22, offset: 47039},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 31, offset: 47048},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1321, col: 53, offset: 47070},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1325, col: 1, offset: 47178},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 25, offset: 47202},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1325, col: 25, offset: 47202},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 38, offset: 47215},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1327, col: 1, offset: 47234},
			expr: &actionExpr{
				pos: position{line: 1327, col: 21, offset: 47254},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1327, col: 21, offset: 47254},
					expr: &charClassMatcher{
						pos:        position{line: 1327, col: 21, offset: 47254},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1331, col: 1, offset: 47339},
			expr: &actionExpr{
				pos: position{line: 1331, col: 25, offset: 47363},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1331, col: 25, offset: 47363},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1331, col: 25, offset: 47363},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1331, col: 38, offset: 47376},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1331, col: 60, offset: 47398},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1331, col: 64, offset: 47402},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1331, col: 73, offset: 47411},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1331, col: 95, offset: 47433},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1338, col: 1, offset: 47632},
			expr: &actionExpr{
				pos: position{line: 1338, col: 20, offset: 47651},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 20, offset: 47651},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1338, col: 20, offset: 47651},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 24, offset: 47655},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 33, offset: 47664},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1338, col: 57, offset: 47688},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1342, col: 1, offset: 47798},
			expr: &choiceExpr{
				pos: position{line: 1342, col: 27, offset: 47824},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1342, col: 27, offset: 47824},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 40, offset: 47837},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1344, col: 1, offset: 47858},
			expr: &actionExpr{
				pos: position{line: 1344, col: 23, offset: 47880},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1344, col: 23, offset: 47880},
					expr: &charClassMatcher{
						pos:        position{line: 1344, col: 23, offset: 47880},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1348, col: 1, offset: 47965},
			expr: &actionExpr{
				pos: position{line: 1348, col: 27, offset: 47991},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1348, col: 27, offset: 47991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1348, col: 27, offset: 47991},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1348, col: 40, offset: 48004},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1348, col: 62, offset: 48026},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1348, col: 66, offset: 48030},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1348, col: 75, offset: 48039},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1348, col: 99, offset: 48063},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1356, col: 1, offset: 48375},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 17, offset: 48391},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1356, col: 17, offset: 48391},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 38, offset: 48412},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1358, col: 1, offset: 48432},
			expr: &actionExpr{
				pos: position{line: 1358, col: 23, offset: 48454},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1358, col: 23, offset: 48454},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1358, col: 23, offset: 48454},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1358, col: 46, offset: 48477},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1358, col: 55, offset: 48486},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1358, col: 82, offset: 48513},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1362, col: 1, offset: 48625},
			expr: &actionExpr{
				pos: position{line: 1362, col: 31, offset: 48655},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1362, col: 31, offset: 48655},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1362, col: 41, offset: 48665},
						expr: &ruleRefExpr{
							pos:  position{line: 1362, col: 41, offset: 48665},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1366, col: 1, offset: 48751},
			expr: &seqExpr{
				pos: position{line: 1366, col: 27, offset: 48777},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1366, col: 27, offset: 48777},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1366, col: 32, offset: 48782},
						expr: &charClassMatcher{
							pos:        position{line: 1366, col: 33, offset: 48783},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1368, col: 1, offset: 48794},
			expr: &litMatcher{
				pos:        position{line: 1368, col: 25, offset: 48818},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1371, col: 1, offset: 48906},
			expr: &actionExpr{
				pos: position{line: 1372, col: 5, offset: 48940},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1372, col: 5, offset: 48940},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1373, col: 9, offset: 48958},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1373, col: 9, offset: 48958},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1373, col: 9, offset: 48958},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1373, col: 19, offset: 48968},
										expr: &ruleRefExpr{
											pos:  position{line: 1373, col: 20, offset: 48969},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1374, col: 11, offset: 49025},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1374, col: 11, offset: 49025},
										expr: &ruleRefExpr{
											pos:  position{line: 1374, col: 11, offset: 49025},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1374, col: 18, offset: 49032},
										expr: &ruleRefExpr{
											pos:  position{line: 1374, col: 19, offset: 49033},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1375, col: 12, offset: 49065},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1375, col: 12, offset: 49065},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1375, col: 12, offset: 49065},
											expr: &litMatcher{
												pos:        position{line: 1375, col: 13, offset: 49066},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1375, col: 17, offset: 49070},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1375, col: 26, offset: 49079},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1376, col: 11, offset: 49151},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1377, col: 11, offset: 49192},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1378, col: 11, offset: 49221},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1383, col: 1, offset: 49300},
			expr: &actionExpr{
				pos: position{line: 1384, col: 5, offset: 49338},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1384, col: 5, offset: 49338},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1384, col: 5, offset: 49338},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1384, col: 16, offset: 49349},
								expr: &ruleRefExpr{
									pos:  position{line: 1384, col: 17, offset: 49350},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1385, col: 5, offset: 49376},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1385, col: 11, offset: 49382},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1385, col: 11, offset: 49382},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 11, offset: 49401},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1387, col: 12, offset: 49423},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1387, col: 12, offset: 49423},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1387, col: 12, offset: 49423},
													expr: &litMatcher{
														pos:        position{line: 1387, col: 13, offset: 49424},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1387, col: 18, offset: 49429},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1387, col: 27, offset: 49438},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 11, offset: 49487},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 11, offset: 49511},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 11, offset: 49537},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1394, col: 1, offset: 49633},
			expr: &choiceExpr{
				pos: position{line: 1394, col: 41, offset: 49673},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1394, col: 41, offset: 49673},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1394, col: 55, offset: 49687},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1394, col: 55, offset: 49687},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1394, col: 55, offset: 49687},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1394, col: 59, offset: 49691},
									expr: &litMatcher{
										pos:        position{line: 1394, col: 60, offset: 49692},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1398, col: 1, offset: 49764},
			expr: &actionExpr{
				pos: position{line: 1398, col: 23, offset: 49786},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 23, offset: 49786},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1398, col: 23, offset: 49786},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 46, offset: 49809},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 55, offset: 49818},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1398, col: 82, offset: 49845},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1402, col: 1, offset: 49957},
			expr: &actionExpr{
				pos: position{line: 1402, col: 31, offset: 49987},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1402, col: 31, offset: 49987},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1402, col: 41, offset: 49997},
						expr: &ruleRefExpr{
							pos:  position{line: 1402, col: 41, offset: 49997},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1407, col: 1, offset: 50165},
			expr: &actionExpr{
				pos: position{line: 1407, col: 30, offset: 50194},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1407, col: 30, offset: 50194},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1408, col: 5, offset: 50208},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1408, col: 5, offset: 50208},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1408, col: 5, offset: 50208},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1408, col: 15, offset: 50218},
										expr: &ruleRefExpr{
											pos:  position{line: 1408, col: 16, offset: 50219},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1409, col: 7, offset: 50271},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1409, col: 7, offset: 50271},
										expr: &ruleRefExpr{
											pos:  position{line: 1409, col: 7, offset: 50271},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1409, col: 14, offset: 50278},
										expr: &ruleRefExpr{
											pos:  position{line: 1409, col: 15, offset: 50279},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1410, col: 7, offset: 50306},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1411, col: 7, offset: 50343},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1412, col: 7, offset: 50368},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1416, col: 1, offset: 50442},
			expr: &actionExpr{
				pos: position{line: 1417, col: 5, offset: 50480},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 5, offset: 50480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1417, col: 5, offset: 50480},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1417, col: 16, offset: 50491},
								expr: &ruleRefExpr{
									pos:  position{line: 1417, col: 17, offset: 50492},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1418, col: 5, offset: 50518},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1418, col: 11, offset: 50524},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1418, col: 11, offset: 50524},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1419, col: 11, offset: 50543},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1420, col: 12, offset: 50565},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1420, col: 12, offset: 50565},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1420, col: 12, offset: 50565},
													expr: &litMatcher{
														pos:        position{line: 1420, col: 13, offset: 50566},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1420, col: 19, offset: 50572},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1420, col: 28, offset: 50581},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1421, col: 11, offset: 50630},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1422, col: 11, offset: 50654},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1423, col: 11, offset: 50680},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1427, col: 1, offset: 50776},
			expr: &seqExpr{
				pos: position{line: 1427, col: 27, offset: 50802},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1427, col: 27, offset: 50802},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1427, col: 33, offset: 50808},
						expr: &charClassMatcher{
							pos:        position{line: 1427, col: 34, offset: 50809},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1429, col: 1, offset: 50820},
			expr: &litMatcher{
				pos:        position{line: 1429, col: 25, offset: 50844},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1431, col: 1, offset: 50851},
			expr: &actionExpr{
				pos: position{line: 1431, col: 41, offset: 50891},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1431, col: 42, offset: 50892},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1431, col: 42, offset: 50892},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1431, col: 56, offset: 50906},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1431, col: 56, offset: 50906},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1431, col: 60, offset: 50910},
									expr: &litMatcher{
										pos:        position{line: 1431, col: 61, offset: 50911},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1438, col: 1, offset: 51087},
			expr: &ruleRefExpr{
				pos:  position{line: 1438, col: 16, offset: 51102},
				name: "Symbol",
			},
		},
		{
			name: "Section",
			pos:  position{line: 1444, col: 1, offset: 51306},
			expr: &actionExpr{
				pos: position{line: 1446, col: 5, offset: 51384},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 5, offset: 51384},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1446, col: 5, offset: 51384},
							run: (*parser).callonSection3,
						},
						&labeledExpr{
							pos:   position{line: 1453, col: 5, offset: 51546},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1453, col: 12, offset: 51553},
								run: (*parser).callonSection5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1453, col: 12, offset: 51553},
									expr: &litMatcher{
										pos:        position{line: 1453, col: 13, offset: 51554},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1457, col: 5, offset: 51662},
							run: (*parser).callonSection8,
						},
						&oneOrMoreExpr{
							pos: position{line: 1461, col: 5, offset: 51814},
							expr: &ruleRefExpr{
								pos:  position{line: 1461, col: 5, offset: 51814},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1461, col: 12, offset: 51821},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1461, col: 19, offset: 51828},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 1461, col: 41, offset: 51850},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1461, col: 45, offset: 51854},
								expr: &ruleRefExpr{
									pos:  position{line: 1461, col: 45, offset: 51854},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1461, col: 63, offset: 51872},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElements",
			pos:  position{line: 1465, col: 1, offset: 51973},
			expr: &actionExpr{
				pos: position{line: 1465, col: 25, offset: 51997},
				run: (*parser).callonSectionTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 1465, col: 25, offset: 51997},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1465, col: 34, offset: 52006},
						expr: &seqExpr{
							pos: position{line: 1465, col: 35, offset: 52007},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1465, col: 35, offset: 52007},
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 36, offset: 52008},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1465, col: 44, offset: 52016},
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 45, offset: 52017},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1465, col: 61, offset: 52033},
									name: "SectionTitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElement",
			pos:  position{line: 1469, col: 1, offset: 52161},
			expr: &choiceExpr{
				pos: position{line: 1470, col: 9, offset: 52194},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1470, col: 9, offset: 52194},
						name: "InlineWord",
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 11, offset: 52255},
						name: "LineBreak",
					},
					&oneOrMoreExpr{
						pos: position{line: 1472, col: 11, offset: 52300},
						expr: &ruleRefExpr{
							pos:  position{line: 1472, col: 11, offset: 52300},
							name: "Space",
						},
					},
					&seqExpr{
						pos: position{line: 1473, col: 11, offset: 52318},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1473, col: 11, offset: 52318},
								expr: &ruleRefExpr{
									pos:  position{line: 1473, col: 12, offset: 52319},
									name: "EOL",
								},
							},
							&choiceExpr{
								pos: position{line: 1474, col: 13, offset: 52337},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1474, col: 13, offset: 52337},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1475, col: 15, offset: 52364},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1476, col: 15, offset: 52389},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1477, col: 15, offset: 52414},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1478, col: 15, offset: 52441},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1479, col: 15, offset: 52461},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1480, col: 15, offset: 52554},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1481, col: 15, offset: 52584},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1482, col: 15, offset: 52652},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1483, col: 15, offset: 52683},
										name: "Symbol",
									},
									&ruleRefExpr{
										pos:  position{line: 1484, col: 15, offset: 52704},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1485, col: 15, offset: 52735},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1486, col: 15, offset: 52772},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1487, col: 15, offset: 52805},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1488, col: 15, offset: 52829},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1489, col: 15, offset: 52862},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1495, col: 1, offset: 53160},
			expr: &choiceExpr{
				pos: position{line: 1497, col: 5, offset: 53261},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1497, col: 5, offset: 53261},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 1497, col: 5, offset: 53261},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 1500, col: 7, offset: 53353},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 1500, col: 8, offset: 53354},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1500, col: 8, offset: 53354},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 1500, col: 14, offset: 53360},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 1500, col: 20, offset: 53366},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1514, col: 1, offset: 53904},
			expr: &seqExpr{
				pos: position{line: 1515, col: 5, offset: 53926},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1515, col: 5, offset: 53926},
						expr: &choiceExpr{
							pos: position{line: 1515, col: 6, offset: 53927},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1515, col: 6, offset: 53927},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1516, col: 7, offset: 53984},
									expr: &ruleRefExpr{
										pos:  position{line: 1516, col: 7, offset: 53984},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1517, col: 7, offset: 53998},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1519, col: 7, offset: 54054},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1520, col: 7, offset: 54068},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1520, col: 17, offset: 54078},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1526, col: 1, offset: 54187},
			expr: &choiceExpr{
				pos: position{line: 1526, col: 11, offset: 54197},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1526, col: 11, offset: 54197},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 24, offset: 54210},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 36, offset: 54222},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 48, offset: 54234},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 61, offset: 54247},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 72, offset: 54258},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1528, col: 1, offset: 54277},
			expr: &actionExpr{
				pos: position{line: 1528, col: 15, offset: 54291},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1528, col: 15, offset: 54291},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1532, col: 1, offset: 54353},
			expr: &litMatcher{
				pos:        position{line: 1532, col: 18, offset: 54370},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1534, col: 1, offset: 54393},
			expr: &actionExpr{
				pos: position{line: 1534, col: 14, offset: 54406},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1534, col: 14, offset: 54406},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1538, col: 1, offset: 54469},
			expr: &actionExpr{
				pos: position{line: 1538, col: 14, offset: 54482},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1538, col: 14, offset: 54482},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1542, col: 1, offset: 54546},
			expr: &actionExpr{
				pos: position{line: 1542, col: 15, offset: 54560},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1542, col: 15, offset: 54560},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1546, col: 1, offset: 54623},
			expr: &actionExpr{
				pos: position{line: 1546, col: 13, offset: 54635},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1546, col: 13, offset: 54635},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1554, col: 1, offset: 54920},
			expr: &actionExpr{
				pos: position{line: 1554, col: 22, offset: 54941},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1554, col: 22, offset: 54941},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1554, col: 22, offset: 54941},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1554, col: 31, offset: 54950},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1554, col: 35, offset: 54954},
							expr: &charClassMatcher{
								pos:        position{line: 1554, col: 36, offset: 54955},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1561, col: 1, offset: 55233},
			expr: &actionExpr{
				pos: position{line: 1561, col: 18, offset: 55250},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1561, col: 18, offset: 55250},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1561, col: 19, offset: 55251},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1561, col: 19, offset: 55251},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1561, col: 27, offset: 55259},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1561, col: 37, offset: 55269},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1561, col: 45, offset: 55277},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1561, col: 55, offset: 55287},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1561, col: 63, offset: 55295},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1561, col: 72, offset: 55304},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1568, col: 1, offset: 55463},
			expr: &actionExpr{
				pos: position{line: 1569, col: 5, offset: 55486},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1569, col: 5, offset: 55486},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1569, col: 5, offset: 55486},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1569, col: 11, offset: 55492},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1570, col: 5, offset: 55512},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1574, col: 5, offset: 55652},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1575, col: 5, offset: 55662},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1575, col: 12, offset: 55669},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1576, col: 5, offset: 55690},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1576, col: 23, offset: 55708},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1580, col: 1, offset: 55839},
			expr: &actionExpr{
				pos: position{line: 1581, col: 5, offset: 55863},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1581, col: 5, offset: 55863},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1581, col: 5, offset: 55863},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1581, col: 11, offset: 55869},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1582, col: 5, offset: 55889},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1586, col: 5, offset: 56029},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1587, col: 5, offset: 56038},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1587, col: 12, offset: 56045},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1588, col: 5, offset: 56066},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1588, col: 23, offset: 56084},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1592, col: 1, offset: 56216},
			expr: &actionExpr{
				pos: position{line: 1592, col: 18, offset: 56233},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1592, col: 19, offset: 56234},
					expr: &charClassMatcher{
						pos:        position{line: 1592, col: 19, offset: 56234},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1596, col: 1, offset: 56291},
			expr: &actionExpr{
				pos: position{line: 1596, col: 19, offset: 56309},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1596, col: 19, offset: 56309},
					expr: &charClassMatcher{
						pos:        position{line: 1596, col: 19, offset: 56309},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1615, col: 1, offset: 56723},
			expr: &charClassMatcher{
				pos:        position{line: 1615, col: 13, offset: 56735},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1617, col: 1, offset: 56745},
			expr: &choiceExpr{
				pos: position{line: 1617, col: 16, offset: 56760},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1617, col: 16, offset: 56760},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1617, col: 22, offset: 56766},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1617, col: 28, offset: 56772},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1617, col: 34, offset: 56778},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1617, col: 40, offset: 56784},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1617, col: 46, offset: 56790},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1619, col: 1, offset: 56796},
			expr: &actionExpr{
				pos: position{line: 1619, col: 14, offset: 56809},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1619, col: 14, offset: 56809},
					expr: &charClassMatcher{
						pos:        position{line: 1619, col: 14, offset: 56809},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1623, col: 1, offset: 56863},
			expr: &choiceExpr{
				pos: position{line: 1627, col: 5, offset: 57190},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1627, col: 5, offset: 57190},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1627, col: 5, offset: 57190},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1627, col: 5, offset: 57190},
									expr: &charClassMatcher{
										pos:        position{line: 1627, col: 5, offset: 57190},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1627, col: 15, offset: 57200},
									expr: &choiceExpr{
										pos: position{line: 1627, col: 17, offset: 57202},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1627, col: 17, offset: 57202},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1627, col: 30, offset: 57215},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1629, col: 9, offset: 57285},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1629, col: 9, offset: 57285},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1629, col: 9, offset: 57285},
									expr: &charClassMatcher{
										pos:        position{line: 1629, col: 9, offset: 57285},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1629, col: 19, offset: 57295},
									expr: &seqExpr{
										pos: position{line: 1629, col: 20, offset: 57296},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1629, col: 20, offset: 57296},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1629, col: 27, offset: 57303},
												expr: &charClassMatcher{
													pos:        position{line: 1629, col: 27, offset: 57303},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1633, col: 1, offset: 57390},
			expr: &choiceExpr{
				pos: position{line: 1634, col: 5, offset: 57471},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1634, col: 5, offset: 57471},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1634, col: 5, offset: 57471},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1634, col: 5, offset: 57471},
									expr: &charClassMatcher{
										pos:        position{line: 1634, col: 5, offset: 57471},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1634, col: 19, offset: 57485},
									expr: &choiceExpr{
										pos: position{line: 1634, col: 21, offset: 57487},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1634, col: 21, offset: 57487},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1634, col: 31, offset: 57497},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1636, col: 9, offset: 57566},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1639, col: 1, offset: 57666},
			expr: &actionExpr{
				pos: position{line: 1639, col: 12, offset: 57677},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1639, col: 12, offset: 57677},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1643, col: 1, offset: 57750},
			expr: &actionExpr{
				pos: position{line: 1643, col: 17, offset: 57766},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1643, col: 17, offset: 57766},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1643, col: 22, offset: 57771},
						expr: &choiceExpr{
							pos: position{line: 1643, col: 23, offset: 57772},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1643, col: 23, offset: 57772},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 1643, col: 34, offset: 57783},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1647, col: 1, offset: 57872},
			expr: &actionExpr{
				pos: position{line: 1647, col: 13, offset: 57884},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 13, offset: 57884},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1647, col: 13, offset: 57884},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1647, col: 20, offset: 57891},
								expr: &ruleRefExpr{
									pos:  position{line: 1647, col: 21, offset: 57892},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 30, offset: 57901},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1647, col: 35, offset: 57906},
								expr: &choiceExpr{
									pos: position{line: 1647, col: 36, offset: 57907},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1647, col: 36, offset: 57907},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1647, col: 47, offset: 57918},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1651, col: 1, offset: 58011},
			expr: &actionExpr{
				pos: position{line: 1651, col: 23, offset: 58033},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 23, offset: 58033},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1651, col: 23, offset: 58033},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 31, offset: 58041},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 39, offset: 58049},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1651, col: 44, offset: 58054},
								expr: &choiceExpr{
									pos: position{line: 1651, col: 45, offset: 58055},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1651, col: 45, offset: 58055},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1651, col: 56, offset: 58066},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 1655, col: 1, offset: 58159},
			expr: &actionExpr{
				pos: position{line: 1655, col: 13, offset: 58171},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 1655, col: 13, offset: 58171},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1655, col: 22, offset: 58180},
						expr: &choiceExpr{
							pos: position{line: 1656, col: 5, offset: 58186},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1656, col: 5, offset: 58186},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 1656, col: 5, offset: 58186},
										expr: &charClassMatcher{
											pos:        position{line: 1656, col: 6, offset: 58187},
											val:        "[^\\r\\n[\\]\\uFFFD{ ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1659, col: 7, offset: 58323},
									name: "AttributeSubstitution",
								},
								&actionExpr{
									pos: position{line: 1660, col: 7, offset: 58352},
									run: (*parser).callonFilename9,
									expr: &litMatcher{
										pos:        position{line: 1660, col: 7, offset: 58352},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 1666, col: 1, offset: 58490},
			expr: &choiceExpr{
				pos: position{line: 1666, col: 11, offset: 58500},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1666, col: 11, offset: 58500},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1666, col: 23, offset: 58512},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1666, col: 36, offset: 58525},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1666, col: 47, offset: 58536},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1666, col: 58, offset: 58547},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 1668, col: 1, offset: 58558},
			expr: &actionExpr{
				pos: position{line: 1668, col: 7, offset: 58564},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1668, col: 7, offset: 58564},
					expr: &charClassMatcher{
						pos:        position{line: 1668, col: 7, offset: 58564},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 1672, col: 1, offset: 58697},
			expr: &actionExpr{
				pos: position{line: 1672, col: 10, offset: 58706},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 1672, col: 10, offset: 58706},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1676, col: 1, offset: 58756},
			expr: &actionExpr{
				pos: position{line: 1676, col: 11, offset: 58766},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 11, offset: 58766},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1676, col: 11, offset: 58766},
							expr: &litMatcher{
								pos:        position{line: 1676, col: 11, offset: 58766},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1676, col: 16, offset: 58771},
							expr: &ruleRefExpr{
								pos:  position{line: 1676, col: 16, offset: 58771},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1680, col: 1, offset: 58831},
			expr: &choiceExpr{
				pos: position{line: 1680, col: 10, offset: 58840},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1680, col: 10, offset: 58840},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1680, col: 16, offset: 58846},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1680, col: 16, offset: 58846},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1684, col: 1, offset: 58895},
			expr: &choiceExpr{
				pos: position{line: 1684, col: 12, offset: 58906},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1684, col: 12, offset: 58906},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1684, col: 21, offset: 58915},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1684, col: 28, offset: 58922},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1686, col: 1, offset: 58928},
			expr: &notExpr{
				pos: position{line: 1686, col: 8, offset: 58935},
				expr: &anyMatcher{
					line: 1686, col: 9, offset: 58936,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1688, col: 1, offset: 58939},
			expr: &choiceExpr{
				pos: position{line: 1688, col: 8, offset: 58946},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1688, col: 8, offset: 58946},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1688, col: 18, offset: 58956},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes12(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	attrs, err := types.NewAttributes(attributes.([]interface{})...)
	if err != nil {
		return nil, err
	}
	ctx, err := c.parserContext()
	if err != nil {
		return nil, err
	}
	ctx.onBlockAttributes(attrs)
	return attrs, nil

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	attributes = append(attributes, otherAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue14()
}

func (c *current) onSingleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue17()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue14()
}

func (c *current) onDoubleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue17()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue9()
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue16(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue16(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onCommentBlockContent3() (bool, error) {
	return c.isCommentBlockContentEnabled(types.Comment)

}

func (p *parser) callonCommentBlockContent3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent3()
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentBodyFragment1(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentBodyFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBodyFragment1(stack["line"])
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection3() (bool, error) {
	ctx, err := c.parserContext()
	if err != nil {
		return false, err
	}
	return ctx.isSectionRuleEnabled(), nil

}

func (p *parser) callonSection3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3()
}

func (c *current) onSection5() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5()
}

func (c *current) onSection8(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection8(stack["level"])
}

func (c *current) onSection1(level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}))
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"], stack["id"])
}

func (c *current) onSectionTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonSectionTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElements1(stack["elements"])
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename9()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DefaultDocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 420},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 420},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 7, offset: 436},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 450},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 467},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 489},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 510},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 532},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 7, offset: 547},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 7, offset: 571},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 31, col: 7, offset: 598},
						name: "AttributeReset",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinParagraph",
			pos:  position{line: 36, col: 1, offset: 805},
			expr: &choiceExpr{
				pos: position{line: 37, col: 5, offset: 852},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 37, col: 5, offset: 852},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 38, col: 7, offset: 868},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinDelimitedBlock",
			pos:  position{line: 43, col: 1, offset: 1078},
			expr: &choiceExpr{
				pos: position{line: 44, col: 5, offset: 1130},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 44, col: 5, offset: 1130},
						name: "BlankLine",
					},
					&actionExpr{
						pos: position{line: 46, col: 9, offset: 1156},
						run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock3,
						expr: &seqExpr{
							pos: position{line: 46, col: 9, offset: 1156},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 46, col: 9, offset: 1156},
									label: "delimiter",
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 20, offset: 1167},
										name: "BlockDelimiter",
									},
								},
								&andCodeExpr{
									pos: position{line: 47, col: 9, offset: 1191},
									run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock7,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 59, col: 1, offset: 1631},
			expr: &actionExpr{
				pos: position{line: 60, col: 5, offset: 1660},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 60, col: 5, offset: 1660},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 60, col: 5, offset: 1660},
							run: (*parser).callonAttributeDeclaration3,
						},
						&litMatcher{
							pos:        position{line: 64, col: 5, offset: 1804},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 9, offset: 1808},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 15, offset: 1814},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 64, col: 30, offset: 1829},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 65, col: 5, offset: 1838},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 65, col: 11, offset: 1844},
								expr: &ruleRefExpr{
									pos:  position{line: 65, col: 12, offset: 1845},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 66, col: 5, offset: 1878},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 75, col: 1, offset: 2231},
			expr: &actionExpr{
				pos: position{line: 75, col: 18, offset: 2248},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 75, col: 18, offset: 2248},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 75, col: 18, offset: 2248},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 75, col: 28, offset: 2258},
							expr: &charClassMatcher{
								pos:        position{line: 75, col: 29, offset: 2259},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 79, col: 1, offset: 2315},
			expr: &actionExpr{
				pos: position{line: 79, col: 30, offset: 2344},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 79, col: 30, offset: 2344},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 79, col: 30, offset: 2344},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 30, offset: 2344},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 79, col: 37, offset: 2351},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 79, col: 46, offset: 2360},
								expr: &ruleRefExpr{
									pos:  position{line: 79, col: 47, offset: 2361},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 83, col: 1, offset: 2483},
			expr: &actionExpr{
				pos: position{line: 83, col: 37, offset: 2519},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 83, col: 37, offset: 2519},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 83, col: 37, offset: 2519},
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 38, offset: 2520},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 2529},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 85, col: 9, offset: 2547},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 85, col: 10, offset: 2548},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 85, col: 10, offset: 2548},
											expr: &charClassMatcher{
												pos:        position{line: 85, col: 10, offset: 2548},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2643},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 89, col: 12, offset: 2676},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 89, col: 12, offset: 2676},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 96, col: 1, offset: 2813},
			expr: &choiceExpr{
				pos: position{line: 96, col: 19, offset: 2831},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 96, col: 19, offset: 2831},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 96, col: 19, offset: 2831},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 19, offset: 2831},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 24, offset: 2836},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 30, offset: 2842},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 96, col: 45, offset: 2857},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 96, col: 49, offset: 2861},
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 49, offset: 2861},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 56, offset: 2868},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 98, col: 5, offset: 2928},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 98, col: 5, offset: 2928},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 98, col: 5, offset: 2928},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 98, col: 9, offset: 2932},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 15, offset: 2938},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 98, col: 30, offset: 2953},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 98, col: 35, offset: 2958},
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 35, offset: 2958},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 98, col: 42, offset: 2965},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 105, col: 1, offset: 3147},
			expr: &actionExpr{
				pos: position{line: 106, col: 5, offset: 3171},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 106, col: 5, offset: 3171},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 106, col: 5, offset: 3171},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 110, col: 5, offset: 3309},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 110, col: 16, offset: 3320},
								expr: &choiceExpr{
									pos: position{line: 112, col: 9, offset: 3387},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 112, col: 10, offset: 3388},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 112, col: 10, offset: 3388},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 112, col: 10, offset: 3388},
														label: "anchor",
														expr: &ruleRefExpr{
															pos:  position{line: 112, col: 18, offset: 3396},
															name: "ShortHandAnchor",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 112, col: 35, offset: 3413},
														expr: &ruleRefExpr{
															pos:  position{line: 112, col: 35, offset: 3413},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 116, col: 12, offset: 3530},
											run: (*parser).callonBlockAttributes13,
											expr: &seqExpr{
												pos: position{line: 116, col: 12, offset: 3530},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 116, col: 12, offset: 3530},
														label: "title",
														expr: &ruleRefExpr{
															pos:  position{line: 116, col: 19, offset: 3537},
															name: "ShortHandTitle",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 116, col: 35, offset: 3553},
														expr: &ruleRefExpr{
															pos:  position{line: 116, col: 35, offset: 3553},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 120, col: 12, offset: 3640},
											run: (*parser).callonBlockAttributes19,
											expr: &seqExpr{
												pos: position{line: 120, col: 12, offset: 3640},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 120, col: 12, offset: 3640},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 120, col: 24, offset: 3652},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 120, col: 44, offset: 3672},
														expr: &ruleRefExpr{
															pos:  position{line: 120, col: 44, offset: 3672},
															name: "Space",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 128, col: 1, offset: 3846},
			expr: &actionExpr{
				pos: position{line: 129, col: 5, offset: 3870},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 129, col: 5, offset: 3870},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 129, col: 5, offset: 3870},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 130, col: 5, offset: 3878},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 130, col: 16, offset: 3889},
								expr: &actionExpr{
									pos: position{line: 131, col: 9, offset: 3899},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 132, col: 13, offset: 3913},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 132, col: 13, offset: 3913},
												expr: &litMatcher{
													pos:        position{line: 132, col: 14, offset: 3914},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 133, col: 13, offset: 3946},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 133, col: 24, offset: 3957},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 133, col: 24, offset: 3957},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 133, col: 46, offset: 3979},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 138, col: 5, offset: 4062},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 143, col: 1, offset: 4190},
			expr: &actionExpr{
				pos: position{line: 144, col: 4, offset: 4212},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 144, col: 4, offset: 4212},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 144, col: 4, offset: 4212},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 145, col: 5, offset: 4222},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 146, col: 9, offset: 4235},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 146, col: 9, offset: 4235},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 146, col: 18, offset: 4244},
										expr: &choiceExpr{
											pos: position{line: 147, col: 13, offset: 4258},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 147, col: 14, offset: 4259},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 147, col: 14, offset: 4259},
														expr: &charClassMatcher{
															pos:        position{line: 147, col: 14, offset: 4259},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 150, col: 15, offset: 4425},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 151, col: 15, offset: 4458},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 152, col: 16, offset: 4495},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 152, col: 16, offset: 4495},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 158, col: 5, offset: 4681},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 163, col: 1, offset: 4782},
			expr: &actionExpr{
				pos: position{line: 163, col: 19, offset: 4800},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 163, col: 19, offset: 4800},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 163, col: 19, offset: 4800},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 23, offset: 4804},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 164, col: 5, offset: 4816},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 164, col: 5, offset: 4816},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 164, col: 5, offset: 4816},
											expr: &charClassMatcher{
												pos:        position{line: 164, col: 6, offset: 4817},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 165, col: 5, offset: 4929},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 165, col: 14, offset: 4938},
												expr: &choiceExpr{
													pos: position{line: 166, col: 9, offset: 4948},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 166, col: 10, offset: 4949},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 166, col: 10, offset: 4949},
																expr: &charClassMatcher{
																	pos:        position{line: 166, col: 10, offset: 4949},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 169, col: 11, offset: 5046},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 170, col: 11, offset: 5075},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 171, col: 12, offset: 5108},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 171, col: 12, offset: 5108},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 182, col: 1, offset: 5508},
			expr: &actionExpr{
				pos: position{line: 183, col: 5, offset: 5534},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 183, col: 5, offset: 5534},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 183, col: 5, offset: 5534},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 183, col: 9, offset: 5538},
							expr: &litMatcher{
								pos:        position{line: 183, col: 10, offset: 5539},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 5709},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 185, col: 31, offset: 5735},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 32, offset: 5736},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 186, col: 5, offset: 5768},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 186, col: 21, offset: 5784},
								expr: &choiceExpr{
									pos: position{line: 186, col: 22, offset: 5785},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 186, col: 22, offset: 5785},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 186, col: 44, offset: 5807},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 187, col: 5, offset: 5828},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 200, col: 1, offset: 6356},
			expr: &actionExpr{
				pos: position{line: 201, col: 5, offset: 6390},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 5, offset: 6390},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 5, offset: 6390},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 201, col: 10, offset: 6395},
								expr: &ruleRefExpr{
									pos:  position{line: 202, col: 9, offset: 6405},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 5, offset: 6435},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 204, col: 12, offset: 6442},
								expr: &choiceExpr{
									pos: position{line: 205, col: 9, offset: 6453},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 205, col: 9, offset: 6453},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 206, col: 11, offset: 6485},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 207, col: 11, offset: 6520},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 208, col: 8, offset: 6553},
							expr: &seqExpr{
								pos: position{line: 208, col: 9, offset: 6554},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 208, col: 9, offset: 6554},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 208, col: 13, offset: 6558},
										expr: &ruleRefExpr{
											pos:  position{line: 208, col: 13, offset: 6558},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 209, col: 5, offset: 6572},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 225, col: 1, offset: 6988},
			expr: &actionExpr{
				pos: position{line: 225, col: 25, offset: 7012},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 225, col: 25, offset: 7012},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 25, offset: 7012},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 29, offset: 7016},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 33, offset: 7020},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 229, col: 1, offset: 7094},
			expr: &actionExpr{
				pos: position{line: 229, col: 23, offset: 7116},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 229, col: 23, offset: 7116},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 229, col: 30, offset: 7123},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 234, col: 1, offset: 7249},
			expr: &actionExpr{
				pos: position{line: 234, col: 30, offset: 7278},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 234, col: 30, offset: 7278},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 234, col: 30, offset: 7278},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 34, offset: 7282},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 40, offset: 7288},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 239, col: 1, offset: 7410},
			expr: &actionExpr{
				pos: position{line: 239, col: 29, offset: 7438},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 239, col: 29, offset: 7438},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 239, col: 29, offset: 7438},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 239, col: 33, offset: 7442},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 41, offset: 7450},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 244, col: 1, offset: 7563},
			expr: &choiceExpr{
				pos: position{line: 245, col: 5, offset: 7595},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7595},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 7, offset: 7629},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 247, col: 7, offset: 7663},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 247, col: 7, offset: 7663},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 247, col: 7, offset: 7663},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 247, col: 16, offset: 7672},
										expr: &choiceExpr{
											pos: position{line: 250, col: 5, offset: 7842},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 250, col: 6, offset: 7843},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 250, col: 6, offset: 7843},
														expr: &charClassMatcher{
															pos:        position{line: 250, col: 6, offset: 7843},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 253, col: 5, offset: 7937},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 254, col: 5, offset: 7962},
													name: "Quote",
												},
												&ruleRefExpr{
													pos:  position{line: 255, col: 5, offset: 7974},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 256, col: 6, offset: 8003},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 256, col: 6, offset: 8003},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 258, col: 10, offset: 8073},
									expr: &charClassMatcher{
										pos:        position{line: 258, col: 11, offset: 8074},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 262, col: 1, offset: 8150},
			expr: &choiceExpr{
				pos: position{line: 262, col: 24, offset: 8173},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 8179},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 263, col: 5, offset: 8179},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 263, col: 5, offset: 8179},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 263, col: 12, offset: 8186},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 263, col: 29, offset: 8203},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 263, col: 29, offset: 8203},
											expr: &seqExpr{
												pos: position{line: 263, col: 30, offset: 8204},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 263, col: 30, offset: 8204},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 263, col: 34, offset: 8208},
														expr: &ruleRefExpr{
															pos:  position{line: 263, col: 34, offset: 8208},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 263, col: 45, offset: 8219},
											expr: &litMatcher{
												pos:        position{line: 263, col: 46, offset: 8220},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 268, col: 6, offset: 8457},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 268, col: 6, offset: 8457},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 268, col: 6, offset: 8457},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 268, col: 13, offset: 8464},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 268, col: 13, offset: 8464},
												expr: &ruleRefExpr{
													pos:  position{line: 268, col: 13, offset: 8464},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 268, col: 21, offset: 8472},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 268, col: 22, offset: 8473},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 268, col: 22, offset: 8473},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 268, col: 26, offset: 8477},
																expr: &ruleRefExpr{
																	pos:  position{line: 268, col: 26, offset: 8477},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 268, col: 36, offset: 8487},
														expr: &litMatcher{
															pos:        position{line: 268, col: 37, offset: 8488},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 269, col: 5, offset: 8498},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 279, col: 1, offset: 8813},
			expr: &actionExpr{
				pos: position{line: 279, col: 19, offset: 8831},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 279, col: 19, offset: 8831},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 279, col: 19, offset: 8831},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 24, offset: 8836},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 43, offset: 8855},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 47, offset: 8859},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 47, offset: 8859},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 54, offset: 8866},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 61, offset: 8873},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 77, offset: 8889},
							expr: &seqExpr{
								pos: position{line: 279, col: 78, offset: 8890},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 279, col: 78, offset: 8890},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 279, col: 82, offset: 8894},
										expr: &ruleRefExpr{
											pos:  position{line: 279, col: 82, offset: 8894},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 284, col: 1, offset: 9118},
			expr: &actionExpr{
				pos: position{line: 284, col: 22, offset: 9139},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 284, col: 22, offset: 9139},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 284, col: 22, offset: 9139},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 23, offset: 9140},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 284, col: 29, offset: 9146},
							expr: &charClassMatcher{
								pos:        position{line: 284, col: 29, offset: 9146},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 42, offset: 9159},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 42, offset: 9159},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 288, col: 1, offset: 9229},
			expr: &actionExpr{
				pos: position{line: 289, col: 5, offset: 9252},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 289, col: 5, offset: 9252},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 289, col: 5, offset: 9252},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 290, col: 9, offset: 9268},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 290, col: 9, offset: 9268},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 291, col: 11, offset: 9306},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 292, col: 11, offset: 9344},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 294, col: 5, offset: 9378},
							expr: &notExpr{
								pos: position{line: 294, col: 7, offset: 9380},
								expr: &seqExpr{
									pos: position{line: 294, col: 9, offset: 9382},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 294, col: 9, offset: 9382},
											expr: &ruleRefExpr{
												pos:  position{line: 294, col: 9, offset: 9382},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 294, col: 16, offset: 9389},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 298, col: 1, offset: 9430},
			expr: &actionExpr{
				pos: position{line: 299, col: 5, offset: 9465},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 299, col: 5, offset: 9465},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 5, offset: 9465},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 300, col: 5, offset: 9474},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 300, col: 14, offset: 9483},
								expr: &choiceExpr{
									pos: position{line: 302, col: 9, offset: 9573},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 302, col: 9, offset: 9573},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 303, col: 12, offset: 9590},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 303, col: 12, offset: 9590},
												expr: &charClassMatcher{
													pos:        position{line: 303, col: 12, offset: 9590},
													val:        "[^\\r\\n\\uFFFD\\\\{&<>']",
													chars:      []rune{'\r', '\n', '�', '\\', '{', '&', '<', '>', '\''},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 306, col: 11, offset: 9739},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 307, col: 11, offset: 9771},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 308, col: 11, offset: 9798},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 309, col: 12, offset: 9828},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 309, col: 12, offset: 9828},
													run: (*parser).callonSingleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 309, col: 12, offset: 9828},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 312, col: 11, offset: 9920},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 312, col: 17, offset: 9926},
													run: (*parser).callonSingleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 312, col: 17, offset: 9926},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 316, col: 5, offset: 10015},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 320, col: 1, offset: 10071},
			expr: &actionExpr{
				pos: position{line: 321, col: 5, offset: 10106},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 321, col: 5, offset: 10106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 321, col: 5, offset: 10106},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 10116},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 322, col: 14, offset: 10125},
								expr: &choiceExpr{
									pos: position{line: 323, col: 9, offset: 10135},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 323, col: 9, offset: 10135},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 324, col: 12, offset: 10152},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 324, col: 12, offset: 10152},
												expr: &charClassMatcher{
													pos:        position{line: 324, col: 12, offset: 10152},
													val:        "[^\\r\\n\\uFFFD&<>\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '&', '<', '>', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 327, col: 11, offset: 10301},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 328, col: 11, offset: 10333},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 329, col: 11, offset: 10360},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 330, col: 12, offset: 10390},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 330, col: 12, offset: 10390},
													run: (*parser).callonDoubleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 330, col: 12, offset: 10390},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 333, col: 11, offset: 10482},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 333, col: 17, offset: 10488},
													run: (*parser).callonDoubleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 333, col: 17, offset: 10488},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 337, col: 5, offset: 10577},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 342, col: 1, offset: 10712},
			expr: &actionExpr{
				pos: position{line: 343, col: 5, offset: 10743},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 343, col: 5, offset: 10743},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 343, col: 5, offset: 10743},
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 6, offset: 10744},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 5, offset: 10754},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 344, col: 14, offset: 10763},
								expr: &actionExpr{
									pos: position{line: 345, col: 9, offset: 10773},
									run: (*parser).callonUnquotedAttributeValue7,
									expr: &seqExpr{
										pos: position{line: 345, col: 9, offset: 10773},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 345, col: 9, offset: 10773},
												expr: &litMatcher{
													pos:        position{line: 345, col: 10, offset: 10774},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 346, col: 9, offset: 10802},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 347, col: 13, offset: 10824},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 347, col: 13, offset: 10824},
															name: "Quote",
														},
														&actionExpr{
															pos: position{line: 348, col: 16, offset: 10845},
															run: (*parser).callonUnquotedAttributeValue14,
															expr: &oneOrMoreExpr{
																pos: position{line: 348, col: 16, offset: 10845},
																expr: &charClassMatcher{
																	pos:        position{line: 348, col: 16, offset: 10845},
																	val:        "[^,=\\r\\n\\uFFFD&<>{\\] ]",
																	chars:      []rune{',', '=', '\r', '\n', '�', '&', '<', '>', '{', ']', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 351, col: 15, offset: 10963},
															name: "Space",
														},
														&ruleRefExpr{
															pos:  position{line: 352, col: 15, offset: 10983},
															name: "AttributeSubstitution",
														},
														&ruleRefExpr{
															pos:  position{line: 353, col: 15, offset: 11019},
															name: "SpecialCharacter",
														},
														&ruleRefExpr{
															pos:  position{line: 354, col: 15, offset: 11050},
															name: "ElementPlaceHolder",
														},
														&actionExpr{
															pos: position{line: 355, col: 16, offset: 11084},
															run: (*parser).callonUnquotedAttributeValue21,
															expr: &litMatcher{
																pos:        position{line: 355, col: 16, offset: 11084},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 362, col: 5, offset: 11234},
							run: (*parser).callonUnquotedAttributeValue23,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 373, col: 1, offset: 11586},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 11677},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 11677},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 375, col: 5, offset: 11677},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 5, offset: 11741},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 378, col: 14, offset: 11750},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 378, col: 14, offset: 11750},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 36, offset: 11772},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 385, col: 1, offset: 11937},
			expr: &actionExpr{
				pos: position{line: 385, col: 31, offset: 11967},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 385, col: 31, offset: 11967},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 385, col: 31, offset: 11967},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 35, offset: 11971},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 40, offset: 11976},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 54, offset: 11990},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 390, col: 1, offset: 12106},
			expr: &choiceExpr{
				pos: position{line: 390, col: 24, offset: 12129},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 390, col: 24, offset: 12129},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 390, col: 47, offset: 12152},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 392, col: 1, offset: 12288},
			expr: &actionExpr{
				pos: position{line: 392, col: 25, offset: 12312},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 392, col: 25, offset: 12312},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 25, offset: 12312},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 392, col: 37, offset: 12324},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 42, offset: 12329},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 392, col: 56, offset: 12343},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 392, col: 62, offset: 12349},
								expr: &ruleRefExpr{
									pos:  position{line: 392, col: 63, offset: 12350},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 392, col: 78, offset: 12365},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 396, col: 1, offset: 12443},
			expr: &actionExpr{
				pos: position{line: 396, col: 25, offset: 12467},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 396, col: 25, offset: 12467},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 25, offset: 12467},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 38, offset: 12480},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 43, offset: 12485},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 396, col: 57, offset: 12499},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 396, col: 63, offset: 12505},
								expr: &ruleRefExpr{
									pos:  position{line: 396, col: 64, offset: 12506},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 79, offset: 12521},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 400, col: 1, offset: 12596},
			expr: &actionExpr{
				pos: position{line: 400, col: 17, offset: 12612},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 400, col: 17, offset: 12612},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 400, col: 17, offset: 12612},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 21, offset: 12616},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 400, col: 28, offset: 12623},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 400, col: 28, offset: 12623},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 400, col: 28, offset: 12623},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 402, col: 9, offset: 12677},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 402, col: 9, offset: 12677},
											expr: &charClassMatcher{
												pos:        position{line: 402, col: 9, offset: 12677},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 411, col: 1, offset: 12879},
			expr: &actionExpr{
				pos: position{line: 411, col: 14, offset: 12892},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 411, col: 14, offset: 12892},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 411, col: 14, offset: 12892},
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 14, offset: 12892},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 21, offset: 12899},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 418, col: 1, offset: 13136},
			expr: &actionExpr{
				pos: position{line: 420, col: 5, offset: 13214},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 420, col: 5, offset: 13214},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 420, col: 5, offset: 13214},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 423, col: 5, offset: 13276},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 9, offset: 13280},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 423, col: 14, offset: 13285},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 423, col: 14, offset: 13285},
									expr: &charClassMatcher{
										pos:        position{line: 423, col: 14, offset: 13285},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 423, col: 62, offset: 13333},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 66, offset: 13337},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 66, offset: 13337},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 423, col: 73, offset: 13344},
							expr: &choiceExpr{
								pos: position{line: 423, col: 75, offset: 13346},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 423, col: 75, offset: 13346},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 423, col: 81, offset: 13352},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElement",
			pos:  position{line: 427, col: 1, offset: 13413},
			expr: &actionExpr{
				pos: position{line: 427, col: 23, offset: 13435},
				run: (*parser).callonCalloutListElement1,
				expr: &seqExpr{
					pos: position{line: 427, col: 23, offset: 13435},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 23, offset: 13435},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 28, offset: 13440},
								name: "CalloutListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 54, offset: 13466},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 67, offset: 13479},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElementPrefix",
			pos:  position{line: 431, col: 1, offset: 13594},
			expr: &actionExpr{
				pos: position{line: 431, col: 29, offset: 13622},
				run: (*parser).callonCalloutListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 431, col: 29, offset: 13622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 29, offset: 13622},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 33, offset: 13626},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 431, col: 38, offset: 13631},
								run: (*parser).callonCalloutListElementPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 431, col: 38, offset: 13631},
									expr: &charClassMatcher{
										pos:        position{line: 431, col: 38, offset: 13631},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 431, col: 86, offset: 13679},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 431, col: 90, offset: 13683},
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 90, offset: 13683},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 439, col: 1, offset: 13914},
			expr: &seqExpr{
				pos: position{line: 439, col: 31, offset: 13944},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 439, col: 31, offset: 13944},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 439, col: 38, offset: 13951},
						expr: &ruleRefExpr{
							pos:  position{line: 439, col: 38, offset: 13951},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 439, col: 45, offset: 13958},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 441, col: 1, offset: 13963},
			expr: &choiceExpr{
				pos: position{line: 441, col: 29, offset: 13991},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 441, col: 30, offset: 13992},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 441, col: 30, offset: 13992},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 441, col: 37, offset: 13999},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 37, offset: 13999},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 441, col: 44, offset: 14006},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 441, col: 51, offset: 14013},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 458, col: 1, offset: 14503},
			expr: &actionExpr{
				pos: position{line: 463, col: 5, offset: 14662},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 463, col: 5, offset: 14662},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 463, col: 14, offset: 14671},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 467, col: 1, offset: 14717},
			expr: &actionExpr{
				pos: position{line: 467, col: 12, offset: 14728},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 467, col: 12, offset: 14728},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 467, col: 12, offset: 14728},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 467, col: 20, offset: 14736},
								expr: &anyMatcher{
									line: 467, col: 21, offset: 14737,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 467, col: 25, offset: 14741},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 471, col: 1, offset: 14794},
			expr: &actionExpr{
				pos: position{line: 471, col: 22, offset: 14815},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 471, col: 22, offset: 14815},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 471, col: 22, offset: 14815},
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 23, offset: 14816},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 471, col: 45, offset: 14838},
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 45, offset: 14838},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 471, col: 52, offset: 14845},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 471, col: 57, offset: 14850},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 66, offset: 14859},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 471, col: 92, offset: 14885},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 475, col: 1, offset: 14958},
			expr: &actionExpr{
				pos: position{line: 475, col: 29, offset: 14986},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 475, col: 29, offset: 14986},
					expr: &charClassMatcher{
						pos:        position{line: 475, col: 29, offset: 14986},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 482, col: 1, offset: 15151},
			expr: &choiceExpr{
				pos: position{line: 482, col: 19, offset: 15169},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 482, col: 19, offset: 15169},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 482, col: 44, offset: 15194},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 484, col: 1, offset: 15219},
			expr: &choiceExpr{
				pos: position{line: 484, col: 27, offset: 15245},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 484, col: 27, offset: 15245},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 484, col: 27, offset: 15245},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 484, col: 27, offset: 15245},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 484, col: 32, offset: 15250},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 36, offset: 15254},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 484, col: 40, offset: 15258},
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 40, offset: 15258},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 484, col: 47, offset: 15265},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 484, col: 51, offset: 15269},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 58, offset: 15276},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 484, col: 79, offset: 15297},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 486, col: 9, offset: 15370},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 486, col: 9, offset: 15370},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 486, col: 9, offset: 15370},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 486, col: 14, offset: 15375},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 486, col: 18, offset: 15379},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 486, col: 22, offset: 15383},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 490, col: 1, offset: 15454},
			expr: &actionExpr{
				pos: position{line: 490, col: 27, offset: 15480},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 490, col: 27, offset: 15480},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 490, col: 27, offset: 15480},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 490, col: 35, offset: 15488},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 40, offset: 15493},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 490, col: 54, offset: 15507},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 72, offset: 15525},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 494, col: 1, offset: 15659},
			expr: &oneOrMoreExpr{
				pos: position{line: 494, col: 24, offset: 15682},
				expr: &choiceExpr{
					pos: position{line: 495, col: 5, offset: 15688},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 495, col: 6, offset: 15689},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 495, col: 6, offset: 15689},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 495, col: 6, offset: 15689},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 495, col: 14, offset: 15697},
										expr: &charClassMatcher{
											pos:        position{line: 495, col: 14, offset: 15697},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 7, offset: 15892},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 499, col: 8, offset: 15921},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 499, col: 8, offset: 15921},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 508, col: 1, offset: 16196},
			expr: &actionExpr{
				pos: position{line: 508, col: 19, offset: 16214},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 508, col: 19, offset: 16214},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 508, col: 19, offset: 16214},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 21, offset: 16216},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 5, offset: 16246},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 509, col: 16, offset: 16257},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 509, col: 16, offset: 16257},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 510, col: 7, offset: 16316},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 511, col: 7, offset: 16344},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 512, col: 7, offset: 16373},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 513, col: 7, offset: 16402},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 514, col: 7, offset: 16431},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 515, col: 7, offset: 16457},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 516, col: 7, offset: 16485},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 520, col: 1, offset: 16551},
			expr: &actionExpr{
				pos: position{line: 520, col: 26, offset: 16576},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 520, col: 26, offset: 16576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 520, col: 26, offset: 16576},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 520, col: 33, offset: 16583},
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 33, offset: 16583},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 520, col: 40, offset: 16590},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 524, col: 1, offset: 16649},
			expr: &actionExpr{
				pos: position{line: 524, col: 25, offset: 16673},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 524, col: 25, offset: 16673},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 524, col: 25, offset: 16673},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 524, col: 31, offset: 16679},
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 31, offset: 16679},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 524, col: 38, offset: 16686},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 528, col: 1, offset: 16744},
			expr: &actionExpr{
				pos: position{line: 528, col: 26, offset: 16769},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 528, col: 26, offset: 16769},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 528, col: 26, offset: 16769},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 528, col: 33, offset: 16776},
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 33, offset: 16776},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 532, col: 1, offset: 16838},
			expr: &ruleRefExpr{
				pos:  position{line: 532, col: 25, offset: 16862},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 534, col: 1, offset: 16885},
			expr: &actionExpr{
				pos: position{line: 534, col: 26, offset: 16910},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 534, col: 26, offset: 16910},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 534, col: 26, offset: 16910},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 534, col: 33, offset: 16917},
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 33, offset: 16917},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 534, col: 40, offset: 16924},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 538, col: 1, offset: 16983},
			expr: &actionExpr{
				pos: position{line: 538, col: 26, offset: 17008},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 538, col: 26, offset: 17008},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 538, col: 26, offset: 17008},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 538, col: 33, offset: 17015},
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 33, offset: 17015},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 40, offset: 17022},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 542, col: 1, offset: 17081},
			expr: &actionExpr{
				pos: position{line: 542, col: 24, offset: 17104},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 542, col: 24, offset: 17104},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 542, col: 24, offset: 17104},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 542, col: 31, offset: 17111},
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 31, offset: 17111},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 542, col: 38, offset: 17118},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 546, col: 1, offset: 17175},
			expr: &actionExpr{
				pos: position{line: 546, col: 26, offset: 17200},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 546, col: 26, offset: 17200},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 546, col: 26, offset: 17200},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 546, col: 33, offset: 17207},
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 33, offset: 17207},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 40, offset: 17214},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 550, col: 1, offset: 17273},
			expr: &actionExpr{
				pos: position{line: 550, col: 30, offset: 17302},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 550, col: 30, offset: 17302},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 550, col: 30, offset: 17302},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 550, col: 37, offset: 17309},
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 37, offset: 17309},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 550, col: 44, offset: 17316},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 617, col: 1, offset: 19437},
			expr: &actionExpr{
				pos: position{line: 618, col: 9, offset: 19463},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 618, col: 9, offset: 19463},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 618, col: 9, offset: 19463},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 618, col: 13, offset: 19467},
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 13, offset: 19467},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 20, offset: 19474},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 27, offset: 19481},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 49, offset: 19503},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 618, col: 53, offset: 19507},
								expr: &ruleRefExpr{
									pos:  position{line: 618, col: 53, offset: 19507},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 71, offset: 19525},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 622, col: 1, offset: 19640},
			expr: &choiceExpr{
				pos: position{line: 623, col: 9, offset: 19676},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 623, col: 9, offset: 19676},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 624, col: 11, offset: 19704},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 11, offset: 19736},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 626, col: 11, offset: 19766},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 628, col: 1, offset: 19783},
			expr: &choiceExpr{
				pos: position{line: 629, col: 9, offset: 19820},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 629, col: 9, offset: 19820},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 630, col: 11, offset: 19848},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 631, col: 11, offset: 19880},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 632, col: 11, offset: 19910},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 634, col: 1, offset: 19928},
			expr: &choiceExpr{
				pos: position{line: 634, col: 20, offset: 19947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 634, col: 20, offset: 19947},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 634, col: 48, offset: 19975},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 636, col: 1, offset: 20005},
			expr: &actionExpr{
				pos: position{line: 636, col: 30, offset: 20034},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 636, col: 30, offset: 20034},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 636, col: 30, offset: 20034},
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 30, offset: 20034},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 636, col: 37, offset: 20041},
							expr: &litMatcher{
								pos:        position{line: 636, col: 38, offset: 20042},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 42, offset: 20046},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 636, col: 51, offset: 20055},
								expr: &ruleRefExpr{
									pos:  position{line: 636, col: 51, offset: 20055},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 68, offset: 20072},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 640, col: 1, offset: 20142},
			expr: &actionExpr{
				pos: position{line: 640, col: 33, offset: 20174},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 640, col: 33, offset: 20174},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 640, col: 33, offset: 20174},
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 33, offset: 20174},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 640, col: 40, offset: 20181},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 640, col: 51, offset: 20192},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 59, offset: 20200},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 640, col: 75, offset: 20216},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 644, col: 1, offset: 20295},
			expr: &actionExpr{
				pos: position{line: 644, col: 19, offset: 20313},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 644, col: 19, offset: 20313},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 644, col: 19, offset: 20313},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 19, offset: 20313},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 26, offset: 20320},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 36, offset: 20330},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 56, offset: 20350},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 644, col: 62, offset: 20356},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 63, offset: 20357},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 644, col: 85, offset: 20379},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 85, offset: 20379},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 644, col: 92, offset: 20386},
							expr: &litMatcher{
								pos:        position{line: 644, col: 92, offset: 20386},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 644, col: 97, offset: 20391},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 97, offset: 20391},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 649, col: 1, offset: 20536},
			expr: &actionExpr{
				pos: position{line: 649, col: 23, offset: 20558},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 649, col: 23, offset: 20558},
					expr: &charClassMatcher{
						pos:        position{line: 649, col: 23, offset: 20558},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 653, col: 1, offset: 20605},
			expr: &actionExpr{
				pos: position{line: 653, col: 24, offset: 20628},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 653, col: 24, offset: 20628},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 653, col: 24, offset: 20628},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 653, col: 28, offset: 20632},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 653, col: 35, offset: 20639},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 653, col: 36, offset: 20640},
									expr: &charClassMatcher{
										pos:        position{line: 653, col: 36, offset: 20640},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 655, col: 4, offset: 20687},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 661, col: 1, offset: 20848},
			expr: &actionExpr{
				pos: position{line: 661, col: 21, offset: 20868},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 661, col: 21, offset: 20868},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 661, col: 21, offset: 20868},
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 21, offset: 20868},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 661, col: 28, offset: 20875},
							expr: &litMatcher{
								pos:        position{line: 661, col: 29, offset: 20876},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 661, col: 33, offset: 20880},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 662, col: 9, offset: 20899},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 662, col: 10, offset: 20900},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 662, col: 10, offset: 20900},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 662, col: 10, offset: 20900},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 662, col: 21, offset: 20911},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 662, col: 45, offset: 20935},
													expr: &litMatcher{
														pos:        position{line: 662, col: 45, offset: 20935},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 662, col: 50, offset: 20940},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 662, col: 58, offset: 20948},
														expr: &ruleRefExpr{
															pos:  position{line: 662, col: 59, offset: 20949},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 662, col: 82, offset: 20972},
													expr: &litMatcher{
														pos:        position{line: 662, col: 82, offset: 20972},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 662, col: 87, offset: 20977},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 662, col: 97, offset: 20987},
														expr: &ruleRefExpr{
															pos:  position{line: 662, col: 98, offset: 20988},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 664, col: 15, offset: 21105},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 664, col: 15, offset: 21105},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 664, col: 15, offset: 21105},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 664, col: 24, offset: 21114},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 664, col: 46, offset: 21136},
													expr: &litMatcher{
														pos:        position{line: 664, col: 46, offset: 21136},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 664, col: 51, offset: 21141},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 664, col: 61, offset: 21151},
														expr: &ruleRefExpr{
															pos:  position{line: 664, col: 62, offset: 21152},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 666, col: 13, offset: 21261},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 671, col: 1, offset: 21391},
			expr: &choiceExpr{
				pos: position{line: 671, col: 27, offset: 21417},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 671, col: 27, offset: 21417},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 671, col: 27, offset: 21417},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 671, col: 27, offset: 21417},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 671, col: 32, offset: 21422},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 671, col: 39, offset: 21429},
									expr: &charClassMatcher{
										pos:        position{line: 671, col: 39, offset: 21429},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 21477},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 21477},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 673, col: 5, offset: 21477},
									expr: &litMatcher{
										pos:        position{line: 673, col: 5, offset: 21477},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 11, offset: 21483},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 673, col: 18, offset: 21490},
									expr: &charClassMatcher{
										pos:        position{line: 673, col: 18, offset: 21490},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 673, col: 29, offset: 21501},
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 29, offset: 21501},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 673, col: 36, offset: 21508},
									expr: &litMatcher{
										pos:        position{line: 673, col: 37, offset: 21509},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 677, col: 1, offset: 21549},
			expr: &actionExpr{
				pos: position{line: 677, col: 25, offset: 21573},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 677, col: 25, offset: 21573},
					expr: &charClassMatcher{
						pos:        position{line: 677, col: 25, offset: 21573},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 681, col: 1, offset: 21619},
			expr: &actionExpr{
				pos: position{line: 681, col: 27, offset: 21645},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 681, col: 27, offset: 21645},
					expr: &charClassMatcher{
						pos:        position{line: 681, col: 27, offset: 21645},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 688, col: 1, offset: 21820},
			expr: &litMatcher{
				pos:        position{line: 688, col: 32, offset: 21851},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 689, col: 1, offset: 21860},
			expr: &actionExpr{
				pos: position{line: 689, col: 23, offset: 21882},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 689, col: 23, offset: 21882},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 689, col: 23, offset: 21882},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 689, col: 51, offset: 21910},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 689, col: 56, offset: 21915},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 689, col: 56, offset: 21915},
									expr: &charClassMatcher{
										pos:        position{line: 689, col: 56, offset: 21915},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 95, offset: 21954},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 696, col: 1, offset: 22224},
			expr: &actionExpr{
				pos: position{line: 696, col: 14, offset: 22237},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 696, col: 14, offset: 22237},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 696, col: 14, offset: 22237},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 696, col: 20, offset: 22243},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 696, col: 24, offset: 22247},
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 24, offset: 22247},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 696, col: 31, offset: 22254},
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 32, offset: 22255},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 703, col: 1, offset: 22419},
			expr: &actionExpr{
				pos: position{line: 704, col: 5, offset: 22441},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 704, col: 5, offset: 22441},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 704, col: 5, offset: 22441},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 705, col: 9, offset: 22456},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 705, col: 9, offset: 22456},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 705, col: 9, offset: 22456},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 706, col: 9, offset: 22477},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 706, col: 15, offset: 22483},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 707, col: 9, offset: 22506},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 707, col: 27, offset: 22524},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 711, col: 5, offset: 22685},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 5, offset: 22685},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 711, col: 12, offset: 22692},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 715, col: 1, offset: 22752},
			expr: &ruleRefExpr{
				pos:  position{line: 715, col: 26, offset: 22777},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 718, col: 1, offset: 22817},
			expr: &actionExpr{
				pos: position{line: 718, col: 15, offset: 22831},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 718, col: 15, offset: 22831},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 718, col: 15, offset: 22831},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 718, col: 22, offset: 22838},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 718, col: 22, offset: 22838},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 719, col: 7, offset: 22864},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 720, col: 7, offset: 22886},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 721, col: 7, offset: 22909},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 725, col: 1, offset: 22999},
			expr: &actionExpr{
				pos: position{line: 725, col: 23, offset: 23021},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 725, col: 23, offset: 23021},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 23, offset: 23021},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 725, col: 30, offset: 23028},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 725, col: 30, offset: 23028},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 47, offset: 23045},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 726, col: 5, offset: 23067},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 726, col: 12, offset: 23074},
								expr: &actionExpr{
									pos: position{line: 727, col: 9, offset: 23084},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 727, col: 9, offset: 23084},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 727, col: 10, offset: 23085},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 727, col: 10, offset: 23085},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 727, col: 16, offset: 23091},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 728, col: 9, offset: 23202},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 728, col: 16, offset: 23209},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 728, col: 16, offset: 23209},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 728, col: 33, offset: 23226},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 734, col: 1, offset: 23368},
			expr: &actionExpr{
				pos: position{line: 734, col: 19, offset: 23386},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 734, col: 19, offset: 23386},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 734, col: 19, offset: 23386},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 26, offset: 23393},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 734, col: 34, offset: 23401},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 39, offset: 23406},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 44, offset: 23411},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 738, col: 1, offset: 23507},
			expr: &actionExpr{
				pos: position{line: 738, col: 20, offset: 23526},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 738, col: 20, offset: 23526},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 738, col: 32, offset: 23538},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 743, col: 1, offset: 23661},
			expr: &actionExpr{
				pos: position{line: 743, col: 14, offset: 23674},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 743, col: 14, offset: 23674},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 743, col: 14, offset: 23674},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 21, offset: 23681},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 743, col: 40, offset: 23700},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 747, col: 1, offset: 23790},
			expr: &actionExpr{
				pos: position{line: 747, col: 22, offset: 23811},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 747, col: 22, offset: 23811},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 747, col: 22, offset: 23811},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 29, offset: 23818},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 748, col: 5, offset: 23832},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 748, col: 12, offset: 23839},
								expr: &actionExpr{
									pos: position{line: 749, col: 9, offset: 23849},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 749, col: 9, offset: 23849},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 749, col: 10, offset: 23850},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 749, col: 10, offset: 23850},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 749, col: 16, offset: 23856},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 750, col: 9, offset: 23967},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 750, col: 16, offset: 23974},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 756, col: 1, offset: 24109},
			expr: &choiceExpr{
				pos: position{line: 756, col: 13, offset: 24121},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 756, col: 13, offset: 24121},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 756, col: 13, offset: 24121},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 756, col: 18, offset: 24126},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 756, col: 18, offset: 24126},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 30, offset: 24138},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 758, col: 9, offset: 24214},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 758, col: 9, offset: 24214},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 758, col: 9, offset: 24214},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 758, col: 13, offset: 24218},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 758, col: 18, offset: 24223},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 758, col: 18, offset: 24223},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 758, col: 30, offset: 24235},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 762, col: 1, offset: 24311},
			expr: &actionExpr{
				pos: position{line: 762, col: 16, offset: 24326},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 762, col: 16, offset: 24326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 762, col: 16, offset: 24326},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 762, col: 23, offset: 24333},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 762, col: 23, offset: 24333},
									expr: &litMatcher{
										pos:        position{line: 762, col: 24, offset: 24334},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 765, col: 5, offset: 24388},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 772, col: 1, offset: 24555},
			expr: &actionExpr{
				pos: position{line: 772, col: 21, offset: 24575},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 772, col: 21, offset: 24575},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 772, col: 21, offset: 24575},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 772, col: 29, offset: 24583},
								expr: &choiceExpr{
									pos: position{line: 772, col: 30, offset: 24584},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 772, col: 30, offset: 24584},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 772, col: 53, offset: 24607},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 772, col: 74, offset: 24628},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 772, col: 74, offset: 24628,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 107, offset: 24661},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 776, col: 1, offset: 24740},
			expr: &actionExpr{
				pos: position{line: 776, col: 25, offset: 24764},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 776, col: 25, offset: 24764},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 776, col: 25, offset: 24764},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 776, col: 33, offset: 24772},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 776, col: 38, offset: 24777},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 776, col: 38, offset: 24777},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 776, col: 78, offset: 24817},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 780, col: 1, offset: 24890},
			expr: &actionExpr{
				pos: position{line: 780, col: 23, offset: 24912},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 780, col: 23, offset: 24912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 780, col: 23, offset: 24912},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 31, offset: 24920},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 780, col: 36, offset: 24925},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 780, col: 36, offset: 24925},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 780, col: 76, offset: 24965},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 799, col: 1, offset: 25510},
			expr: &choiceExpr{
				pos: position{line: 799, col: 24, offset: 25533},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 799, col: 24, offset: 25533},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 47, offset: 25556},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 59, offset: 25568},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 801, col: 1, offset: 25585},
			expr: &actionExpr{
				pos: position{line: 801, col: 26, offset: 25610},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 801, col: 26, offset: 25610},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 801, col: 26, offset: 25610},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 801, col: 32, offset: 25616},
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 32, offset: 25616},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 801, col: 39, offset: 25623},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 805, col: 1, offset: 25686},
			expr: &actionExpr{
				pos: position{line: 805, col: 20, offset: 25705},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 805, col: 20, offset: 25705},
					expr: &anyMatcher{
						line: 805, col: 21, offset: 25706,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 812, col: 1, offset: 25876},
			expr: &actionExpr{
				pos: position{line: 813, col: 5, offset: 25899},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 813, col: 5, offset: 25899},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 813, col: 15, offset: 25909},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 813, col: 15, offset: 25909},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 813, col: 15, offset: 25909},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 813, col: 24, offset: 25918},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 815, col: 9, offset: 26010},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 815, col: 9, offset: 26010},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 815, col: 9, offset: 26010},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 815, col: 18, offset: 26019},
												expr: &ruleRefExpr{
													pos:  position{line: 815, col: 19, offset: 26020},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 815, col: 35, offset: 26036},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 831, col: 1, offset: 26353},
			expr: &actionExpr{
				pos: position{line: 832, col: 5, offset: 26376},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 832, col: 5, offset: 26376},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 832, col: 14, offset: 26385},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 832, col: 14, offset: 26385},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 833, col: 11, offset: 26446},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 834, col: 11, offset: 26491},
								expr: &ruleRefExpr{
									pos:  position{line: 834, col: 11, offset: 26491},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 835, col: 11, offset: 26509},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 835, col: 11, offset: 26509},
										expr: &ruleRefExpr{
											pos:  position{line: 835, col: 12, offset: 26510},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 836, col: 13, offset: 26528},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 836, col: 13, offset: 26528},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 837, col: 15, offset: 26559},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 838, col: 15, offset: 26579},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 839, col: 15, offset: 26616},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 26642},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 841, col: 15, offset: 26668},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 842, col: 15, offset: 26698},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 15, offset: 26798},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 876, col: 1, offset: 27814},
			expr: &actionExpr{
				pos: position{line: 876, col: 20, offset: 27833},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 876, col: 20, offset: 27833},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 876, col: 20, offset: 27833},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 876, col: 25, offset: 27838},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 29, offset: 27842},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 876, col: 33, offset: 27846},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 876, col: 38, offset: 27851},
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 38, offset: 27851},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 883, col: 1, offset: 28097},
			expr: &actionExpr{
				pos: position{line: 883, col: 14, offset: 28110},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 883, col: 14, offset: 28110},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 883, col: 14, offset: 28110},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 883, col: 19, offset: 28115},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 25, offset: 28121},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 883, col: 43, offset: 28139},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 887, col: 1, offset: 28204},
			expr: &actionExpr{
				pos: position{line: 887, col: 21, offset: 28224},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 887, col: 21, offset: 28224},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 887, col: 30, offset: 28233},
						expr: &choiceExpr{
							pos: position{line: 887, col: 31, offset: 28234},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 887, col: 31, offset: 28234},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 38, offset: 28241},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 53, offset: 28256},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 66, offset: 28269},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 74, offset: 28277},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 93, offset: 28296},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 887, col: 114, offset: 28317},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 887, col: 115, offset: 28318},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 887, col: 115, offset: 28318},
												expr: &litMatcher{
													pos:        position{line: 887, col: 116, offset: 28319},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 887, col: 121, offset: 28324,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 893, col: 1, offset: 28430},
			expr: &actionExpr{
				pos: position{line: 893, col: 23, offset: 28452},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 893, col: 23, offset: 28452},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 893, col: 23, offset: 28452},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 893, col: 29, offset: 28458},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 893, col: 36, offset: 28465},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 5, offset: 28497},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 894, col: 11, offset: 28503},
								expr: &actionExpr{
									pos: position{line: 894, col: 12, offset: 28504},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 894, col: 12, offset: 28504},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 894, col: 12, offset: 28504},
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 12, offset: 28504},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 894, col: 19, offset: 28511},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 894, col: 23, offset: 28515},
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 23, offset: 28515},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 894, col: 30, offset: 28522},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 39, offset: 28531},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 5, offset: 28589},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 895, col: 11, offset: 28595},
								expr: &actionExpr{
									pos: position{line: 895, col: 12, offset: 28596},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 895, col: 12, offset: 28596},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 895, col: 12, offset: 28596},
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 12, offset: 28596},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 895, col: 19, offset: 28603},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 895, col: 23, offset: 28607},
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 23, offset: 28607},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 895, col: 30, offset: 28614},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 39, offset: 28623},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 896, col: 5, offset: 28681},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 900, col: 1, offset: 28760},
			expr: &actionExpr{
				pos: position{line: 900, col: 30, offset: 28789},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 900, col: 30, offset: 28789},
					expr: &choiceExpr{
						pos: position{line: 900, col: 31, offset: 28790},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 900, col: 31, offset: 28790},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 900, col: 42, offset: 28801},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 907, col: 1, offset: 28947},
			expr: &actionExpr{
				pos: position{line: 912, col: 5, offset: 29130},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 912, col: 5, offset: 29130},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 912, col: 5, offset: 29130},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 916, col: 5, offset: 29258},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 916, col: 15, offset: 29268},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 916, col: 21, offset: 29274},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 916, col: 31, offset: 29284},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 916, col: 49, offset: 29302},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 916, col: 67, offset: 29320},
							expr: &ruleRefExpr{
								pos:  position{line: 916, col: 67, offset: 29320},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 922, col: 1, offset: 29605},
			expr: &actionExpr{
				pos: position{line: 922, col: 16, offset: 29620},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 922, col: 16, offset: 29620},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 922, col: 16, offset: 29620},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 922, col: 25, offset: 29629},
							expr: &litMatcher{
								pos:        position{line: 922, col: 26, offset: 29630},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 30, offset: 29634},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 36, offset: 29640},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 46, offset: 29650},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 64, offset: 29668},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 929, col: 1, offset: 30012},
			expr: &actionExpr{
				pos: position{line: 929, col: 15, offset: 30026},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 929, col: 15, offset: 30026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 929, col: 15, offset: 30026},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 929, col: 23, offset: 30034},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 929, col: 29, offset: 30040},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 929, col: 29, offset: 30040},
									expr: &charClassMatcher{
										pos:        position{line: 929, col: 29, offset: 30040},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 929, col: 73, offset: 30084},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 929, col: 85, offset: 30096},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 936, col: 1, offset: 30376},
			expr: &choiceExpr{
				pos: position{line: 936, col: 19, offset: 30394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 936, col: 19, offset: 30394},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 936, col: 19, offset: 30394},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 936, col: 19, offset: 30394},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 936, col: 32, offset: 30407},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 41, offset: 30416},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 58, offset: 30433},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 938, col: 9, offset: 30509},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 938, col: 9, offset: 30509},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 938, col: 9, offset: 30509},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 21, offset: 30521},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 26, offset: 30526},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 39, offset: 30539},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 43, offset: 30543},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 938, col: 51, offset: 30551},
										expr: &ruleRefExpr{
											pos:  position{line: 938, col: 52, offset: 30552},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 70, offset: 30570},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 942, col: 1, offset: 30639},
			expr: &ruleRefExpr{
				pos:  position{line: 942, col: 16, offset: 30654},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 944, col: 1, offset: 30665},
			expr: &actionExpr{
				pos: position{line: 944, col: 20, offset: 30684},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 944, col: 20, offset: 30684},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 944, col: 29, offset: 30693},
						expr: &seqExpr{
							pos: position{line: 944, col: 30, offset: 30694},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 944, col: 30, offset: 30694},
									expr: &litMatcher{
										pos:        position{line: 944, col: 31, offset: 30695},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 944, col: 35, offset: 30699},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 952, col: 1, offset: 30942},
			expr: &litMatcher{
				pos:        position{line: 952, col: 32, offset: 30973},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 954, col: 1, offset: 30978},
			expr: &actionExpr{
				pos: position{line: 954, col: 26, offset: 31003},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 954, col: 26, offset: 31003},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 954, col: 26, offset: 31003},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 954, col: 54, offset: 31031},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 63, offset: 31040},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 93, offset: 31070},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 954, col: 121, offset: 31098},
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 122, offset: 31099},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 958, col: 1, offset: 31212},
			expr: &choiceExpr{
				pos: position{line: 958, col: 33, offset: 31244},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 958, col: 34, offset: 31245},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 958, col: 34, offset: 31245},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 958, col: 35, offset: 31246},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 958, col: 35, offset: 31246},
											expr: &ruleRefExpr{
												pos:  position{line: 958, col: 36, offset: 31247},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 958, col: 64, offset: 31275},
											expr: &ruleRefExpr{
												pos:  position{line: 958, col: 65, offset: 31276},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 958, col: 71, offset: 31282},
											expr: &ruleRefExpr{
												pos:  position{line: 958, col: 72, offset: 31283},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 958, col: 80, offset: 31291,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 958, col: 83, offset: 31294},
									expr: &seqExpr{
										pos: position{line: 958, col: 84, offset: 31295},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 958, col: 84, offset: 31295},
												expr: &seqExpr{
													pos: position{line: 958, col: 86, offset: 31297},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 958, col: 86, offset: 31297},
															expr: &ruleRefExpr{
																pos:  position{line: 958, col: 86, offset: 31297},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 958, col: 93, offset: 31304},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 958, col: 122, offset: 31333},
												expr: &ruleRefExpr{
													pos:  position{line: 958, col: 123, offset: 31334},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 958, col: 151, offset: 31362},
												expr: &ruleRefExpr{
													pos:  position{line: 958, col: 152, offset: 31363},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 958, col: 160, offset: 31371,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 960, col: 11, offset: 31521},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 960, col: 12, offset: 31522},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 960, col: 12, offset: 31522},
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 13, offset: 31523},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 960, col: 19, offset: 31529},
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 20, offset: 31530},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 960, col: 28, offset: 31538},
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 29, offset: 31539},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 960, col: 57, offset: 31567,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 964, col: 1, offset: 31657},
			expr: &litMatcher{
				pos:        position{line: 964, col: 32, offset: 31688},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 966, col: 1, offset: 31695},
			expr: &actionExpr{
				pos: position{line: 966, col: 26, offset: 31720},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 966, col: 26, offset: 31720},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 966, col: 26, offset: 31720},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 966, col: 54, offset: 31748},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 63, offset: 31757},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 966, col: 93, offset: 31787},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 966, col: 121, offset: 31815},
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 122, offset: 31816},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 970, col: 1, offset: 31929},
			expr: &choiceExpr{
				pos: position{line: 970, col: 33, offset: 31961},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 970, col: 34, offset: 31962},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 970, col: 34, offset: 31962},
							expr: &seqExpr{
								pos: position{line: 970, col: 35, offset: 31963},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 970, col: 35, offset: 31963},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 36, offset: 31964},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 970, col: 64, offset: 31992,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 11, offset: 32165},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 972, col: 11, offset: 32165},
							expr: &seqExpr{
								pos: position{line: 972, col: 12, offset: 32166},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 972, col: 12, offset: 32166},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 13, offset: 32167},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 972, col: 19, offset: 32173},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 20, offset: 32174},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 972, col: 28, offset: 32182},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 29, offset: 32183},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 972, col: 57, offset: 32211,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 976, col: 1, offset: 32302},
			expr: &choiceExpr{
				pos: position{line: 976, col: 21, offset: 32322},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 976, col: 21, offset: 32322},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 976, col: 21, offset: 32322},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 976, col: 21, offset: 32322},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 976, col: 30, offset: 32331},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 976, col: 38, offset: 32339},
										expr: &ruleRefExpr{
											pos:  position{line: 976, col: 39, offset: 32340},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 67, offset: 32368},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 978, col: 9, offset: 32472},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 978, col: 9, offset: 32472},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 978, col: 9, offset: 32472},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 978, col: 19, offset: 32482},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 978, col: 27, offset: 32490},
										expr: &choiceExpr{
											pos: position{line: 978, col: 28, offset: 32491},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 978, col: 28, offset: 32491},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 978, col: 41, offset: 32504},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 978, col: 69, offset: 32532},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 982, col: 1, offset: 32636},
			expr: &actionExpr{
				pos: position{line: 982, col: 30, offset: 32665},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 982, col: 30, offset: 32665},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 989, col: 1, offset: 32835},
			expr: &choiceExpr{
				pos: position{line: 989, col: 9, offset: 32843},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 989, col: 9, offset: 32843},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 24, offset: 32858},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 992, col: 1, offset: 32939},
			expr: &actionExpr{
				pos: position{line: 992, col: 17, offset: 32955},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 992, col: 17, offset: 32955},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 992, col: 17, offset: 32955},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 992, col: 25, offset: 32963},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 30, offset: 32968},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 992, col: 40, offset: 32978},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 58, offset: 32996},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 996, col: 1, offset: 33118},
			expr: &actionExpr{
				pos: position{line: 996, col: 17, offset: 33134},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 996, col: 17, offset: 33134},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 996, col: 17, offset: 33134},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 22, offset: 33139},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 996, col: 42, offset: 33159},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 996, col: 59, offset: 33176},
								expr: &ruleRefExpr{
									pos:  position{line: 996, col: 60, offset: 33177},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 1004, col: 1, offset: 33456},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 9, offset: 33476},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1005, col: 9, offset: 33476},
						name: "OrderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 11, offset: 33623},
						name: "CalloutListElement",
					},
				},
			},
		},
		{
			name: "OrderedListElement",
			pos:  position{line: 1014, col: 1, offset: 33825},
			expr: &actionExpr{
				pos: position{line: 1014, col: 23, offset: 33847},
				run: (*parser).callonOrderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1014, col: 23, offset: 33847},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1014, col: 23, offset: 33847},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1014, col: 31, offset: 33855},
								name: "OrderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 57, offset: 33881},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1014, col: 66, offset: 33890},
								name: "OrderedListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementPrefix",
			pos:  position{line: 1018, col: 1, offset: 34027},
			expr: &actionExpr{
				pos: position{line: 1019, col: 5, offset: 34060},
				run: (*parser).callonOrderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1019, col: 5, offset: 34060},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1019, col: 5, offset: 34060},
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 5, offset: 34060},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1019, col: 12, offset: 34067},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1021, col: 9, offset: 34130},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1021, col: 9, offset: 34130},
										run: (*parser).callonOrderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1021, col: 9, offset: 34130},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1021, col: 9, offset: 34130},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1021, col: 16, offset: 34137},
														run: (*parser).callonOrderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1021, col: 16, offset: 34137},
															expr: &litMatcher{
																pos:        position{line: 1021, col: 17, offset: 34138},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1025, col: 9, offset: 34238},
													run: (*parser).callonOrderedListElementPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1044, col: 11, offset: 34970},
										run: (*parser).callonOrderedListElementPrefix14,
										expr: &seqExpr{
											pos: position{line: 1044, col: 11, offset: 34970},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1044, col: 11, offset: 34970},
													expr: &charClassMatcher{
														pos:        position{line: 1044, col: 12, offset: 34971},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1044, col: 20, offset: 34979},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1046, col: 13, offset: 35093},
										run: (*parser).callonOrderedListElementPrefix19,
										expr: &seqExpr{
											pos: position{line: 1046, col: 13, offset: 35093},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1046, col: 14, offset: 35094},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1046, col: 21, offset: 35101},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1048, col: 13, offset: 35218},
										run: (*parser).callonOrderedListElementPrefix23,
										expr: &seqExpr{
											pos: position{line: 1048, col: 13, offset: 35218},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1048, col: 14, offset: 35219},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1048, col: 21, offset: 35226},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1050, col: 13, offset: 35343},
										run: (*parser).callonOrderedListElementPrefix27,
										expr: &seqExpr{
											pos: position{line: 1050, col: 13, offset: 35343},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1050, col: 13, offset: 35343},
													expr: &charClassMatcher{
														pos:        position{line: 1050, col: 14, offset: 35344},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1050, col: 26, offset: 35356},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1052, col: 13, offset: 35473},
										run: (*parser).callonOrderedListElementPrefix32,
										expr: &seqExpr{
											pos: position{line: 1052, col: 13, offset: 35473},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1052, col: 13, offset: 35473},
													expr: &charClassMatcher{
														pos:        position{line: 1052, col: 14, offset: 35474},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1052, col: 26, offset: 35486},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1054, col: 12, offset: 35602},
							expr: &ruleRefExpr{
								pos:  position{line: 1054, col: 12, offset: 35602},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementContent",
			pos:  position{line: 1058, col: 1, offset: 35637},
			expr: &actionExpr{
				pos: position{line: 1058, col: 30, offset: 35666},
				run: (*parser).callonOrderedListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1058, col: 30, offset: 35666},
					expr: &charClassMatcher{
						pos:        position{line: 1058, col: 30, offset: 35666},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1071, col: 1, offset: 36092},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 5, offset: 36111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1073, col: 9, offset: 36121},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1073, col: 9, offset: 36121},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1073, col: 9, offset: 36121},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1073, col: 20, offset: 36132},
										expr: &ruleRefExpr{
											pos:  position{line: 1073, col: 21, offset: 36133},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 9, offset: 36259},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1074, col: 15, offset: 36265},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1074, col: 15, offset: 36265},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1074, col: 41, offset: 36291},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1078, col: 7, offset: 36410},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1080, col: 1, offset: 36429},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 32, offset: 36460},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1080, col: 32, offset: 36460},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1080, col: 32, offset: 36460},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1080, col: 36, offset: 36464},
								expr: &litMatcher{
									pos:        position{line: 1080, col: 37, offset: 36465},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1080, col: 43, offset: 36471},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1080, col: 43, offset: 36471},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1080, col: 47, offset: 36475},
								expr: &litMatcher{
									pos:        position{line: 1080, col: 48, offset: 36476},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1080, col: 54, offset: 36482},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1080, col: 54, offset: 36482},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1080, col: 58, offset: 36486},
								expr: &litMatcher{
									pos:        position{line: 1080, col: 59, offset: 36487},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1080, col: 65, offset: 36493},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1080, col: 65, offset: 36493},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1080, col: 69, offset: 36497},
								expr: &litMatcher{
									pos:        position{line: 1080, col: 70, offset: 36498},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1082, col: 1, offset: 36503},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 34, offset: 36536},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1082, col: 34, offset: 36536},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1082, col: 41, offset: 36543},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1082, col: 48, offset: 36550},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1082, col: 55, offset: 36557},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1082, col: 62, offset: 36564},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1082, col: 68, offset: 36570},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1084, col: 1, offset: 36575},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 5, offset: 36605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1085, col: 5, offset: 36605},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 7, offset: 36632},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 7, offset: 36660},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 7, offset: 36688},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 7, offset: 36720},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 7, offset: 36741},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1092, col: 1, offset: 36759},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 5, offset: 36791},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1093, col: 5, offset: 36791},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 7, offset: 36817},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 7, offset: 36845},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 7, offset: 36873},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1098, col: 1, offset: 36899},
			expr: &actionExpr{
				pos: position{line: 1099, col: 5, offset: 36980},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 5, offset: 36980},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1099, col: 5, offset: 36980},
							expr: &litMatcher{
								pos:        position{line: 1099, col: 7, offset: 36982},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1100, col: 5, offset: 36991},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1101, col: 9, offset: 37009},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1101, col: 9, offset: 37009},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 11, offset: 37036},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 37064},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1104, col: 11, offset: 37092},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1105, col: 11, offset: 37124},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1106, col: 11, offset: 37156},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1112, col: 1, offset: 37223},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 33, offset: 37255},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1112, col: 33, offset: 37255},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1112, col: 39, offset: 37261},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1112, col: 39, offset: 37261},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1116, col: 1, offset: 37403},
			expr: &actionExpr{
				pos: position{line: 1116, col: 25, offset: 37427},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1116, col: 25, offset: 37427},
					expr: &litMatcher{
						pos:        position{line: 1116, col: 25, offset: 37427},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1120, col: 1, offset: 37476},
			expr: &actionExpr{
				pos: position{line: 1120, col: 25, offset: 37500},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 25, offset: 37500},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1120, col: 25, offset: 37500},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1120, col: 30, offset: 37505},
							expr: &litMatcher{
								pos:        position{line: 1120, col: 30, offset: 37505},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1127, col: 1, offset: 37616},
			expr: &choiceExpr{
				pos: position{line: 1127, col: 13, offset: 37628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1127, col: 13, offset: 37628},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 35, offset: 37650},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1129, col: 1, offset: 37717},
			expr: &actionExpr{
				pos: position{line: 1129, col: 24, offset: 37740},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 24, offset: 37740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1129, col: 24, offset: 37740},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1129, col: 29, offset: 37745},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1129, col: 39, offset: 37755},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1129, col: 68, offset: 37784},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1133, col: 1, offset: 37883},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1133, col: 32, offset: 37914},
				expr: &ruleRefExpr{
					pos:  position{line: 1133, col: 32, offset: 37914},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1135, col: 1, offset: 37945},
			expr: &actionExpr{
				pos: position{line: 1135, col: 31, offset: 37975},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 31, offset: 37975},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1135, col: 31, offset: 37975},
							expr: &litMatcher{
								pos:        position{line: 1135, col: 33, offset: 37977},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 39, offset: 37983},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1135, col: 48, offset: 37992},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1135, col: 48, offset: 37992},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1136, col: 7, offset: 38003},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1137, col: 7, offset: 38048},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1137, col: 7, offset: 38048},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1137, col: 15, offset: 38056},
												expr: &ruleRefExpr{
													pos:  position{line: 1137, col: 16, offset: 38057},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1138, col: 7, offset: 38071},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1139, col: 7, offset: 38099},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1140, col: 7, offset: 38122},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1141, col: 7, offset: 38140},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1142, col: 7, offset: 38159},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1143, col: 7, offset: 38197},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1144, col: 7, offset: 38222},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1148, col: 1, offset: 38297},
			expr: &actionExpr{
				pos: position{line: 1149, col: 5, offset: 38337},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 5, offset: 38337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1149, col: 5, offset: 38337},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1149, col: 16, offset: 38348},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 17, offset: 38349},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 5, offset: 38375},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1150, col: 11, offset: 38381},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1150, col: 11, offset: 38381},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1151, col: 11, offset: 38411},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1152, col: 11, offset: 38432},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1153, col: 11, offset: 38453},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1154, col: 11, offset: 38477},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1155, col: 11, offset: 38501},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1159, col: 1, offset: 38602},
			expr: &choiceExpr{
				pos: position{line: 1160, col: 5, offset: 38646},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1160, col: 5, offset: 38646},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1161, col: 7, offset: 38743},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1161, col: 7, offset: 38743},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1161, col: 7, offset: 38743},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1161, col: 12, offset: 38748},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1165, col: 1, offset: 38919},
			expr: &choiceExpr{
				pos: position{line: 1166, col: 5, offset: 38947},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 38947},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 38947},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1166, col: 6, offset: 38948},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1166, col: 6, offset: 38948},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1166, col: 10, offset: 38952},
											expr: &litMatcher{
												pos:        position{line: 1166, col: 11, offset: 38953},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 16, offset: 38958},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 26, offset: 38968},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 55, offset: 38997},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1166, col: 59, offset: 39001},
									expr: &notExpr{
										pos: position{line: 1166, col: 61, offset: 39003},
										expr: &ruleRefExpr{
											pos:  position{line: 1166, col: 62, offset: 39004},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1168, col: 9, offset: 39210},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1168, col: 9, offset: 39210},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1168, col: 9, offset: 39210},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1168, col: 13, offset: 39214},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1168, col: 23, offset: 39224},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1168, col: 23, offset: 39224},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1168, col: 27, offset: 39228},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1168, col: 56, offset: 39257},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1172, col: 1, offset: 39475},
			expr: &seqExpr{
				pos: position{line: 1172, col: 32, offset: 39506},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1172, col: 32, offset: 39506},
						expr: &ruleRefExpr{
							pos:  position{line: 1172, col: 33, offset: 39507},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1172, col: 39, offset: 39513},
						expr: &ruleRefExpr{
							pos:  position{line: 1172, col: 39, offset: 39513},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1174, col: 1, offset: 39542},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 39577},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1175, col: 5, offset: 39577},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1176, col: 7, offset: 39588},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1176, col: 7, offset: 39588},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1176, col: 15, offset: 39596},
								expr: &ruleRefExpr{
									pos:  position{line: 1176, col: 16, offset: 39597},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 7, offset: 39611},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 7, offset: 39639},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 7, offset: 39662},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 7, offset: 39680},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1181, col: 7, offset: 39699},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1181, col: 7, offset: 39699},
								expr: &ruleRefExpr{
									pos:  position{line: 1181, col: 7, offset: 39699},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1181, col: 14, offset: 39706},
								expr: &seqExpr{
									pos: position{line: 1181, col: 15, offset: 39707},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1181, col: 15, offset: 39707},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1181, col: 19, offset: 39711},
											expr: &litMatcher{
												pos:        position{line: 1181, col: 20, offset: 39712},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 7, offset: 39724},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 7, offset: 39762},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 7, offset: 39787},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1186, col: 1, offset: 39825},
			expr: &actionExpr{
				pos: position{line: 1187, col: 5, offset: 39865},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 5, offset: 39865},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1187, col: 5, offset: 39865},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1187, col: 16, offset: 39876},
								expr: &ruleRefExpr{
									pos:  position{line: 1187, col: 17, offset: 39877},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1188, col: 5, offset: 39903},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1188, col: 11, offset: 39909},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1188, col: 11, offset: 39909},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1189, col: 11, offset: 39939},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 11, offset: 39960},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1191, col: 11, offset: 39981},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 11, offset: 40005},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1193, col: 11, offset: 40029},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1196, col: 1, offset: 40129},
			expr: &choiceExpr{
				pos: position{line: 1197, col: 5, offset: 40173},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1197, col: 5, offset: 40173},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1198, col: 7, offset: 40270},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1198, col: 7, offset: 40270},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1198, col: 7, offset: 40270},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1198, col: 11, offset: 40274},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1202, col: 1, offset: 40445},
			expr: &choiceExpr{
				pos: position{line: 1203, col: 5, offset: 40469},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1203, col: 5, offset: 40469},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1203, col: 5, offset: 40469},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1203, col: 5, offset: 40469},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1203, col: 18, offset: 40482},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1203, col: 40, offset: 40504},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1203, col: 45, offset: 40509},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1203, col: 55, offset: 40519},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1203, col: 84, offset: 40548},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1205, col: 9, offset: 40705},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1205, col: 9, offset: 40705},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1205, col: 9, offset: 40705},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1205, col: 22, offset: 40718},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1205, col: 44, offset: 40740},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1205, col: 49, offset: 40745},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1205, col: 59, offset: 40755},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1205, col: 88, offset: 40784},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1208, col: 9, offset: 40984},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1208, col: 9, offset: 40984},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1208, col: 9, offset: 40984},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1208, col: 22, offset: 40997},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1208, col: 44, offset: 41019},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1208, col: 48, offset: 41023},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1208, col: 58, offset: 41033},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1208, col: 87, offset: 41062},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1215, col: 1, offset: 41283},
			expr: &choiceExpr{
				pos: position{line: 1215, col: 15, offset: 41297},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 15, offset: 41297},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 39, offset: 41321},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1217, col: 1, offset: 41344},
			expr: &actionExpr{
				pos: position{line: 1217, col: 26, offset: 41369},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1217, col: 26, offset: 41369},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1217, col: 26, offset: 41369},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 31, offset: 41374},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1217, col: 41, offset: 41384},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1217, col: 72, offset: 41415},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1221, col: 1, offset: 41561},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1221, col: 34, offset: 41594},
				expr: &ruleRefExpr{
					pos:  position{line: 1221, col: 34, offset: 41594},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1223, col: 1, offset: 41626},
			expr: &actionExpr{
				pos: position{line: 1224, col: 5, offset: 41663},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1224, col: 5, offset: 41663},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1224, col: 5, offset: 41663},
							expr: &litMatcher{
								pos:        position{line: 1224, col: 7, offset: 41665},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1224, col: 13, offset: 41671},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1224, col: 22, offset: 41680},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1224, col: 22, offset: 41680},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1225, col: 7, offset: 41691},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1226, col: 7, offset: 41736},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1226, col: 7, offset: 41736},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1226, col: 15, offset: 41744},
												expr: &ruleRefExpr{
													pos:  position{line: 1226, col: 16, offset: 41745},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1227, col: 7, offset: 41759},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1228, col: 7, offset: 41787},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1229, col: 7, offset: 41810},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1230, col: 7, offset: 41828},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1231, col: 7, offset: 41847},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1232, col: 7, offset: 41887},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1233, col: 7, offset: 41912},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1237, col: 1, offset: 41989},
			expr: &actionExpr{
				pos: position{line: 1238, col: 5, offset: 42031},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 5, offset: 42031},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1238, col: 5, offset: 42031},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1238, col: 16, offset: 42042},
								expr: &ruleRefExpr{
									pos:  position{line: 1238, col: 17, offset: 42043},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1239, col: 5, offset: 42069},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1239, col: 11, offset: 42075},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1239, col: 11, offset: 42075},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1240, col: 11, offset: 42107},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1241, col: 11, offset: 42126},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 42147},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 42171},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 42195},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1248, col: 1, offset: 42296},
			expr: &choiceExpr{
				pos: position{line: 1249, col: 5, offset: 42342},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1249, col: 5, offset: 42342},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1250, col: 7, offset: 42441},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1250, col: 7, offset: 42441},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1250, col: 7, offset: 42441},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1250, col: 12, offset: 42446},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1254, col: 1, offset: 42619},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 42649},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1255, col: 5, offset: 42649},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1255, col: 5, offset: 42649},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1255, col: 6, offset: 42650},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1255, col: 6, offset: 42650},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1255, col: 10, offset: 42654},
											expr: &litMatcher{
												pos:        position{line: 1255, col: 11, offset: 42655},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1255, col: 16, offset: 42660},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1255, col: 26, offset: 42670},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1255, col: 57, offset: 42701},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1257, col: 9, offset: 42903},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1257, col: 9, offset: 42903},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1257, col: 9, offset: 42903},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1257, col: 13, offset: 42907},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1257, col: 23, offset: 42917},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1257, col: 23, offset: 42917},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1257, col: 27, offset: 42921},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1257, col: 58, offset: 42952},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1261, col: 1, offset: 43174},
			expr: &actionExpr{
				pos: position{line: 1261, col: 34, offset: 43207},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 34, offset: 43207},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1261, col: 34, offset: 43207},
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 35, offset: 43208},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1261, col: 41, offset: 43214},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1261, col: 51, offset: 43224},
								expr: &ruleRefExpr{
									pos:  position{line: 1261, col: 51, offset: 43224},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1265, col: 1, offset: 43285},
			expr: &choiceExpr{
				pos: position{line: 1266, col: 5, offset: 43322},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1266, col: 5, offset: 43322},
						name: "ItalicWord",
					},
					&seqExpr{
						pos: position{line: 1267, col: 7, offset: 43339},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1267, col: 7, offset: 43339},
								expr: &ruleRefExpr{
									pos:  position{line: 1267, col: 7, offset: 43339},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1267, col: 14, offset: 43346},
								expr: &seqExpr{
									pos: position{line: 1267, col: 15, offset: 43347},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1267, col: 15, offset: 43347},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1267, col: 19, offset: 43351},
											expr: &litMatcher{
												pos:        position{line: 1267, col: 20, offset: 43352},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1268, col: 7, offset: 43364},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1268, col: 7, offset: 43364},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1268, col: 15, offset: 43372},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 16, offset: 43373},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 7, offset: 43387},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 7, offset: 43415},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 7, offset: 43438},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 7, offset: 43456},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 7, offset: 43475},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 7, offset: 43515},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 7, offset: 43540},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "ItalicWord",
			pos:  position{line: 1278, col: 1, offset: 43635},
			expr: &actionExpr{
				pos: position{line: 1278, col: 15, offset: 43649},
				run: (*parser).callonItalicWord1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 15, offset: 43649},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1278, col: 15, offset: 43649},
							expr: &charClassMatcher{
								pos:        position{line: 1278, col: 15, offset: 43649},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1278, col: 25, offset: 43659},
							expr: &choiceExpr{
								pos: position{line: 1278, col: 27, offset: 43661},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1278, col: 27, offset: 43661},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&litMatcher{
										pos:        position{line: 1278, col: 33, offset: 43667},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1282, col: 1, offset: 43727},
			expr: &actionExpr{
				pos: position{line: 1283, col: 5, offset: 43768},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1283, col: 5, offset: 43768},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1283, col: 5, offset: 43768},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1283, col: 16, offset: 43779},
								expr: &ruleRefExpr{
									pos:  position{line: 1283, col: 17, offset: 43780},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 5, offset: 43806},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1284, col: 11, offset: 43812},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1284, col: 11, offset: 43812},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 11, offset: 43831},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1286, col: 11, offset: 43863},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1287, col: 11, offset: 43884},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 11, offset: 43908},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1289, col: 11, offset: 43932},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1293, col: 1, offset: 44033},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 5, offset: 44079},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1294, col: 5, offset: 44079},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1295, col: 7, offset: 44178},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1295, col: 7, offset: 44178},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1295, col: 7, offset: 44178},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1295, col: 11, offset: 44182},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1299, col: 1, offset: 44356},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 5, offset: 44382},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 44382},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1300, col: 5, offset: 44382},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1300, col: 5, offset: 44382},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1300, col: 18, offset: 44395},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1300, col: 40, offset: 44417},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1300, col: 45, offset: 44422},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1300, col: 55, offset: 44432},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1300, col: 86, offset: 44463},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1302, col: 9, offset: 44620},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1302, col: 9, offset: 44620},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1302, col: 9, offset: 44620},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 22, offset: 44633},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 44, offset: 44655},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1302, col: 49, offset: 44660},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 59, offset: 44670},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 90, offset: 44701},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 9, offset: 44901},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1305, col: 9, offset: 44901},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1305, col: 9, offset: 44901},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1305, col: 22, offset: 44914},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1305, col: 44, offset: 44936},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 48, offset: 44940},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1305, col: 58, offset: 44950},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1305, col: 89, offset: 44981},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1312, col: 1, offset: 45208},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 18, offset: 45225},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1312, col: 18, offset: 45225},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 45, offset: 45252},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1314, col: 1, offset: 45278},
			expr: &actionExpr{
				pos: position{line: 1314, col: 29, offset: 45306},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 29, offset: 45306},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1314, col: 29, offset: 45306},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1314, col: 34, offset: 45311},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 44, offset: 45321},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1314, col: 78, offset: 45355},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1318, col: 1, offset: 45504},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1318, col: 37, offset: 45540},
				expr: &ruleRefExpr{
					pos:  position{line: 1318, col: 37, offset: 45540},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1320, col: 1, offset: 45607},
			expr: &actionExpr{
				pos: position{line: 1321, col: 5, offset: 45647},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1321, col: 5, offset: 45647},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1321, col: 5, offset: 45647},
							expr: &litMatcher{
								pos:        position{line: 1321, col: 7, offset: 45649},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1321, col: 13, offset: 45655},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1321, col: 22, offset: 45664},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1321, col: 22, offset: 45664},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1322, col: 7, offset: 45675},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1323, col: 7, offset: 45720},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1323, col: 7, offset: 45720},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1323, col: 15, offset: 45728},
												expr: &ruleRefExpr{
													pos:  position{line: 1323, col: 16, offset: 45729},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1324, col: 7, offset: 45743},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 7, offset: 45771},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1326, col: 7, offset: 45794},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1327, col: 7, offset: 45812},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 7, offset: 45831},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1329, col: 7, offset: 45894},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 7, offset: 45937},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 7, offset: 45962},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1335, col: 1, offset: 46042},
			expr: &actionExpr{
				pos: position{line: 1336, col: 5, offset: 46086},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 5, offset: 46086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1336, col: 5, offset: 46086},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1336, col: 16, offset: 46097},
								expr: &ruleRefExpr{
									pos:  position{line: 1336, col: 17, offset: 46098},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1337, col: 5, offset: 46124},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1337, col: 11, offset: 46130},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1337, col: 11, offset: 46130},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1338, col: 11, offset: 46165},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1339, col: 11, offset: 46184},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1340, col: 11, offset: 46205},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1341, col: 11, offset: 46226},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1342, col: 11, offset: 46250},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1346, col: 1, offset: 46352},
			expr: &choiceExpr{
				pos: position{line: 1347, col: 5, offset: 46401},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1347, col: 5, offset: 46401},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1348, col: 7, offset: 46503},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1348, col: 7, offset: 46503},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1348, col: 7, offset: 46503},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1348, col: 12, offset: 46508},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1352, col: 1, offset: 46686},
			expr: &choiceExpr{
				pos: position{line: 1353, col: 5, offset: 46719},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 46719},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1353, col: 5, offset: 46719},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1353, col: 6, offset: 46720},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1353, col: 6, offset: 46720},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1353, col: 10, offset: 46724},
											expr: &litMatcher{
												pos:        position{line: 1353, col: 11, offset: 46725},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 16, offset: 46730},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 26, offset: 46740},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 60, offset: 46774},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1355, col: 9, offset: 46979},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1355, col: 9, offset: 46979},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1355, col: 9, offset: 46979},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1355, col: 13, offset: 46983},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1355, col: 23, offset: 46993},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1355, col: 23, offset: 46993},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1355, col: 27, offset: 46997},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1355, col: 61, offset: 47031},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1359, col: 1, offset: 47257},
			expr: &seqExpr{
				pos: position{line: 1359, col: 37, offset: 47293},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1359, col: 37, offset: 47293},
						expr: &ruleRefExpr{
							pos:  position{line: 1359, col: 38, offset: 47294},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1359, col: 44, offset: 47300},
						expr: &ruleRefExpr{
							pos:  position{line: 1359, col: 44, offset: 47300},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1361, col: 1, offset: 47334},
			expr: &choiceExpr{
				pos: position{line: 1362, col: 5, offset: 47375},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1362, col: 5, offset: 47375},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1363, col: 7, offset: 47386},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1363, col: 7, offset: 47386},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1363, col: 15, offset: 47394},
								expr: &ruleRefExpr{
									pos:  position{line: 1363, col: 16, offset: 47395},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 7, offset: 47409},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 7, offset: 47437},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 7, offset: 47460},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 7, offset: 47478},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1368, col: 7, offset: 47497},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1368, col: 7, offset: 47497},
								expr: &ruleRefExpr{
									pos:  position{line: 1368, col: 7, offset: 47497},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1368, col: 14, offset: 47504},
								expr: &seqExpr{
									pos: position{line: 1368, col: 15, offset: 47505},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1368, col: 15, offset: 47505},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1368, col: 19, offset: 47509},
											expr: &litMatcher{
												pos:        position{line: 1368, col: 20, offset: 47510},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 7, offset: 47634},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 7, offset: 47677},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 7, offset: 47697},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 7, offset: 47722},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1374, col: 1, offset: 47765},
			expr: &actionExpr{
				pos: position{line: 1375, col: 5, offset: 47809},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 5, offset: 47809},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1375, col: 5, offset: 47809},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1375, col: 16, offset: 47820},
								expr: &ruleRefExpr{
									pos:  position{line: 1375, col: 17, offset: 47821},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 5, offset: 47847},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1376, col: 11, offset: 47853},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1376, col: 11, offset: 47853},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1377, col: 11, offset: 47888},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1378, col: 11, offset: 47907},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1379, col: 11, offset: 47928},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1380, col: 11, offset: 47949},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1381, col: 11, offset: 47973},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1385, col: 1, offset: 48075},
			expr: &actionExpr{
				pos: position{line: 1386, col: 5, offset: 48124},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1386, col: 6, offset: 48125},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1386, col: 6, offset: 48125},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1387, col: 7, offset: 48229},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1387, col: 7, offset: 48229},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1387, col: 11, offset: 48233},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1391, col: 1, offset: 48411},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 5, offset: 48440},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1392, col: 5, offset: 48440},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1392, col: 5, offset: 48440},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1392, col: 5, offset: 48440},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1392, col: 18, offset: 48453},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1392, col: 40, offset: 48475},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1392, col: 45, offset: 48480},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1392, col: 55, offset: 48490},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1392, col: 89, offset: 48524},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1394, col: 9, offset: 48681},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1394, col: 9, offset: 48681},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1394, col: 9, offset: 48681},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1394, col: 22, offset: 48694},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1394, col: 44, offset: 48716},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1394, col: 49, offset: 48721},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1394, col: 59, offset: 48731},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1394, col: 93, offset: 48765},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1397, col: 9, offset: 48965},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1397, col: 9, offset: 48965},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1397, col: 9, offset: 48965},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1397, col: 22, offset: 48978},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1397, col: 44, offset: 49000},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1397, col: 48, offset: 49004},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1397, col: 58, offset: 49014},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1397, col: 92, offset: 49048},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1404, col: 1, offset: 49269},
			expr: &choiceExpr{
				pos: position{line: 1404, col: 15, offset: 49283},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1404, col: 15, offset: 49283},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 39, offset: 49307},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1406, col: 1, offset: 49330},
			expr: &actionExpr{
				pos: position{line: 1406, col: 26, offset: 49355},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1406, col: 26, offset: 49355},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1406, col: 26, offset: 49355},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1406, col: 31, offset: 49360},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1406, col: 41, offset: 49370},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1406, col: 72, offset: 49401},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1410, col: 1, offset: 49547},
			expr: &seqExpr{
				pos: position{line: 1410, col: 34, offset: 49580},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1410, col: 34, offset: 49580},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1410, col: 63, offset: 49609},
						expr: &seqExpr{
							pos: position{line: 1410, col: 64, offset: 49610},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1410, col: 64, offset: 49610},
									expr: &litMatcher{
										pos:        position{line: 1410, col: 66, offset: 49612},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1410, col: 73, offset: 49619},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1410, col: 73, offset: 49619},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1410, col: 81, offset: 49627},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1412, col: 1, offset: 49694},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 33, offset: 49726},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1412, col: 33, offset: 49726},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1413, col: 7, offset: 49737},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1413, col: 7, offset: 49737},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1413, col: 15, offset: 49745},
								expr: &ruleRefExpr{
									pos:  position{line: 1413, col: 16, offset: 49746},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1414, col: 7, offset: 49760},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 7, offset: 49788},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 7, offset: 49811},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1417, col: 7, offset: 49829},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1418, col: 7, offset: 49848},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 7, offset: 49879},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 7, offset: 49904},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1422, col: 1, offset: 49944},
			expr: &actionExpr{
				pos: position{line: 1423, col: 5, offset: 49976},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 5, offset: 49976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1423, col: 5, offset: 49976},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1423, col: 16, offset: 49987},
								expr: &ruleRefExpr{
									pos:  position{line: 1423, col: 17, offset: 49988},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1424, col: 5, offset: 50014},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1424, col: 11, offset: 50020},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1424, col: 11, offset: 50020},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1425, col: 11, offset: 50039},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1426, col: 11, offset: 50060},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1427, col: 11, offset: 50084},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1428, col: 11, offset: 50116},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1429, col: 11, offset: 50140},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1433, col: 1, offset: 50242},
			expr: &choiceExpr{
				pos: position{line: 1434, col: 5, offset: 50288},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1434, col: 5, offset: 50288},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1435, col: 7, offset: 50387},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1435, col: 7, offset: 50387},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1435, col: 7, offset: 50387},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1435, col: 12, offset: 50392},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1439, col: 1, offset: 50565},
			expr: &choiceExpr{
				pos: position{line: 1439, col: 26, offset: 50590},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1439, col: 26, offset: 50590},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1439, col: 26, offset: 50590},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1439, col: 27, offset: 50591},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1439, col: 27, offset: 50591},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1439, col: 31, offset: 50595},
											expr: &litMatcher{
												pos:        position{line: 1439, col: 32, offset: 50596},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1439, col: 37, offset: 50601},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 47, offset: 50611},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1439, col: 78, offset: 50642},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1441, col: 9, offset: 50844},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1441, col: 9, offset: 50844},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1441, col: 9, offset: 50844},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1441, col: 13, offset: 50848},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1441, col: 23, offset: 50858},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1441, col: 23, offset: 50858},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1441, col: 27, offset: 50862},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 58, offset: 50893},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1445, col: 1, offset: 51114},
			expr: &seqExpr{
				pos: position{line: 1445, col: 34, offset: 51147},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1445, col: 34, offset: 51147},
						expr: &ruleRefExpr{
							pos:  position{line: 1445, col: 35, offset: 51148},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1445, col: 41, offset: 51154},
						expr: &ruleRefExpr{
							pos:  position{line: 1445, col: 41, offset: 51154},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1447, col: 1, offset: 51185},
			expr: &choiceExpr{
				pos: position{line: 1447, col: 33, offset: 51217},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1447, col: 33, offset: 51217},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1448, col: 7, offset: 51228},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1448, col: 7, offset: 51228},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1448, col: 15, offset: 51236},
								expr: &ruleRefExpr{
									pos:  position{line: 1448, col: 16, offset: 51237},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 7, offset: 51251},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 7, offset: 51279},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1451, col: 7, offset: 51302},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 7, offset: 51320},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1453, col: 7, offset: 51339},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1453, col: 7, offset: 51339},
								expr: &ruleRefExpr{
									pos:  position{line: 1453, col: 7, offset: 51339},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1453, col: 14, offset: 51346},
								expr: &seqExpr{
									pos: position{line: 1453, col: 15, offset: 51347},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1453, col: 15, offset: 51347},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1453, col: 19, offset: 51351},
											expr: &litMatcher{
												pos:        position{line: 1453, col: 20, offset: 51352},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1454, col: 7, offset: 51364},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1455, col: 7, offset: 51395},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1456, col: 7, offset: 51420},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1458, col: 1, offset: 51460},
			expr: &actionExpr{
				pos: position{line: 1459, col: 5, offset: 51492},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1459, col: 5, offset: 51492},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1459, col: 5, offset: 51492},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1459, col: 16, offset: 51503},
								expr: &ruleRefExpr{
									pos:  position{line: 1459, col: 17, offset: 51504},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 5, offset: 51530},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1460, col: 11, offset: 51536},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1460, col: 11, offset: 51536},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1461, col: 11, offset: 51568},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1462, col: 11, offset: 51587},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1463, col: 11, offset: 51608},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1464, col: 11, offset: 51632},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1465, col: 11, offset: 51656},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1468, col: 1, offset: 51757},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 5, offset: 51803},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1469, col: 5, offset: 51803},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1470, col: 7, offset: 51900},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1470, col: 7, offset: 51900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1470, col: 7, offset: 51900},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1470, col: 11, offset: 51904},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1474, col: 1, offset: 52075},
			expr: &choiceExpr{
				pos: position{line: 1475, col: 5, offset: 52100},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1475, col: 5, offset: 52100},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1475, col: 5, offset: 52100},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1475, col: 5, offset: 52100},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1475, col: 18, offset: 52113},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1475, col: 40, offset: 52135},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1475, col: 45, offset: 52140},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1475, col: 55, offset: 52150},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1475, col: 86, offset: 52181},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1477, col: 9, offset: 52338},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1477, col: 9, offset: 52338},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1477, col: 9, offset: 52338},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1477, col: 22, offset: 52351},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1477, col: 44, offset: 52373},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1477, col: 49, offset: 52378},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1477, col: 59, offset: 52388},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1477, col: 90, offset: 52419},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1480, col: 9, offset: 52619},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1480, col: 9, offset: 52619},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1480, col: 9, offset: 52619},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1480, col: 22, offset: 52632},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1480, col: 44, offset: 52654},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1480, col: 48, offset: 52658},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1480, col: 58, offset: 52668},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1480, col: 89, offset: 52699},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1487, col: 1, offset: 52927},
			expr: &actionExpr{
				pos: position{line: 1487, col: 18, offset: 52944},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1487, col: 18, offset: 52944},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1487, col: 18, offset: 52944},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1487, col: 22, offset: 52948},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1487, col: 31, offset: 52957},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1487, col: 53, offset: 52979},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1491, col: 1, offset: 53087},
			expr: &choiceExpr{
				pos: position{line: 1491, col: 25, offset: 53111},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1491, col: 25, offset: 53111},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1491, col: 38, offset: 53124},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1493, col: 1, offset: 53143},
			expr: &actionExpr{
				pos: position{line: 1493, col: 21, offset: 53163},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1493, col: 21, offset: 53163},
					expr: &charClassMatcher{
						pos:        position{line: 1493, col: 21, offset: 53163},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1497, col: 1, offset: 53248},
			expr: &actionExpr{
				pos: position{line: 1497, col: 25, offset: 53272},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 25, offset: 53272},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1497, col: 25, offset: 53272},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 38, offset: 53285},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1497, col: 60, offset: 53307},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 64, offset: 53311},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 73, offset: 53320},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1497, col: 95, offset: 53342},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1504, col: 1, offset: 53560},
			expr: &actionExpr{
				pos: position{line: 1504, col: 20, offset: 53579},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1504, col: 20, offset: 53579},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1504, col: 20, offset: 53579},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1504, col: 24, offset: 53583},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1504, col: 33, offset: 53592},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1504, col: 57, offset: 53616},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1508, col: 1, offset: 53726},
			expr: &choiceExpr{
				pos: position{line: 1508, col: 27, offset: 53752},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1508, col: 27, offset: 53752},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1508, col: 40, offset: 53765},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1510, col: 1, offset: 53786},
			expr: &actionExpr{
				pos: position{line: 1510, col: 23, offset: 53808},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1510, col: 23, offset: 53808},
					expr: &charClassMatcher{
						pos:        position{line: 1510, col: 23, offset: 53808},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1514, col: 1, offset: 53893},
			expr: &actionExpr{
				pos: position{line: 1514, col: 27, offset: 53919},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 27, offset: 53919},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1514, col: 27, offset: 53919},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 40, offset: 53932},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1514, col: 62, offset: 53954},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 66, offset: 53958},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 75, offset: 53967},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1514, col: 99, offset: 53991},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1522, col: 1, offset: 54303},
			expr: &choiceExpr{
				pos: position{line: 1522, col: 17, offset: 54319},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1522, col: 17, offset: 54319},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1522, col: 38, offset: 54340},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1524, col: 1, offset: 54360},
			expr: &actionExpr{
				pos: position{line: 1524, col: 23, offset: 54382},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1524, col: 23, offset: 54382},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1524, col: 23, offset: 54382},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 46, offset: 54405},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 55, offset: 54414},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1524, col: 82, offset: 54441},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1528, col: 1, offset: 54553},
			expr: &actionExpr{
				pos: position{line: 1528, col: 31, offset: 54583},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1528, col: 31, offset: 54583},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1528, col: 41, offset: 54593},
						expr: &ruleRefExpr{
							pos:  position{line: 1528, col: 41, offset: 54593},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1532, col: 1, offset: 54679},
			expr: &seqExpr{
				pos: position{line: 1532, col: 27, offset: 54705},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1532, col: 27, offset: 54705},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1532, col: 32, offset: 54710},
						expr: &charClassMatcher{
							pos:        position{line: 1532, col: 33, offset: 54711},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1534, col: 1, offset: 54722},
			expr: &litMatcher{
				pos:        position{line: 1534, col: 25, offset: 54746},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1537, col: 1, offset: 54834},
			expr: &actionExpr{
				pos: position{line: 1538, col: 5, offset: 54868},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1538, col: 5, offset: 54868},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1539, col: 9, offset: 54886},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1539, col: 9, offset: 54886},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1539, col: 9, offset: 54886},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1539, col: 19, offset: 54896},
										expr: &ruleRefExpr{
											pos:  position{line: 1539, col: 20, offset: 54897},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1540, col: 11, offset: 54953},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1540, col: 11, offset: 54953},
										expr: &ruleRefExpr{
											pos:  position{line: 1540, col: 11, offset: 54953},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1540, col: 18, offset: 54960},
										expr: &ruleRefExpr{
											pos:  position{line: 1540, col: 19, offset: 54961},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1541, col: 12, offset: 54993},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1541, col: 12, offset: 54993},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1541, col: 12, offset: 54993},
											expr: &litMatcher{
												pos:        position{line: 1541, col: 13, offset: 54994},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1541, col: 17, offset: 54998},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1541, col: 26, offset: 55007},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1542, col: 11, offset: 55079},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1543, col: 11, offset: 55120},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1544, col: 11, offset: 55149},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1549, col: 1, offset: 55228},
			expr: &actionExpr{
				pos: position{line: 1550, col: 5, offset: 55266},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 5, offset: 55266},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1550, col: 5, offset: 55266},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1550, col: 16, offset: 55277},
								expr: &ruleRefExpr{
									pos:  position{line: 1550, col: 17, offset: 55278},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 5, offset: 55304},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1551, col: 11, offset: 55310},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1551, col: 11, offset: 55310},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1552, col: 11, offset: 55329},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1553, col: 12, offset: 55351},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1553, col: 12, offset: 55351},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1553, col: 12, offset: 55351},
													expr: &litMatcher{
														pos:        position{line: 1553, col: 13, offset: 55352},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1553, col: 18, offset: 55357},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1553, col: 27, offset: 55366},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1554, col: 11, offset: 55415},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1555, col: 11, offset: 55439},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1556, col: 11, offset: 55465},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1560, col: 1, offset: 55562},
			expr: &choiceExpr{
				pos: position{line: 1560, col: 41, offset: 55602},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1560, col: 41, offset: 55602},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1560, col: 55, offset: 55616},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1560, col: 55, offset: 55616},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1560, col: 55, offset: 55616},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1560, col: 59, offset: 55620},
									expr: &litMatcher{
										pos:        position{line: 1560, col: 60, offset: 55621},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1564, col: 1, offset: 55693},
			expr: &actionExpr{
				pos: position{line: 1564, col: 23, offset: 55715},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1564, col: 23, offset: 55715},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1564, col: 23, offset: 55715},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1564, col: 46, offset: 55738},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1564, col: 55, offset: 55747},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1564, col: 82, offset: 55774},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1568, col: 1, offset: 55886},
			expr: &actionExpr{
				pos: position{line: 1568, col: 31, offset: 55916},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1568, col: 31, offset: 55916},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1568, col: 41, offset: 55926},
						expr: &ruleRefExpr{
							pos:  position{line: 1568, col: 41, offset: 55926},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1573, col: 1, offset: 56094},
			expr: &actionExpr{
				pos: position{line: 1573, col: 30, offset: 56123},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1573, col: 30, offset: 56123},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1574, col: 5, offset: 56137},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1574, col: 5, offset: 56137},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1574, col: 5, offset: 56137},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1574, col: 15, offset: 56147},
										expr: &ruleRefExpr{
											pos:  position{line: 1574, col: 16, offset: 56148},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1575, col: 7, offset: 56200},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1575, col: 7, offset: 56200},
										expr: &ruleRefExpr{
											pos:  position{line: 1575, col: 7, offset: 56200},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1575, col: 14, offset: 56207},
										expr: &ruleRefExpr{
											pos:  position{line: 1575, col: 15, offset: 56208},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1576, col: 7, offset: 56235},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1577, col: 7, offset: 56272},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1578, col: 7, offset: 56297},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1582, col: 1, offset: 56371},
			expr: &actionExpr{
				pos: position{line: 1583, col: 5, offset: 56409},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1583, col: 5, offset: 56409},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1583, col: 5, offset: 56409},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1583, col: 16, offset: 56420},
								expr: &ruleRefExpr{
									pos:  position{line: 1583, col: 17, offset: 56421},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1584, col: 5, offset: 56447},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1584, col: 11, offset: 56453},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1584, col: 11, offset: 56453},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1585, col: 11, offset: 56472},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1586, col: 12, offset: 56494},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1586, col: 12, offset: 56494},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1586, col: 12, offset: 56494},
													expr: &litMatcher{
														pos:        position{line: 1586, col: 13, offset: 56495},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1586, col: 19, offset: 56501},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1586, col: 28, offset: 56510},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1587, col: 11, offset: 56559},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1588, col: 11, offset: 56583},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1589, col: 11, offset: 56609},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1593, col: 1, offset: 56706},
			expr: &seqExpr{
				pos: position{line: 1593, col: 27, offset: 56732},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1593, col: 27, offset: 56732},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1593, col: 33, offset: 56738},
						expr: &charClassMatcher{
							pos:        position{line: 1593, col: 34, offset: 56739},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1595, col: 1, offset: 56750},
			expr: &litMatcher{
				pos:        position{line: 1595, col: 25, offset: 56774},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1597, col: 1, offset: 56781},
			expr: &actionExpr{
				pos: position{line: 1597, col: 41, offset: 56821},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1597, col: 42, offset: 56822},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1597, col: 42, offset: 56822},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1597, col: 56, offset: 56836},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1597, col: 56, offset: 56836},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1597, col: 60, offset: 56840},
									expr: &litMatcher{
										pos:        position{line: 1597, col: 61, offset: 56841},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1606, col: 1, offset: 57107},
			expr: &actionExpr{
				pos: position{line: 1607, col: 5, offset: 57123},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1607, col: 5, offset: 57123},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1607, col: 5, offset: 57123},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1607, col: 12, offset: 57130},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1607, col: 12, offset: 57130},
									expr: &litMatcher{
										pos:        position{line: 1607, col: 13, offset: 57131},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1611, col: 5, offset: 57239},
							run: (*parser).callonSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 1623, col: 5, offset: 57745},
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 5, offset: 57745},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1623, col: 12, offset: 57752},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 19, offset: 57759},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1623, col: 36, offset: 57776},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 1647, col: 1, offset: 58607},
			expr: &actionExpr{
				pos: position{line: 1647, col: 20, offset: 58626},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1647, col: 20, offset: 58626},
					expr: &charClassMatcher{
						pos:        position{line: 1647, col: 20, offset: 58626},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1658, col: 1, offset: 58973},
			expr: &actionExpr{
				pos: position{line: 1658, col: 20, offset: 58992},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1658, col: 20, offset: 58992},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1658, col: 20, offset: 58992},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1658, col: 29, offset: 59001},
								expr: &choiceExpr{
									pos: position{line: 1659, col: 5, offset: 59007},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1659, col: 5, offset: 59007},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1660, col: 7, offset: 59024},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1661, col: 7, offset: 59048},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1662, col: 7, offset: 59076},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1663, col: 7, offset: 59189},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1664, col: 7, offset: 59203},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 17, offset: 59213},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 1669, col: 1, offset: 59310},
			expr: &actionExpr{
				pos: position{line: 1669, col: 27, offset: 59336},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1669, col: 27, offset: 59336},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1669, col: 27, offset: 59336},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1669, col: 36, offset: 59345},
								expr: &choiceExpr{
									pos: position{line: 1670, col: 5, offset: 59351},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1670, col: 5, offset: 59351},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1671, col: 7, offset: 59368},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1672, col: 7, offset: 59396},
											name: "Quotes",
										},
										&ruleRefExpr{
											pos:  position{line: 1673, col: 7, offset: 59409},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1674, col: 7, offset: 59522},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1675, col: 7, offset: 59536},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1675, col: 17, offset: 59546},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1680, col: 1, offset: 59646},
			expr: &actionExpr{
				pos: position{line: 1680, col: 16, offset: 59661},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1680, col: 16, offset: 59661},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1680, col: 16, offset: 59661},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1680, col: 25, offset: 59670},
								expr: &choiceExpr{
									pos: position{line: 1681, col: 5, offset: 59676},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1681, col: 5, offset: 59676},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1682, col: 7, offset: 59693},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1683, col: 7, offset: 59717},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1684, col: 7, offset: 59740},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1685, col: 7, offset: 59752},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1686, col: 7, offset: 59780},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1687, col: 7, offset: 59893},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1688, col: 7, offset: 59911},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1688, col: 17, offset: 59921},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1693, col: 1, offset: 60017},
			expr: &actionExpr{
				pos: position{line: 1693, col: 16, offset: 60032},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1693, col: 16, offset: 60032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1693, col: 16, offset: 60032},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1693, col: 25, offset: 60041},
								expr: &choiceExpr{
									pos: position{line: 1694, col: 5, offset: 60047},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1694, col: 5, offset: 60047},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1695, col: 7, offset: 60064},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1696, col: 7, offset: 60082},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1697, col: 7, offset: 60195},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1698, col: 7, offset: 60209},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1698, col: 17, offset: 60219},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1703, col: 1, offset: 60302},
			expr: &actionExpr{
				pos: position{line: 1703, col: 14, offset: 60315},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1703, col: 14, offset: 60315},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1703, col: 14, offset: 60315},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1703, col: 22, offset: 60323},
								expr: &anyMatcher{
									line: 1703, col: 23, offset: 60324,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1703, col: 27, offset: 60328},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1710, col: 1, offset: 60633},
			expr: &actionExpr{
				pos: position{line: 1710, col: 16, offset: 60648},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1710, col: 16, offset: 60648},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1710, col: 16, offset: 60648},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1710, col: 25, offset: 60657},
								expr: &ruleRefExpr{
									pos:  position{line: 1710, col: 26, offset: 60658},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1710, col: 47, offset: 60679},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1714, col: 1, offset: 60735},
			expr: &actionExpr{
				pos: position{line: 1714, col: 23, offset: 60757},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1714, col: 23, offset: 60757},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1714, col: 23, offset: 60757},
							expr: &ruleRefExpr{
								pos:  position{line: 1714, col: 24, offset: 60758},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1715, col: 5, offset: 60766},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1716, col: 9, offset: 60784},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1716, col: 9, offset: 60784},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1717, col: 11, offset: 60805},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1718, col: 11, offset: 60821},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 1719, col: 11, offset: 60839},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1720, col: 11, offset: 60867},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1721, col: 11, offset: 60894},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1722, col: 11, offset: 60910},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1723, col: 11, offset: 60942},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1724, col: 11, offset: 60964},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1725, col: 11, offset: 60986},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1726, col: 11, offset: 61012},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1727, col: 11, offset: 61129},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1732, col: 1, offset: 61223},
			expr: &actionExpr{
				pos: position{line: 1732, col: 16, offset: 61238},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1732, col: 16, offset: 61238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1732, col: 16, offset: 61238},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1732, col: 25, offset: 61247},
								expr: &choiceExpr{
									pos: position{line: 1733, col: 5, offset: 61253},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1733, col: 5, offset: 61253},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1734, col: 7, offset: 61270},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1735, col: 7, offset: 61282},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1736, col: 7, offset: 61395},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1737, col: 7, offset: 61409},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1737, col: 17, offset: 61419},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1742, col: 1, offset: 61521},
			expr: &actionExpr{
				pos: position{line: 1742, col: 22, offset: 61542},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1742, col: 22, offset: 61542},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1742, col: 22, offset: 61542},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1742, col: 31, offset: 61551},
								expr: &choiceExpr{
									pos: position{line: 1743, col: 5, offset: 61557},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1743, col: 5, offset: 61557},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1744, col: 7, offset: 61574},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1745, col: 7, offset: 61592},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1746, col: 7, offset: 61705},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1747, col: 7, offset: 61719},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1747, col: 17, offset: 61729},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1752, col: 1, offset: 61856},
			expr: &actionExpr{
				pos: position{line: 1752, col: 27, offset: 61882},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1752, col: 27, offset: 61882},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1752, col: 27, offset: 61882},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1752, col: 36, offset: 61891},
								expr: &choiceExpr{
									pos: position{line: 1753, col: 5, offset: 61897},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1753, col: 5, offset: 61897},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1754, col: 7, offset: 61914},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1755, col: 7, offset: 61937},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1756, col: 7, offset: 62050},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1757, col: 7, offset: 62064},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1757, col: 17, offset: 62074},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 1761, col: 1, offset: 62130},
			expr: &actionExpr{
				pos: position{line: 1761, col: 18, offset: 62147},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 1761, col: 18, offset: 62147},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1761, col: 18, offset: 62147},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1761, col: 27, offset: 62156},
								expr: &choiceExpr{
									pos: position{line: 1762, col: 5, offset: 62162},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1762, col: 5, offset: 62162},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1763, col: 7, offset: 62179},
											name: "Callout",
										},
										&ruleRefExpr{
											pos:  position{line: 1764, col: 7, offset: 62235},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1765, col: 7, offset: 62258},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1766, col: 7, offset: 62371},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1767, col: 7, offset: 62385},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1767, col: 17, offset: 62395},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1771, col: 1, offset: 62455},
			expr: &actionExpr{
				pos: position{line: 1773, col: 5, offset: 62537},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 5, offset: 62537},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1773, col: 5, offset: 62537},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1776, col: 5, offset: 62597},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1777, col: 9, offset: 62615},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1777, col: 9, offset: 62615},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1778, col: 11, offset: 62636},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1779, col: 11, offset: 62659},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1780, col: 11, offset: 62675},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1781, col: 11, offset: 62704},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1782, col: 11, offset: 62730},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1783, col: 11, offset: 62756},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1784, col: 11, offset: 62783},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1785, col: 11, offset: 62809},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1786, col: 11, offset: 62838},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1790, col: 1, offset: 62894},
			expr: &actionExpr{
				pos: position{line: 1792, col: 5, offset: 62982},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1792, col: 5, offset: 62982},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1792, col: 5, offset: 62982},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1795, col: 5, offset: 63054},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1796, col: 9, offset: 63072},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1796, col: 9, offset: 63072},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1796, col: 33, offset: 63096},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1796, col: 57, offset: 63120},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1801, col: 1, offset: 63180},
			expr: &actionExpr{
				pos: position{line: 1803, col: 5, offset: 63266},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1803, col: 5, offset: 63266},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1803, col: 5, offset: 63266},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1806, col: 5, offset: 63336},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1807, col: 9, offset: 63354},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1812, col: 1, offset: 63407},
			expr: &actionExpr{
				pos: position{line: 1814, col: 5, offset: 63483},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 5, offset: 63483},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1814, col: 5, offset: 63483},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1817, col: 5, offset: 63543},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1818, col: 9, offset: 63561},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1818, col: 9, offset: 63561},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1819, col: 11, offset: 63583},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1823, col: 1, offset: 63642},
			expr: &actionExpr{
				pos: position{line: 1825, col: 5, offset: 63724},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1825, col: 5, offset: 63724},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1825, col: 5, offset: 63724},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1828, col: 5, offset: 63790},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1829, col: 9, offset: 63808},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1834, col: 1, offset: 63858},
			expr: &actionExpr{
				pos: position{line: 1836, col: 5, offset: 63945},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1836, col: 5, offset: 63945},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1836, col: 5, offset: 63945},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1839, col: 5, offset: 64016},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1841, col: 9, offset: 64114},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1841, col: 9, offset: 64114},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1841, col: 9, offset: 64114},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1844, col: 11, offset: 64218},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1844, col: 12, offset: 64219},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1844, col: 12, offset: 64219},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1844, col: 18, offset: 64225},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1844, col: 24, offset: 64231},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1854, col: 1, offset: 64460},
			expr: &choiceExpr{
				pos: position{line: 1854, col: 11, offset: 64470},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1854, col: 11, offset: 64470},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 24, offset: 64483},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 36, offset: 64495},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 48, offset: 64507},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 61, offset: 64520},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 72, offset: 64531},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1856, col: 1, offset: 64550},
			expr: &actionExpr{
				pos: position{line: 1856, col: 15, offset: 64564},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1856, col: 15, offset: 64564},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1860, col: 1, offset: 64626},
			expr: &litMatcher{
				pos:        position{line: 1860, col: 18, offset: 64643},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1862, col: 1, offset: 64666},
			expr: &actionExpr{
				pos: position{line: 1862, col: 14, offset: 64679},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1862, col: 14, offset: 64679},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1866, col: 1, offset: 64742},
			expr: &actionExpr{
				pos: position{line: 1866, col: 14, offset: 64755},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1866, col: 14, offset: 64755},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1870, col: 1, offset: 64819},
			expr: &actionExpr{
				pos: position{line: 1870, col: 15, offset: 64833},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1870, col: 15, offset: 64833},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1874, col: 1, offset: 64896},
			expr: &actionExpr{
				pos: position{line: 1874, col: 13, offset: 64908},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1874, col: 13, offset: 64908},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1882, col: 1, offset: 65193},
			expr: &actionExpr{
				pos: position{line: 1882, col: 22, offset: 65214},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1882, col: 22, offset: 65214},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1882, col: 22, offset: 65214},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1882, col: 31, offset: 65223},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1882, col: 35, offset: 65227},
							expr: &charClassMatcher{
								pos:        position{line: 1882, col: 36, offset: 65228},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1889, col: 1, offset: 65506},
			expr: &actionExpr{
				pos: position{line: 1889, col: 18, offset: 65523},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1889, col: 18, offset: 65523},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1889, col: 19, offset: 65524},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1889, col: 19, offset: 65524},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1889, col: 27, offset: 65532},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1889, col: 37, offset: 65542},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1889, col: 45, offset: 65550},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1889, col: 55, offset: 65560},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1889, col: 63, offset: 65568},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1889, col: 72, offset: 65577},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1896, col: 1, offset: 65736},
			expr: &actionExpr{
				pos: position{line: 1897, col: 5, offset: 65759},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1897, col: 5, offset: 65759},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1897, col: 5, offset: 65759},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1897, col: 11, offset: 65765},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1898, col: 5, offset: 65785},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1902, col: 5, offset: 65925},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1903, col: 5, offset: 65935},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1903, col: 12, offset: 65942},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1904, col: 5, offset: 65963},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1904, col: 23, offset: 65981},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1908, col: 1, offset: 66112},
			expr: &actionExpr{
				pos: position{line: 1909, col: 5, offset: 66136},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1909, col: 5, offset: 66136},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1909, col: 5, offset: 66136},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1909, col: 11, offset: 66142},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1910, col: 5, offset: 66162},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1914, col: 5, offset: 66302},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1915, col: 5, offset: 66311},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1915, col: 12, offset: 66318},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1916, col: 5, offset: 66339},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1916, col: 23, offset: 66357},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1920, col: 1, offset: 66489},
			expr: &actionExpr{
				pos: position{line: 1920, col: 18, offset: 66506},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1920, col: 19, offset: 66507},
					expr: &charClassMatcher{
						pos:        position{line: 1920, col: 19, offset: 66507},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1924, col: 1, offset: 66564},
			expr: &actionExpr{
				pos: position{line: 1924, col: 19, offset: 66582},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1924, col: 19, offset: 66582},
					expr: &charClassMatcher{
						pos:        position{line: 1924, col: 19, offset: 66582},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1931, col: 1, offset: 66744},
			expr: &charClassMatcher{
				pos:        position{line: 1931, col: 13, offset: 66756},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1933, col: 1, offset: 66766},
			expr: &choiceExpr{
				pos: position{line: 1933, col: 16, offset: 66781},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1933, col: 16, offset: 66781},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 22, offset: 66787},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 28, offset: 66793},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 34, offset: 66799},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 40, offset: 66805},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 46, offset: 66811},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1935, col: 1, offset: 66817},
			expr: &actionExpr{
				pos: position{line: 1935, col: 14, offset: 66830},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1935, col: 14, offset: 66830},
					expr: &charClassMatcher{
						pos:        position{line: 1935, col: 14, offset: 66830},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1939, col: 1, offset: 66884},
			expr: &choiceExpr{
				pos: position{line: 1943, col: 5, offset: 67211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1943, col: 5, offset: 67211},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1943, col: 5, offset: 67211},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1943, col: 5, offset: 67211},
									expr: &charClassMatcher{
										pos:        position{line: 1943, col: 5, offset: 67211},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1943, col: 15, offset: 67221},
									expr: &choiceExpr{
										pos: position{line: 1943, col: 17, offset: 67223},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1943, col: 17, offset: 67223},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1943, col: 30, offset: 67236},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1945, col: 9, offset: 67305},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1945, col: 9, offset: 67305},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1945, col: 9, offset: 67305},
									expr: &charClassMatcher{
										pos:        position{line: 1945, col: 9, offset: 67305},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1945, col: 19, offset: 67315},
									expr: &seqExpr{
										pos: position{line: 1945, col: 20, offset: 67316},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1945, col: 20, offset: 67316},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1945, col: 27, offset: 67323},
												expr: &charClassMatcher{
													pos:        position{line: 1945, col: 27, offset: 67323},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1950, col: 1, offset: 67415},
			expr: &choiceExpr{
				pos: position{line: 1954, col: 5, offset: 67608},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1954, col: 5, offset: 67608},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1954, col: 5, offset: 67608},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1954, col: 5, offset: 67608},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 1954, col: 14, offset: 67617},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 1954, col: 14, offset: 67617},
											expr: &charClassMatcher{
												pos:        position{line: 1954, col: 14, offset: 67617},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1957, col: 5, offset: 67698},
									expr: &choiceExpr{
										pos: position{line: 1957, col: 7, offset: 67700},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1957, col: 7, offset: 67700},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1957, col: 17, offset: 67710},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 1957, col: 47, offset: 67740},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1959, col: 9, offset: 67783},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1962, col: 1, offset: 67883},
			expr: &actionExpr{
				pos: position{line: 1962, col: 12, offset: 67894},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1962, col: 12, offset: 67894},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1966, col: 1, offset: 67967},
			expr: &actionExpr{
				pos: position{line: 1966, col: 17, offset: 67983},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1966, col: 17, offset: 67983},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1966, col: 22, offset: 67988},
						expr: &choiceExpr{
							pos: position{line: 1966, col: 23, offset: 67989},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1966, col: 23, offset: 67989},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 1966, col: 34, offset: 68000},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1970, col: 1, offset: 68089},
			expr: &actionExpr{
				pos: position{line: 1970, col: 13, offset: 68101},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1970, col: 13, offset: 68101},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1970, col: 13, offset: 68101},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1970, col: 20, offset: 68108},
								expr: &ruleRefExpr{
									pos:  position{line: 1970, col: 21, offset: 68109},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1970, col: 30, offset: 68118},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1970, col: 35, offset: 68123},
								expr: &choiceExpr{
									pos: position{line: 1970, col: 36, offset: 68124},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1970, col: 36, offset: 68124},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1970, col: 47, offset: 68135},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1974, col: 1, offset: 68228},
			expr: &actionExpr{
				pos: position{line: 1974, col: 23, offset: 68250},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1974, col: 23, offset: 68250},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1974, col: 23, offset: 68250},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1974, col: 31, offset: 68258},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1974, col: 39, offset: 68266},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1974, col: 44, offset: 68271},
								expr: &choiceExpr{
									pos: position{line: 1974, col: 45, offset: 68272},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1974, col: 45, offset: 68272},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1974, col: 56, offset: 68283},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 1978, col: 1, offset: 68376},
			expr: &actionExpr{
				pos: position{line: 1978, col: 13, offset: 68388},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 1978, col: 13, offset: 68388},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1978, col: 22, offset: 68397},
						expr: &choiceExpr{
							pos: position{line: 1980, col: 5, offset: 68436},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1980, col: 5, offset: 68436},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 1980, col: 5, offset: 68436},
										expr: &charClassMatcher{
											pos:        position{line: 1980, col: 6, offset: 68437},
											val:        "[^\\r\\n[\\]\\uFFFD{&<> ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1983, col: 7, offset: 68576},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1984, col: 7, offset: 68605},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 1985, col: 7, offset: 68628},
									run: (*parser).callonFilename10,
									expr: &litMatcher{
										pos:        position{line: 1985, col: 7, offset: 68628},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 1991, col: 1, offset: 68766},
			expr: &choiceExpr{
				pos: position{line: 1991, col: 11, offset: 68776},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1991, col: 11, offset: 68776},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1991, col: 23, offset: 68788},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1991, col: 36, offset: 68801},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1991, col: 47, offset: 68812},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1991, col: 58, offset: 68823},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 1993, col: 1, offset: 68834},
			expr: &actionExpr{
				pos: position{line: 1993, col: 7, offset: 68840},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1993, col: 7, offset: 68840},
					expr: &charClassMatcher{
						pos:        position{line: 1993, col: 7, offset: 68840},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 1997, col: 1, offset: 68973},
			expr: &actionExpr{
				pos: position{line: 1997, col: 10, offset: 68982},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 1997, col: 10, offset: 68982},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2001, col: 1, offset: 69032},
			expr: &actionExpr{
				pos: position{line: 2001, col: 11, offset: 69042},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2001, col: 11, offset: 69042},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2001, col: 11, offset: 69042},
							expr: &litMatcher{
								pos:        position{line: 2001, col: 11, offset: 69042},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2001, col: 16, offset: 69047},
							expr: &ruleRefExpr{
								pos:  position{line: 2001, col: 16, offset: 69047},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2005, col: 1, offset: 69107},
			expr: &choiceExpr{
				pos: position{line: 2005, col: 10, offset: 69116},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2005, col: 10, offset: 69116},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2005, col: 16, offset: 69122},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2005, col: 16, offset: 69122},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2009, col: 1, offset: 69171},
			expr: &choiceExpr{
				pos: position{line: 2009, col: 12, offset: 69182},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2009, col: 12, offset: 69182},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2009, col: 19, offset: 69189},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 2009, col: 28, offset: 69198},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 2009, col: 28, offset: 69198},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2013, col: 1, offset: 69282},
			expr: &notExpr{
				pos: position{line: 2013, col: 8, offset: 69289},
				expr: &anyMatcher{
					line: 2013, col: 9, offset: 69290,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2015, col: 1, offset: 69293},
			expr: &choiceExpr{
				pos: position{line: 2015, col: 8, offset: 69300},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2015, col: 8, offset: 69300},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 2015, col: 14, offset: 69306},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock7(delimiter interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block
	return c.isValidBlockDelimiter(delimiter.(types.BlockDelimiter))

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock7(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock3(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock3(stack["delimiter"])
}

func (c *current) onAttributeDeclaration3() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonAttributeDeclaration3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration3()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes13(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue15()
}

func (c *current) onSingleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue18()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue15()
}

func (c *current) onDoubleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue18()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue21() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue7(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue7(stack["element"])
}

func (c *current) onUnquotedAttributeValue23(elements interface{}) (bool, error) {
	// post-parsing condition to verify that the value is not an empty string
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue23(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListElement1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElement1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListElementPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListElementPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix5()
}

func (c *current) onCalloutListElementPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix1(stack["ref"])
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() error {
	// for images, we always enable the 'normal' substitutions
	return c.setSubstitutionPhase("normal")

}

func (p *parser) callonImageBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onOrderedListElement1(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content.([]interface{}))
}

func (p *parser) callonOrderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElement1(stack["prefix"], stack["content"])
}

func (c *current) onOrderedListElementPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix10()
}

func (c *current) onOrderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix13(stack["depth"])
}

func (c *current) onOrderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix7(stack["depth"])
}

func (c *current) onOrderedListElementPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListElementPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListElementPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix14()
}

func (c *current) onOrderedListElementPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListElementPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListElementPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix19()
}

func (c *current) onOrderedListElementPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListElementPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListElementPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix23()
}

func (c *current) onOrderedListElementPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListElementPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListElementPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix27()
}

func (c *current) onOrderedListElementPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListElementPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListElementPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix32()
}

func (c *current) onOrderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix1(stack["prefix"])
}

func (c *current) onOrderedListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonOrderedListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementContent1()
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onItalicWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonItalicWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicWord1()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return []interface{}{
		types.StringElement{Content: string(c.text)},
	}, nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(content interface{}) (interface{}, error) {
	s, _ := types.NewStringElement(string(c.text))
	return []interface{}{s}, nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["content"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename10()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

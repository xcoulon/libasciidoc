// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DefaultDocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 420},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 14, offset: 13476},
						run: (*parser).callonDefaultDocumentFragmentElement2,
						expr: &seqExpr{
							pos: position{line: 434, col: 14, offset: 13476},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 434, col: 14, offset: 13476},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 10, offset: 72709},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2124, col: 10, offset: 72709},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2124, col: 16, offset: 72715},
												run: (*parser).callonDefaultDocumentFragmentElement7,
												expr: &litMatcher{
													pos:        position{line: 2124, col: 16, offset: 72715},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2132, col: 8, offset: 72882},
									expr: &anyMatcher{
										line: 2132, col: 9, offset: 72883,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1723, col: 5, offset: 60453},
						run: (*parser).callonDefaultDocumentFragmentElement11,
						expr: &seqExpr{
							pos: position{line: 1723, col: 5, offset: 60453},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1723, col: 5, offset: 60453},
									label: "level",
									expr: &actionExpr{
										pos: position{line: 1723, col: 12, offset: 60460},
										run: (*parser).callonDefaultDocumentFragmentElement14,
										expr: &oneOrMoreExpr{
											pos: position{line: 1723, col: 12, offset: 60460},
											expr: &litMatcher{
												pos:        position{line: 1723, col: 13, offset: 60461},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1727, col: 5, offset: 60569},
									run: (*parser).callonDefaultDocumentFragmentElement17,
								},
								&oneOrMoreExpr{
									pos: position{line: 1739, col: 5, offset: 61075},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 10, offset: 72709},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2124, col: 10, offset: 72709},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2124, col: 16, offset: 72715},
												run: (*parser).callonDefaultDocumentFragmentElement21,
												expr: &litMatcher{
													pos:        position{line: 2124, col: 16, offset: 72715},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1739, col: 12, offset: 61082},
									label: "title",
									expr: &actionExpr{
										pos: position{line: 1763, col: 20, offset: 61956},
										run: (*parser).callonDefaultDocumentFragmentElement24,
										expr: &zeroOrMoreExpr{
											pos: position{line: 1763, col: 20, offset: 61956},
											expr: &charClassMatcher{
												pos:        position{line: 1763, col: 20, offset: 61956},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2134, col: 8, offset: 72893},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 2132, col: 8, offset: 72882},
											expr: &anyMatcher{
												line: 2132, col: 9, offset: 72883,
											},
										},
										&litMatcher{
											pos:        position{line: 2128, col: 12, offset: 72775},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2128, col: 19, offset: 72782},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2128, col: 28, offset: 72791},
											run: (*parser).callonDefaultDocumentFragmentElement32,
											expr: &litMatcher{
												pos:        position{line: 2128, col: 28, offset: 72791},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 450},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 467},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 489},
						name: "FileInclusion",
					},
					&actionExpr{
						pos: position{line: 511, col: 19, offset: 16023},
						run: (*parser).callonDefaultDocumentFragmentElement37,
						expr: &seqExpr{
							pos: position{line: 511, col: 19, offset: 16023},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 511, col: 19, offset: 16023},
									expr: &charClassMatcher{
										pos:        position{line: 2049, col: 13, offset: 70330},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 512, col: 5, offset: 16055},
									label: "delimiter",
									expr: &choiceExpr{
										pos: position{line: 512, col: 16, offset: 16066},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 523, col: 26, offset: 16385},
												run: (*parser).callonDefaultDocumentFragmentElement43,
												expr: &seqExpr{
													pos: position{line: 523, col: 26, offset: 16385},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 523, col: 26, offset: 16385},
															val:        "....",
															ignoreCase: false,
															want:       "\"....\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 523, col: 33, offset: 16392},
															expr: &choiceExpr{
																pos: position{line: 2124, col: 10, offset: 72709},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2124, col: 10, offset: 72709},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonDefaultDocumentFragmentElement49,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2132, col: 8, offset: 72882},
															expr: &anyMatcher{
																line: 2132, col: 9, offset: 72883,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 527, col: 25, offset: 16482},
												run: (*parser).callonDefaultDocumentFragmentElement53,
												expr: &seqExpr{
													pos: position{line: 527, col: 25, offset: 16482},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 527, col: 25, offset: 16482},
															val:        "```",
															ignoreCase: false,
															want:       "\"```\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 527, col: 31, offset: 16488},
															expr: &choiceExpr{
																pos: position{line: 2124, col: 10, offset: 72709},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2124, col: 10, offset: 72709},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonDefaultDocumentFragmentElement59,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2132, col: 8, offset: 72882},
															expr: &anyMatcher{
																line: 2132, col: 9, offset: 72883,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 531, col: 26, offset: 16578},
												run: (*parser).callonDefaultDocumentFragmentElement63,
												expr: &seqExpr{
													pos: position{line: 531, col: 26, offset: 16578},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 531, col: 26, offset: 16578},
															val:        "----",
															ignoreCase: false,
															want:       "\"----\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 531, col: 33, offset: 16585},
															expr: &choiceExpr{
																pos: position{line: 2124, col: 10, offset: 72709},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2124, col: 10, offset: 72709},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonDefaultDocumentFragmentElement69,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 537, col: 26, offset: 16719},
												run: (*parser).callonDefaultDocumentFragmentElement71,
												expr: &seqExpr{
													pos: position{line: 537, col: 26, offset: 16719},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 537, col: 26, offset: 16719},
															val:        "====",
															ignoreCase: false,
															want:       "\"====\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 537, col: 33, offset: 16726},
															expr: &choiceExpr{
																pos: position{line: 2124, col: 10, offset: 72709},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2124, col: 10, offset: 72709},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonDefaultDocumentFragmentElement77,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2132, col: 8, offset: 72882},
															expr: &anyMatcher{
																line: 2132, col: 9, offset: 72883,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 541, col: 26, offset: 16817},
												run: (*parser).callonDefaultDocumentFragmentElement81,
												expr: &seqExpr{
													pos: position{line: 541, col: 26, offset: 16817},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 541, col: 26, offset: 16817},
															val:        "////",
															ignoreCase: false,
															want:       "\"////\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 541, col: 33, offset: 16824},
															expr: &choiceExpr{
																pos: position{line: 2124, col: 10, offset: 72709},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2124, col: 10, offset: 72709},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonDefaultDocumentFragmentElement87,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2132, col: 8, offset: 72882},
															expr: &anyMatcher{
																line: 2132, col: 9, offset: 72883,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 545, col: 24, offset: 16913},
												run: (*parser).callonDefaultDocumentFragmentElement91,
												expr: &seqExpr{
													pos: position{line: 545, col: 24, offset: 16913},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 545, col: 24, offset: 16913},
															val:        "____",
															ignoreCase: false,
															want:       "\"____\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 545, col: 31, offset: 16920},
															expr: &choiceExpr{
																pos: position{line: 2124, col: 10, offset: 72709},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2124, col: 10, offset: 72709},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonDefaultDocumentFragmentElement97,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2132, col: 8, offset: 72882},
															expr: &anyMatcher{
																line: 2132, col: 9, offset: 72883,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 549, col: 26, offset: 17009},
												run: (*parser).callonDefaultDocumentFragmentElement101,
												expr: &seqExpr{
													pos: position{line: 549, col: 26, offset: 17009},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 549, col: 26, offset: 17009},
															val:        "****",
															ignoreCase: false,
															want:       "\"****\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 549, col: 33, offset: 17016},
															expr: &choiceExpr{
																pos: position{line: 2124, col: 10, offset: 72709},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2124, col: 10, offset: 72709},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonDefaultDocumentFragmentElement107,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2132, col: 8, offset: 72882},
															expr: &anyMatcher{
																line: 2132, col: 9, offset: 72883,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 553, col: 30, offset: 17111},
												run: (*parser).callonDefaultDocumentFragmentElement111,
												expr: &seqExpr{
													pos: position{line: 553, col: 30, offset: 17111},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 553, col: 30, offset: 17111},
															val:        "++++",
															ignoreCase: false,
															want:       "\"++++\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 553, col: 37, offset: 17118},
															expr: &choiceExpr{
																pos: position{line: 2124, col: 10, offset: 72709},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2124, col: 10, offset: 72709},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonDefaultDocumentFragmentElement117,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2132, col: 8, offset: 72882},
															expr: &anyMatcher{
																line: 2132, col: 9, offset: 72883,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2007, col: 18, offset: 69097},
						run: (*parser).callonDefaultDocumentFragmentElement121,
						expr: &seqExpr{
							pos: position{line: 2007, col: 18, offset: 69097},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 2007, col: 19, offset: 69098},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2007, col: 19, offset: 69098},
											val:        "***",
											ignoreCase: false,
											want:       "\"***\"",
										},
										&litMatcher{
											pos:        position{line: 2007, col: 27, offset: 69106},
											val:        "* * *",
											ignoreCase: false,
											want:       "\"* * *\"",
										},
										&litMatcher{
											pos:        position{line: 2007, col: 37, offset: 69116},
											val:        "---",
											ignoreCase: false,
											want:       "\"---\"",
										},
										&litMatcher{
											pos:        position{line: 2007, col: 45, offset: 69124},
											val:        "- - -",
											ignoreCase: false,
											want:       "\"- - -\"",
										},
										&litMatcher{
											pos:        position{line: 2007, col: 55, offset: 69134},
											val:        "___",
											ignoreCase: false,
											want:       "\"___\"",
										},
										&litMatcher{
											pos:        position{line: 2007, col: 63, offset: 69142},
											val:        "_ _ _",
											ignoreCase: false,
											want:       "\"_ _ _\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 2132, col: 8, offset: 72882},
									expr: &anyMatcher{
										line: 2132, col: 9, offset: 72883,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 23, offset: 33509},
						run: (*parser).callonDefaultDocumentFragmentElement132,
						expr: &seqExpr{
							pos: position{line: 1015, col: 23, offset: 33509},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1015, col: 23, offset: 33509},
									label: "prefix",
									expr: &actionExpr{
										pos: position{line: 1020, col: 5, offset: 33722},
										run: (*parser).callonDefaultDocumentFragmentElement135,
										expr: &seqExpr{
											pos: position{line: 1020, col: 5, offset: 33722},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1020, col: 5, offset: 33722},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonDefaultDocumentFragmentElement140,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1020, col: 12, offset: 33729},
													label: "prefix",
													expr: &choiceExpr{
														pos: position{line: 1022, col: 9, offset: 33792},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1022, col: 9, offset: 33792},
																run: (*parser).callonDefaultDocumentFragmentElement144,
																expr: &seqExpr{
																	pos: position{line: 1022, col: 9, offset: 33792},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1022, col: 9, offset: 33792},
																			label: "depth",
																			expr: &actionExpr{
																				pos: position{line: 1022, col: 16, offset: 33799},
																				run: (*parser).callonDefaultDocumentFragmentElement147,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1022, col: 16, offset: 33799},
																					expr: &litMatcher{
																						pos:        position{line: 1022, col: 17, offset: 33800},
																						val:        ".",
																						ignoreCase: false,
																						want:       "\".\"",
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1026, col: 9, offset: 33900},
																			run: (*parser).callonDefaultDocumentFragmentElement150,
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1045, col: 11, offset: 34617},
																run: (*parser).callonDefaultDocumentFragmentElement151,
																expr: &seqExpr{
																	pos: position{line: 1045, col: 11, offset: 34617},
																	exprs: []interface{}{
																		&oneOrMoreExpr{
																			pos: position{line: 1045, col: 11, offset: 34617},
																			expr: &charClassMatcher{
																				pos:        position{line: 1045, col: 12, offset: 34618},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 1045, col: 20, offset: 34626},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1047, col: 13, offset: 34737},
																run: (*parser).callonDefaultDocumentFragmentElement156,
																expr: &seqExpr{
																	pos: position{line: 1047, col: 13, offset: 34737},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1047, col: 14, offset: 34738},
																			val:        "[a-z]",
																			ranges:     []rune{'a', 'z'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 1047, col: 21, offset: 34745},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1049, col: 13, offset: 34859},
																run: (*parser).callonDefaultDocumentFragmentElement160,
																expr: &seqExpr{
																	pos: position{line: 1049, col: 13, offset: 34859},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1049, col: 14, offset: 34860},
																			val:        "[A-Z]",
																			ranges:     []rune{'A', 'Z'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 1049, col: 21, offset: 34867},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1051, col: 13, offset: 34981},
																run: (*parser).callonDefaultDocumentFragmentElement164,
																expr: &seqExpr{
																	pos: position{line: 1051, col: 13, offset: 34981},
																	exprs: []interface{}{
																		&oneOrMoreExpr{
																			pos: position{line: 1051, col: 13, offset: 34981},
																			expr: &charClassMatcher{
																				pos:        position{line: 1051, col: 14, offset: 34982},
																				val:        "[ivxdlcm]",
																				chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 1051, col: 26, offset: 34994},
																			val:        ")",
																			ignoreCase: false,
																			want:       "\")\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1053, col: 13, offset: 35108},
																run: (*parser).callonDefaultDocumentFragmentElement169,
																expr: &seqExpr{
																	pos: position{line: 1053, col: 13, offset: 35108},
																	exprs: []interface{}{
																		&oneOrMoreExpr{
																			pos: position{line: 1053, col: 13, offset: 35108},
																			expr: &charClassMatcher{
																				pos:        position{line: 1053, col: 14, offset: 35109},
																				val:        "[IVXDLCM]",
																				chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 1053, col: 26, offset: 35121},
																			val:        ")",
																			ignoreCase: false,
																			want:       "\")\"",
																		},
																	},
																},
															},
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 1055, col: 12, offset: 35234},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonDefaultDocumentFragmentElement177,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1015, col: 57, offset: 33543},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 1059, col: 30, offset: 35298},
										run: (*parser).callonDefaultDocumentFragmentElement180,
										expr: &zeroOrMoreExpr{
											pos: position{line: 1059, col: 30, offset: 35298},
											expr: &charClassMatcher{
												pos:        position{line: 1059, col: 30, offset: 35298},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 35543},
						run: (*parser).callonDefaultDocumentFragmentElement183,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 35543},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1071, col: 5, offset: 35543},
									label: "prefix",
									expr: &actionExpr{
										pos: position{line: 1078, col: 5, offset: 35841},
										run: (*parser).callonDefaultDocumentFragmentElement186,
										expr: &seqExpr{
											pos: position{line: 1078, col: 5, offset: 35841},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1078, col: 5, offset: 35841},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonDefaultDocumentFragmentElement191,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1078, col: 12, offset: 35848},
													label: "prefix",
													expr: &choiceExpr{
														pos: position{line: 1078, col: 20, offset: 35856},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1080, col: 9, offset: 35913},
																run: (*parser).callonDefaultDocumentFragmentElement195,
																expr: &seqExpr{
																	pos: position{line: 1080, col: 9, offset: 35913},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1080, col: 9, offset: 35913},
																			label: "depth",
																			expr: &actionExpr{
																				pos: position{line: 1080, col: 16, offset: 35920},
																				run: (*parser).callonDefaultDocumentFragmentElement198,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1080, col: 16, offset: 35920},
																					expr: &litMatcher{
																						pos:        position{line: 1080, col: 17, offset: 35921},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1084, col: 9, offset: 36021},
																			run: (*parser).callonDefaultDocumentFragmentElement201,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1101, col: 14, offset: 36728},
																label: "depth",
																expr: &actionExpr{
																	pos: position{line: 1101, col: 21, offset: 36735},
																	run: (*parser).callonDefaultDocumentFragmentElement203,
																	expr: &litMatcher{
																		pos:        position{line: 1101, col: 22, offset: 36736},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
															},
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 1103, col: 13, offset: 36822},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonDefaultDocumentFragmentElement208,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1072, col: 5, offset: 35584},
									label: "checkstyle",
									expr: &zeroOrOneExpr{
										pos: position{line: 1072, col: 16, offset: 35595},
										expr: &actionExpr{
											pos: position{line: 1107, col: 35, offset: 36892},
											run: (*parser).callonDefaultDocumentFragmentElement212,
											expr: &seqExpr{
												pos: position{line: 1107, col: 35, offset: 36892},
												exprs: []interface{}{
													&andExpr{
														pos: position{line: 1107, col: 35, offset: 36892},
														expr: &litMatcher{
															pos:        position{line: 1107, col: 36, offset: 36893},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 1107, col: 40, offset: 36897},
														label: "style",
														expr: &choiceExpr{
															pos: position{line: 1108, col: 7, offset: 36911},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1108, col: 7, offset: 36911},
																	run: (*parser).callonDefaultDocumentFragmentElement218,
																	expr: &litMatcher{
																		pos:        position{line: 1108, col: 7, offset: 36911},
																		val:        "[ ]",
																		ignoreCase: false,
																		want:       "\"[ ]\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1109, col: 7, offset: 36956},
																	run: (*parser).callonDefaultDocumentFragmentElement220,
																	expr: &litMatcher{
																		pos:        position{line: 1109, col: 7, offset: 36956},
																		val:        "[*]",
																		ignoreCase: false,
																		want:       "\"[*]\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1110, col: 7, offset: 36999},
																	run: (*parser).callonDefaultDocumentFragmentElement222,
																	expr: &litMatcher{
																		pos:        position{line: 1110, col: 7, offset: 36999},
																		val:        "[x]",
																		ignoreCase: false,
																		want:       "\"[x]\"",
																	},
																},
															},
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 1111, col: 7, offset: 37041},
														expr: &choiceExpr{
															pos: position{line: 2124, col: 10, offset: 72709},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2124, col: 10, offset: 72709},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2124, col: 16, offset: 72715},
																	run: (*parser).callonDefaultDocumentFragmentElement227,
																	expr: &litMatcher{
																		pos:        position{line: 2124, col: 16, offset: 72715},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 5, offset: 35634},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 1119, col: 32, offset: 37366},
										run: (*parser).callonDefaultDocumentFragmentElement230,
										expr: &zeroOrMoreExpr{
											pos: position{line: 1119, col: 32, offset: 37366},
											expr: &charClassMatcher{
												pos:        position{line: 1119, col: 32, offset: 37366},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1129, col: 20, offset: 37574},
						run: (*parser).callonDefaultDocumentFragmentElement233,
						expr: &seqExpr{
							pos: position{line: 1129, col: 20, offset: 37574},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1129, col: 20, offset: 37574},
									label: "term",
									expr: &actionExpr{
										pos: position{line: 1133, col: 24, offset: 37804},
										run: (*parser).callonDefaultDocumentFragmentElement236,
										expr: &zeroOrMoreExpr{
											pos: position{line: 1133, col: 24, offset: 37804},
											expr: &seqExpr{
												pos: position{line: 1133, col: 25, offset: 37805},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1133, col: 25, offset: 37805},
														expr: &actionExpr{
															pos: position{line: 1138, col: 5, offset: 37904},
															run: (*parser).callonDefaultDocumentFragmentElement240,
															expr: &seqExpr{
																pos: position{line: 1138, col: 5, offset: 37904},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1138, col: 5, offset: 37904},
																		label: "separator",
																		expr: &actionExpr{
																			pos: position{line: 1138, col: 16, offset: 37915},
																			run: (*parser).callonDefaultDocumentFragmentElement243,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1138, col: 16, offset: 37915},
																				expr: &litMatcher{
																					pos:        position{line: 1138, col: 17, offset: 37916},
																					val:        ":",
																					ignoreCase: false,
																					want:       "\":\"",
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1141, col: 5, offset: 37974},
																		run: (*parser).callonDefaultDocumentFragmentElement246,
																	},
																	&choiceExpr{
																		pos: position{line: 1145, col: 6, offset: 38150},
																		alternatives: []interface{}{
																			&oneOrMoreExpr{
																				pos: position{line: 1145, col: 6, offset: 38150},
																				expr: &choiceExpr{
																					pos: position{line: 1145, col: 7, offset: 38151},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2124, col: 10, offset: 72709},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2124, col: 16, offset: 72715},
																							run: (*parser).callonDefaultDocumentFragmentElement251,
																							expr: &litMatcher{
																								pos:        position{line: 2124, col: 16, offset: 72715},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2128, col: 12, offset: 72775},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2128, col: 19, offset: 72782},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2128, col: 28, offset: 72791},
																							run: (*parser).callonDefaultDocumentFragmentElement255,
																							expr: &litMatcher{
																								pos:        position{line: 2128, col: 28, offset: 72791},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2132, col: 8, offset: 72882},
																				expr: &anyMatcher{
																					line: 2132, col: 9, offset: 72883,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2128, col: 12, offset: 72775},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2128, col: 19, offset: 72782},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&actionExpr{
																				pos: position{line: 2128, col: 28, offset: 72791},
																				run: (*parser).callonDefaultDocumentFragmentElement261,
																				expr: &litMatcher{
																					pos:        position{line: 2128, col: 28, offset: 72791},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&anyMatcher{
														line: 1133, col: 51, offset: 37831,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 47, offset: 37601},
									label: "separator",
									expr: &actionExpr{
										pos: position{line: 1138, col: 5, offset: 37904},
										run: (*parser).callonDefaultDocumentFragmentElement265,
										expr: &seqExpr{
											pos: position{line: 1138, col: 5, offset: 37904},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1138, col: 5, offset: 37904},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1138, col: 16, offset: 37915},
														run: (*parser).callonDefaultDocumentFragmentElement268,
														expr: &oneOrMoreExpr{
															pos: position{line: 1138, col: 16, offset: 37915},
															expr: &litMatcher{
																pos:        position{line: 1138, col: 17, offset: 37916},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1141, col: 5, offset: 37974},
													run: (*parser).callonDefaultDocumentFragmentElement271,
												},
												&choiceExpr{
													pos: position{line: 1145, col: 6, offset: 38150},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1145, col: 6, offset: 38150},
															expr: &choiceExpr{
																pos: position{line: 1145, col: 7, offset: 38151},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2124, col: 10, offset: 72709},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonDefaultDocumentFragmentElement276,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2128, col: 12, offset: 72775},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2128, col: 19, offset: 72782},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&actionExpr{
																		pos: position{line: 2128, col: 28, offset: 72791},
																		run: (*parser).callonDefaultDocumentFragmentElement280,
																		expr: &litMatcher{
																			pos:        position{line: 2128, col: 28, offset: 72791},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2132, col: 8, offset: 72882},
															expr: &anyMatcher{
																line: 2132, col: 9, offset: 72883,
															},
														},
														&litMatcher{
															pos:        position{line: 2128, col: 12, offset: 72775},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2128, col: 19, offset: 72782},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2128, col: 28, offset: 72791},
															run: (*parser).callonDefaultDocumentFragmentElement286,
															expr: &litMatcher{
																pos:        position{line: 2128, col: 28, offset: 72791},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 84, offset: 37638},
									label: "description",
									expr: &zeroOrOneExpr{
										pos: position{line: 1129, col: 96, offset: 37650},
										expr: &actionExpr{
											pos: position{line: 1149, col: 31, offset: 38237},
											run: (*parser).callonDefaultDocumentFragmentElement290,
											expr: &oneOrMoreExpr{
												pos: position{line: 1149, col: 31, offset: 38237},
												expr: &charClassMatcher{
													pos:        position{line: 1149, col: 31, offset: 38237},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1162, col: 23, offset: 38582},
						run: (*parser).callonDefaultDocumentFragmentElement293,
						expr: &seqExpr{
							pos: position{line: 1162, col: 23, offset: 38582},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1162, col: 23, offset: 38582},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1166, col: 29, offset: 38773},
										run: (*parser).callonDefaultDocumentFragmentElement296,
										expr: &seqExpr{
											pos: position{line: 1166, col: 29, offset: 38773},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1166, col: 29, offset: 38773},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&labeledExpr{
													pos:   position{line: 1166, col: 33, offset: 38777},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1166, col: 38, offset: 38782},
														run: (*parser).callonDefaultDocumentFragmentElement300,
														expr: &oneOrMoreExpr{
															pos: position{line: 1166, col: 38, offset: 38782},
															expr: &charClassMatcher{
																pos:        position{line: 1166, col: 38, offset: 38782},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1166, col: 86, offset: 38830},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 1166, col: 90, offset: 38834},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonDefaultDocumentFragmentElement307,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1162, col: 54, offset: 38613},
									label: "description",
									expr: &actionExpr{
										pos: position{line: 1170, col: 30, offset: 38903},
										run: (*parser).callonDefaultDocumentFragmentElement310,
										expr: &zeroOrMoreExpr{
											pos: position{line: 1170, col: 30, offset: 38903},
											expr: &charClassMatcher{
												pos:        position{line: 1170, col: 30, offset: 38903},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1180, col: 28, offset: 39119},
						run: (*parser).callonDefaultDocumentFragmentElement313,
						expr: &seqExpr{
							pos: position{line: 1180, col: 28, offset: 39119},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1180, col: 28, offset: 39119},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1180, col: 32, offset: 39123},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 10, offset: 72709},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2124, col: 10, offset: 72709},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2124, col: 16, offset: 72715},
												run: (*parser).callonDefaultDocumentFragmentElement319,
												expr: &litMatcher{
													pos:        position{line: 2124, col: 16, offset: 72715},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 22, offset: 14624},
						run: (*parser).callonDefaultDocumentFragmentElement321,
						expr: &seqExpr{
							pos: position{line: 474, col: 22, offset: 14624},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 474, col: 22, offset: 14624},
									expr: &actionExpr{
										pos: position{line: 541, col: 26, offset: 16817},
										run: (*parser).callonDefaultDocumentFragmentElement324,
										expr: &seqExpr{
											pos: position{line: 541, col: 26, offset: 16817},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 541, col: 26, offset: 16817},
													val:        "////",
													ignoreCase: false,
													want:       "\"////\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 541, col: 33, offset: 16824},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonDefaultDocumentFragmentElement330,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2132, col: 8, offset: 72882},
													expr: &anyMatcher{
														line: 2132, col: 9, offset: 72883,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 474, col: 45, offset: 14647},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 10, offset: 72709},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2124, col: 10, offset: 72709},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2124, col: 16, offset: 72715},
												run: (*parser).callonDefaultDocumentFragmentElement337,
												expr: &litMatcher{
													pos:        position{line: 2124, col: 16, offset: 72715},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 474, col: 52, offset: 14654},
									val:        "//",
									ignoreCase: false,
									want:       "\"//\"",
								},
								&labeledExpr{
									pos:   position{line: 474, col: 57, offset: 14659},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 478, col: 29, offset: 14795},
										run: (*parser).callonDefaultDocumentFragmentElement341,
										expr: &zeroOrMoreExpr{
											pos: position{line: 478, col: 29, offset: 14795},
											expr: &charClassMatcher{
												pos:        position{line: 478, col: 29, offset: 14795},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2134, col: 8, offset: 72893},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 2132, col: 8, offset: 72882},
											expr: &anyMatcher{
												line: 2132, col: 9, offset: 72883,
											},
										},
										&litMatcher{
											pos:        position{line: 2128, col: 12, offset: 72775},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2128, col: 19, offset: 72782},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2128, col: 28, offset: 72791},
											run: (*parser).callonDefaultDocumentFragmentElement349,
											expr: &litMatcher{
												pos:        position{line: 2128, col: 28, offset: 72791},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2244},
						run: (*parser).callonDefaultDocumentFragmentElement351,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2244},
							exprs: []interface{}{
								&stateCodeExpr{
									pos: position{line: 83, col: 5, offset: 2244},
									run: (*parser).callonDefaultDocumentFragmentElement353,
								},
								&litMatcher{
									pos:        position{line: 87, col: 5, offset: 2388},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 87, col: 9, offset: 2392},
									label: "name",
									expr: &actionExpr{
										pos: position{line: 98, col: 18, offset: 2832},
										run: (*parser).callonDefaultDocumentFragmentElement356,
										expr: &seqExpr{
											pos: position{line: 98, col: 18, offset: 2832},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 98, col: 18, offset: 2832},
													val:        "[_0-9\\pL]",
													chars:      []rune{'_'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 98, col: 28, offset: 2842},
													expr: &charClassMatcher{
														pos:        position{line: 98, col: 29, offset: 2843},
														val:        "[-0-9\\pL]",
														chars:      []rune{'-'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 87, col: 30, offset: 2413},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 88, col: 5, offset: 2422},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 88, col: 11, offset: 2428},
										expr: &actionExpr{
											pos: position{line: 102, col: 30, offset: 2928},
											run: (*parser).callonDefaultDocumentFragmentElement364,
											expr: &seqExpr{
												pos: position{line: 102, col: 30, offset: 2928},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 102, col: 30, offset: 2928},
														expr: &choiceExpr{
															pos: position{line: 2124, col: 10, offset: 72709},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2124, col: 10, offset: 72709},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2124, col: 16, offset: 72715},
																	run: (*parser).callonDefaultDocumentFragmentElement369,
																	expr: &litMatcher{
																		pos:        position{line: 2124, col: 16, offset: 72715},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 102, col: 37, offset: 2935},
														label: "elements",
														expr: &zeroOrMoreExpr{
															pos: position{line: 102, col: 46, offset: 2944},
															expr: &actionExpr{
																pos: position{line: 106, col: 37, offset: 3103},
																run: (*parser).callonDefaultDocumentFragmentElement373,
																expr: &seqExpr{
																	pos: position{line: 106, col: 37, offset: 3103},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 106, col: 37, offset: 3103},
																			expr: &choiceExpr{
																				pos: position{line: 2134, col: 8, offset: 72893},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2132, col: 8, offset: 72882},
																						expr: &anyMatcher{
																							line: 2132, col: 9, offset: 72883,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2128, col: 12, offset: 72775},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2128, col: 19, offset: 72782},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2128, col: 28, offset: 72791},
																						run: (*parser).callonDefaultDocumentFragmentElement381,
																						expr: &litMatcher{
																							pos:        position{line: 2128, col: 28, offset: 72791},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 107, col: 5, offset: 3113},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 108, col: 9, offset: 3131},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 108, col: 10, offset: 3132},
																						run: (*parser).callonDefaultDocumentFragmentElement385,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 108, col: 10, offset: 3132},
																							expr: &charClassMatcher{
																								pos:        position{line: 108, col: 10, offset: 3132},
																								val:        "[^\\r\\n{]",
																								chars:      []rune{'\r', '\n', '{'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 398, col: 5, offset: 12261},
																						run: (*parser).callonDefaultDocumentFragmentElement388,
																						expr: &seqExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 398, col: 5, offset: 12261},
																									run: (*parser).callonDefaultDocumentFragmentElement390,
																								},
																								&labeledExpr{
																									pos:   position{line: 401, col: 5, offset: 12325},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 401, col: 14, offset: 12334},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 415, col: 25, offset: 12896},
																												run: (*parser).callonDefaultDocumentFragmentElement393,
																												expr: &seqExpr{
																													pos: position{line: 415, col: 25, offset: 12896},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 415, col: 25, offset: 12896},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 37, offset: 12908},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonDefaultDocumentFragmentElement397,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 56, offset: 12927},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 415, col: 62, offset: 12933},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonDefaultDocumentFragmentElement404,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonDefaultDocumentFragmentElement409,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonDefaultDocumentFragmentElement411,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 415, col: 78, offset: 12949},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 419, col: 25, offset: 13051},
																												run: (*parser).callonDefaultDocumentFragmentElement415,
																												expr: &seqExpr{
																													pos: position{line: 419, col: 25, offset: 13051},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 419, col: 25, offset: 13051},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 38, offset: 13064},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonDefaultDocumentFragmentElement419,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 57, offset: 13083},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 419, col: 63, offset: 13089},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonDefaultDocumentFragmentElement426,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonDefaultDocumentFragmentElement431,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonDefaultDocumentFragmentElement433,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 419, col: 79, offset: 13105},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 408, col: 31, offset: 12551},
																												run: (*parser).callonDefaultDocumentFragmentElement437,
																												expr: &seqExpr{
																													pos: position{line: 408, col: 31, offset: 12551},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 408, col: 31, offset: 12551},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 408, col: 35, offset: 12555},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonDefaultDocumentFragmentElement441,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 408, col: 54, offset: 12574},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 112, col: 12, offset: 3260},
																						run: (*parser).callonDefaultDocumentFragmentElement447,
																						expr: &litMatcher{
																							pos:        position{line: 112, col: 12, offset: 3260},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2134, col: 8, offset: 72893},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 2132, col: 8, offset: 72882},
											expr: &anyMatcher{
												line: 2132, col: 9, offset: 72883,
											},
										},
										&litMatcher{
											pos:        position{line: 2128, col: 12, offset: 72775},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2128, col: 19, offset: 72782},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2128, col: 28, offset: 72791},
											run: (*parser).callonDefaultDocumentFragmentElement454,
											expr: &litMatcher{
												pos:        position{line: 2128, col: 28, offset: 72791},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 119, col: 19, offset: 3415},
						run: (*parser).callonDefaultDocumentFragmentElement456,
						expr: &seqExpr{
							pos: position{line: 119, col: 19, offset: 3415},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 119, col: 19, offset: 3415},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 119, col: 24, offset: 3420},
									label: "name",
									expr: &actionExpr{
										pos: position{line: 98, col: 18, offset: 2832},
										run: (*parser).callonDefaultDocumentFragmentElement460,
										expr: &seqExpr{
											pos: position{line: 98, col: 18, offset: 2832},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 98, col: 18, offset: 2832},
													val:        "[_0-9\\pL]",
													chars:      []rune{'_'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 98, col: 28, offset: 2842},
													expr: &charClassMatcher{
														pos:        position{line: 98, col: 29, offset: 2843},
														val:        "[-0-9\\pL]",
														chars:      []rune{'-'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 119, col: 45, offset: 3441},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 119, col: 49, offset: 3445},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 10, offset: 72709},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2124, col: 10, offset: 72709},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2124, col: 16, offset: 72715},
												run: (*parser).callonDefaultDocumentFragmentElement469,
												expr: &litMatcher{
													pos:        position{line: 2124, col: 16, offset: 72715},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2132, col: 8, offset: 72882},
									expr: &anyMatcher{
										line: 2132, col: 9, offset: 72883,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3512},
						run: (*parser).callonDefaultDocumentFragmentElement473,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 3512},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 121, col: 5, offset: 3512},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 121, col: 9, offset: 3516},
									label: "name",
									expr: &actionExpr{
										pos: position{line: 98, col: 18, offset: 2832},
										run: (*parser).callonDefaultDocumentFragmentElement477,
										expr: &seqExpr{
											pos: position{line: 98, col: 18, offset: 2832},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 98, col: 18, offset: 2832},
													val:        "[_0-9\\pL]",
													chars:      []rune{'_'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 98, col: 28, offset: 2842},
													expr: &charClassMatcher{
														pos:        position{line: 98, col: 29, offset: 2843},
														val:        "[-0-9\\pL]",
														chars:      []rune{'-'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 121, col: 30, offset: 3537},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 121, col: 35, offset: 3542},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 10, offset: 72709},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2124, col: 10, offset: 72709},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2124, col: 16, offset: 72715},
												run: (*parser).callonDefaultDocumentFragmentElement486,
												expr: &litMatcher{
													pos:        position{line: 2124, col: 16, offset: 72715},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2132, col: 8, offset: 72882},
									expr: &anyMatcher{
										line: 2132, col: 9, offset: 72883,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 16, offset: 1915},
						run: (*parser).callonDefaultDocumentFragmentElement490,
						expr: &seqExpr{
							pos: position{line: 73, col: 16, offset: 1915},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 73, col: 16, offset: 1915},
									label: "kind",
									expr: &choiceExpr{
										pos: position{line: 61, col: 19, offset: 1681},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 61, col: 19, offset: 1681},
												run: (*parser).callonDefaultDocumentFragmentElement494,
												expr: &litMatcher{
													pos:        position{line: 61, col: 19, offset: 1681},
													val:        "TIP",
													ignoreCase: false,
													want:       "\"TIP\"",
												},
											},
											&actionExpr{
												pos: position{line: 63, col: 5, offset: 1719},
												run: (*parser).callonDefaultDocumentFragmentElement496,
												expr: &litMatcher{
													pos:        position{line: 63, col: 5, offset: 1719},
													val:        "NOTE",
													ignoreCase: false,
													want:       "\"NOTE\"",
												},
											},
											&actionExpr{
												pos: position{line: 65, col: 5, offset: 1759},
												run: (*parser).callonDefaultDocumentFragmentElement498,
												expr: &litMatcher{
													pos:        position{line: 65, col: 5, offset: 1759},
													val:        "IMPORTANT",
													ignoreCase: false,
													want:       "\"IMPORTANT\"",
												},
											},
											&actionExpr{
												pos: position{line: 67, col: 5, offset: 1809},
												run: (*parser).callonDefaultDocumentFragmentElement500,
												expr: &litMatcher{
													pos:        position{line: 67, col: 5, offset: 1809},
													val:        "WARNING",
													ignoreCase: false,
													want:       "\"WARNING\"",
												},
											},
											&actionExpr{
												pos: position{line: 69, col: 5, offset: 1855},
												run: (*parser).callonDefaultDocumentFragmentElement502,
												expr: &litMatcher{
													pos:        position{line: 69, col: 5, offset: 1855},
													val:        "CAUTION",
													ignoreCase: false,
													want:       "\"CAUTION\"",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 73, col: 38, offset: 1937},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 73, col: 43, offset: 1942},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 73, col: 52, offset: 1951},
										run: (*parser).callonDefaultDocumentFragmentElement506,
										expr: &zeroOrMoreExpr{
											pos: position{line: 73, col: 52, offset: 1951},
											expr: &charClassMatcher{
												pos:        position{line: 73, col: 52, offset: 1951},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinParagraph",
			pos:  position{line: 40, col: 1, offset: 913},
			expr: &choiceExpr{
				pos: position{line: 41, col: 5, offset: 960},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 14, offset: 13476},
						run: (*parser).callonDocumentFragmentElementWithinParagraph2,
						expr: &seqExpr{
							pos: position{line: 434, col: 14, offset: 13476},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 434, col: 14, offset: 13476},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 10, offset: 72709},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2124, col: 10, offset: 72709},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2124, col: 16, offset: 72715},
												run: (*parser).callonDocumentFragmentElementWithinParagraph7,
												expr: &litMatcher{
													pos:        position{line: 2124, col: 16, offset: 72715},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2132, col: 8, offset: 72882},
									expr: &anyMatcher{
										line: 2132, col: 9, offset: 72883,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 22, offset: 14624},
						run: (*parser).callonDocumentFragmentElementWithinParagraph11,
						expr: &seqExpr{
							pos: position{line: 474, col: 22, offset: 14624},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 474, col: 22, offset: 14624},
									expr: &actionExpr{
										pos: position{line: 541, col: 26, offset: 16817},
										run: (*parser).callonDocumentFragmentElementWithinParagraph14,
										expr: &seqExpr{
											pos: position{line: 541, col: 26, offset: 16817},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 541, col: 26, offset: 16817},
													val:        "////",
													ignoreCase: false,
													want:       "\"////\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 541, col: 33, offset: 16824},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonDocumentFragmentElementWithinParagraph20,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2132, col: 8, offset: 72882},
													expr: &anyMatcher{
														line: 2132, col: 9, offset: 72883,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 474, col: 45, offset: 14647},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 10, offset: 72709},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2124, col: 10, offset: 72709},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2124, col: 16, offset: 72715},
												run: (*parser).callonDocumentFragmentElementWithinParagraph27,
												expr: &litMatcher{
													pos:        position{line: 2124, col: 16, offset: 72715},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 474, col: 52, offset: 14654},
									val:        "//",
									ignoreCase: false,
									want:       "\"//\"",
								},
								&labeledExpr{
									pos:   position{line: 474, col: 57, offset: 14659},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 478, col: 29, offset: 14795},
										run: (*parser).callonDocumentFragmentElementWithinParagraph31,
										expr: &zeroOrMoreExpr{
											pos: position{line: 478, col: 29, offset: 14795},
											expr: &charClassMatcher{
												pos:        position{line: 478, col: 29, offset: 14795},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2134, col: 8, offset: 72893},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 2132, col: 8, offset: 72882},
											expr: &anyMatcher{
												line: 2132, col: 9, offset: 72883,
											},
										},
										&litMatcher{
											pos:        position{line: 2128, col: 12, offset: 72775},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2128, col: 19, offset: 72782},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2128, col: 28, offset: 72791},
											run: (*parser).callonDocumentFragmentElementWithinParagraph39,
											expr: &litMatcher{
												pos:        position{line: 2128, col: 28, offset: 72791},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinDelimitedBlock",
			pos:  position{line: 47, col: 1, offset: 1186},
			expr: &actionExpr{
				pos: position{line: 48, col: 5, offset: 1238},
				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 48, col: 5, offset: 1238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1238},
							label: "delimiter",
							expr: &actionExpr{
								pos: position{line: 511, col: 19, offset: 16023},
								run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock4,
								expr: &seqExpr{
									pos: position{line: 511, col: 19, offset: 16023},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 511, col: 19, offset: 16023},
											expr: &charClassMatcher{
												pos:        position{line: 2049, col: 13, offset: 70330},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 512, col: 5, offset: 16055},
											label: "delimiter",
											expr: &choiceExpr{
												pos: position{line: 512, col: 16, offset: 16066},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 523, col: 26, offset: 16385},
														run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock10,
														expr: &seqExpr{
															pos: position{line: 523, col: 26, offset: 16385},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 523, col: 26, offset: 16385},
																	val:        "....",
																	ignoreCase: false,
																	want:       "\"....\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 523, col: 33, offset: 16392},
																	expr: &choiceExpr{
																		pos: position{line: 2124, col: 10, offset: 72709},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2124, col: 10, offset: 72709},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2124, col: 16, offset: 72715},
																				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock16,
																				expr: &litMatcher{
																					pos:        position{line: 2124, col: 16, offset: 72715},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 527, col: 25, offset: 16482},
														run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock20,
														expr: &seqExpr{
															pos: position{line: 527, col: 25, offset: 16482},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 527, col: 25, offset: 16482},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 527, col: 31, offset: 16488},
																	expr: &choiceExpr{
																		pos: position{line: 2124, col: 10, offset: 72709},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2124, col: 10, offset: 72709},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2124, col: 16, offset: 72715},
																				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock26,
																				expr: &litMatcher{
																					pos:        position{line: 2124, col: 16, offset: 72715},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 531, col: 26, offset: 16578},
														run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock30,
														expr: &seqExpr{
															pos: position{line: 531, col: 26, offset: 16578},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 531, col: 26, offset: 16578},
																	val:        "----",
																	ignoreCase: false,
																	want:       "\"----\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 531, col: 33, offset: 16585},
																	expr: &choiceExpr{
																		pos: position{line: 2124, col: 10, offset: 72709},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2124, col: 10, offset: 72709},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2124, col: 16, offset: 72715},
																				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock36,
																				expr: &litMatcher{
																					pos:        position{line: 2124, col: 16, offset: 72715},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 537, col: 26, offset: 16719},
														run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock38,
														expr: &seqExpr{
															pos: position{line: 537, col: 26, offset: 16719},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 537, col: 26, offset: 16719},
																	val:        "====",
																	ignoreCase: false,
																	want:       "\"====\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 537, col: 33, offset: 16726},
																	expr: &choiceExpr{
																		pos: position{line: 2124, col: 10, offset: 72709},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2124, col: 10, offset: 72709},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2124, col: 16, offset: 72715},
																				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock44,
																				expr: &litMatcher{
																					pos:        position{line: 2124, col: 16, offset: 72715},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 541, col: 26, offset: 16817},
														run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock48,
														expr: &seqExpr{
															pos: position{line: 541, col: 26, offset: 16817},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 541, col: 26, offset: 16817},
																	val:        "////",
																	ignoreCase: false,
																	want:       "\"////\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 541, col: 33, offset: 16824},
																	expr: &choiceExpr{
																		pos: position{line: 2124, col: 10, offset: 72709},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2124, col: 10, offset: 72709},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2124, col: 16, offset: 72715},
																				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock54,
																				expr: &litMatcher{
																					pos:        position{line: 2124, col: 16, offset: 72715},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 545, col: 24, offset: 16913},
														run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock58,
														expr: &seqExpr{
															pos: position{line: 545, col: 24, offset: 16913},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 545, col: 24, offset: 16913},
																	val:        "____",
																	ignoreCase: false,
																	want:       "\"____\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 545, col: 31, offset: 16920},
																	expr: &choiceExpr{
																		pos: position{line: 2124, col: 10, offset: 72709},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2124, col: 10, offset: 72709},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2124, col: 16, offset: 72715},
																				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock64,
																				expr: &litMatcher{
																					pos:        position{line: 2124, col: 16, offset: 72715},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 549, col: 26, offset: 17009},
														run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock68,
														expr: &seqExpr{
															pos: position{line: 549, col: 26, offset: 17009},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 549, col: 26, offset: 17009},
																	val:        "****",
																	ignoreCase: false,
																	want:       "\"****\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 549, col: 33, offset: 17016},
																	expr: &choiceExpr{
																		pos: position{line: 2124, col: 10, offset: 72709},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2124, col: 10, offset: 72709},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2124, col: 16, offset: 72715},
																				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock74,
																				expr: &litMatcher{
																					pos:        position{line: 2124, col: 16, offset: 72715},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 553, col: 30, offset: 17111},
														run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock78,
														expr: &seqExpr{
															pos: position{line: 553, col: 30, offset: 17111},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 553, col: 30, offset: 17111},
																	val:        "++++",
																	ignoreCase: false,
																	want:       "\"++++\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 553, col: 37, offset: 17118},
																	expr: &choiceExpr{
																		pos: position{line: 2124, col: 10, offset: 72709},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2124, col: 10, offset: 72709},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2124, col: 16, offset: 72715},
																				run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock84,
																				expr: &litMatcher{
																					pos:        position{line: 2124, col: 16, offset: 72715},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 49, col: 5, offset: 1269},
							run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock88,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 128, col: 1, offset: 3731},
			expr: &actionExpr{
				pos: position{line: 129, col: 5, offset: 3755},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 129, col: 5, offset: 3755},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 129, col: 5, offset: 3755},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 133, col: 5, offset: 3893},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 133, col: 16, offset: 3904},
								expr: &choiceExpr{
									pos: position{line: 135, col: 9, offset: 3971},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 135, col: 10, offset: 3972},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 135, col: 10, offset: 3972},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 135, col: 10, offset: 3972},
														label: "anchor",
														expr: &actionExpr{
															pos: position{line: 167, col: 4, offset: 4796},
															run: (*parser).callonBlockAttributes10,
															expr: &seqExpr{
																pos: position{line: 167, col: 4, offset: 4796},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 167, col: 4, offset: 4796},
																		val:        "[[",
																		ignoreCase: false,
																		want:       "\"[[\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 168, col: 5, offset: 4806},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 169, col: 9, offset: 4819},
																			run: (*parser).callonBlockAttributes14,
																			expr: &labeledExpr{
																				pos:   position{line: 169, col: 9, offset: 4819},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 169, col: 18, offset: 4828},
																					expr: &choiceExpr{
																						pos: position{line: 170, col: 13, offset: 4842},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 170, col: 14, offset: 4843},
																								run: (*parser).callonBlockAttributes18,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 170, col: 14, offset: 4843},
																									expr: &charClassMatcher{
																										pos:        position{line: 170, col: 14, offset: 4843},
																										val:        "[^=\\r\\n�{]]",
																										chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 692, col: 23, offset: 21691},
																								run: (*parser).callonBlockAttributes21,
																								expr: &seqExpr{
																									pos: position{line: 692, col: 23, offset: 21691},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 691, col: 32, offset: 21660},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 692, col: 51, offset: 21719},
																											label: "ref",
																											expr: &actionExpr{
																												pos: position{line: 692, col: 56, offset: 21724},
																												run: (*parser).callonBlockAttributes25,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 692, col: 56, offset: 21724},
																													expr: &charClassMatcher{
																														pos:        position{line: 692, col: 56, offset: 21724},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 691, col: 32, offset: 21660},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 398, col: 5, offset: 12261},
																								run: (*parser).callonBlockAttributes29,
																								expr: &seqExpr{
																									pos: position{line: 398, col: 5, offset: 12261},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											run: (*parser).callonBlockAttributes31,
																										},
																										&labeledExpr{
																											pos:   position{line: 401, col: 5, offset: 12325},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 401, col: 14, offset: 12334},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 415, col: 25, offset: 12896},
																														run: (*parser).callonBlockAttributes34,
																														expr: &seqExpr{
																															pos: position{line: 415, col: 25, offset: 12896},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 415, col: 25, offset: 12896},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 415, col: 37, offset: 12908},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 98, col: 18, offset: 2832},
																																		run: (*parser).callonBlockAttributes38,
																																		expr: &seqExpr{
																																			pos: position{line: 98, col: 18, offset: 2832},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 98, col: 18, offset: 2832},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 98, col: 28, offset: 2842},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 98, col: 29, offset: 2843},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 415, col: 56, offset: 12927},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 415, col: 62, offset: 12933},
																																		expr: &actionExpr{
																																			pos: position{line: 423, col: 17, offset: 13196},
																																			run: (*parser).callonBlockAttributes45,
																																			expr: &seqExpr{
																																				pos: position{line: 423, col: 17, offset: 13196},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 423, col: 17, offset: 13196},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 423, col: 21, offset: 13200},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									run: (*parser).callonBlockAttributes50,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 423, col: 28, offset: 13207},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 425, col: 9, offset: 13261},
																																									run: (*parser).callonBlockAttributes52,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 425, col: 9, offset: 13261},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 425, col: 9, offset: 13261},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 415, col: 78, offset: 12949},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 419, col: 25, offset: 13051},
																														run: (*parser).callonBlockAttributes56,
																														expr: &seqExpr{
																															pos: position{line: 419, col: 25, offset: 13051},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 419, col: 25, offset: 13051},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 419, col: 38, offset: 13064},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 98, col: 18, offset: 2832},
																																		run: (*parser).callonBlockAttributes60,
																																		expr: &seqExpr{
																																			pos: position{line: 98, col: 18, offset: 2832},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 98, col: 18, offset: 2832},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 98, col: 28, offset: 2842},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 98, col: 29, offset: 2843},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 419, col: 57, offset: 13083},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 419, col: 63, offset: 13089},
																																		expr: &actionExpr{
																																			pos: position{line: 423, col: 17, offset: 13196},
																																			run: (*parser).callonBlockAttributes67,
																																			expr: &seqExpr{
																																				pos: position{line: 423, col: 17, offset: 13196},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 423, col: 17, offset: 13196},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 423, col: 21, offset: 13200},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									run: (*parser).callonBlockAttributes72,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 423, col: 28, offset: 13207},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 425, col: 9, offset: 13261},
																																									run: (*parser).callonBlockAttributes74,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 425, col: 9, offset: 13261},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 425, col: 9, offset: 13261},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 419, col: 79, offset: 13105},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 408, col: 31, offset: 12551},
																														run: (*parser).callonBlockAttributes78,
																														expr: &seqExpr{
																															pos: position{line: 408, col: 31, offset: 12551},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 408, col: 31, offset: 12551},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 408, col: 35, offset: 12555},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 98, col: 18, offset: 2832},
																																		run: (*parser).callonBlockAttributes82,
																																		expr: &seqExpr{
																																			pos: position{line: 98, col: 18, offset: 2832},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 98, col: 18, offset: 2832},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 98, col: 28, offset: 2842},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 98, col: 29, offset: 2843},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 408, col: 54, offset: 12574},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 175, col: 16, offset: 5079},
																								run: (*parser).callonBlockAttributes88,
																								expr: &litMatcher{
																									pos:        position{line: 175, col: 16, offset: 5079},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 181, col: 5, offset: 5265},
																		val:        "]]",
																		ignoreCase: false,
																		want:       "\"]]\"",
																	},
																},
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 135, col: 35, offset: 3997},
														expr: &choiceExpr{
															pos: position{line: 2124, col: 10, offset: 72709},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2124, col: 10, offset: 72709},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2124, col: 16, offset: 72715},
																	run: (*parser).callonBlockAttributes94,
																	expr: &litMatcher{
																		pos:        position{line: 2124, col: 16, offset: 72715},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 139, col: 12, offset: 4114},
											run: (*parser).callonBlockAttributes96,
											expr: &seqExpr{
												pos: position{line: 139, col: 12, offset: 4114},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 139, col: 12, offset: 4114},
														label: "title",
														expr: &actionExpr{
															pos: position{line: 186, col: 19, offset: 5384},
															run: (*parser).callonBlockAttributes99,
															expr: &seqExpr{
																pos: position{line: 186, col: 19, offset: 5384},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 186, col: 19, offset: 5384},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 186, col: 23, offset: 5388},
																		label: "title",
																		expr: &actionExpr{
																			pos: position{line: 187, col: 5, offset: 5400},
																			run: (*parser).callonBlockAttributes103,
																			expr: &seqExpr{
																				pos: position{line: 187, col: 5, offset: 5400},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 187, col: 5, offset: 5400},
																						expr: &charClassMatcher{
																							pos:        position{line: 187, col: 6, offset: 5401},
																							val:        "[. ]",
																							chars:      []rune{'.', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 188, col: 5, offset: 5513},
																						label: "elements",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 188, col: 14, offset: 5522},
																							expr: &choiceExpr{
																								pos: position{line: 189, col: 9, offset: 5532},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 189, col: 10, offset: 5533},
																										run: (*parser).callonBlockAttributes110,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 189, col: 10, offset: 5533},
																											expr: &charClassMatcher{
																												pos:        position{line: 189, col: 10, offset: 5533},
																												val:        "[^\\r\\n�{]",
																												chars:      []rune{'\r', '\n', '�', '{'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 692, col: 23, offset: 21691},
																										run: (*parser).callonBlockAttributes113,
																										expr: &seqExpr{
																											pos: position{line: 692, col: 23, offset: 21691},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 691, col: 32, offset: 21660},
																													val:        "�",
																													ignoreCase: false,
																													want:       "\"�\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 692, col: 51, offset: 21719},
																													label: "ref",
																													expr: &actionExpr{
																														pos: position{line: 692, col: 56, offset: 21724},
																														run: (*parser).callonBlockAttributes117,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 692, col: 56, offset: 21724},
																															expr: &charClassMatcher{
																																pos:        position{line: 692, col: 56, offset: 21724},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 691, col: 32, offset: 21660},
																													val:        "�",
																													ignoreCase: false,
																													want:       "\"�\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 398, col: 5, offset: 12261},
																										run: (*parser).callonBlockAttributes121,
																										expr: &seqExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 398, col: 5, offset: 12261},
																													run: (*parser).callonBlockAttributes123,
																												},
																												&labeledExpr{
																													pos:   position{line: 401, col: 5, offset: 12325},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 401, col: 14, offset: 12334},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 415, col: 25, offset: 12896},
																																run: (*parser).callonBlockAttributes126,
																																expr: &seqExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 415, col: 25, offset: 12896},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 37, offset: 12908},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonBlockAttributes130,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 56, offset: 12927},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 415, col: 62, offset: 12933},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonBlockAttributes137,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonBlockAttributes142,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonBlockAttributes144,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 415, col: 78, offset: 12949},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 419, col: 25, offset: 13051},
																																run: (*parser).callonBlockAttributes148,
																																expr: &seqExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 419, col: 25, offset: 13051},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 38, offset: 13064},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonBlockAttributes152,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 57, offset: 13083},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 419, col: 63, offset: 13089},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonBlockAttributes159,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonBlockAttributes164,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonBlockAttributes166,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 419, col: 79, offset: 13105},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 408, col: 31, offset: 12551},
																																run: (*parser).callonBlockAttributes170,
																																expr: &seqExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 408, col: 31, offset: 12551},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 408, col: 35, offset: 12555},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonBlockAttributes174,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 408, col: 54, offset: 12574},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 194, col: 12, offset: 5692},
																										run: (*parser).callonBlockAttributes180,
																										expr: &litMatcher{
																											pos:        position{line: 194, col: 12, offset: 5692},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 139, col: 35, offset: 4137},
														expr: &choiceExpr{
															pos: position{line: 2124, col: 10, offset: 72709},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2124, col: 10, offset: 72709},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2124, col: 16, offset: 72715},
																	run: (*parser).callonBlockAttributes185,
																	expr: &litMatcher{
																		pos:        position{line: 2124, col: 16, offset: 72715},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 143, col: 12, offset: 4224},
											run: (*parser).callonBlockAttributes187,
											expr: &seqExpr{
												pos: position{line: 143, col: 12, offset: 4224},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 143, col: 12, offset: 4224},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 24, offset: 4236},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 143, col: 44, offset: 4256},
														expr: &choiceExpr{
															pos: position{line: 2124, col: 10, offset: 72709},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2124, col: 10, offset: 72709},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2124, col: 16, offset: 72715},
																	run: (*parser).callonBlockAttributes194,
																	expr: &litMatcher{
																		pos:        position{line: 2124, col: 16, offset: 72715},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 151, col: 1, offset: 4430},
			expr: &actionExpr{
				pos: position{line: 152, col: 5, offset: 4454},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 152, col: 5, offset: 4454},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 152, col: 5, offset: 4454},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 153, col: 5, offset: 4462},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 153, col: 16, offset: 4473},
								expr: &actionExpr{
									pos: position{line: 154, col: 9, offset: 4483},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 155, col: 13, offset: 4497},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 155, col: 13, offset: 4497},
												expr: &litMatcher{
													pos:        position{line: 155, col: 14, offset: 4498},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 156, col: 13, offset: 4530},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 156, col: 24, offset: 4541},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 156, col: 24, offset: 4541},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 156, col: 46, offset: 4563},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 161, col: 5, offset: 4646},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 205, col: 1, offset: 6092},
			expr: &actionExpr{
				pos: position{line: 206, col: 5, offset: 6118},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 206, col: 5, offset: 6118},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 206, col: 5, offset: 6118},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 206, col: 9, offset: 6122},
							expr: &litMatcher{
								pos:        position{line: 206, col: 10, offset: 6123},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 208, col: 5, offset: 6293},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 208, col: 31, offset: 6319},
								expr: &ruleRefExpr{
									pos:  position{line: 208, col: 32, offset: 6320},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 209, col: 5, offset: 6352},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 209, col: 21, offset: 6368},
								expr: &choiceExpr{
									pos: position{line: 209, col: 22, offset: 6369},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 209, col: 22, offset: 6369},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 209, col: 44, offset: 6391},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 5, offset: 6412},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 223, col: 1, offset: 6940},
			expr: &actionExpr{
				pos: position{line: 224, col: 5, offset: 6974},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 224, col: 5, offset: 6974},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 224, col: 5, offset: 6974},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 224, col: 10, offset: 6979},
								expr: &ruleRefExpr{
									pos:  position{line: 225, col: 9, offset: 6989},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 7019},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 227, col: 12, offset: 7026},
								expr: &choiceExpr{
									pos: position{line: 228, col: 9, offset: 7037},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 228, col: 9, offset: 7037},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 229, col: 11, offset: 7069},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 230, col: 11, offset: 7104},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 231, col: 8, offset: 7137},
							expr: &seqExpr{
								pos: position{line: 231, col: 9, offset: 7138},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 231, col: 9, offset: 7138},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 231, col: 13, offset: 7142},
										expr: &choiceExpr{
											pos: position{line: 2124, col: 10, offset: 72709},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2124, col: 10, offset: 72709},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2124, col: 16, offset: 72715},
													run: (*parser).callonFirstPositionalAttributes18,
													expr: &litMatcher{
														pos:        position{line: 2124, col: 16, offset: 72715},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 232, col: 5, offset: 7156},
							run: (*parser).callonFirstPositionalAttributes20,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 248, col: 1, offset: 7572},
			expr: &actionExpr{
				pos: position{line: 248, col: 25, offset: 7596},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 25, offset: 7596},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 25, offset: 7596},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 248, col: 29, offset: 7600},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 33, offset: 7604},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 252, col: 1, offset: 7678},
			expr: &actionExpr{
				pos: position{line: 252, col: 23, offset: 7700},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 252, col: 23, offset: 7700},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 252, col: 30, offset: 7707},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 257, col: 1, offset: 7833},
			expr: &actionExpr{
				pos: position{line: 257, col: 30, offset: 7862},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 257, col: 30, offset: 7862},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 30, offset: 7862},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 34, offset: 7866},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 40, offset: 7872},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 262, col: 1, offset: 7994},
			expr: &actionExpr{
				pos: position{line: 262, col: 29, offset: 8022},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 262, col: 29, offset: 8022},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 29, offset: 8022},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 33, offset: 8026},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 41, offset: 8034},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 267, col: 1, offset: 8147},
			expr: &choiceExpr{
				pos: position{line: 268, col: 5, offset: 8179},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 8179},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 7, offset: 8213},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 270, col: 7, offset: 8247},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 270, col: 7, offset: 8247},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 270, col: 7, offset: 8247},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 270, col: 16, offset: 8256},
										expr: &choiceExpr{
											pos: position{line: 273, col: 5, offset: 8426},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 273, col: 6, offset: 8427},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 273, col: 6, offset: 8427},
														expr: &charClassMatcher{
															pos:        position{line: 273, col: 6, offset: 8427},
															val:        "[^,=.%# \\r\\n�{]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&actionExpr{
													pos: position{line: 692, col: 23, offset: 21691},
													run: (*parser).callonShortHandAttributeValue12,
													expr: &seqExpr{
														pos: position{line: 692, col: 23, offset: 21691},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 691, col: 32, offset: 21660},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 692, col: 51, offset: 21719},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 692, col: 56, offset: 21724},
																	run: (*parser).callonShortHandAttributeValue16,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 692, col: 56, offset: 21724},
																		expr: &charClassMatcher{
																			pos:        position{line: 692, col: 56, offset: 21724},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 691, col: 32, offset: 21660},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 277, col: 5, offset: 8546},
													name: "Quote",
												},
												&actionExpr{
													pos: position{line: 398, col: 5, offset: 12261},
													run: (*parser).callonShortHandAttributeValue21,
													expr: &seqExpr{
														pos: position{line: 398, col: 5, offset: 12261},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 398, col: 5, offset: 12261},
																run: (*parser).callonShortHandAttributeValue23,
															},
															&labeledExpr{
																pos:   position{line: 401, col: 5, offset: 12325},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 401, col: 14, offset: 12334},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 415, col: 25, offset: 12896},
																			run: (*parser).callonShortHandAttributeValue26,
																			expr: &seqExpr{
																				pos: position{line: 415, col: 25, offset: 12896},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 415, col: 25, offset: 12896},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 415, col: 37, offset: 12908},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 98, col: 18, offset: 2832},
																							run: (*parser).callonShortHandAttributeValue30,
																							expr: &seqExpr{
																								pos: position{line: 98, col: 18, offset: 2832},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 98, col: 18, offset: 2832},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 98, col: 28, offset: 2842},
																										expr: &charClassMatcher{
																											pos:        position{line: 98, col: 29, offset: 2843},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 415, col: 56, offset: 12927},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 415, col: 62, offset: 12933},
																							expr: &actionExpr{
																								pos: position{line: 423, col: 17, offset: 13196},
																								run: (*parser).callonShortHandAttributeValue37,
																								expr: &seqExpr{
																									pos: position{line: 423, col: 17, offset: 13196},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 423, col: 17, offset: 13196},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 423, col: 21, offset: 13200},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 423, col: 28, offset: 13207},
																														run: (*parser).callonShortHandAttributeValue42,
																														expr: &charClassMatcher{
																															pos:        position{line: 423, col: 28, offset: 13207},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 425, col: 9, offset: 13261},
																														run: (*parser).callonShortHandAttributeValue44,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 425, col: 9, offset: 13261},
																															expr: &charClassMatcher{
																																pos:        position{line: 425, col: 9, offset: 13261},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 415, col: 78, offset: 12949},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 419, col: 25, offset: 13051},
																			run: (*parser).callonShortHandAttributeValue48,
																			expr: &seqExpr{
																				pos: position{line: 419, col: 25, offset: 13051},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 419, col: 25, offset: 13051},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 419, col: 38, offset: 13064},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 98, col: 18, offset: 2832},
																							run: (*parser).callonShortHandAttributeValue52,
																							expr: &seqExpr{
																								pos: position{line: 98, col: 18, offset: 2832},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 98, col: 18, offset: 2832},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 98, col: 28, offset: 2842},
																										expr: &charClassMatcher{
																											pos:        position{line: 98, col: 29, offset: 2843},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 419, col: 57, offset: 13083},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 419, col: 63, offset: 13089},
																							expr: &actionExpr{
																								pos: position{line: 423, col: 17, offset: 13196},
																								run: (*parser).callonShortHandAttributeValue59,
																								expr: &seqExpr{
																									pos: position{line: 423, col: 17, offset: 13196},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 423, col: 17, offset: 13196},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 423, col: 21, offset: 13200},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 423, col: 28, offset: 13207},
																														run: (*parser).callonShortHandAttributeValue64,
																														expr: &charClassMatcher{
																															pos:        position{line: 423, col: 28, offset: 13207},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 425, col: 9, offset: 13261},
																														run: (*parser).callonShortHandAttributeValue66,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 425, col: 9, offset: 13261},
																															expr: &charClassMatcher{
																																pos:        position{line: 425, col: 9, offset: 13261},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 419, col: 79, offset: 13105},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 408, col: 31, offset: 12551},
																			run: (*parser).callonShortHandAttributeValue70,
																			expr: &seqExpr{
																				pos: position{line: 408, col: 31, offset: 12551},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 408, col: 31, offset: 12551},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 408, col: 35, offset: 12555},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 98, col: 18, offset: 2832},
																							run: (*parser).callonShortHandAttributeValue74,
																							expr: &seqExpr{
																								pos: position{line: 98, col: 18, offset: 2832},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 98, col: 18, offset: 2832},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 98, col: 28, offset: 2842},
																										expr: &charClassMatcher{
																											pos:        position{line: 98, col: 29, offset: 2843},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 408, col: 54, offset: 12574},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 279, col: 6, offset: 8587},
													run: (*parser).callonShortHandAttributeValue80,
													expr: &litMatcher{
														pos:        position{line: 279, col: 6, offset: 8587},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 281, col: 10, offset: 8657},
									expr: &charClassMatcher{
										pos:        position{line: 281, col: 11, offset: 8658},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 285, col: 1, offset: 8734},
			expr: &choiceExpr{
				pos: position{line: 285, col: 24, offset: 8757},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 8763},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 286, col: 5, offset: 8763},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 286, col: 5, offset: 8763},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 286, col: 12, offset: 8770},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 286, col: 29, offset: 8787},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 286, col: 29, offset: 8787},
											expr: &seqExpr{
												pos: position{line: 286, col: 30, offset: 8788},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 286, col: 30, offset: 8788},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 286, col: 34, offset: 8792},
														expr: &choiceExpr{
															pos: position{line: 2124, col: 10, offset: 72709},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2124, col: 10, offset: 72709},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2124, col: 16, offset: 72715},
																	run: (*parser).callonPositionalAttribute13,
																	expr: &litMatcher{
																		pos:        position{line: 2124, col: 16, offset: 72715},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 286, col: 45, offset: 8803},
											expr: &litMatcher{
												pos:        position{line: 286, col: 46, offset: 8804},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 291, col: 6, offset: 9041},
						run: (*parser).callonPositionalAttribute17,
						expr: &seqExpr{
							pos: position{line: 291, col: 6, offset: 9041},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 291, col: 6, offset: 9041},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 291, col: 13, offset: 9048},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 291, col: 13, offset: 9048},
												expr: &choiceExpr{
													pos: position{line: 2124, col: 10, offset: 72709},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2124, col: 10, offset: 72709},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2124, col: 16, offset: 72715},
															run: (*parser).callonPositionalAttribute24,
															expr: &litMatcher{
																pos:        position{line: 2124, col: 16, offset: 72715},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 291, col: 21, offset: 9056},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 291, col: 22, offset: 9057},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 291, col: 22, offset: 9057},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 291, col: 26, offset: 9061},
																expr: &choiceExpr{
																	pos: position{line: 2124, col: 10, offset: 72709},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2124, col: 10, offset: 72709},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2124, col: 16, offset: 72715},
																			run: (*parser).callonPositionalAttribute32,
																			expr: &litMatcher{
																				pos:        position{line: 2124, col: 16, offset: 72715},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 291, col: 36, offset: 9071},
														expr: &litMatcher{
															pos:        position{line: 291, col: 37, offset: 9072},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 292, col: 5, offset: 9082},
									run: (*parser).callonPositionalAttribute36,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 302, col: 1, offset: 9397},
			expr: &actionExpr{
				pos: position{line: 302, col: 19, offset: 9415},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 302, col: 19, offset: 9415},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 302, col: 19, offset: 9415},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 307, col: 22, offset: 9723},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 307, col: 22, offset: 9723},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 307, col: 22, offset: 9723},
											expr: &choiceExpr{
												pos: position{line: 2124, col: 10, offset: 72709},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2124, col: 10, offset: 72709},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2124, col: 16, offset: 72715},
														run: (*parser).callonNamedAttribute9,
														expr: &litMatcher{
															pos:        position{line: 2124, col: 16, offset: 72715},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 307, col: 29, offset: 9730},
											expr: &charClassMatcher{
												pos:        position{line: 307, col: 29, offset: 9730},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 307, col: 42, offset: 9743},
											expr: &choiceExpr{
												pos: position{line: 2124, col: 10, offset: 72709},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2124, col: 10, offset: 72709},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2124, col: 16, offset: 72715},
														run: (*parser).callonNamedAttribute16,
														expr: &litMatcher{
															pos:        position{line: 2124, col: 16, offset: 72715},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 43, offset: 9439},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 47, offset: 9443},
							expr: &choiceExpr{
								pos: position{line: 2124, col: 10, offset: 72709},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonNamedAttribute22,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 54, offset: 9450},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 61, offset: 9457},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 302, col: 77, offset: 9473},
							expr: &seqExpr{
								pos: position{line: 302, col: 78, offset: 9474},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 302, col: 78, offset: 9474},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 302, col: 82, offset: 9478},
										expr: &choiceExpr{
											pos: position{line: 2124, col: 10, offset: 72709},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2124, col: 10, offset: 72709},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2124, col: 16, offset: 72715},
													run: (*parser).callonNamedAttribute32,
													expr: &litMatcher{
														pos:        position{line: 2124, col: 16, offset: 72715},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 311, col: 1, offset: 9813},
			expr: &actionExpr{
				pos: position{line: 312, col: 5, offset: 9836},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 312, col: 5, offset: 9836},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 312, col: 5, offset: 9836},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 313, col: 9, offset: 9852},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 313, col: 9, offset: 9852},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 314, col: 11, offset: 9890},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 315, col: 11, offset: 9928},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 317, col: 5, offset: 9962},
							expr: &notExpr{
								pos: position{line: 317, col: 7, offset: 9964},
								expr: &seqExpr{
									pos: position{line: 317, col: 9, offset: 9966},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 317, col: 9, offset: 9966},
											expr: &choiceExpr{
												pos: position{line: 2124, col: 10, offset: 72709},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2124, col: 10, offset: 72709},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2124, col: 16, offset: 72715},
														run: (*parser).callonAttributeValue14,
														expr: &litMatcher{
															pos:        position{line: 2124, col: 16, offset: 72715},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 317, col: 16, offset: 9973},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 321, col: 1, offset: 10014},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 10049},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 10049},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 10049},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 10058},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 323, col: 14, offset: 10067},
								expr: &choiceExpr{
									pos: position{line: 325, col: 9, offset: 10157},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 325, col: 9, offset: 10157},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 326, col: 12, offset: 10174},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 326, col: 12, offset: 10174},
												expr: &charClassMatcher{
													pos:        position{line: 326, col: 12, offset: 10174},
													val:        "[^\\r\\n�\\\\{&<>\\]",
													chars:      []rune{'\r', '\n', '�', '\\', '{', '&', '<', '>', '\''},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 398, col: 5, offset: 12261},
											run: (*parser).callonSingleQuotedAttributeValue11,
											expr: &seqExpr{
												pos: position{line: 398, col: 5, offset: 12261},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 398, col: 5, offset: 12261},
														run: (*parser).callonSingleQuotedAttributeValue13,
													},
													&labeledExpr{
														pos:   position{line: 401, col: 5, offset: 12325},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 401, col: 14, offset: 12334},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 415, col: 25, offset: 12896},
																	run: (*parser).callonSingleQuotedAttributeValue16,
																	expr: &seqExpr{
																		pos: position{line: 415, col: 25, offset: 12896},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 415, col: 25, offset: 12896},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 415, col: 37, offset: 12908},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonSingleQuotedAttributeValue20,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 415, col: 56, offset: 12927},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 415, col: 62, offset: 12933},
																					expr: &actionExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						run: (*parser).callonSingleQuotedAttributeValue27,
																						expr: &seqExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 423, col: 17, offset: 13196},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 423, col: 21, offset: 13200},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 423, col: 28, offset: 13207},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												run: (*parser).callonSingleQuotedAttributeValue32,
																												expr: &charClassMatcher{
																													pos:        position{line: 423, col: 28, offset: 13207},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												run: (*parser).callonSingleQuotedAttributeValue34,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													expr: &charClassMatcher{
																														pos:        position{line: 425, col: 9, offset: 13261},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 415, col: 78, offset: 12949},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 419, col: 25, offset: 13051},
																	run: (*parser).callonSingleQuotedAttributeValue38,
																	expr: &seqExpr{
																		pos: position{line: 419, col: 25, offset: 13051},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 419, col: 25, offset: 13051},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 419, col: 38, offset: 13064},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonSingleQuotedAttributeValue42,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 419, col: 57, offset: 13083},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 419, col: 63, offset: 13089},
																					expr: &actionExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						run: (*parser).callonSingleQuotedAttributeValue49,
																						expr: &seqExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 423, col: 17, offset: 13196},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 423, col: 21, offset: 13200},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 423, col: 28, offset: 13207},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												run: (*parser).callonSingleQuotedAttributeValue54,
																												expr: &charClassMatcher{
																													pos:        position{line: 423, col: 28, offset: 13207},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												run: (*parser).callonSingleQuotedAttributeValue56,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													expr: &charClassMatcher{
																														pos:        position{line: 425, col: 9, offset: 13261},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 419, col: 79, offset: 13105},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 408, col: 31, offset: 12551},
																	run: (*parser).callonSingleQuotedAttributeValue60,
																	expr: &seqExpr{
																		pos: position{line: 408, col: 31, offset: 12551},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 408, col: 31, offset: 12551},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 408, col: 35, offset: 12555},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonSingleQuotedAttributeValue64,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 408, col: 54, offset: 12574},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1954, col: 5, offset: 67519},
											run: (*parser).callonSingleQuotedAttributeValue70,
											expr: &seqExpr{
												pos: position{line: 1954, col: 5, offset: 67519},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1954, col: 5, offset: 67519},
														run: (*parser).callonSingleQuotedAttributeValue72,
													},
													&labeledExpr{
														pos:   position{line: 1957, col: 5, offset: 67590},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 1959, col: 9, offset: 67688},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1959, col: 9, offset: 67688},
																	run: (*parser).callonSingleQuotedAttributeValue75,
																	expr: &choiceExpr{
																		pos: position{line: 487, col: 27, offset: 15054},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 487, col: 27, offset: 15054},
																				run: (*parser).callonSingleQuotedAttributeValue77,
																				expr: &seqExpr{
																					pos: position{line: 487, col: 27, offset: 15054},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 487, col: 27, offset: 15054},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 32, offset: 15059},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonSingleQuotedAttributeValue81,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 487, col: 40, offset: 15067},
																							expr: &choiceExpr{
																								pos: position{line: 2124, col: 10, offset: 72709},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2124, col: 10, offset: 72709},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2124, col: 16, offset: 72715},
																										run: (*parser).callonSingleQuotedAttributeValue87,
																										expr: &litMatcher{
																											pos:        position{line: 2124, col: 16, offset: 72715},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 47, offset: 15074},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 51, offset: 15078},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 497, col: 24, offset: 15491},
																								expr: &choiceExpr{
																									pos: position{line: 498, col: 5, offset: 15497},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 498, col: 6, offset: 15498},
																											run: (*parser).callonSingleQuotedAttributeValue93,
																											expr: &seqExpr{
																												pos: position{line: 498, col: 6, offset: 15498},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 498, col: 6, offset: 15498},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 498, col: 14, offset: 15506},
																														expr: &charClassMatcher{
																															pos:        position{line: 498, col: 14, offset: 15506},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											run: (*parser).callonSingleQuotedAttributeValue98,
																											expr: &seqExpr{
																												pos: position{line: 398, col: 5, offset: 12261},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 398, col: 5, offset: 12261},
																														run: (*parser).callonSingleQuotedAttributeValue100,
																													},
																													&labeledExpr{
																														pos:   position{line: 401, col: 5, offset: 12325},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 401, col: 14, offset: 12334},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	run: (*parser).callonSingleQuotedAttributeValue103,
																																	expr: &seqExpr{
																																		pos: position{line: 415, col: 25, offset: 12896},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 415, col: 25, offset: 12896},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 37, offset: 12908},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonSingleQuotedAttributeValue107,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 56, offset: 12927},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 415, col: 62, offset: 12933},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonSingleQuotedAttributeValue114,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonSingleQuotedAttributeValue119,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonSingleQuotedAttributeValue121,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 415, col: 78, offset: 12949},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	run: (*parser).callonSingleQuotedAttributeValue125,
																																	expr: &seqExpr{
																																		pos: position{line: 419, col: 25, offset: 13051},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 419, col: 25, offset: 13051},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 38, offset: 13064},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonSingleQuotedAttributeValue129,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 57, offset: 13083},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 419, col: 63, offset: 13089},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonSingleQuotedAttributeValue136,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonSingleQuotedAttributeValue141,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonSingleQuotedAttributeValue143,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 419, col: 79, offset: 13105},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	run: (*parser).callonSingleQuotedAttributeValue147,
																																	expr: &seqExpr{
																																		pos: position{line: 408, col: 31, offset: 12551},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 408, col: 31, offset: 12551},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 408, col: 35, offset: 12555},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonSingleQuotedAttributeValue151,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 408, col: 54, offset: 12574},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 502, col: 8, offset: 15730},
																											run: (*parser).callonSingleQuotedAttributeValue157,
																											expr: &litMatcher{
																												pos:        position{line: 502, col: 8, offset: 15730},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 79, offset: 15106},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 489, col: 9, offset: 15179},
																				run: (*parser).callonSingleQuotedAttributeValue160,
																				expr: &seqExpr{
																					pos: position{line: 489, col: 9, offset: 15179},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 489, col: 9, offset: 15179},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 489, col: 14, offset: 15184},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonSingleQuotedAttributeValue164,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 489, col: 22, offset: 15192},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1962, col: 11, offset: 67792},
																	run: (*parser).callonSingleQuotedAttributeValue168,
																	expr: &charClassMatcher{
																		pos:        position{line: 1962, col: 12, offset: 67793},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											run: (*parser).callonSingleQuotedAttributeValue170,
											expr: &seqExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 692, col: 51, offset: 21719},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															run: (*parser).callonSingleQuotedAttributeValue174,
															expr: &oneOrMoreExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																expr: &charClassMatcher{
																	pos:        position{line: 692, col: 56, offset: 21724},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 332, col: 12, offset: 10412},
											run: (*parser).callonSingleQuotedAttributeValue178,
											expr: &litMatcher{
												pos:        position{line: 332, col: 12, offset: 10412},
												val:        "\\'",
												ignoreCase: false,
												want:       "\"\\\\'\"",
											},
										},
										&litMatcher{
											pos:        position{line: 335, col: 11, offset: 10504},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&actionExpr{
											pos: position{line: 335, col: 17, offset: 10510},
											run: (*parser).callonSingleQuotedAttributeValue181,
											expr: &litMatcher{
												pos:        position{line: 335, col: 17, offset: 10510},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 339, col: 5, offset: 10599},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 343, col: 1, offset: 10655},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 10690},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 10690},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 5, offset: 10690},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 345, col: 5, offset: 10700},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 345, col: 14, offset: 10709},
								expr: &choiceExpr{
									pos: position{line: 346, col: 9, offset: 10719},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 346, col: 9, offset: 10719},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 347, col: 12, offset: 10736},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 347, col: 12, offset: 10736},
												expr: &charClassMatcher{
													pos:        position{line: 347, col: 12, offset: 10736},
													val:        "[^\\r\\n�&<>\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '&', '<', '>', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 398, col: 5, offset: 12261},
											run: (*parser).callonDoubleQuotedAttributeValue11,
											expr: &seqExpr{
												pos: position{line: 398, col: 5, offset: 12261},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 398, col: 5, offset: 12261},
														run: (*parser).callonDoubleQuotedAttributeValue13,
													},
													&labeledExpr{
														pos:   position{line: 401, col: 5, offset: 12325},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 401, col: 14, offset: 12334},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 415, col: 25, offset: 12896},
																	run: (*parser).callonDoubleQuotedAttributeValue16,
																	expr: &seqExpr{
																		pos: position{line: 415, col: 25, offset: 12896},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 415, col: 25, offset: 12896},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 415, col: 37, offset: 12908},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonDoubleQuotedAttributeValue20,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 415, col: 56, offset: 12927},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 415, col: 62, offset: 12933},
																					expr: &actionExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						run: (*parser).callonDoubleQuotedAttributeValue27,
																						expr: &seqExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 423, col: 17, offset: 13196},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 423, col: 21, offset: 13200},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 423, col: 28, offset: 13207},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												run: (*parser).callonDoubleQuotedAttributeValue32,
																												expr: &charClassMatcher{
																													pos:        position{line: 423, col: 28, offset: 13207},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												run: (*parser).callonDoubleQuotedAttributeValue34,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													expr: &charClassMatcher{
																														pos:        position{line: 425, col: 9, offset: 13261},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 415, col: 78, offset: 12949},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 419, col: 25, offset: 13051},
																	run: (*parser).callonDoubleQuotedAttributeValue38,
																	expr: &seqExpr{
																		pos: position{line: 419, col: 25, offset: 13051},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 419, col: 25, offset: 13051},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 419, col: 38, offset: 13064},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonDoubleQuotedAttributeValue42,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 419, col: 57, offset: 13083},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 419, col: 63, offset: 13089},
																					expr: &actionExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						run: (*parser).callonDoubleQuotedAttributeValue49,
																						expr: &seqExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 423, col: 17, offset: 13196},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 423, col: 21, offset: 13200},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 423, col: 28, offset: 13207},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												run: (*parser).callonDoubleQuotedAttributeValue54,
																												expr: &charClassMatcher{
																													pos:        position{line: 423, col: 28, offset: 13207},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												run: (*parser).callonDoubleQuotedAttributeValue56,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													expr: &charClassMatcher{
																														pos:        position{line: 425, col: 9, offset: 13261},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 419, col: 79, offset: 13105},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 408, col: 31, offset: 12551},
																	run: (*parser).callonDoubleQuotedAttributeValue60,
																	expr: &seqExpr{
																		pos: position{line: 408, col: 31, offset: 12551},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 408, col: 31, offset: 12551},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 408, col: 35, offset: 12555},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonDoubleQuotedAttributeValue64,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 408, col: 54, offset: 12574},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1954, col: 5, offset: 67519},
											run: (*parser).callonDoubleQuotedAttributeValue70,
											expr: &seqExpr{
												pos: position{line: 1954, col: 5, offset: 67519},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1954, col: 5, offset: 67519},
														run: (*parser).callonDoubleQuotedAttributeValue72,
													},
													&labeledExpr{
														pos:   position{line: 1957, col: 5, offset: 67590},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 1959, col: 9, offset: 67688},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1959, col: 9, offset: 67688},
																	run: (*parser).callonDoubleQuotedAttributeValue75,
																	expr: &choiceExpr{
																		pos: position{line: 487, col: 27, offset: 15054},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 487, col: 27, offset: 15054},
																				run: (*parser).callonDoubleQuotedAttributeValue77,
																				expr: &seqExpr{
																					pos: position{line: 487, col: 27, offset: 15054},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 487, col: 27, offset: 15054},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 32, offset: 15059},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonDoubleQuotedAttributeValue81,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 487, col: 40, offset: 15067},
																							expr: &choiceExpr{
																								pos: position{line: 2124, col: 10, offset: 72709},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2124, col: 10, offset: 72709},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2124, col: 16, offset: 72715},
																										run: (*parser).callonDoubleQuotedAttributeValue87,
																										expr: &litMatcher{
																											pos:        position{line: 2124, col: 16, offset: 72715},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 47, offset: 15074},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 51, offset: 15078},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 497, col: 24, offset: 15491},
																								expr: &choiceExpr{
																									pos: position{line: 498, col: 5, offset: 15497},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 498, col: 6, offset: 15498},
																											run: (*parser).callonDoubleQuotedAttributeValue93,
																											expr: &seqExpr{
																												pos: position{line: 498, col: 6, offset: 15498},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 498, col: 6, offset: 15498},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 498, col: 14, offset: 15506},
																														expr: &charClassMatcher{
																															pos:        position{line: 498, col: 14, offset: 15506},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											run: (*parser).callonDoubleQuotedAttributeValue98,
																											expr: &seqExpr{
																												pos: position{line: 398, col: 5, offset: 12261},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 398, col: 5, offset: 12261},
																														run: (*parser).callonDoubleQuotedAttributeValue100,
																													},
																													&labeledExpr{
																														pos:   position{line: 401, col: 5, offset: 12325},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 401, col: 14, offset: 12334},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	run: (*parser).callonDoubleQuotedAttributeValue103,
																																	expr: &seqExpr{
																																		pos: position{line: 415, col: 25, offset: 12896},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 415, col: 25, offset: 12896},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 37, offset: 12908},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonDoubleQuotedAttributeValue107,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 56, offset: 12927},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 415, col: 62, offset: 12933},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonDoubleQuotedAttributeValue114,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonDoubleQuotedAttributeValue119,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonDoubleQuotedAttributeValue121,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 415, col: 78, offset: 12949},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	run: (*parser).callonDoubleQuotedAttributeValue125,
																																	expr: &seqExpr{
																																		pos: position{line: 419, col: 25, offset: 13051},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 419, col: 25, offset: 13051},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 38, offset: 13064},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonDoubleQuotedAttributeValue129,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 57, offset: 13083},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 419, col: 63, offset: 13089},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonDoubleQuotedAttributeValue136,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonDoubleQuotedAttributeValue141,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonDoubleQuotedAttributeValue143,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 419, col: 79, offset: 13105},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	run: (*parser).callonDoubleQuotedAttributeValue147,
																																	expr: &seqExpr{
																																		pos: position{line: 408, col: 31, offset: 12551},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 408, col: 31, offset: 12551},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 408, col: 35, offset: 12555},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonDoubleQuotedAttributeValue151,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 408, col: 54, offset: 12574},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 502, col: 8, offset: 15730},
																											run: (*parser).callonDoubleQuotedAttributeValue157,
																											expr: &litMatcher{
																												pos:        position{line: 502, col: 8, offset: 15730},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 79, offset: 15106},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 489, col: 9, offset: 15179},
																				run: (*parser).callonDoubleQuotedAttributeValue160,
																				expr: &seqExpr{
																					pos: position{line: 489, col: 9, offset: 15179},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 489, col: 9, offset: 15179},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 489, col: 14, offset: 15184},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonDoubleQuotedAttributeValue164,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 489, col: 22, offset: 15192},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1962, col: 11, offset: 67792},
																	run: (*parser).callonDoubleQuotedAttributeValue168,
																	expr: &charClassMatcher{
																		pos:        position{line: 1962, col: 12, offset: 67793},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											run: (*parser).callonDoubleQuotedAttributeValue170,
											expr: &seqExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 692, col: 51, offset: 21719},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															run: (*parser).callonDoubleQuotedAttributeValue174,
															expr: &oneOrMoreExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																expr: &charClassMatcher{
																	pos:        position{line: 692, col: 56, offset: 21724},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 353, col: 12, offset: 10974},
											run: (*parser).callonDoubleQuotedAttributeValue178,
											expr: &litMatcher{
												pos:        position{line: 353, col: 12, offset: 10974},
												val:        "\\\"",
												ignoreCase: false,
												want:       "\"\\\\\\\"\"",
											},
										},
										&litMatcher{
											pos:        position{line: 356, col: 11, offset: 11066},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&actionExpr{
											pos: position{line: 356, col: 17, offset: 11072},
											run: (*parser).callonDoubleQuotedAttributeValue181,
											expr: &litMatcher{
												pos:        position{line: 356, col: 17, offset: 11072},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 360, col: 5, offset: 11161},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 365, col: 1, offset: 11296},
			expr: &actionExpr{
				pos: position{line: 366, col: 5, offset: 11327},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 366, col: 5, offset: 11327},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 366, col: 5, offset: 11327},
							expr: &choiceExpr{
								pos: position{line: 2124, col: 10, offset: 72709},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonUnquotedAttributeValue6,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 5, offset: 11338},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 367, col: 14, offset: 11347},
								expr: &actionExpr{
									pos: position{line: 368, col: 9, offset: 11357},
									run: (*parser).callonUnquotedAttributeValue10,
									expr: &seqExpr{
										pos: position{line: 368, col: 9, offset: 11357},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 368, col: 9, offset: 11357},
												expr: &litMatcher{
													pos:        position{line: 368, col: 10, offset: 11358},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 369, col: 9, offset: 11386},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 370, col: 13, offset: 11408},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 370, col: 13, offset: 11408},
															name: "Quote",
														},
														&actionExpr{
															pos: position{line: 371, col: 16, offset: 11429},
															run: (*parser).callonUnquotedAttributeValue17,
															expr: &oneOrMoreExpr{
																pos: position{line: 371, col: 16, offset: 11429},
																expr: &charClassMatcher{
																	pos:        position{line: 371, col: 16, offset: 11429},
																	val:        "[^,=\\r\\n�&<>{] ]",
																	chars:      []rune{',', '=', '\r', '\n', '�', '&', '<', '>', '{', ']', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2124, col: 10, offset: 72709},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2124, col: 16, offset: 72715},
															run: (*parser).callonUnquotedAttributeValue21,
															expr: &litMatcher{
																pos:        position{line: 2124, col: 16, offset: 72715},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
														&actionExpr{
															pos: position{line: 398, col: 5, offset: 12261},
															run: (*parser).callonUnquotedAttributeValue23,
															expr: &seqExpr{
																pos: position{line: 398, col: 5, offset: 12261},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 398, col: 5, offset: 12261},
																		run: (*parser).callonUnquotedAttributeValue25,
																	},
																	&labeledExpr{
																		pos:   position{line: 401, col: 5, offset: 12325},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 401, col: 14, offset: 12334},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 415, col: 25, offset: 12896},
																					run: (*parser).callonUnquotedAttributeValue28,
																					expr: &seqExpr{
																						pos: position{line: 415, col: 25, offset: 12896},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 415, col: 25, offset: 12896},
																								val:        "{counter:",
																								ignoreCase: false,
																								want:       "\"{counter:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 415, col: 37, offset: 12908},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 98, col: 18, offset: 2832},
																									run: (*parser).callonUnquotedAttributeValue32,
																									expr: &seqExpr{
																										pos: position{line: 98, col: 18, offset: 2832},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 98, col: 18, offset: 2832},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 98, col: 28, offset: 2842},
																												expr: &charClassMatcher{
																													pos:        position{line: 98, col: 29, offset: 2843},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 415, col: 56, offset: 12927},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 415, col: 62, offset: 12933},
																									expr: &actionExpr{
																										pos: position{line: 423, col: 17, offset: 13196},
																										run: (*parser).callonUnquotedAttributeValue39,
																										expr: &seqExpr{
																											pos: position{line: 423, col: 17, offset: 13196},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 423, col: 17, offset: 13196},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 423, col: 21, offset: 13200},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 423, col: 28, offset: 13207},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 423, col: 28, offset: 13207},
																																run: (*parser).callonUnquotedAttributeValue44,
																																expr: &charClassMatcher{
																																	pos:        position{line: 423, col: 28, offset: 13207},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 425, col: 9, offset: 13261},
																																run: (*parser).callonUnquotedAttributeValue46,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 425, col: 9, offset: 13261},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 425, col: 9, offset: 13261},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 415, col: 78, offset: 12949},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 419, col: 25, offset: 13051},
																					run: (*parser).callonUnquotedAttributeValue50,
																					expr: &seqExpr{
																						pos: position{line: 419, col: 25, offset: 13051},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 419, col: 25, offset: 13051},
																								val:        "{counter2:",
																								ignoreCase: false,
																								want:       "\"{counter2:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 419, col: 38, offset: 13064},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 98, col: 18, offset: 2832},
																									run: (*parser).callonUnquotedAttributeValue54,
																									expr: &seqExpr{
																										pos: position{line: 98, col: 18, offset: 2832},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 98, col: 18, offset: 2832},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 98, col: 28, offset: 2842},
																												expr: &charClassMatcher{
																													pos:        position{line: 98, col: 29, offset: 2843},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 419, col: 57, offset: 13083},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 419, col: 63, offset: 13089},
																									expr: &actionExpr{
																										pos: position{line: 423, col: 17, offset: 13196},
																										run: (*parser).callonUnquotedAttributeValue61,
																										expr: &seqExpr{
																											pos: position{line: 423, col: 17, offset: 13196},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 423, col: 17, offset: 13196},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 423, col: 21, offset: 13200},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 423, col: 28, offset: 13207},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 423, col: 28, offset: 13207},
																																run: (*parser).callonUnquotedAttributeValue66,
																																expr: &charClassMatcher{
																																	pos:        position{line: 423, col: 28, offset: 13207},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 425, col: 9, offset: 13261},
																																run: (*parser).callonUnquotedAttributeValue68,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 425, col: 9, offset: 13261},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 425, col: 9, offset: 13261},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 419, col: 79, offset: 13105},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 408, col: 31, offset: 12551},
																					run: (*parser).callonUnquotedAttributeValue72,
																					expr: &seqExpr{
																						pos: position{line: 408, col: 31, offset: 12551},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 408, col: 31, offset: 12551},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 408, col: 35, offset: 12555},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 98, col: 18, offset: 2832},
																									run: (*parser).callonUnquotedAttributeValue76,
																									expr: &seqExpr{
																										pos: position{line: 98, col: 18, offset: 2832},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 98, col: 18, offset: 2832},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 98, col: 28, offset: 2842},
																												expr: &charClassMatcher{
																													pos:        position{line: 98, col: 29, offset: 2843},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 408, col: 54, offset: 12574},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1954, col: 5, offset: 67519},
															run: (*parser).callonUnquotedAttributeValue82,
															expr: &seqExpr{
																pos: position{line: 1954, col: 5, offset: 67519},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 1954, col: 5, offset: 67519},
																		run: (*parser).callonUnquotedAttributeValue84,
																	},
																	&labeledExpr{
																		pos:   position{line: 1957, col: 5, offset: 67590},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 1959, col: 9, offset: 67688},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1959, col: 9, offset: 67688},
																					run: (*parser).callonUnquotedAttributeValue87,
																					expr: &choiceExpr{
																						pos: position{line: 487, col: 27, offset: 15054},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 487, col: 27, offset: 15054},
																								run: (*parser).callonUnquotedAttributeValue89,
																								expr: &seqExpr{
																									pos: position{line: 487, col: 27, offset: 15054},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 487, col: 27, offset: 15054},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 487, col: 32, offset: 15059},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 2112, col: 7, offset: 72433},
																												run: (*parser).callonUnquotedAttributeValue93,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2112, col: 7, offset: 72433},
																													expr: &charClassMatcher{
																														pos:        position{line: 2112, col: 7, offset: 72433},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 487, col: 40, offset: 15067},
																											expr: &choiceExpr{
																												pos: position{line: 2124, col: 10, offset: 72709},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2124, col: 10, offset: 72709},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2124, col: 16, offset: 72715},
																														run: (*parser).callonUnquotedAttributeValue99,
																														expr: &litMatcher{
																															pos:        position{line: 2124, col: 16, offset: 72715},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 487, col: 47, offset: 15074},
																											val:        ",",
																											ignoreCase: false,
																											want:       "\",\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 487, col: 51, offset: 15078},
																											label: "label",
																											expr: &oneOrMoreExpr{
																												pos: position{line: 497, col: 24, offset: 15491},
																												expr: &choiceExpr{
																													pos: position{line: 498, col: 5, offset: 15497},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 498, col: 6, offset: 15498},
																															run: (*parser).callonUnquotedAttributeValue105,
																															expr: &seqExpr{
																																pos: position{line: 498, col: 6, offset: 15498},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 498, col: 6, offset: 15498},
																																		val:        "[0-9\\pL]",
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 498, col: 14, offset: 15506},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 498, col: 14, offset: 15506},
																																			val:        "[^\\r\\n{<>]",
																																			chars:      []rune{'\r', '\n', '{', '<', '>'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 398, col: 5, offset: 12261},
																															run: (*parser).callonUnquotedAttributeValue110,
																															expr: &seqExpr{
																																pos: position{line: 398, col: 5, offset: 12261},
																																exprs: []interface{}{
																																	&andCodeExpr{
																																		pos: position{line: 398, col: 5, offset: 12261},
																																		run: (*parser).callonUnquotedAttributeValue112,
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 401, col: 5, offset: 12325},
																																		label: "element",
																																		expr: &choiceExpr{
																																			pos: position{line: 401, col: 14, offset: 12334},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 415, col: 25, offset: 12896},
																																					run: (*parser).callonUnquotedAttributeValue115,
																																					expr: &seqExpr{
																																						pos: position{line: 415, col: 25, offset: 12896},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 415, col: 25, offset: 12896},
																																								val:        "{counter:",
																																								ignoreCase: false,
																																								want:       "\"{counter:\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 415, col: 37, offset: 12908},
																																								label: "name",
																																								expr: &actionExpr{
																																									pos: position{line: 98, col: 18, offset: 2832},
																																									run: (*parser).callonUnquotedAttributeValue119,
																																									expr: &seqExpr{
																																										pos: position{line: 98, col: 18, offset: 2832},
																																										exprs: []interface{}{
																																											&charClassMatcher{
																																												pos:        position{line: 98, col: 18, offset: 2832},
																																												val:        "[_0-9\\pL]",
																																												chars:      []rune{'_'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 98, col: 28, offset: 2842},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 98, col: 29, offset: 2843},
																																													val:        "[-0-9\\pL]",
																																													chars:      []rune{'-'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 415, col: 56, offset: 12927},
																																								label: "start",
																																								expr: &zeroOrOneExpr{
																																									pos: position{line: 415, col: 62, offset: 12933},
																																									expr: &actionExpr{
																																										pos: position{line: 423, col: 17, offset: 13196},
																																										run: (*parser).callonUnquotedAttributeValue126,
																																										expr: &seqExpr{
																																											pos: position{line: 423, col: 17, offset: 13196},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 423, col: 17, offset: 13196},
																																													val:        ":",
																																													ignoreCase: false,
																																													want:       "\":\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 423, col: 21, offset: 13200},
																																													label: "start",
																																													expr: &choiceExpr{
																																														pos: position{line: 423, col: 28, offset: 13207},
																																														alternatives: []interface{}{
																																															&actionExpr{
																																																pos: position{line: 423, col: 28, offset: 13207},
																																																run: (*parser).callonUnquotedAttributeValue131,
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 423, col: 28, offset: 13207},
																																																	val:        "[A-Za-z]",
																																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																															&actionExpr{
																																																pos: position{line: 425, col: 9, offset: 13261},
																																																run: (*parser).callonUnquotedAttributeValue133,
																																																expr: &oneOrMoreExpr{
																																																	pos: position{line: 425, col: 9, offset: 13261},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 425, col: 9, offset: 13261},
																																																		val:        "[0-9]",
																																																		ranges:     []rune{'0', '9'},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 415, col: 78, offset: 12949},
																																								val:        "}",
																																								ignoreCase: false,
																																								want:       "\"}\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 419, col: 25, offset: 13051},
																																					run: (*parser).callonUnquotedAttributeValue137,
																																					expr: &seqExpr{
																																						pos: position{line: 419, col: 25, offset: 13051},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 419, col: 25, offset: 13051},
																																								val:        "{counter2:",
																																								ignoreCase: false,
																																								want:       "\"{counter2:\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 419, col: 38, offset: 13064},
																																								label: "name",
																																								expr: &actionExpr{
																																									pos: position{line: 98, col: 18, offset: 2832},
																																									run: (*parser).callonUnquotedAttributeValue141,
																																									expr: &seqExpr{
																																										pos: position{line: 98, col: 18, offset: 2832},
																																										exprs: []interface{}{
																																											&charClassMatcher{
																																												pos:        position{line: 98, col: 18, offset: 2832},
																																												val:        "[_0-9\\pL]",
																																												chars:      []rune{'_'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 98, col: 28, offset: 2842},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 98, col: 29, offset: 2843},
																																													val:        "[-0-9\\pL]",
																																													chars:      []rune{'-'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 419, col: 57, offset: 13083},
																																								label: "start",
																																								expr: &zeroOrOneExpr{
																																									pos: position{line: 419, col: 63, offset: 13089},
																																									expr: &actionExpr{
																																										pos: position{line: 423, col: 17, offset: 13196},
																																										run: (*parser).callonUnquotedAttributeValue148,
																																										expr: &seqExpr{
																																											pos: position{line: 423, col: 17, offset: 13196},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 423, col: 17, offset: 13196},
																																													val:        ":",
																																													ignoreCase: false,
																																													want:       "\":\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 423, col: 21, offset: 13200},
																																													label: "start",
																																													expr: &choiceExpr{
																																														pos: position{line: 423, col: 28, offset: 13207},
																																														alternatives: []interface{}{
																																															&actionExpr{
																																																pos: position{line: 423, col: 28, offset: 13207},
																																																run: (*parser).callonUnquotedAttributeValue153,
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 423, col: 28, offset: 13207},
																																																	val:        "[A-Za-z]",
																																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																															&actionExpr{
																																																pos: position{line: 425, col: 9, offset: 13261},
																																																run: (*parser).callonUnquotedAttributeValue155,
																																																expr: &oneOrMoreExpr{
																																																	pos: position{line: 425, col: 9, offset: 13261},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 425, col: 9, offset: 13261},
																																																		val:        "[0-9]",
																																																		ranges:     []rune{'0', '9'},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 419, col: 79, offset: 13105},
																																								val:        "}",
																																								ignoreCase: false,
																																								want:       "\"}\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 408, col: 31, offset: 12551},
																																					run: (*parser).callonUnquotedAttributeValue159,
																																					expr: &seqExpr{
																																						pos: position{line: 408, col: 31, offset: 12551},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 408, col: 31, offset: 12551},
																																								val:        "{",
																																								ignoreCase: false,
																																								want:       "\"{\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 408, col: 35, offset: 12555},
																																								label: "name",
																																								expr: &actionExpr{
																																									pos: position{line: 98, col: 18, offset: 2832},
																																									run: (*parser).callonUnquotedAttributeValue163,
																																									expr: &seqExpr{
																																										pos: position{line: 98, col: 18, offset: 2832},
																																										exprs: []interface{}{
																																											&charClassMatcher{
																																												pos:        position{line: 98, col: 18, offset: 2832},
																																												val:        "[_0-9\\pL]",
																																												chars:      []rune{'_'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 98, col: 28, offset: 2842},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 98, col: 29, offset: 2843},
																																													val:        "[-0-9\\pL]",
																																													chars:      []rune{'-'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 408, col: 54, offset: 12574},
																																								val:        "}",
																																								ignoreCase: false,
																																								want:       "\"}\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 502, col: 8, offset: 15730},
																															run: (*parser).callonUnquotedAttributeValue169,
																															expr: &litMatcher{
																																pos:        position{line: 502, col: 8, offset: 15730},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 487, col: 79, offset: 15106},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 489, col: 9, offset: 15179},
																								run: (*parser).callonUnquotedAttributeValue172,
																								expr: &seqExpr{
																									pos: position{line: 489, col: 9, offset: 15179},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 489, col: 9, offset: 15179},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 489, col: 14, offset: 15184},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 2112, col: 7, offset: 72433},
																												run: (*parser).callonUnquotedAttributeValue176,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2112, col: 7, offset: 72433},
																													expr: &charClassMatcher{
																														pos:        position{line: 2112, col: 7, offset: 72433},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 489, col: 22, offset: 15192},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1962, col: 11, offset: 67792},
																					run: (*parser).callonUnquotedAttributeValue180,
																					expr: &charClassMatcher{
																						pos:        position{line: 1962, col: 12, offset: 67793},
																						val:        "[<>&]",
																						chars:      []rune{'<', '>', '&'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 692, col: 23, offset: 21691},
															run: (*parser).callonUnquotedAttributeValue182,
															expr: &seqExpr{
																pos: position{line: 692, col: 23, offset: 21691},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 51, offset: 21719},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 692, col: 56, offset: 21724},
																			run: (*parser).callonUnquotedAttributeValue186,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 692, col: 56, offset: 21724},
																				expr: &charClassMatcher{
																					pos:        position{line: 692, col: 56, offset: 21724},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 378, col: 16, offset: 11668},
															run: (*parser).callonUnquotedAttributeValue190,
															expr: &litMatcher{
																pos:        position{line: 378, col: 16, offset: 11668},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 385, col: 5, offset: 11818},
							run: (*parser).callonUnquotedAttributeValue192,
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 485, col: 1, offset: 14960},
			expr: &choiceExpr{
				pos: position{line: 485, col: 19, offset: 14978},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 487, col: 27, offset: 15054},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 487, col: 27, offset: 15054},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 487, col: 27, offset: 15054},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 487, col: 32, offset: 15059},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2112, col: 7, offset: 72433},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 2112, col: 7, offset: 72433},
											expr: &charClassMatcher{
												pos:        position{line: 2112, col: 7, offset: 72433},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 487, col: 40, offset: 15067},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 10, offset: 72709},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2124, col: 10, offset: 72709},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2124, col: 16, offset: 72715},
												run: (*parser).callonCrossReference12,
												expr: &litMatcher{
													pos:        position{line: 2124, col: 16, offset: 72715},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 47, offset: 15074},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 487, col: 51, offset: 15078},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 497, col: 24, offset: 15491},
										expr: &choiceExpr{
											pos: position{line: 498, col: 5, offset: 15497},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 498, col: 6, offset: 15498},
													run: (*parser).callonCrossReference18,
													expr: &seqExpr{
														pos: position{line: 498, col: 6, offset: 15498},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 498, col: 6, offset: 15498},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 498, col: 14, offset: 15506},
																expr: &charClassMatcher{
																	pos:        position{line: 498, col: 14, offset: 15506},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 398, col: 5, offset: 12261},
													run: (*parser).callonCrossReference23,
													expr: &seqExpr{
														pos: position{line: 398, col: 5, offset: 12261},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 398, col: 5, offset: 12261},
																run: (*parser).callonCrossReference25,
															},
															&labeledExpr{
																pos:   position{line: 401, col: 5, offset: 12325},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 401, col: 14, offset: 12334},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 415, col: 25, offset: 12896},
																			run: (*parser).callonCrossReference28,
																			expr: &seqExpr{
																				pos: position{line: 415, col: 25, offset: 12896},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 415, col: 25, offset: 12896},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 415, col: 37, offset: 12908},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 98, col: 18, offset: 2832},
																							run: (*parser).callonCrossReference32,
																							expr: &seqExpr{
																								pos: position{line: 98, col: 18, offset: 2832},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 98, col: 18, offset: 2832},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 98, col: 28, offset: 2842},
																										expr: &charClassMatcher{
																											pos:        position{line: 98, col: 29, offset: 2843},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 415, col: 56, offset: 12927},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 415, col: 62, offset: 12933},
																							expr: &actionExpr{
																								pos: position{line: 423, col: 17, offset: 13196},
																								run: (*parser).callonCrossReference39,
																								expr: &seqExpr{
																									pos: position{line: 423, col: 17, offset: 13196},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 423, col: 17, offset: 13196},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 423, col: 21, offset: 13200},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 423, col: 28, offset: 13207},
																														run: (*parser).callonCrossReference44,
																														expr: &charClassMatcher{
																															pos:        position{line: 423, col: 28, offset: 13207},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 425, col: 9, offset: 13261},
																														run: (*parser).callonCrossReference46,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 425, col: 9, offset: 13261},
																															expr: &charClassMatcher{
																																pos:        position{line: 425, col: 9, offset: 13261},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 415, col: 78, offset: 12949},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 419, col: 25, offset: 13051},
																			run: (*parser).callonCrossReference50,
																			expr: &seqExpr{
																				pos: position{line: 419, col: 25, offset: 13051},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 419, col: 25, offset: 13051},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 419, col: 38, offset: 13064},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 98, col: 18, offset: 2832},
																							run: (*parser).callonCrossReference54,
																							expr: &seqExpr{
																								pos: position{line: 98, col: 18, offset: 2832},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 98, col: 18, offset: 2832},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 98, col: 28, offset: 2842},
																										expr: &charClassMatcher{
																											pos:        position{line: 98, col: 29, offset: 2843},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 419, col: 57, offset: 13083},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 419, col: 63, offset: 13089},
																							expr: &actionExpr{
																								pos: position{line: 423, col: 17, offset: 13196},
																								run: (*parser).callonCrossReference61,
																								expr: &seqExpr{
																									pos: position{line: 423, col: 17, offset: 13196},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 423, col: 17, offset: 13196},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 423, col: 21, offset: 13200},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 423, col: 28, offset: 13207},
																														run: (*parser).callonCrossReference66,
																														expr: &charClassMatcher{
																															pos:        position{line: 423, col: 28, offset: 13207},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 425, col: 9, offset: 13261},
																														run: (*parser).callonCrossReference68,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 425, col: 9, offset: 13261},
																															expr: &charClassMatcher{
																																pos:        position{line: 425, col: 9, offset: 13261},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 419, col: 79, offset: 13105},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 408, col: 31, offset: 12551},
																			run: (*parser).callonCrossReference72,
																			expr: &seqExpr{
																				pos: position{line: 408, col: 31, offset: 12551},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 408, col: 31, offset: 12551},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 408, col: 35, offset: 12555},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 98, col: 18, offset: 2832},
																							run: (*parser).callonCrossReference76,
																							expr: &seqExpr{
																								pos: position{line: 98, col: 18, offset: 2832},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 98, col: 18, offset: 2832},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 98, col: 28, offset: 2842},
																										expr: &charClassMatcher{
																											pos:        position{line: 98, col: 29, offset: 2843},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 408, col: 54, offset: 12574},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 502, col: 8, offset: 15730},
													run: (*parser).callonCrossReference82,
													expr: &litMatcher{
														pos:        position{line: 502, col: 8, offset: 15730},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 79, offset: 15106},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 489, col: 9, offset: 15179},
						run: (*parser).callonCrossReference85,
						expr: &seqExpr{
							pos: position{line: 489, col: 9, offset: 15179},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 489, col: 9, offset: 15179},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 489, col: 14, offset: 15184},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2112, col: 7, offset: 72433},
										run: (*parser).callonCrossReference89,
										expr: &oneOrMoreExpr{
											pos: position{line: 2112, col: 7, offset: 72433},
											expr: &charClassMatcher{
												pos:        position{line: 2112, col: 7, offset: 72433},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 489, col: 22, offset: 15192},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 485, col: 44, offset: 15003},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 493, col: 1, offset: 15263},
			expr: &actionExpr{
				pos: position{line: 493, col: 27, offset: 15289},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 493, col: 27, offset: 15289},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 493, col: 27, offset: 15289},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 35, offset: 15297},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2085, col: 17, offset: 71576},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 2085, col: 17, offset: 71576},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 2085, col: 22, offset: 71581},
										expr: &choiceExpr{
											pos: position{line: 2085, col: 23, offset: 71582},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2097, col: 13, offset: 71981},
													run: (*parser).callonExternalCrossReference9,
													expr: &labeledExpr{
														pos:   position{line: 2097, col: 13, offset: 71981},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 2097, col: 22, offset: 71990},
															expr: &choiceExpr{
																pos: position{line: 2099, col: 5, offset: 72029},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2099, col: 5, offset: 72029},
																		run: (*parser).callonExternalCrossReference13,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2099, col: 5, offset: 72029},
																			expr: &charClassMatcher{
																				pos:        position{line: 2099, col: 6, offset: 72030},
																				val:        "[^\\r\\n[]�{&<> ]",
																				chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 398, col: 5, offset: 12261},
																		run: (*parser).callonExternalCrossReference16,
																		expr: &seqExpr{
																			pos: position{line: 398, col: 5, offset: 12261},
																			exprs: []interface{}{
																				&andCodeExpr{
																					pos: position{line: 398, col: 5, offset: 12261},
																					run: (*parser).callonExternalCrossReference18,
																				},
																				&labeledExpr{
																					pos:   position{line: 401, col: 5, offset: 12325},
																					label: "element",
																					expr: &choiceExpr{
																						pos: position{line: 401, col: 14, offset: 12334},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 415, col: 25, offset: 12896},
																								run: (*parser).callonExternalCrossReference21,
																								expr: &seqExpr{
																									pos: position{line: 415, col: 25, offset: 12896},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 415, col: 25, offset: 12896},
																											val:        "{counter:",
																											ignoreCase: false,
																											want:       "\"{counter:\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 415, col: 37, offset: 12908},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 98, col: 18, offset: 2832},
																												run: (*parser).callonExternalCrossReference25,
																												expr: &seqExpr{
																													pos: position{line: 98, col: 18, offset: 2832},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 98, col: 18, offset: 2832},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 98, col: 28, offset: 2842},
																															expr: &charClassMatcher{
																																pos:        position{line: 98, col: 29, offset: 2843},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 415, col: 56, offset: 12927},
																											label: "start",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 415, col: 62, offset: 12933},
																												expr: &actionExpr{
																													pos: position{line: 423, col: 17, offset: 13196},
																													run: (*parser).callonExternalCrossReference32,
																													expr: &seqExpr{
																														pos: position{line: 423, col: 17, offset: 13196},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 423, col: 17, offset: 13196},
																																val:        ":",
																																ignoreCase: false,
																																want:       "\":\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 423, col: 21, offset: 13200},
																																label: "start",
																																expr: &choiceExpr{
																																	pos: position{line: 423, col: 28, offset: 13207},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			run: (*parser).callonExternalCrossReference37,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 423, col: 28, offset: 13207},
																																				val:        "[A-Za-z]",
																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 425, col: 9, offset: 13261},
																																			run: (*parser).callonExternalCrossReference39,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 425, col: 9, offset: 13261},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 425, col: 9, offset: 13261},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 415, col: 78, offset: 12949},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 419, col: 25, offset: 13051},
																								run: (*parser).callonExternalCrossReference43,
																								expr: &seqExpr{
																									pos: position{line: 419, col: 25, offset: 13051},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 419, col: 25, offset: 13051},
																											val:        "{counter2:",
																											ignoreCase: false,
																											want:       "\"{counter2:\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 419, col: 38, offset: 13064},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 98, col: 18, offset: 2832},
																												run: (*parser).callonExternalCrossReference47,
																												expr: &seqExpr{
																													pos: position{line: 98, col: 18, offset: 2832},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 98, col: 18, offset: 2832},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 98, col: 28, offset: 2842},
																															expr: &charClassMatcher{
																																pos:        position{line: 98, col: 29, offset: 2843},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 419, col: 57, offset: 13083},
																											label: "start",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 419, col: 63, offset: 13089},
																												expr: &actionExpr{
																													pos: position{line: 423, col: 17, offset: 13196},
																													run: (*parser).callonExternalCrossReference54,
																													expr: &seqExpr{
																														pos: position{line: 423, col: 17, offset: 13196},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 423, col: 17, offset: 13196},
																																val:        ":",
																																ignoreCase: false,
																																want:       "\":\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 423, col: 21, offset: 13200},
																																label: "start",
																																expr: &choiceExpr{
																																	pos: position{line: 423, col: 28, offset: 13207},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			run: (*parser).callonExternalCrossReference59,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 423, col: 28, offset: 13207},
																																				val:        "[A-Za-z]",
																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 425, col: 9, offset: 13261},
																																			run: (*parser).callonExternalCrossReference61,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 425, col: 9, offset: 13261},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 425, col: 9, offset: 13261},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 419, col: 79, offset: 13105},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 408, col: 31, offset: 12551},
																								run: (*parser).callonExternalCrossReference65,
																								expr: &seqExpr{
																									pos: position{line: 408, col: 31, offset: 12551},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 408, col: 31, offset: 12551},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 408, col: 35, offset: 12555},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 98, col: 18, offset: 2832},
																												run: (*parser).callonExternalCrossReference69,
																												expr: &seqExpr{
																													pos: position{line: 98, col: 18, offset: 2832},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 98, col: 18, offset: 2832},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 98, col: 28, offset: 2842},
																															expr: &charClassMatcher{
																																pos:        position{line: 98, col: 29, offset: 2843},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 408, col: 54, offset: 12574},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1954, col: 5, offset: 67519},
																		run: (*parser).callonExternalCrossReference75,
																		expr: &seqExpr{
																			pos: position{line: 1954, col: 5, offset: 67519},
																			exprs: []interface{}{
																				&andCodeExpr{
																					pos: position{line: 1954, col: 5, offset: 67519},
																					run: (*parser).callonExternalCrossReference77,
																				},
																				&labeledExpr{
																					pos:   position{line: 1957, col: 5, offset: 67590},
																					label: "element",
																					expr: &choiceExpr{
																						pos: position{line: 1959, col: 9, offset: 67688},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1959, col: 9, offset: 67688},
																								run: (*parser).callonExternalCrossReference80,
																								expr: &choiceExpr{
																									pos: position{line: 487, col: 27, offset: 15054},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 487, col: 27, offset: 15054},
																											run: (*parser).callonExternalCrossReference82,
																											expr: &seqExpr{
																												pos: position{line: 487, col: 27, offset: 15054},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 487, col: 27, offset: 15054},
																														val:        "<<",
																														ignoreCase: false,
																														want:       "\"<<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 487, col: 32, offset: 15059},
																														label: "id",
																														expr: &actionExpr{
																															pos: position{line: 2112, col: 7, offset: 72433},
																															run: (*parser).callonExternalCrossReference86,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2112, col: 7, offset: 72433},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2112, col: 7, offset: 72433},
																																	val:        "[^[]<>,]",
																																	chars:      []rune{'[', ']', '<', '>', ','},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 487, col: 40, offset: 15067},
																														expr: &choiceExpr{
																															pos: position{line: 2124, col: 10, offset: 72709},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2124, col: 10, offset: 72709},
																																	val:        " ",
																																	ignoreCase: false,
																																	want:       "\" \"",
																																},
																																&actionExpr{
																																	pos: position{line: 2124, col: 16, offset: 72715},
																																	run: (*parser).callonExternalCrossReference92,
																																	expr: &litMatcher{
																																		pos:        position{line: 2124, col: 16, offset: 72715},
																																		val:        "\t",
																																		ignoreCase: false,
																																		want:       "\"\\t\"",
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 487, col: 47, offset: 15074},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 487, col: 51, offset: 15078},
																														label: "label",
																														expr: &oneOrMoreExpr{
																															pos: position{line: 497, col: 24, offset: 15491},
																															expr: &choiceExpr{
																																pos: position{line: 498, col: 5, offset: 15497},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 498, col: 6, offset: 15498},
																																		run: (*parser).callonExternalCrossReference98,
																																		expr: &seqExpr{
																																			pos: position{line: 498, col: 6, offset: 15498},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 498, col: 6, offset: 15498},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&oneOrMoreExpr{
																																					pos: position{line: 498, col: 14, offset: 15506},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 498, col: 14, offset: 15506},
																																						val:        "[^\\r\\n{<>]",
																																						chars:      []rune{'\r', '\n', '{', '<', '>'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 398, col: 5, offset: 12261},
																																		run: (*parser).callonExternalCrossReference103,
																																		expr: &seqExpr{
																																			pos: position{line: 398, col: 5, offset: 12261},
																																			exprs: []interface{}{
																																				&andCodeExpr{
																																					pos: position{line: 398, col: 5, offset: 12261},
																																					run: (*parser).callonExternalCrossReference105,
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 401, col: 5, offset: 12325},
																																					label: "element",
																																					expr: &choiceExpr{
																																						pos: position{line: 401, col: 14, offset: 12334},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 415, col: 25, offset: 12896},
																																								run: (*parser).callonExternalCrossReference108,
																																								expr: &seqExpr{
																																									pos: position{line: 415, col: 25, offset: 12896},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 415, col: 25, offset: 12896},
																																											val:        "{counter:",
																																											ignoreCase: false,
																																											want:       "\"{counter:\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 415, col: 37, offset: 12908},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 98, col: 18, offset: 2832},
																																												run: (*parser).callonExternalCrossReference112,
																																												expr: &seqExpr{
																																													pos: position{line: 98, col: 18, offset: 2832},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 98, col: 18, offset: 2832},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 98, col: 28, offset: 2842},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 98, col: 29, offset: 2843},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 415, col: 56, offset: 12927},
																																											label: "start",
																																											expr: &zeroOrOneExpr{
																																												pos: position{line: 415, col: 62, offset: 12933},
																																												expr: &actionExpr{
																																													pos: position{line: 423, col: 17, offset: 13196},
																																													run: (*parser).callonExternalCrossReference119,
																																													expr: &seqExpr{
																																														pos: position{line: 423, col: 17, offset: 13196},
																																														exprs: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 423, col: 17, offset: 13196},
																																																val:        ":",
																																																ignoreCase: false,
																																																want:       "\":\"",
																																															},
																																															&labeledExpr{
																																																pos:   position{line: 423, col: 21, offset: 13200},
																																																label: "start",
																																																expr: &choiceExpr{
																																																	pos: position{line: 423, col: 28, offset: 13207},
																																																	alternatives: []interface{}{
																																																		&actionExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			run: (*parser).callonExternalCrossReference124,
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 423, col: 28, offset: 13207},
																																																				val:        "[A-Za-z]",
																																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																		&actionExpr{
																																																			pos: position{line: 425, col: 9, offset: 13261},
																																																			run: (*parser).callonExternalCrossReference126,
																																																			expr: &oneOrMoreExpr{
																																																				pos: position{line: 425, col: 9, offset: 13261},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 425, col: 9, offset: 13261},
																																																					val:        "[0-9]",
																																																					ranges:     []rune{'0', '9'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 415, col: 78, offset: 12949},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 419, col: 25, offset: 13051},
																																								run: (*parser).callonExternalCrossReference130,
																																								expr: &seqExpr{
																																									pos: position{line: 419, col: 25, offset: 13051},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 419, col: 25, offset: 13051},
																																											val:        "{counter2:",
																																											ignoreCase: false,
																																											want:       "\"{counter2:\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 419, col: 38, offset: 13064},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 98, col: 18, offset: 2832},
																																												run: (*parser).callonExternalCrossReference134,
																																												expr: &seqExpr{
																																													pos: position{line: 98, col: 18, offset: 2832},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 98, col: 18, offset: 2832},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 98, col: 28, offset: 2842},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 98, col: 29, offset: 2843},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 419, col: 57, offset: 13083},
																																											label: "start",
																																											expr: &zeroOrOneExpr{
																																												pos: position{line: 419, col: 63, offset: 13089},
																																												expr: &actionExpr{
																																													pos: position{line: 423, col: 17, offset: 13196},
																																													run: (*parser).callonExternalCrossReference141,
																																													expr: &seqExpr{
																																														pos: position{line: 423, col: 17, offset: 13196},
																																														exprs: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 423, col: 17, offset: 13196},
																																																val:        ":",
																																																ignoreCase: false,
																																																want:       "\":\"",
																																															},
																																															&labeledExpr{
																																																pos:   position{line: 423, col: 21, offset: 13200},
																																																label: "start",
																																																expr: &choiceExpr{
																																																	pos: position{line: 423, col: 28, offset: 13207},
																																																	alternatives: []interface{}{
																																																		&actionExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			run: (*parser).callonExternalCrossReference146,
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 423, col: 28, offset: 13207},
																																																				val:        "[A-Za-z]",
																																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																		&actionExpr{
																																																			pos: position{line: 425, col: 9, offset: 13261},
																																																			run: (*parser).callonExternalCrossReference148,
																																																			expr: &oneOrMoreExpr{
																																																				pos: position{line: 425, col: 9, offset: 13261},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 425, col: 9, offset: 13261},
																																																					val:        "[0-9]",
																																																					ranges:     []rune{'0', '9'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 419, col: 79, offset: 13105},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 408, col: 31, offset: 12551},
																																								run: (*parser).callonExternalCrossReference152,
																																								expr: &seqExpr{
																																									pos: position{line: 408, col: 31, offset: 12551},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 408, col: 31, offset: 12551},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 408, col: 35, offset: 12555},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 98, col: 18, offset: 2832},
																																												run: (*parser).callonExternalCrossReference156,
																																												expr: &seqExpr{
																																													pos: position{line: 98, col: 18, offset: 2832},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 98, col: 18, offset: 2832},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 98, col: 28, offset: 2842},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 98, col: 29, offset: 2843},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 408, col: 54, offset: 12574},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 502, col: 8, offset: 15730},
																																		run: (*parser).callonExternalCrossReference162,
																																		expr: &litMatcher{
																																			pos:        position{line: 502, col: 8, offset: 15730},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 487, col: 79, offset: 15106},
																														val:        ">>",
																														ignoreCase: false,
																														want:       "\">>\"",
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 489, col: 9, offset: 15179},
																											run: (*parser).callonExternalCrossReference165,
																											expr: &seqExpr{
																												pos: position{line: 489, col: 9, offset: 15179},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 489, col: 9, offset: 15179},
																														val:        "<<",
																														ignoreCase: false,
																														want:       "\"<<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 489, col: 14, offset: 15184},
																														label: "id",
																														expr: &actionExpr{
																															pos: position{line: 2112, col: 7, offset: 72433},
																															run: (*parser).callonExternalCrossReference169,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2112, col: 7, offset: 72433},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2112, col: 7, offset: 72433},
																																	val:        "[^[]<>,]",
																																	chars:      []rune{'[', ']', '<', '>', ','},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 489, col: 22, offset: 15192},
																														val:        ">>",
																														ignoreCase: false,
																														want:       "\">>\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1962, col: 11, offset: 67792},
																								run: (*parser).callonExternalCrossReference173,
																								expr: &charClassMatcher{
																									pos:        position{line: 1962, col: 12, offset: 67793},
																									val:        "[<>&]",
																									chars:      []rune{'<', '>', '&'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2104, col: 7, offset: 72221},
																		run: (*parser).callonExternalCrossReference175,
																		expr: &litMatcher{
																			pos:        position{line: 2104, col: 7, offset: 72221},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 692, col: 23, offset: 21691},
													run: (*parser).callonExternalCrossReference177,
													expr: &seqExpr{
														pos: position{line: 692, col: 23, offset: 21691},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 691, col: 32, offset: 21660},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 692, col: 51, offset: 21719},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 692, col: 56, offset: 21724},
																	run: (*parser).callonExternalCrossReference181,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 692, col: 56, offset: 21724},
																		expr: &charClassMatcher{
																			pos:        position{line: 692, col: 56, offset: 21724},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 691, col: 32, offset: 21660},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 493, col: 54, offset: 15316},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 72, offset: 15334},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 706, col: 1, offset: 22228},
			expr: &actionExpr{
				pos: position{line: 707, col: 5, offset: 22250},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 707, col: 5, offset: 22250},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 707, col: 5, offset: 22250},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 708, col: 9, offset: 22265},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 708, col: 9, offset: 22265},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 708, col: 9, offset: 22265},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 709, col: 9, offset: 22286},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2085, col: 17, offset: 71576},
												run: (*parser).callonFileInclusion8,
												expr: &labeledExpr{
													pos:   position{line: 2085, col: 17, offset: 71576},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2085, col: 22, offset: 71581},
														expr: &choiceExpr{
															pos: position{line: 2085, col: 23, offset: 71582},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2097, col: 13, offset: 71981},
																	run: (*parser).callonFileInclusion12,
																	expr: &labeledExpr{
																		pos:   position{line: 2097, col: 13, offset: 71981},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2097, col: 22, offset: 71990},
																			expr: &choiceExpr{
																				pos: position{line: 2099, col: 5, offset: 72029},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2099, col: 5, offset: 72029},
																						run: (*parser).callonFileInclusion16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2099, col: 5, offset: 72029},
																							expr: &charClassMatcher{
																								pos:        position{line: 2099, col: 6, offset: 72030},
																								val:        "[^\\r\\n[]�{&<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 398, col: 5, offset: 12261},
																						run: (*parser).callonFileInclusion19,
																						expr: &seqExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 398, col: 5, offset: 12261},
																									run: (*parser).callonFileInclusion21,
																								},
																								&labeledExpr{
																									pos:   position{line: 401, col: 5, offset: 12325},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 401, col: 14, offset: 12334},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 415, col: 25, offset: 12896},
																												run: (*parser).callonFileInclusion24,
																												expr: &seqExpr{
																													pos: position{line: 415, col: 25, offset: 12896},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 415, col: 25, offset: 12896},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 37, offset: 12908},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonFileInclusion28,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 56, offset: 12927},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 415, col: 62, offset: 12933},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonFileInclusion35,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonFileInclusion40,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonFileInclusion42,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 415, col: 78, offset: 12949},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 419, col: 25, offset: 13051},
																												run: (*parser).callonFileInclusion46,
																												expr: &seqExpr{
																													pos: position{line: 419, col: 25, offset: 13051},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 419, col: 25, offset: 13051},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 38, offset: 13064},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonFileInclusion50,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 57, offset: 13083},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 419, col: 63, offset: 13089},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonFileInclusion57,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonFileInclusion62,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonFileInclusion64,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 419, col: 79, offset: 13105},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 408, col: 31, offset: 12551},
																												run: (*parser).callonFileInclusion68,
																												expr: &seqExpr{
																													pos: position{line: 408, col: 31, offset: 12551},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 408, col: 31, offset: 12551},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 408, col: 35, offset: 12555},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonFileInclusion72,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 408, col: 54, offset: 12574},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1954, col: 5, offset: 67519},
																						run: (*parser).callonFileInclusion78,
																						expr: &seqExpr{
																							pos: position{line: 1954, col: 5, offset: 67519},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 1954, col: 5, offset: 67519},
																									run: (*parser).callonFileInclusion80,
																								},
																								&labeledExpr{
																									pos:   position{line: 1957, col: 5, offset: 67590},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 1959, col: 9, offset: 67688},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 1959, col: 9, offset: 67688},
																												run: (*parser).callonFileInclusion83,
																												expr: &choiceExpr{
																													pos: position{line: 487, col: 27, offset: 15054},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 487, col: 27, offset: 15054},
																															run: (*parser).callonFileInclusion85,
																															expr: &seqExpr{
																																pos: position{line: 487, col: 27, offset: 15054},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 487, col: 27, offset: 15054},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 487, col: 32, offset: 15059},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2112, col: 7, offset: 72433},
																																			run: (*parser).callonFileInclusion89,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2112, col: 7, offset: 72433},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2112, col: 7, offset: 72433},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 487, col: 40, offset: 15067},
																																		expr: &choiceExpr{
																																			pos: position{line: 2124, col: 10, offset: 72709},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2124, col: 10, offset: 72709},
																																					val:        " ",
																																					ignoreCase: false,
																																					want:       "\" \"",
																																				},
																																				&actionExpr{
																																					pos: position{line: 2124, col: 16, offset: 72715},
																																					run: (*parser).callonFileInclusion95,
																																					expr: &litMatcher{
																																						pos:        position{line: 2124, col: 16, offset: 72715},
																																						val:        "\t",
																																						ignoreCase: false,
																																						want:       "\"\\t\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 487, col: 47, offset: 15074},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 487, col: 51, offset: 15078},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 497, col: 24, offset: 15491},
																																			expr: &choiceExpr{
																																				pos: position{line: 498, col: 5, offset: 15497},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 498, col: 6, offset: 15498},
																																						run: (*parser).callonFileInclusion101,
																																						expr: &seqExpr{
																																							pos: position{line: 498, col: 6, offset: 15498},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 498, col: 6, offset: 15498},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 498, col: 14, offset: 15506},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 498, col: 14, offset: 15506},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 398, col: 5, offset: 12261},
																																						run: (*parser).callonFileInclusion106,
																																						expr: &seqExpr{
																																							pos: position{line: 398, col: 5, offset: 12261},
																																							exprs: []interface{}{
																																								&andCodeExpr{
																																									pos: position{line: 398, col: 5, offset: 12261},
																																									run: (*parser).callonFileInclusion108,
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 401, col: 5, offset: 12325},
																																									label: "element",
																																									expr: &choiceExpr{
																																										pos: position{line: 401, col: 14, offset: 12334},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 415, col: 25, offset: 12896},
																																												run: (*parser).callonFileInclusion111,
																																												expr: &seqExpr{
																																													pos: position{line: 415, col: 25, offset: 12896},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 415, col: 25, offset: 12896},
																																															val:        "{counter:",
																																															ignoreCase: false,
																																															want:       "\"{counter:\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 415, col: 37, offset: 12908},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 98, col: 18, offset: 2832},
																																																run: (*parser).callonFileInclusion115,
																																																expr: &seqExpr{
																																																	pos: position{line: 98, col: 18, offset: 2832},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 98, col: 18, offset: 2832},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 98, col: 28, offset: 2842},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 98, col: 29, offset: 2843},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 415, col: 56, offset: 12927},
																																															label: "start",
																																															expr: &zeroOrOneExpr{
																																																pos: position{line: 415, col: 62, offset: 12933},
																																																expr: &actionExpr{
																																																	pos: position{line: 423, col: 17, offset: 13196},
																																																	run: (*parser).callonFileInclusion122,
																																																	expr: &seqExpr{
																																																		pos: position{line: 423, col: 17, offset: 13196},
																																																		exprs: []interface{}{
																																																			&litMatcher{
																																																				pos:        position{line: 423, col: 17, offset: 13196},
																																																				val:        ":",
																																																				ignoreCase: false,
																																																				want:       "\":\"",
																																																			},
																																																			&labeledExpr{
																																																				pos:   position{line: 423, col: 21, offset: 13200},
																																																				label: "start",
																																																				expr: &choiceExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					alternatives: []interface{}{
																																																						&actionExpr{
																																																							pos: position{line: 423, col: 28, offset: 13207},
																																																							run: (*parser).callonFileInclusion127,
																																																							expr: &charClassMatcher{
																																																								pos:        position{line: 423, col: 28, offset: 13207},
																																																								val:        "[A-Za-z]",
																																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																								ignoreCase: false,
																																																								inverted:   false,
																																																							},
																																																						},
																																																						&actionExpr{
																																																							pos: position{line: 425, col: 9, offset: 13261},
																																																							run: (*parser).callonFileInclusion129,
																																																							expr: &oneOrMoreExpr{
																																																								pos: position{line: 425, col: 9, offset: 13261},
																																																								expr: &charClassMatcher{
																																																									pos:        position{line: 425, col: 9, offset: 13261},
																																																									val:        "[0-9]",
																																																									ranges:     []rune{'0', '9'},
																																																									ignoreCase: false,
																																																									inverted:   false,
																																																								},
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 415, col: 78, offset: 12949},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 419, col: 25, offset: 13051},
																																												run: (*parser).callonFileInclusion133,
																																												expr: &seqExpr{
																																													pos: position{line: 419, col: 25, offset: 13051},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 419, col: 25, offset: 13051},
																																															val:        "{counter2:",
																																															ignoreCase: false,
																																															want:       "\"{counter2:\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 419, col: 38, offset: 13064},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 98, col: 18, offset: 2832},
																																																run: (*parser).callonFileInclusion137,
																																																expr: &seqExpr{
																																																	pos: position{line: 98, col: 18, offset: 2832},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 98, col: 18, offset: 2832},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 98, col: 28, offset: 2842},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 98, col: 29, offset: 2843},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 419, col: 57, offset: 13083},
																																															label: "start",
																																															expr: &zeroOrOneExpr{
																																																pos: position{line: 419, col: 63, offset: 13089},
																																																expr: &actionExpr{
																																																	pos: position{line: 423, col: 17, offset: 13196},
																																																	run: (*parser).callonFileInclusion144,
																																																	expr: &seqExpr{
																																																		pos: position{line: 423, col: 17, offset: 13196},
																																																		exprs: []interface{}{
																																																			&litMatcher{
																																																				pos:        position{line: 423, col: 17, offset: 13196},
																																																				val:        ":",
																																																				ignoreCase: false,
																																																				want:       "\":\"",
																																																			},
																																																			&labeledExpr{
																																																				pos:   position{line: 423, col: 21, offset: 13200},
																																																				label: "start",
																																																				expr: &choiceExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					alternatives: []interface{}{
																																																						&actionExpr{
																																																							pos: position{line: 423, col: 28, offset: 13207},
																																																							run: (*parser).callonFileInclusion149,
																																																							expr: &charClassMatcher{
																																																								pos:        position{line: 423, col: 28, offset: 13207},
																																																								val:        "[A-Za-z]",
																																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																								ignoreCase: false,
																																																								inverted:   false,
																																																							},
																																																						},
																																																						&actionExpr{
																																																							pos: position{line: 425, col: 9, offset: 13261},
																																																							run: (*parser).callonFileInclusion151,
																																																							expr: &oneOrMoreExpr{
																																																								pos: position{line: 425, col: 9, offset: 13261},
																																																								expr: &charClassMatcher{
																																																									pos:        position{line: 425, col: 9, offset: 13261},
																																																									val:        "[0-9]",
																																																									ranges:     []rune{'0', '9'},
																																																									ignoreCase: false,
																																																									inverted:   false,
																																																								},
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 419, col: 79, offset: 13105},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 408, col: 31, offset: 12551},
																																												run: (*parser).callonFileInclusion155,
																																												expr: &seqExpr{
																																													pos: position{line: 408, col: 31, offset: 12551},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 408, col: 31, offset: 12551},
																																															val:        "{",
																																															ignoreCase: false,
																																															want:       "\"{\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 408, col: 35, offset: 12555},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 98, col: 18, offset: 2832},
																																																run: (*parser).callonFileInclusion159,
																																																expr: &seqExpr{
																																																	pos: position{line: 98, col: 18, offset: 2832},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 98, col: 18, offset: 2832},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 98, col: 28, offset: 2842},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 98, col: 29, offset: 2843},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 408, col: 54, offset: 12574},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 502, col: 8, offset: 15730},
																																						run: (*parser).callonFileInclusion165,
																																						expr: &litMatcher{
																																							pos:        position{line: 502, col: 8, offset: 15730},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 487, col: 79, offset: 15106},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 489, col: 9, offset: 15179},
																															run: (*parser).callonFileInclusion168,
																															expr: &seqExpr{
																																pos: position{line: 489, col: 9, offset: 15179},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 489, col: 9, offset: 15179},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 489, col: 14, offset: 15184},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2112, col: 7, offset: 72433},
																																			run: (*parser).callonFileInclusion172,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2112, col: 7, offset: 72433},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2112, col: 7, offset: 72433},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 489, col: 22, offset: 15192},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 1962, col: 11, offset: 67792},
																												run: (*parser).callonFileInclusion176,
																												expr: &charClassMatcher{
																													pos:        position{line: 1962, col: 12, offset: 67793},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2104, col: 7, offset: 72221},
																						run: (*parser).callonFileInclusion178,
																						expr: &litMatcher{
																							pos:        position{line: 2104, col: 7, offset: 72221},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 692, col: 23, offset: 21691},
																	run: (*parser).callonFileInclusion180,
																	expr: &seqExpr{
																		pos: position{line: 692, col: 23, offset: 21691},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 691, col: 32, offset: 21660},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 692, col: 51, offset: 21719},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 692, col: 56, offset: 21724},
																					run: (*parser).callonFileInclusion184,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 692, col: 56, offset: 21724},
																						expr: &charClassMatcher{
																							pos:        position{line: 692, col: 56, offset: 21724},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 691, col: 32, offset: 21660},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 710, col: 9, offset: 22315},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 710, col: 27, offset: 22333},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 714, col: 5, offset: 22494},
							expr: &choiceExpr{
								pos: position{line: 2124, col: 10, offset: 72709},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonFileInclusion193,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2134, col: 8, offset: 72893},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2132, col: 8, offset: 72882},
									expr: &anyMatcher{
										line: 2132, col: 9, offset: 72883,
									},
								},
								&litMatcher{
									pos:        position{line: 2128, col: 12, offset: 72775},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2128, col: 19, offset: 72782},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2128, col: 28, offset: 72791},
									run: (*parser).callonFileInclusion200,
									expr: &litMatcher{
										pos:        position{line: 2128, col: 28, offset: 72791},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 721, col: 1, offset: 22626},
			expr: &actionExpr{
				pos: position{line: 721, col: 15, offset: 22640},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 721, col: 15, offset: 22640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 721, col: 15, offset: 22640},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 721, col: 22, offset: 22647},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 728, col: 23, offset: 22830},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 728, col: 23, offset: 22830},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 728, col: 23, offset: 22830},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 728, col: 30, offset: 22837},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 737, col: 19, offset: 23195},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 737, col: 19, offset: 23195},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 737, col: 19, offset: 23195},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 2120, col: 11, offset: 72635},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 2120, col: 11, offset: 72635},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2120, col: 11, offset: 72635},
																							expr: &litMatcher{
																								pos:        position{line: 2120, col: 11, offset: 72635},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2120, col: 16, offset: 72640},
																							expr: &actionExpr{
																								pos: position{line: 2116, col: 10, offset: 72575},
																								run: (*parser).callonLineRanges17,
																								expr: &charClassMatcher{
																									pos:        position{line: 2116, col: 10, offset: 72575},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 737, col: 34, offset: 23210},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 737, col: 39, offset: 23215},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 2120, col: 11, offset: 72635},
																				run: (*parser).callonLineRanges21,
																				expr: &seqExpr{
																					pos: position{line: 2120, col: 11, offset: 72635},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2120, col: 11, offset: 72635},
																							expr: &litMatcher{
																								pos:        position{line: 2120, col: 11, offset: 72635},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2120, col: 16, offset: 72640},
																							expr: &actionExpr{
																								pos: position{line: 2116, col: 10, offset: 72575},
																								run: (*parser).callonLineRanges26,
																								expr: &charClassMatcher{
																									pos:        position{line: 2116, col: 10, offset: 72575},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 741, col: 20, offset: 23335},
																run: (*parser).callonLineRanges28,
																expr: &labeledExpr{
																	pos:   position{line: 741, col: 20, offset: 23335},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 2120, col: 11, offset: 72635},
																		run: (*parser).callonLineRanges30,
																		expr: &seqExpr{
																			pos: position{line: 2120, col: 11, offset: 72635},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2120, col: 11, offset: 72635},
																					expr: &litMatcher{
																						pos:        position{line: 2120, col: 11, offset: 72635},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2120, col: 16, offset: 72640},
																					expr: &actionExpr{
																						pos: position{line: 2116, col: 10, offset: 72575},
																						run: (*parser).callonLineRanges35,
																						expr: &charClassMatcher{
																							pos:        position{line: 2116, col: 10, offset: 72575},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 729, col: 5, offset: 22876},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 729, col: 12, offset: 22883},
														expr: &actionExpr{
															pos: position{line: 730, col: 9, offset: 22893},
															run: (*parser).callonLineRanges39,
															expr: &seqExpr{
																pos: position{line: 730, col: 9, offset: 22893},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 730, col: 10, offset: 22894},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 731, col: 9, offset: 23011},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 731, col: 16, offset: 23018},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 737, col: 19, offset: 23195},
																					run: (*parser).callonLineRanges44,
																					expr: &seqExpr{
																						pos: position{line: 737, col: 19, offset: 23195},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 737, col: 19, offset: 23195},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 2120, col: 11, offset: 72635},
																									run: (*parser).callonLineRanges47,
																									expr: &seqExpr{
																										pos: position{line: 2120, col: 11, offset: 72635},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2120, col: 11, offset: 72635},
																												expr: &litMatcher{
																													pos:        position{line: 2120, col: 11, offset: 72635},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2120, col: 16, offset: 72640},
																												expr: &actionExpr{
																													pos: position{line: 2116, col: 10, offset: 72575},
																													run: (*parser).callonLineRanges52,
																													expr: &charClassMatcher{
																														pos:        position{line: 2116, col: 10, offset: 72575},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 737, col: 34, offset: 23210},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 737, col: 39, offset: 23215},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 2120, col: 11, offset: 72635},
																									run: (*parser).callonLineRanges56,
																									expr: &seqExpr{
																										pos: position{line: 2120, col: 11, offset: 72635},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2120, col: 11, offset: 72635},
																												expr: &litMatcher{
																													pos:        position{line: 2120, col: 11, offset: 72635},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2120, col: 16, offset: 72640},
																												expr: &actionExpr{
																													pos: position{line: 2116, col: 10, offset: 72575},
																													run: (*parser).callonLineRanges61,
																													expr: &charClassMatcher{
																														pos:        position{line: 2116, col: 10, offset: 72575},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 741, col: 20, offset: 23335},
																					run: (*parser).callonLineRanges63,
																					expr: &labeledExpr{
																						pos:   position{line: 741, col: 20, offset: 23335},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 2120, col: 11, offset: 72635},
																							run: (*parser).callonLineRanges65,
																							expr: &seqExpr{
																								pos: position{line: 2120, col: 11, offset: 72635},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 2120, col: 11, offset: 72635},
																										expr: &litMatcher{
																											pos:        position{line: 2120, col: 11, offset: 72635},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2120, col: 16, offset: 72640},
																										expr: &actionExpr{
																											pos: position{line: 2116, col: 10, offset: 72575},
																											run: (*parser).callonLineRanges70,
																											expr: &charClassMatcher{
																												pos:        position{line: 2116, col: 10, offset: 72575},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 737, col: 19, offset: 23195},
										run: (*parser).callonLineRanges72,
										expr: &seqExpr{
											pos: position{line: 737, col: 19, offset: 23195},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 737, col: 19, offset: 23195},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 2120, col: 11, offset: 72635},
														run: (*parser).callonLineRanges75,
														expr: &seqExpr{
															pos: position{line: 2120, col: 11, offset: 72635},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2120, col: 11, offset: 72635},
																	expr: &litMatcher{
																		pos:        position{line: 2120, col: 11, offset: 72635},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2120, col: 16, offset: 72640},
																	expr: &actionExpr{
																		pos: position{line: 2116, col: 10, offset: 72575},
																		run: (*parser).callonLineRanges80,
																		expr: &charClassMatcher{
																			pos:        position{line: 2116, col: 10, offset: 72575},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 737, col: 34, offset: 23210},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 737, col: 39, offset: 23215},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 2120, col: 11, offset: 72635},
														run: (*parser).callonLineRanges84,
														expr: &seqExpr{
															pos: position{line: 2120, col: 11, offset: 72635},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2120, col: 11, offset: 72635},
																	expr: &litMatcher{
																		pos:        position{line: 2120, col: 11, offset: 72635},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2120, col: 16, offset: 72640},
																	expr: &actionExpr{
																		pos: position{line: 2116, col: 10, offset: 72575},
																		run: (*parser).callonLineRanges89,
																		expr: &charClassMatcher{
																			pos:        position{line: 2116, col: 10, offset: 72575},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 741, col: 20, offset: 23335},
										run: (*parser).callonLineRanges91,
										expr: &labeledExpr{
											pos:   position{line: 741, col: 20, offset: 23335},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 2120, col: 11, offset: 72635},
												run: (*parser).callonLineRanges93,
												expr: &seqExpr{
													pos: position{line: 2120, col: 11, offset: 72635},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 2120, col: 11, offset: 72635},
															expr: &litMatcher{
																pos:        position{line: 2120, col: 11, offset: 72635},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 2120, col: 16, offset: 72640},
															expr: &actionExpr{
																pos: position{line: 2116, col: 10, offset: 72575},
																run: (*parser).callonLineRanges98,
																expr: &charClassMatcher{
																	pos:        position{line: 2116, col: 10, offset: 72575},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 746, col: 1, offset: 23470},
			expr: &actionExpr{
				pos: position{line: 746, col: 14, offset: 23483},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 746, col: 14, offset: 23483},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 746, col: 14, offset: 23483},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 750, col: 22, offset: 23620},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 750, col: 22, offset: 23620},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 750, col: 22, offset: 23620},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 759, col: 13, offset: 23930},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 759, col: 13, offset: 23930},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 759, col: 13, offset: 23930},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 759, col: 18, offset: 23935},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2053, col: 14, offset: 70404},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2053, col: 14, offset: 70404},
																			expr: &charClassMatcher{
																				pos:        position{line: 2053, col: 14, offset: 70404},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 765, col: 16, offset: 24135},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 765, col: 16, offset: 24135},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 765, col: 16, offset: 24135},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 765, col: 23, offset: 24142},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 765, col: 23, offset: 24142},
																							expr: &litMatcher{
																								pos:        position{line: 765, col: 24, offset: 24143},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 768, col: 5, offset: 24197},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 761, col: 9, offset: 24023},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 761, col: 9, offset: 24023},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 761, col: 9, offset: 24023},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 761, col: 13, offset: 24027},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 761, col: 18, offset: 24032},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2053, col: 14, offset: 70404},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2053, col: 14, offset: 70404},
																					expr: &charClassMatcher{
																						pos:        position{line: 2053, col: 14, offset: 70404},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 765, col: 16, offset: 24135},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 765, col: 16, offset: 24135},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 765, col: 16, offset: 24135},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 765, col: 23, offset: 24142},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 765, col: 23, offset: 24142},
																									expr: &litMatcher{
																										pos:        position{line: 765, col: 24, offset: 24143},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 768, col: 5, offset: 24197},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 751, col: 5, offset: 23641},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 751, col: 12, offset: 23648},
												expr: &actionExpr{
													pos: position{line: 752, col: 9, offset: 23658},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 752, col: 9, offset: 23658},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 752, col: 10, offset: 23659},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 753, col: 9, offset: 23776},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 759, col: 13, offset: 23930},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 759, col: 13, offset: 23930},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 759, col: 13, offset: 23930},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 759, col: 18, offset: 23935},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2053, col: 14, offset: 70404},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2053, col: 14, offset: 70404},
																								expr: &charClassMatcher{
																									pos:        position{line: 2053, col: 14, offset: 70404},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 765, col: 16, offset: 24135},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 765, col: 16, offset: 24135},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 765, col: 16, offset: 24135},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 765, col: 23, offset: 24142},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 765, col: 23, offset: 24142},
																												expr: &litMatcher{
																													pos:        position{line: 765, col: 24, offset: 24143},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 768, col: 5, offset: 24197},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 761, col: 9, offset: 24023},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 761, col: 9, offset: 24023},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 761, col: 9, offset: 24023},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 761, col: 13, offset: 24027},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 761, col: 18, offset: 24032},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2053, col: 14, offset: 70404},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2053, col: 14, offset: 70404},
																										expr: &charClassMatcher{
																											pos:        position{line: 2053, col: 14, offset: 70404},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 765, col: 16, offset: 24135},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 765, col: 16, offset: 24135},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 765, col: 16, offset: 24135},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 765, col: 23, offset: 24142},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 765, col: 23, offset: 24142},
																														expr: &litMatcher{
																															pos:        position{line: 765, col: 24, offset: 24143},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 768, col: 5, offset: 24197},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 775, col: 1, offset: 24364},
			expr: &actionExpr{
				pos: position{line: 775, col: 21, offset: 24384},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 775, col: 21, offset: 24384},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 775, col: 21, offset: 24384},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 775, col: 29, offset: 24392},
								expr: &choiceExpr{
									pos: position{line: 775, col: 30, offset: 24393},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 779, col: 25, offset: 24573},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 779, col: 25, offset: 24573},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 779, col: 25, offset: 24573},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 779, col: 33, offset: 24581},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 779, col: 38, offset: 24586},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2053, col: 14, offset: 70404},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2053, col: 14, offset: 70404},
																	expr: &charClassMatcher{
																		pos:        position{line: 2053, col: 14, offset: 70404},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 779, col: 78, offset: 24626},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 783, col: 23, offset: 24721},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 783, col: 23, offset: 24721},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 783, col: 23, offset: 24721},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 783, col: 31, offset: 24729},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 783, col: 36, offset: 24734},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2053, col: 14, offset: 70404},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2053, col: 14, offset: 70404},
																	expr: &charClassMatcher{
																		pos:        position{line: 2053, col: 14, offset: 70404},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 783, col: 76, offset: 24774},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 775, col: 74, offset: 24437},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 775, col: 74, offset: 24437,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2134, col: 8, offset: 72893},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2132, col: 8, offset: 72882},
									expr: &anyMatcher{
										line: 2132, col: 9, offset: 72883,
									},
								},
								&litMatcher{
									pos:        position{line: 2128, col: 12, offset: 72775},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2128, col: 19, offset: 72782},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2128, col: 28, offset: 72791},
									run: (*parser).callonIncludedFileLine31,
									expr: &litMatcher{
										pos:        position{line: 2128, col: 28, offset: 72791},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 834, col: 1, offset: 26162},
			expr: &actionExpr{
				pos: position{line: 835, col: 5, offset: 26185},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 835, col: 5, offset: 26185},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 835, col: 14, offset: 26194},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 2072, col: 5, offset: 71182},
								run: (*parser).callonInlineElement4,
								expr: &seqExpr{
									pos: position{line: 2072, col: 5, offset: 71182},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2072, col: 5, offset: 71182},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 2072, col: 14, offset: 71191},
												run: (*parser).callonInlineElement7,
												expr: &oneOrMoreExpr{
													pos: position{line: 2072, col: 14, offset: 71191},
													expr: &charClassMatcher{
														pos:        position{line: 2072, col: 14, offset: 71191},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 2075, col: 5, offset: 71272},
											expr: &choiceExpr{
												pos: position{line: 2075, col: 7, offset: 71274},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2075, col: 7, offset: 71274},
														val:        "[\\r\\n �]",
														chars:      []rune{'\r', '\n', ' ', '�'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2132, col: 8, offset: 72882},
														expr: &anyMatcher{
															line: 2132, col: 9, offset: 72883,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2061, col: 5, offset: 70785},
								run: (*parser).callonInlineElement15,
								expr: &seqExpr{
									pos: position{line: 2061, col: 5, offset: 70785},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											expr: &charClassMatcher{
												pos:        position{line: 2061, col: 5, offset: 70785},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&andExpr{
											pos: position{line: 2061, col: 15, offset: 70795},
											expr: &choiceExpr{
												pos: position{line: 2061, col: 17, offset: 70797},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2061, col: 17, offset: 70797},
														val:        "[\\r\\n ,]]",
														chars:      []rune{'\r', '\n', ' ', ',', ']'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2132, col: 8, offset: 72882},
														expr: &anyMatcher{
															line: 2132, col: 9, offset: 72883,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2063, col: 9, offset: 70879},
								run: (*parser).callonInlineElement24,
								expr: &seqExpr{
									pos: position{line: 2063, col: 9, offset: 70879},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											expr: &charClassMatcher{
												pos:        position{line: 2063, col: 9, offset: 70879},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2063, col: 19, offset: 70889},
											expr: &seqExpr{
												pos: position{line: 2063, col: 20, offset: 70890},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2063, col: 20, offset: 70890},
														val:        "[=*_`]",
														chars:      []rune{'=', '*', '_', '`'},
														ignoreCase: false,
														inverted:   false,
													},
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 27, offset: 70897},
														expr: &charClassMatcher{
															pos:        position{line: 2063, col: 27, offset: 70897},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 699, col: 14, offset: 22046},
								run: (*parser).callonInlineElement33,
								expr: &seqExpr{
									pos: position{line: 699, col: 14, offset: 22046},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 2124, col: 10, offset: 72709},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2124, col: 10, offset: 72709},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2124, col: 16, offset: 72715},
													run: (*parser).callonInlineElement37,
													expr: &litMatcher{
														pos:        position{line: 2124, col: 16, offset: 72715},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 699, col: 20, offset: 22052},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 699, col: 24, offset: 22056},
											expr: &choiceExpr{
												pos: position{line: 2124, col: 10, offset: 72709},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2124, col: 10, offset: 72709},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2124, col: 16, offset: 72715},
														run: (*parser).callonInlineElement43,
														expr: &litMatcher{
															pos:        position{line: 2124, col: 16, offset: 72715},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 699, col: 31, offset: 22063},
											expr: &choiceExpr{
												pos: position{line: 2134, col: 8, offset: 72893},
												alternatives: []interface{}{
													&notExpr{
														pos: position{line: 2132, col: 8, offset: 72882},
														expr: &anyMatcher{
															line: 2132, col: 9, offset: 72883,
														},
													},
													&litMatcher{
														pos:        position{line: 2128, col: 12, offset: 72775},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2128, col: 19, offset: 72782},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2128, col: 28, offset: 72791},
														run: (*parser).callonInlineElement51,
														expr: &litMatcher{
															pos:        position{line: 2128, col: 28, offset: 72791},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
										},
									},
								},
							},
							&oneOrMoreExpr{
								pos: position{line: 837, col: 11, offset: 26300},
								expr: &choiceExpr{
									pos: position{line: 2124, col: 10, offset: 72709},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2124, col: 10, offset: 72709},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2124, col: 16, offset: 72715},
											run: (*parser).callonInlineElement56,
											expr: &litMatcher{
												pos:        position{line: 2124, col: 16, offset: 72715},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 838, col: 11, offset: 26318},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 838, col: 11, offset: 26318},
										expr: &choiceExpr{
											pos: position{line: 2134, col: 8, offset: 72893},
											alternatives: []interface{}{
												&notExpr{
													pos: position{line: 2132, col: 8, offset: 72882},
													expr: &anyMatcher{
														line: 2132, col: 9, offset: 72883,
													},
												},
												&litMatcher{
													pos:        position{line: 2128, col: 12, offset: 72775},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2128, col: 19, offset: 72782},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&actionExpr{
													pos: position{line: 2128, col: 28, offset: 72791},
													run: (*parser).callonInlineElement65,
													expr: &litMatcher{
														pos:        position{line: 2128, col: 28, offset: 72791},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 839, col: 13, offset: 26337},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1954, col: 5, offset: 67519},
												run: (*parser).callonInlineElement68,
												expr: &seqExpr{
													pos: position{line: 1954, col: 5, offset: 67519},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 1954, col: 5, offset: 67519},
															run: (*parser).callonInlineElement70,
														},
														&labeledExpr{
															pos:   position{line: 1957, col: 5, offset: 67590},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 1959, col: 9, offset: 67688},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 1959, col: 9, offset: 67688},
																		run: (*parser).callonInlineElement73,
																		expr: &choiceExpr{
																			pos: position{line: 487, col: 27, offset: 15054},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 487, col: 27, offset: 15054},
																					run: (*parser).callonInlineElement75,
																					expr: &seqExpr{
																						pos: position{line: 487, col: 27, offset: 15054},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 487, col: 27, offset: 15054},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 487, col: 32, offset: 15059},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									run: (*parser).callonInlineElement79,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2112, col: 7, offset: 72433},
																										expr: &charClassMatcher{
																											pos:        position{line: 2112, col: 7, offset: 72433},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 487, col: 40, offset: 15067},
																								expr: &choiceExpr{
																									pos: position{line: 2124, col: 10, offset: 72709},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2124, col: 10, offset: 72709},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2124, col: 16, offset: 72715},
																											run: (*parser).callonInlineElement85,
																											expr: &litMatcher{
																												pos:        position{line: 2124, col: 16, offset: 72715},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 487, col: 47, offset: 15074},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 487, col: 51, offset: 15078},
																								label: "label",
																								expr: &oneOrMoreExpr{
																									pos: position{line: 497, col: 24, offset: 15491},
																									expr: &choiceExpr{
																										pos: position{line: 498, col: 5, offset: 15497},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 498, col: 6, offset: 15498},
																												run: (*parser).callonInlineElement91,
																												expr: &seqExpr{
																													pos: position{line: 498, col: 6, offset: 15498},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 498, col: 6, offset: 15498},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&oneOrMoreExpr{
																															pos: position{line: 498, col: 14, offset: 15506},
																															expr: &charClassMatcher{
																																pos:        position{line: 498, col: 14, offset: 15506},
																																val:        "[^\\r\\n{<>]",
																																chars:      []rune{'\r', '\n', '{', '<', '>'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 398, col: 5, offset: 12261},
																												run: (*parser).callonInlineElement96,
																												expr: &seqExpr{
																													pos: position{line: 398, col: 5, offset: 12261},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 398, col: 5, offset: 12261},
																															run: (*parser).callonInlineElement98,
																														},
																														&labeledExpr{
																															pos:   position{line: 401, col: 5, offset: 12325},
																															label: "element",
																															expr: &choiceExpr{
																																pos: position{line: 401, col: 14, offset: 12334},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 415, col: 25, offset: 12896},
																																		run: (*parser).callonInlineElement101,
																																		expr: &seqExpr{
																																			pos: position{line: 415, col: 25, offset: 12896},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 415, col: 25, offset: 12896},
																																					val:        "{counter:",
																																					ignoreCase: false,
																																					want:       "\"{counter:\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 415, col: 37, offset: 12908},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						run: (*parser).callonInlineElement105,
																																						expr: &seqExpr{
																																							pos: position{line: 98, col: 18, offset: 2832},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 98, col: 18, offset: 2832},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 98, col: 28, offset: 2842},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 98, col: 29, offset: 2843},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 415, col: 56, offset: 12927},
																																					label: "start",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 415, col: 62, offset: 12933},
																																						expr: &actionExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							run: (*parser).callonInlineElement112,
																																							expr: &seqExpr{
																																								pos: position{line: 423, col: 17, offset: 13196},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 423, col: 17, offset: 13196},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 423, col: 21, offset: 13200},
																																										label: "start",
																																										expr: &choiceExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 423, col: 28, offset: 13207},
																																													run: (*parser).callonInlineElement117,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 423, col: 28, offset: 13207},
																																														val:        "[A-Za-z]",
																																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																												&actionExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													run: (*parser).callonInlineElement119,
																																													expr: &oneOrMoreExpr{
																																														pos: position{line: 425, col: 9, offset: 13261},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 425, col: 9, offset: 13261},
																																															val:        "[0-9]",
																																															ranges:     []rune{'0', '9'},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 415, col: 78, offset: 12949},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 419, col: 25, offset: 13051},
																																		run: (*parser).callonInlineElement123,
																																		expr: &seqExpr{
																																			pos: position{line: 419, col: 25, offset: 13051},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 419, col: 25, offset: 13051},
																																					val:        "{counter2:",
																																					ignoreCase: false,
																																					want:       "\"{counter2:\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 419, col: 38, offset: 13064},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						run: (*parser).callonInlineElement127,
																																						expr: &seqExpr{
																																							pos: position{line: 98, col: 18, offset: 2832},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 98, col: 18, offset: 2832},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 98, col: 28, offset: 2842},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 98, col: 29, offset: 2843},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 419, col: 57, offset: 13083},
																																					label: "start",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 419, col: 63, offset: 13089},
																																						expr: &actionExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							run: (*parser).callonInlineElement134,
																																							expr: &seqExpr{
																																								pos: position{line: 423, col: 17, offset: 13196},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 423, col: 17, offset: 13196},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 423, col: 21, offset: 13200},
																																										label: "start",
																																										expr: &choiceExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 423, col: 28, offset: 13207},
																																													run: (*parser).callonInlineElement139,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 423, col: 28, offset: 13207},
																																														val:        "[A-Za-z]",
																																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																												&actionExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													run: (*parser).callonInlineElement141,
																																													expr: &oneOrMoreExpr{
																																														pos: position{line: 425, col: 9, offset: 13261},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 425, col: 9, offset: 13261},
																																															val:        "[0-9]",
																																															ranges:     []rune{'0', '9'},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 419, col: 79, offset: 13105},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 408, col: 31, offset: 12551},
																																		run: (*parser).callonInlineElement145,
																																		expr: &seqExpr{
																																			pos: position{line: 408, col: 31, offset: 12551},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 408, col: 31, offset: 12551},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 408, col: 35, offset: 12555},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						run: (*parser).callonInlineElement149,
																																						expr: &seqExpr{
																																							pos: position{line: 98, col: 18, offset: 2832},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 98, col: 18, offset: 2832},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 98, col: 28, offset: 2842},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 98, col: 29, offset: 2843},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 408, col: 54, offset: 12574},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 502, col: 8, offset: 15730},
																												run: (*parser).callonInlineElement155,
																												expr: &litMatcher{
																													pos:        position{line: 502, col: 8, offset: 15730},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 487, col: 79, offset: 15106},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 489, col: 9, offset: 15179},
																					run: (*parser).callonInlineElement158,
																					expr: &seqExpr{
																						pos: position{line: 489, col: 9, offset: 15179},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 489, col: 9, offset: 15179},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 489, col: 14, offset: 15184},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									run: (*parser).callonInlineElement162,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2112, col: 7, offset: 72433},
																										expr: &charClassMatcher{
																											pos:        position{line: 2112, col: 7, offset: 72433},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 489, col: 22, offset: 15192},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1962, col: 11, offset: 67792},
																		run: (*parser).callonInlineElement166,
																		expr: &charClassMatcher{
																			pos:        position{line: 1962, col: 12, offset: 67793},
																			val:        "[<>&]",
																			chars:      []rune{'<', '>', '&'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 26368},
												name: "Quote",
											},
											&actionExpr{
												pos: position{line: 398, col: 5, offset: 12261},
												run: (*parser).callonInlineElement169,
												expr: &seqExpr{
													pos: position{line: 398, col: 5, offset: 12261},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 398, col: 5, offset: 12261},
															run: (*parser).callonInlineElement171,
														},
														&labeledExpr{
															pos:   position{line: 401, col: 5, offset: 12325},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 401, col: 14, offset: 12334},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 415, col: 25, offset: 12896},
																		run: (*parser).callonInlineElement174,
																		expr: &seqExpr{
																			pos: position{line: 415, col: 25, offset: 12896},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 415, col: 25, offset: 12896},
																					val:        "{counter:",
																					ignoreCase: false,
																					want:       "\"{counter:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 415, col: 37, offset: 12908},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						run: (*parser).callonInlineElement178,
																						expr: &seqExpr{
																							pos: position{line: 98, col: 18, offset: 2832},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 98, col: 18, offset: 2832},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 98, col: 28, offset: 2842},
																									expr: &charClassMatcher{
																										pos:        position{line: 98, col: 29, offset: 2843},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 415, col: 56, offset: 12927},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 415, col: 62, offset: 12933},
																						expr: &actionExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							run: (*parser).callonInlineElement185,
																							expr: &seqExpr{
																								pos: position{line: 423, col: 17, offset: 13196},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 423, col: 17, offset: 13196},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 423, col: 21, offset: 13200},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 423, col: 28, offset: 13207},
																													run: (*parser).callonInlineElement190,
																													expr: &charClassMatcher{
																														pos:        position{line: 423, col: 28, offset: 13207},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													run: (*parser).callonInlineElement192,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 425, col: 9, offset: 13261},
																														expr: &charClassMatcher{
																															pos:        position{line: 425, col: 9, offset: 13261},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 415, col: 78, offset: 12949},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 419, col: 25, offset: 13051},
																		run: (*parser).callonInlineElement196,
																		expr: &seqExpr{
																			pos: position{line: 419, col: 25, offset: 13051},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 419, col: 25, offset: 13051},
																					val:        "{counter2:",
																					ignoreCase: false,
																					want:       "\"{counter2:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 419, col: 38, offset: 13064},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						run: (*parser).callonInlineElement200,
																						expr: &seqExpr{
																							pos: position{line: 98, col: 18, offset: 2832},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 98, col: 18, offset: 2832},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 98, col: 28, offset: 2842},
																									expr: &charClassMatcher{
																										pos:        position{line: 98, col: 29, offset: 2843},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 419, col: 57, offset: 13083},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 419, col: 63, offset: 13089},
																						expr: &actionExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							run: (*parser).callonInlineElement207,
																							expr: &seqExpr{
																								pos: position{line: 423, col: 17, offset: 13196},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 423, col: 17, offset: 13196},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 423, col: 21, offset: 13200},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 423, col: 28, offset: 13207},
																													run: (*parser).callonInlineElement212,
																													expr: &charClassMatcher{
																														pos:        position{line: 423, col: 28, offset: 13207},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													run: (*parser).callonInlineElement214,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 425, col: 9, offset: 13261},
																														expr: &charClassMatcher{
																															pos:        position{line: 425, col: 9, offset: 13261},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 419, col: 79, offset: 13105},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 408, col: 31, offset: 12551},
																		run: (*parser).callonInlineElement218,
																		expr: &seqExpr{
																			pos: position{line: 408, col: 31, offset: 12551},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 408, col: 31, offset: 12551},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 408, col: 35, offset: 12555},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						run: (*parser).callonInlineElement222,
																						expr: &seqExpr{
																							pos: position{line: 98, col: 18, offset: 2832},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 98, col: 18, offset: 2832},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 98, col: 28, offset: 2842},
																									expr: &charClassMatcher{
																										pos:        position{line: 98, col: 29, offset: 2843},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 408, col: 54, offset: 12574},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1943, col: 5, offset: 67298},
												run: (*parser).callonInlineElement228,
												expr: &seqExpr{
													pos: position{line: 1943, col: 5, offset: 67298},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 1943, col: 5, offset: 67298},
															run: (*parser).callonInlineElement230,
														},
														&labeledExpr{
															pos:   position{line: 1946, col: 5, offset: 67364},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 1972, col: 11, offset: 68044},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 1974, col: 15, offset: 68138},
																		run: (*parser).callonInlineElement233,
																		expr: &litMatcher{
																			pos:        position{line: 1974, col: 15, offset: 68138},
																			val:        "`'",
																			ignoreCase: false,
																			want:       "\"`'\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1980, col: 14, offset: 68253},
																		run: (*parser).callonInlineElement235,
																		expr: &litMatcher{
																			pos:        position{line: 1980, col: 14, offset: 68253},
																			val:        "(C)",
																			ignoreCase: false,
																			want:       "\"(C)\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1984, col: 14, offset: 68329},
																		run: (*parser).callonInlineElement237,
																		expr: &litMatcher{
																			pos:        position{line: 1984, col: 14, offset: 68329},
																			val:        "(TM)",
																			ignoreCase: false,
																			want:       "\"(TM)\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1988, col: 15, offset: 68407},
																		run: (*parser).callonInlineElement239,
																		expr: &litMatcher{
																			pos:        position{line: 1988, col: 15, offset: 68407},
																			val:        "(R)",
																			ignoreCase: false,
																			want:       "\"(R)\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1992, col: 13, offset: 68482},
																		run: (*parser).callonInlineElement241,
																		expr: &litMatcher{
																			pos:        position{line: 1992, col: 13, offset: 68482},
																			val:        "...",
																			ignoreCase: false,
																			want:       "\"...\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2000, col: 22, offset: 68788},
																		run: (*parser).callonInlineElement243,
																		expr: &seqExpr{
																			pos: position{line: 2000, col: 22, offset: 68788},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2049, col: 13, offset: 70330},
																					val:        "[0-9\\pL]",
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&litMatcher{
																					pos:        position{line: 2000, col: 31, offset: 68797},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&andExpr{
																					pos: position{line: 2000, col: 35, offset: 68801},
																					expr: &charClassMatcher{
																						pos:        position{line: 2000, col: 36, offset: 68802},
																						val:        "[\\pL]",
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 843, col: 15, offset: 26451},
												name: "InlineMacro",
											},
											&actionExpr{
												pos: position{line: 1921, col: 5, offset: 66840},
												run: (*parser).callonInlineElement250,
												expr: &seqExpr{
													pos: position{line: 1921, col: 5, offset: 66840},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 1921, col: 5, offset: 66840},
															run: (*parser).callonInlineElement252,
														},
														&labeledExpr{
															pos:   position{line: 1924, col: 5, offset: 66910},
															label: "element",
															expr: &actionExpr{
																pos: position{line: 699, col: 14, offset: 22046},
																run: (*parser).callonInlineElement254,
																expr: &seqExpr{
																	pos: position{line: 699, col: 14, offset: 22046},
																	exprs: []interface{}{
																		&choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonInlineElement258,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 699, col: 20, offset: 22052},
																			val:        "+",
																			ignoreCase: false,
																			want:       "\"+\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 699, col: 24, offset: 22056},
																			expr: &choiceExpr{
																				pos: position{line: 2124, col: 10, offset: 72709},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2124, col: 10, offset: 72709},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2124, col: 16, offset: 72715},
																						run: (*parser).callonInlineElement264,
																						expr: &litMatcher{
																							pos:        position{line: 2124, col: 16, offset: 72715},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 699, col: 31, offset: 22063},
																			expr: &choiceExpr{
																				pos: position{line: 2134, col: 8, offset: 72893},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2132, col: 8, offset: 72882},
																						expr: &anyMatcher{
																							line: 2132, col: 9, offset: 72883,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2128, col: 12, offset: 72775},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2128, col: 19, offset: 72782},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2128, col: 28, offset: 72791},
																						run: (*parser).callonInlineElement272,
																						expr: &litMatcher{
																							pos:        position{line: 2128, col: 28, offset: 72791},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												run: (*parser).callonInlineElement274,
												expr: &seqExpr{
													pos: position{line: 692, col: 23, offset: 21691},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 691, col: 32, offset: 21660},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
														&labeledExpr{
															pos:   position{line: 692, col: 51, offset: 21719},
															label: "ref",
															expr: &actionExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																run: (*parser).callonInlineElement278,
																expr: &oneOrMoreExpr{
																	pos: position{line: 692, col: 56, offset: 21724},
																	expr: &charClassMatcher{
																		pos:        position{line: 692, col: 56, offset: 21724},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 691, col: 32, offset: 21660},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2081, col: 12, offset: 71493},
												run: (*parser).callonInlineElement282,
												expr: &anyMatcher{
													line: 2081, col: 12, offset: 71493,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 886, col: 1, offset: 27906},
			expr: &actionExpr{
				pos: position{line: 886, col: 14, offset: 27919},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 886, col: 14, offset: 27919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 886, col: 14, offset: 27919},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 886, col: 19, offset: 27924},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 886, col: 25, offset: 27930},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 886, col: 43, offset: 27948},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 890, col: 1, offset: 28020},
			expr: &actionExpr{
				pos: position{line: 890, col: 21, offset: 28040},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 890, col: 21, offset: 28040},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 890, col: 30, offset: 28049},
						expr: &choiceExpr{
							pos: position{line: 890, col: 31, offset: 28050},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2061, col: 5, offset: 70785},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 2061, col: 5, offset: 70785},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2061, col: 5, offset: 70785},
												expr: &charClassMatcher{
													pos:        position{line: 2061, col: 5, offset: 70785},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2061, col: 15, offset: 70795},
												expr: &choiceExpr{
													pos: position{line: 2061, col: 17, offset: 70797},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2061, col: 17, offset: 70797},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2132, col: 8, offset: 72882},
															expr: &anyMatcher{
																line: 2132, col: 9, offset: 72883,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2063, col: 9, offset: 70879},
									run: (*parser).callonIndexTermContent14,
									expr: &seqExpr{
										pos: position{line: 2063, col: 9, offset: 70879},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2063, col: 9, offset: 70879},
												expr: &charClassMatcher{
													pos:        position{line: 2063, col: 9, offset: 70879},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2063, col: 19, offset: 70889},
												expr: &seqExpr{
													pos: position{line: 2063, col: 20, offset: 70890},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2063, col: 20, offset: 70890},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2063, col: 27, offset: 70897},
															expr: &charClassMatcher{
																pos:        position{line: 2063, col: 27, offset: 70897},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 890, col: 38, offset: 28057},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 890, col: 53, offset: 28072},
									name: "QuotedText",
								},
								&litMatcher{
									pos:        position{line: 2124, col: 10, offset: 72709},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2124, col: 16, offset: 72715},
									run: (*parser).callonIndexTermContent26,
									expr: &litMatcher{
										pos:        position{line: 2124, col: 16, offset: 72715},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
								&actionExpr{
									pos: position{line: 1954, col: 5, offset: 67519},
									run: (*parser).callonIndexTermContent28,
									expr: &seqExpr{
										pos: position{line: 1954, col: 5, offset: 67519},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 1954, col: 5, offset: 67519},
												run: (*parser).callonIndexTermContent30,
											},
											&labeledExpr{
												pos:   position{line: 1957, col: 5, offset: 67590},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 1959, col: 9, offset: 67688},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1959, col: 9, offset: 67688},
															run: (*parser).callonIndexTermContent33,
															expr: &choiceExpr{
																pos: position{line: 487, col: 27, offset: 15054},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 487, col: 27, offset: 15054},
																		run: (*parser).callonIndexTermContent35,
																		expr: &seqExpr{
																			pos: position{line: 487, col: 27, offset: 15054},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 487, col: 27, offset: 15054},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 487, col: 32, offset: 15059},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2112, col: 7, offset: 72433},
																						run: (*parser).callonIndexTermContent39,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							expr: &charClassMatcher{
																								pos:        position{line: 2112, col: 7, offset: 72433},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 487, col: 40, offset: 15067},
																					expr: &choiceExpr{
																						pos: position{line: 2124, col: 10, offset: 72709},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2124, col: 10, offset: 72709},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2124, col: 16, offset: 72715},
																								run: (*parser).callonIndexTermContent45,
																								expr: &litMatcher{
																									pos:        position{line: 2124, col: 16, offset: 72715},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 487, col: 47, offset: 15074},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 487, col: 51, offset: 15078},
																					label: "label",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 497, col: 24, offset: 15491},
																						expr: &choiceExpr{
																							pos: position{line: 498, col: 5, offset: 15497},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 498, col: 6, offset: 15498},
																									run: (*parser).callonIndexTermContent51,
																									expr: &seqExpr{
																										pos: position{line: 498, col: 6, offset: 15498},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 498, col: 6, offset: 15498},
																												val:        "[0-9\\pL]",
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 498, col: 14, offset: 15506},
																												expr: &charClassMatcher{
																													pos:        position{line: 498, col: 14, offset: 15506},
																													val:        "[^\\r\\n{<>]",
																													chars:      []rune{'\r', '\n', '{', '<', '>'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 398, col: 5, offset: 12261},
																									run: (*parser).callonIndexTermContent56,
																									expr: &seqExpr{
																										pos: position{line: 398, col: 5, offset: 12261},
																										exprs: []interface{}{
																											&andCodeExpr{
																												pos: position{line: 398, col: 5, offset: 12261},
																												run: (*parser).callonIndexTermContent58,
																											},
																											&labeledExpr{
																												pos:   position{line: 401, col: 5, offset: 12325},
																												label: "element",
																												expr: &choiceExpr{
																													pos: position{line: 401, col: 14, offset: 12334},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 415, col: 25, offset: 12896},
																															run: (*parser).callonIndexTermContent61,
																															expr: &seqExpr{
																																pos: position{line: 415, col: 25, offset: 12896},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 415, col: 25, offset: 12896},
																																		val:        "{counter:",
																																		ignoreCase: false,
																																		want:       "\"{counter:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 415, col: 37, offset: 12908},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 98, col: 18, offset: 2832},
																																			run: (*parser).callonIndexTermContent65,
																																			expr: &seqExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 98, col: 18, offset: 2832},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 98, col: 28, offset: 2842},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 98, col: 29, offset: 2843},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 415, col: 56, offset: 12927},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 415, col: 62, offset: 12933},
																																			expr: &actionExpr{
																																				pos: position{line: 423, col: 17, offset: 13196},
																																				run: (*parser).callonIndexTermContent72,
																																				expr: &seqExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 423, col: 17, offset: 13196},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 423, col: 21, offset: 13200},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 423, col: 28, offset: 13207},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										run: (*parser).callonIndexTermContent77,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 423, col: 28, offset: 13207},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 425, col: 9, offset: 13261},
																																										run: (*parser).callonIndexTermContent79,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 425, col: 9, offset: 13261},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 415, col: 78, offset: 12949},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 419, col: 25, offset: 13051},
																															run: (*parser).callonIndexTermContent83,
																															expr: &seqExpr{
																																pos: position{line: 419, col: 25, offset: 13051},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 419, col: 25, offset: 13051},
																																		val:        "{counter2:",
																																		ignoreCase: false,
																																		want:       "\"{counter2:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 419, col: 38, offset: 13064},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 98, col: 18, offset: 2832},
																																			run: (*parser).callonIndexTermContent87,
																																			expr: &seqExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 98, col: 18, offset: 2832},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 98, col: 28, offset: 2842},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 98, col: 29, offset: 2843},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 419, col: 57, offset: 13083},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 419, col: 63, offset: 13089},
																																			expr: &actionExpr{
																																				pos: position{line: 423, col: 17, offset: 13196},
																																				run: (*parser).callonIndexTermContent94,
																																				expr: &seqExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 423, col: 17, offset: 13196},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 423, col: 21, offset: 13200},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 423, col: 28, offset: 13207},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										run: (*parser).callonIndexTermContent99,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 423, col: 28, offset: 13207},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 425, col: 9, offset: 13261},
																																										run: (*parser).callonIndexTermContent101,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 425, col: 9, offset: 13261},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 419, col: 79, offset: 13105},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 408, col: 31, offset: 12551},
																															run: (*parser).callonIndexTermContent105,
																															expr: &seqExpr{
																																pos: position{line: 408, col: 31, offset: 12551},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 408, col: 31, offset: 12551},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 408, col: 35, offset: 12555},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 98, col: 18, offset: 2832},
																																			run: (*parser).callonIndexTermContent109,
																																			expr: &seqExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 98, col: 18, offset: 2832},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 98, col: 28, offset: 2842},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 98, col: 29, offset: 2843},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 408, col: 54, offset: 12574},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 502, col: 8, offset: 15730},
																									run: (*parser).callonIndexTermContent115,
																									expr: &litMatcher{
																										pos:        position{line: 502, col: 8, offset: 15730},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 487, col: 79, offset: 15106},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 489, col: 9, offset: 15179},
																		run: (*parser).callonIndexTermContent118,
																		expr: &seqExpr{
																			pos: position{line: 489, col: 9, offset: 15179},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 489, col: 9, offset: 15179},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 489, col: 14, offset: 15184},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2112, col: 7, offset: 72433},
																						run: (*parser).callonIndexTermContent122,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							expr: &charClassMatcher{
																								pos:        position{line: 2112, col: 7, offset: 72433},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 489, col: 22, offset: 15192},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1962, col: 11, offset: 67792},
															run: (*parser).callonIndexTermContent126,
															expr: &charClassMatcher{
																pos:        position{line: 1962, col: 12, offset: 67793},
																val:        "[<>&]",
																chars:      []rune{'<', '>', '&'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 692, col: 23, offset: 21691},
									run: (*parser).callonIndexTermContent128,
									expr: &seqExpr{
										pos: position{line: 692, col: 23, offset: 21691},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 691, col: 32, offset: 21660},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 692, col: 51, offset: 21719},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 692, col: 56, offset: 21724},
													run: (*parser).callonIndexTermContent132,
													expr: &oneOrMoreExpr{
														pos: position{line: 692, col: 56, offset: 21724},
														expr: &charClassMatcher{
															pos:        position{line: 692, col: 56, offset: 21724},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 691, col: 32, offset: 21660},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 890, col: 114, offset: 28133},
									run: (*parser).callonIndexTermContent136,
									expr: &seqExpr{
										pos: position{line: 890, col: 115, offset: 28134},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 890, col: 115, offset: 28134},
												expr: &litMatcher{
													pos:        position{line: 890, col: 116, offset: 28135},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 890, col: 121, offset: 28140,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 910, col: 1, offset: 28763},
			expr: &actionExpr{
				pos: position{line: 915, col: 5, offset: 28946},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 915, col: 5, offset: 28946},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 915, col: 5, offset: 28946},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 919, col: 5, offset: 29074},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 919, col: 15, offset: 29084},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2089, col: 13, offset: 71694},
								run: (*parser).callonImageBlock6,
								expr: &seqExpr{
									pos: position{line: 2089, col: 13, offset: 71694},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2089, col: 13, offset: 71694},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2089, col: 20, offset: 71701},
												expr: &choiceExpr{
													pos: position{line: 2110, col: 11, offset: 72369},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2110, col: 11, offset: 72369},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 23, offset: 72381},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 36, offset: 72394},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 47, offset: 72405},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 58, offset: 72416},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2089, col: 30, offset: 71711},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2089, col: 35, offset: 71716},
												expr: &choiceExpr{
													pos: position{line: 2089, col: 36, offset: 71717},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2097, col: 13, offset: 71981},
															run: (*parser).callonImageBlock19,
															expr: &labeledExpr{
																pos:   position{line: 2097, col: 13, offset: 71981},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2097, col: 22, offset: 71990},
																	expr: &choiceExpr{
																		pos: position{line: 2099, col: 5, offset: 72029},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2099, col: 5, offset: 72029},
																				run: (*parser).callonImageBlock23,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2099, col: 5, offset: 72029},
																					expr: &charClassMatcher{
																						pos:        position{line: 2099, col: 6, offset: 72030},
																						val:        "[^\\r\\n[]�{&<> ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 398, col: 5, offset: 12261},
																				run: (*parser).callonImageBlock26,
																				expr: &seqExpr{
																					pos: position{line: 398, col: 5, offset: 12261},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							run: (*parser).callonImageBlock28,
																						},
																						&labeledExpr{
																							pos:   position{line: 401, col: 5, offset: 12325},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 401, col: 14, offset: 12334},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 415, col: 25, offset: 12896},
																										run: (*parser).callonImageBlock31,
																										expr: &seqExpr{
																											pos: position{line: 415, col: 25, offset: 12896},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 415, col: 25, offset: 12896},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 415, col: 37, offset: 12908},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonImageBlock35,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 415, col: 56, offset: 12927},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 415, col: 62, offset: 12933},
																														expr: &actionExpr{
																															pos: position{line: 423, col: 17, offset: 13196},
																															run: (*parser).callonImageBlock42,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 17, offset: 13196},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 17, offset: 13196},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 21, offset: 13200},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					run: (*parser).callonImageBlock47,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 423, col: 28, offset: 13207},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 425, col: 9, offset: 13261},
																																					run: (*parser).callonImageBlock49,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 425, col: 9, offset: 13261},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 425, col: 9, offset: 13261},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 415, col: 78, offset: 12949},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 419, col: 25, offset: 13051},
																										run: (*parser).callonImageBlock53,
																										expr: &seqExpr{
																											pos: position{line: 419, col: 25, offset: 13051},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 419, col: 25, offset: 13051},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 38, offset: 13064},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonImageBlock57,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 57, offset: 13083},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 419, col: 63, offset: 13089},
																														expr: &actionExpr{
																															pos: position{line: 423, col: 17, offset: 13196},
																															run: (*parser).callonImageBlock64,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 17, offset: 13196},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 17, offset: 13196},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 21, offset: 13200},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					run: (*parser).callonImageBlock69,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 423, col: 28, offset: 13207},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 425, col: 9, offset: 13261},
																																					run: (*parser).callonImageBlock71,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 425, col: 9, offset: 13261},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 425, col: 9, offset: 13261},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 419, col: 79, offset: 13105},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 408, col: 31, offset: 12551},
																										run: (*parser).callonImageBlock75,
																										expr: &seqExpr{
																											pos: position{line: 408, col: 31, offset: 12551},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 408, col: 31, offset: 12551},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 408, col: 35, offset: 12555},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonImageBlock79,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 408, col: 54, offset: 12574},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1954, col: 5, offset: 67519},
																				run: (*parser).callonImageBlock85,
																				expr: &seqExpr{
																					pos: position{line: 1954, col: 5, offset: 67519},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 1954, col: 5, offset: 67519},
																							run: (*parser).callonImageBlock87,
																						},
																						&labeledExpr{
																							pos:   position{line: 1957, col: 5, offset: 67590},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 1959, col: 9, offset: 67688},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1959, col: 9, offset: 67688},
																										run: (*parser).callonImageBlock90,
																										expr: &choiceExpr{
																											pos: position{line: 487, col: 27, offset: 15054},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 487, col: 27, offset: 15054},
																													run: (*parser).callonImageBlock92,
																													expr: &seqExpr{
																														pos: position{line: 487, col: 27, offset: 15054},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 487, col: 27, offset: 15054},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 487, col: 32, offset: 15059},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2112, col: 7, offset: 72433},
																																	run: (*parser).callonImageBlock96,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2112, col: 7, offset: 72433},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2112, col: 7, offset: 72433},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 487, col: 40, offset: 15067},
																																expr: &choiceExpr{
																																	pos: position{line: 2124, col: 10, offset: 72709},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2124, col: 10, offset: 72709},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2124, col: 16, offset: 72715},
																																			run: (*parser).callonImageBlock102,
																																			expr: &litMatcher{
																																				pos:        position{line: 2124, col: 16, offset: 72715},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 487, col: 47, offset: 15074},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 487, col: 51, offset: 15078},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 497, col: 24, offset: 15491},
																																	expr: &choiceExpr{
																																		pos: position{line: 498, col: 5, offset: 15497},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 498, col: 6, offset: 15498},
																																				run: (*parser).callonImageBlock108,
																																				expr: &seqExpr{
																																					pos: position{line: 498, col: 6, offset: 15498},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 498, col: 6, offset: 15498},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 498, col: 14, offset: 15506},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 498, col: 14, offset: 15506},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 398, col: 5, offset: 12261},
																																				run: (*parser).callonImageBlock113,
																																				expr: &seqExpr{
																																					pos: position{line: 398, col: 5, offset: 12261},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 398, col: 5, offset: 12261},
																																							run: (*parser).callonImageBlock115,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 401, col: 5, offset: 12325},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 401, col: 14, offset: 12334},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 415, col: 25, offset: 12896},
																																										run: (*parser).callonImageBlock118,
																																										expr: &seqExpr{
																																											pos: position{line: 415, col: 25, offset: 12896},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 415, col: 25, offset: 12896},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 415, col: 37, offset: 12908},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonImageBlock122,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 415, col: 56, offset: 12927},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 415, col: 62, offset: 12933},
																																														expr: &actionExpr{
																																															pos: position{line: 423, col: 17, offset: 13196},
																																															run: (*parser).callonImageBlock129,
																																															expr: &seqExpr{
																																																pos: position{line: 423, col: 17, offset: 13196},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 423, col: 17, offset: 13196},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 423, col: 21, offset: 13200},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					run: (*parser).callonImageBlock134,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 423, col: 28, offset: 13207},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 425, col: 9, offset: 13261},
																																																					run: (*parser).callonImageBlock136,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 425, col: 9, offset: 13261},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 425, col: 9, offset: 13261},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 415, col: 78, offset: 12949},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 419, col: 25, offset: 13051},
																																										run: (*parser).callonImageBlock140,
																																										expr: &seqExpr{
																																											pos: position{line: 419, col: 25, offset: 13051},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 419, col: 25, offset: 13051},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 419, col: 38, offset: 13064},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonImageBlock144,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 419, col: 57, offset: 13083},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 419, col: 63, offset: 13089},
																																														expr: &actionExpr{
																																															pos: position{line: 423, col: 17, offset: 13196},
																																															run: (*parser).callonImageBlock151,
																																															expr: &seqExpr{
																																																pos: position{line: 423, col: 17, offset: 13196},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 423, col: 17, offset: 13196},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 423, col: 21, offset: 13200},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					run: (*parser).callonImageBlock156,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 423, col: 28, offset: 13207},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 425, col: 9, offset: 13261},
																																																					run: (*parser).callonImageBlock158,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 425, col: 9, offset: 13261},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 425, col: 9, offset: 13261},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 419, col: 79, offset: 13105},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 408, col: 31, offset: 12551},
																																										run: (*parser).callonImageBlock162,
																																										expr: &seqExpr{
																																											pos: position{line: 408, col: 31, offset: 12551},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 408, col: 31, offset: 12551},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 408, col: 35, offset: 12555},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonImageBlock166,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 408, col: 54, offset: 12574},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 502, col: 8, offset: 15730},
																																				run: (*parser).callonImageBlock172,
																																				expr: &litMatcher{
																																					pos:        position{line: 502, col: 8, offset: 15730},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 487, col: 79, offset: 15106},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 489, col: 9, offset: 15179},
																													run: (*parser).callonImageBlock175,
																													expr: &seqExpr{
																														pos: position{line: 489, col: 9, offset: 15179},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 489, col: 9, offset: 15179},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 489, col: 14, offset: 15184},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2112, col: 7, offset: 72433},
																																	run: (*parser).callonImageBlock179,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2112, col: 7, offset: 72433},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2112, col: 7, offset: 72433},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 489, col: 22, offset: 15192},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1962, col: 11, offset: 67792},
																										run: (*parser).callonImageBlock183,
																										expr: &charClassMatcher{
																											pos:        position{line: 1962, col: 12, offset: 67793},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2104, col: 7, offset: 72221},
																				run: (*parser).callonImageBlock185,
																				expr: &litMatcher{
																					pos:        position{line: 2104, col: 7, offset: 72221},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 692, col: 23, offset: 21691},
															run: (*parser).callonImageBlock187,
															expr: &seqExpr{
																pos: position{line: 692, col: 23, offset: 21691},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 51, offset: 21719},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 692, col: 56, offset: 21724},
																			run: (*parser).callonImageBlock191,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 692, col: 56, offset: 21724},
																				expr: &charClassMatcher{
																					pos:        position{line: 692, col: 56, offset: 21724},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 919, col: 31, offset: 29100},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 49, offset: 29118},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 919, col: 67, offset: 29136},
							expr: &choiceExpr{
								pos: position{line: 2124, col: 10, offset: 72709},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonImageBlock200,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 925, col: 1, offset: 29421},
			expr: &actionExpr{
				pos: position{line: 925, col: 16, offset: 29436},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 925, col: 16, offset: 29436},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 925, col: 16, offset: 29436},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 925, col: 25, offset: 29445},
							expr: &litMatcher{
								pos:        position{line: 925, col: 26, offset: 29446},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 30, offset: 29450},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2089, col: 13, offset: 71694},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 2089, col: 13, offset: 71694},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2089, col: 13, offset: 71694},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2089, col: 20, offset: 71701},
												expr: &choiceExpr{
													pos: position{line: 2110, col: 11, offset: 72369},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2110, col: 11, offset: 72369},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 23, offset: 72381},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 36, offset: 72394},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 47, offset: 72405},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 58, offset: 72416},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2089, col: 30, offset: 71711},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2089, col: 35, offset: 71716},
												expr: &choiceExpr{
													pos: position{line: 2089, col: 36, offset: 71717},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2097, col: 13, offset: 71981},
															run: (*parser).callonInlineImage20,
															expr: &labeledExpr{
																pos:   position{line: 2097, col: 13, offset: 71981},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2097, col: 22, offset: 71990},
																	expr: &choiceExpr{
																		pos: position{line: 2099, col: 5, offset: 72029},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2099, col: 5, offset: 72029},
																				run: (*parser).callonInlineImage24,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2099, col: 5, offset: 72029},
																					expr: &charClassMatcher{
																						pos:        position{line: 2099, col: 6, offset: 72030},
																						val:        "[^\\r\\n[]�{&<> ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 398, col: 5, offset: 12261},
																				run: (*parser).callonInlineImage27,
																				expr: &seqExpr{
																					pos: position{line: 398, col: 5, offset: 12261},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							run: (*parser).callonInlineImage29,
																						},
																						&labeledExpr{
																							pos:   position{line: 401, col: 5, offset: 12325},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 401, col: 14, offset: 12334},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 415, col: 25, offset: 12896},
																										run: (*parser).callonInlineImage32,
																										expr: &seqExpr{
																											pos: position{line: 415, col: 25, offset: 12896},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 415, col: 25, offset: 12896},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 415, col: 37, offset: 12908},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonInlineImage36,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 415, col: 56, offset: 12927},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 415, col: 62, offset: 12933},
																														expr: &actionExpr{
																															pos: position{line: 423, col: 17, offset: 13196},
																															run: (*parser).callonInlineImage43,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 17, offset: 13196},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 17, offset: 13196},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 21, offset: 13200},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					run: (*parser).callonInlineImage48,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 423, col: 28, offset: 13207},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 425, col: 9, offset: 13261},
																																					run: (*parser).callonInlineImage50,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 425, col: 9, offset: 13261},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 425, col: 9, offset: 13261},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 415, col: 78, offset: 12949},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 419, col: 25, offset: 13051},
																										run: (*parser).callonInlineImage54,
																										expr: &seqExpr{
																											pos: position{line: 419, col: 25, offset: 13051},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 419, col: 25, offset: 13051},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 38, offset: 13064},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonInlineImage58,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 57, offset: 13083},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 419, col: 63, offset: 13089},
																														expr: &actionExpr{
																															pos: position{line: 423, col: 17, offset: 13196},
																															run: (*parser).callonInlineImage65,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 17, offset: 13196},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 17, offset: 13196},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 21, offset: 13200},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					run: (*parser).callonInlineImage70,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 423, col: 28, offset: 13207},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 425, col: 9, offset: 13261},
																																					run: (*parser).callonInlineImage72,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 425, col: 9, offset: 13261},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 425, col: 9, offset: 13261},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 419, col: 79, offset: 13105},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 408, col: 31, offset: 12551},
																										run: (*parser).callonInlineImage76,
																										expr: &seqExpr{
																											pos: position{line: 408, col: 31, offset: 12551},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 408, col: 31, offset: 12551},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 408, col: 35, offset: 12555},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonInlineImage80,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 408, col: 54, offset: 12574},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1954, col: 5, offset: 67519},
																				run: (*parser).callonInlineImage86,
																				expr: &seqExpr{
																					pos: position{line: 1954, col: 5, offset: 67519},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 1954, col: 5, offset: 67519},
																							run: (*parser).callonInlineImage88,
																						},
																						&labeledExpr{
																							pos:   position{line: 1957, col: 5, offset: 67590},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 1959, col: 9, offset: 67688},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1959, col: 9, offset: 67688},
																										run: (*parser).callonInlineImage91,
																										expr: &choiceExpr{
																											pos: position{line: 487, col: 27, offset: 15054},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 487, col: 27, offset: 15054},
																													run: (*parser).callonInlineImage93,
																													expr: &seqExpr{
																														pos: position{line: 487, col: 27, offset: 15054},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 487, col: 27, offset: 15054},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 487, col: 32, offset: 15059},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2112, col: 7, offset: 72433},
																																	run: (*parser).callonInlineImage97,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2112, col: 7, offset: 72433},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2112, col: 7, offset: 72433},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 487, col: 40, offset: 15067},
																																expr: &choiceExpr{
																																	pos: position{line: 2124, col: 10, offset: 72709},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2124, col: 10, offset: 72709},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2124, col: 16, offset: 72715},
																																			run: (*parser).callonInlineImage103,
																																			expr: &litMatcher{
																																				pos:        position{line: 2124, col: 16, offset: 72715},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 487, col: 47, offset: 15074},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 487, col: 51, offset: 15078},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 497, col: 24, offset: 15491},
																																	expr: &choiceExpr{
																																		pos: position{line: 498, col: 5, offset: 15497},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 498, col: 6, offset: 15498},
																																				run: (*parser).callonInlineImage109,
																																				expr: &seqExpr{
																																					pos: position{line: 498, col: 6, offset: 15498},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 498, col: 6, offset: 15498},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 498, col: 14, offset: 15506},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 498, col: 14, offset: 15506},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 398, col: 5, offset: 12261},
																																				run: (*parser).callonInlineImage114,
																																				expr: &seqExpr{
																																					pos: position{line: 398, col: 5, offset: 12261},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 398, col: 5, offset: 12261},
																																							run: (*parser).callonInlineImage116,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 401, col: 5, offset: 12325},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 401, col: 14, offset: 12334},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 415, col: 25, offset: 12896},
																																										run: (*parser).callonInlineImage119,
																																										expr: &seqExpr{
																																											pos: position{line: 415, col: 25, offset: 12896},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 415, col: 25, offset: 12896},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 415, col: 37, offset: 12908},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonInlineImage123,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 415, col: 56, offset: 12927},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 415, col: 62, offset: 12933},
																																														expr: &actionExpr{
																																															pos: position{line: 423, col: 17, offset: 13196},
																																															run: (*parser).callonInlineImage130,
																																															expr: &seqExpr{
																																																pos: position{line: 423, col: 17, offset: 13196},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 423, col: 17, offset: 13196},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 423, col: 21, offset: 13200},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					run: (*parser).callonInlineImage135,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 423, col: 28, offset: 13207},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 425, col: 9, offset: 13261},
																																																					run: (*parser).callonInlineImage137,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 425, col: 9, offset: 13261},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 425, col: 9, offset: 13261},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 415, col: 78, offset: 12949},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 419, col: 25, offset: 13051},
																																										run: (*parser).callonInlineImage141,
																																										expr: &seqExpr{
																																											pos: position{line: 419, col: 25, offset: 13051},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 419, col: 25, offset: 13051},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 419, col: 38, offset: 13064},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonInlineImage145,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 419, col: 57, offset: 13083},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 419, col: 63, offset: 13089},
																																														expr: &actionExpr{
																																															pos: position{line: 423, col: 17, offset: 13196},
																																															run: (*parser).callonInlineImage152,
																																															expr: &seqExpr{
																																																pos: position{line: 423, col: 17, offset: 13196},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 423, col: 17, offset: 13196},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 423, col: 21, offset: 13200},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					run: (*parser).callonInlineImage157,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 423, col: 28, offset: 13207},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 425, col: 9, offset: 13261},
																																																					run: (*parser).callonInlineImage159,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 425, col: 9, offset: 13261},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 425, col: 9, offset: 13261},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 419, col: 79, offset: 13105},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 408, col: 31, offset: 12551},
																																										run: (*parser).callonInlineImage163,
																																										expr: &seqExpr{
																																											pos: position{line: 408, col: 31, offset: 12551},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 408, col: 31, offset: 12551},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 408, col: 35, offset: 12555},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonInlineImage167,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 408, col: 54, offset: 12574},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 502, col: 8, offset: 15730},
																																				run: (*parser).callonInlineImage173,
																																				expr: &litMatcher{
																																					pos:        position{line: 502, col: 8, offset: 15730},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 487, col: 79, offset: 15106},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 489, col: 9, offset: 15179},
																													run: (*parser).callonInlineImage176,
																													expr: &seqExpr{
																														pos: position{line: 489, col: 9, offset: 15179},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 489, col: 9, offset: 15179},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 489, col: 14, offset: 15184},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2112, col: 7, offset: 72433},
																																	run: (*parser).callonInlineImage180,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2112, col: 7, offset: 72433},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2112, col: 7, offset: 72433},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 489, col: 22, offset: 15192},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1962, col: 11, offset: 67792},
																										run: (*parser).callonInlineImage184,
																										expr: &charClassMatcher{
																											pos:        position{line: 1962, col: 12, offset: 67793},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2104, col: 7, offset: 72221},
																				run: (*parser).callonInlineImage186,
																				expr: &litMatcher{
																					pos:        position{line: 2104, col: 7, offset: 72221},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 692, col: 23, offset: 21691},
															run: (*parser).callonInlineImage188,
															expr: &seqExpr{
																pos: position{line: 692, col: 23, offset: 21691},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 51, offset: 21719},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 692, col: 56, offset: 21724},
																			run: (*parser).callonInlineImage192,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 692, col: 56, offset: 21724},
																				expr: &charClassMatcher{
																					pos:        position{line: 692, col: 56, offset: 21724},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 46, offset: 29466},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 64, offset: 29484},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 932, col: 1, offset: 29828},
			expr: &actionExpr{
				pos: position{line: 932, col: 15, offset: 29842},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 932, col: 15, offset: 29842},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 932, col: 15, offset: 29842},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 932, col: 23, offset: 29850},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 932, col: 29, offset: 29856},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 932, col: 29, offset: 29856},
									expr: &charClassMatcher{
										pos:        position{line: 932, col: 29, offset: 29856},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 73, offset: 29900},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 932, col: 85, offset: 29912},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 939, col: 1, offset: 30192},
			expr: &choiceExpr{
				pos: position{line: 939, col: 19, offset: 30210},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 939, col: 19, offset: 30210},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 939, col: 19, offset: 30210},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 939, col: 19, offset: 30210},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 939, col: 32, offset: 30223},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 41, offset: 30232},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 58, offset: 30249},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 9, offset: 30325},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 941, col: 9, offset: 30325},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 941, col: 9, offset: 30325},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 941, col: 21, offset: 30337},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 2053, col: 14, offset: 70404},
										run: (*parser).callonInlineFootnote12,
										expr: &oneOrMoreExpr{
											pos: position{line: 2053, col: 14, offset: 70404},
											expr: &charClassMatcher{
												pos:        position{line: 2053, col: 14, offset: 70404},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 39, offset: 30355},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 941, col: 43, offset: 30359},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 941, col: 51, offset: 30367},
										expr: &ruleRefExpr{
											pos:  position{line: 941, col: 52, offset: 30368},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 70, offset: 30386},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 947, col: 1, offset: 30481},
			expr: &actionExpr{
				pos: position{line: 947, col: 20, offset: 30500},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 947, col: 20, offset: 30500},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 947, col: 29, offset: 30509},
						expr: &seqExpr{
							pos: position{line: 947, col: 30, offset: 30510},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 947, col: 30, offset: 30510},
									expr: &litMatcher{
										pos:        position{line: 947, col: 31, offset: 30511},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 35, offset: 30515},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 979, col: 1, offset: 32118},
			expr: &choiceExpr{
				pos: position{line: 979, col: 21, offset: 32138},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 979, col: 21, offset: 32138},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 979, col: 21, offset: 32138},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 979, col: 21, offset: 32138},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 979, col: 30, offset: 32147},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 979, col: 38, offset: 32155},
										expr: &actionExpr{
											pos: position{line: 985, col: 30, offset: 32481},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 985, col: 30, offset: 32481},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 67, offset: 32184},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 9, offset: 32288},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 981, col: 9, offset: 32288},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 981, col: 9, offset: 32288},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 981, col: 19, offset: 32298},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 981, col: 27, offset: 32306},
										expr: &choiceExpr{
											pos: position{line: 981, col: 28, offset: 32307},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 981, col: 28, offset: 32307},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 985, col: 30, offset: 32481},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 985, col: 30, offset: 32481},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 981, col: 69, offset: 32348},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 992, col: 1, offset: 32651},
			expr: &choiceExpr{
				pos: position{line: 992, col: 9, offset: 32659},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 992, col: 9, offset: 32659},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 24, offset: 32674},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 995, col: 1, offset: 32755},
			expr: &actionExpr{
				pos: position{line: 995, col: 17, offset: 32771},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 995, col: 17, offset: 32771},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 995, col: 17, offset: 32771},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 995, col: 25, offset: 32779},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2089, col: 13, offset: 71694},
								run: (*parser).callonRelativeLink5,
								expr: &seqExpr{
									pos: position{line: 2089, col: 13, offset: 71694},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2089, col: 13, offset: 71694},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2089, col: 20, offset: 71701},
												expr: &choiceExpr{
													pos: position{line: 2110, col: 11, offset: 72369},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2110, col: 11, offset: 72369},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 23, offset: 72381},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 36, offset: 72394},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 47, offset: 72405},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2110, col: 58, offset: 72416},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2089, col: 30, offset: 71711},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2089, col: 35, offset: 71716},
												expr: &choiceExpr{
													pos: position{line: 2089, col: 36, offset: 71717},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2097, col: 13, offset: 71981},
															run: (*parser).callonRelativeLink18,
															expr: &labeledExpr{
																pos:   position{line: 2097, col: 13, offset: 71981},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2097, col: 22, offset: 71990},
																	expr: &choiceExpr{
																		pos: position{line: 2099, col: 5, offset: 72029},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2099, col: 5, offset: 72029},
																				run: (*parser).callonRelativeLink22,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2099, col: 5, offset: 72029},
																					expr: &charClassMatcher{
																						pos:        position{line: 2099, col: 6, offset: 72030},
																						val:        "[^\\r\\n[]�{&<> ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 398, col: 5, offset: 12261},
																				run: (*parser).callonRelativeLink25,
																				expr: &seqExpr{
																					pos: position{line: 398, col: 5, offset: 12261},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							run: (*parser).callonRelativeLink27,
																						},
																						&labeledExpr{
																							pos:   position{line: 401, col: 5, offset: 12325},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 401, col: 14, offset: 12334},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 415, col: 25, offset: 12896},
																										run: (*parser).callonRelativeLink30,
																										expr: &seqExpr{
																											pos: position{line: 415, col: 25, offset: 12896},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 415, col: 25, offset: 12896},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 415, col: 37, offset: 12908},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonRelativeLink34,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 415, col: 56, offset: 12927},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 415, col: 62, offset: 12933},
																														expr: &actionExpr{
																															pos: position{line: 423, col: 17, offset: 13196},
																															run: (*parser).callonRelativeLink41,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 17, offset: 13196},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 17, offset: 13196},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 21, offset: 13200},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					run: (*parser).callonRelativeLink46,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 423, col: 28, offset: 13207},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 425, col: 9, offset: 13261},
																																					run: (*parser).callonRelativeLink48,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 425, col: 9, offset: 13261},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 425, col: 9, offset: 13261},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 415, col: 78, offset: 12949},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 419, col: 25, offset: 13051},
																										run: (*parser).callonRelativeLink52,
																										expr: &seqExpr{
																											pos: position{line: 419, col: 25, offset: 13051},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 419, col: 25, offset: 13051},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 38, offset: 13064},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonRelativeLink56,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 57, offset: 13083},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 419, col: 63, offset: 13089},
																														expr: &actionExpr{
																															pos: position{line: 423, col: 17, offset: 13196},
																															run: (*parser).callonRelativeLink63,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 17, offset: 13196},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 17, offset: 13196},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 21, offset: 13200},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					run: (*parser).callonRelativeLink68,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 423, col: 28, offset: 13207},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 425, col: 9, offset: 13261},
																																					run: (*parser).callonRelativeLink70,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 425, col: 9, offset: 13261},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 425, col: 9, offset: 13261},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 419, col: 79, offset: 13105},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 408, col: 31, offset: 12551},
																										run: (*parser).callonRelativeLink74,
																										expr: &seqExpr{
																											pos: position{line: 408, col: 31, offset: 12551},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 408, col: 31, offset: 12551},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 408, col: 35, offset: 12555},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonRelativeLink78,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 408, col: 54, offset: 12574},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1954, col: 5, offset: 67519},
																				run: (*parser).callonRelativeLink84,
																				expr: &seqExpr{
																					pos: position{line: 1954, col: 5, offset: 67519},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 1954, col: 5, offset: 67519},
																							run: (*parser).callonRelativeLink86,
																						},
																						&labeledExpr{
																							pos:   position{line: 1957, col: 5, offset: 67590},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 1959, col: 9, offset: 67688},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1959, col: 9, offset: 67688},
																										run: (*parser).callonRelativeLink89,
																										expr: &choiceExpr{
																											pos: position{line: 487, col: 27, offset: 15054},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 487, col: 27, offset: 15054},
																													run: (*parser).callonRelativeLink91,
																													expr: &seqExpr{
																														pos: position{line: 487, col: 27, offset: 15054},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 487, col: 27, offset: 15054},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 487, col: 32, offset: 15059},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2112, col: 7, offset: 72433},
																																	run: (*parser).callonRelativeLink95,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2112, col: 7, offset: 72433},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2112, col: 7, offset: 72433},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 487, col: 40, offset: 15067},
																																expr: &choiceExpr{
																																	pos: position{line: 2124, col: 10, offset: 72709},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2124, col: 10, offset: 72709},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2124, col: 16, offset: 72715},
																																			run: (*parser).callonRelativeLink101,
																																			expr: &litMatcher{
																																				pos:        position{line: 2124, col: 16, offset: 72715},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 487, col: 47, offset: 15074},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 487, col: 51, offset: 15078},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 497, col: 24, offset: 15491},
																																	expr: &choiceExpr{
																																		pos: position{line: 498, col: 5, offset: 15497},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 498, col: 6, offset: 15498},
																																				run: (*parser).callonRelativeLink107,
																																				expr: &seqExpr{
																																					pos: position{line: 498, col: 6, offset: 15498},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 498, col: 6, offset: 15498},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 498, col: 14, offset: 15506},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 498, col: 14, offset: 15506},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 398, col: 5, offset: 12261},
																																				run: (*parser).callonRelativeLink112,
																																				expr: &seqExpr{
																																					pos: position{line: 398, col: 5, offset: 12261},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 398, col: 5, offset: 12261},
																																							run: (*parser).callonRelativeLink114,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 401, col: 5, offset: 12325},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 401, col: 14, offset: 12334},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 415, col: 25, offset: 12896},
																																										run: (*parser).callonRelativeLink117,
																																										expr: &seqExpr{
																																											pos: position{line: 415, col: 25, offset: 12896},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 415, col: 25, offset: 12896},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 415, col: 37, offset: 12908},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonRelativeLink121,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 415, col: 56, offset: 12927},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 415, col: 62, offset: 12933},
																																														expr: &actionExpr{
																																															pos: position{line: 423, col: 17, offset: 13196},
																																															run: (*parser).callonRelativeLink128,
																																															expr: &seqExpr{
																																																pos: position{line: 423, col: 17, offset: 13196},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 423, col: 17, offset: 13196},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 423, col: 21, offset: 13200},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					run: (*parser).callonRelativeLink133,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 423, col: 28, offset: 13207},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 425, col: 9, offset: 13261},
																																																					run: (*parser).callonRelativeLink135,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 425, col: 9, offset: 13261},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 425, col: 9, offset: 13261},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 415, col: 78, offset: 12949},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 419, col: 25, offset: 13051},
																																										run: (*parser).callonRelativeLink139,
																																										expr: &seqExpr{
																																											pos: position{line: 419, col: 25, offset: 13051},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 419, col: 25, offset: 13051},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 419, col: 38, offset: 13064},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonRelativeLink143,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 419, col: 57, offset: 13083},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 419, col: 63, offset: 13089},
																																														expr: &actionExpr{
																																															pos: position{line: 423, col: 17, offset: 13196},
																																															run: (*parser).callonRelativeLink150,
																																															expr: &seqExpr{
																																																pos: position{line: 423, col: 17, offset: 13196},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 423, col: 17, offset: 13196},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 423, col: 21, offset: 13200},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					run: (*parser).callonRelativeLink155,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 423, col: 28, offset: 13207},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 425, col: 9, offset: 13261},
																																																					run: (*parser).callonRelativeLink157,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 425, col: 9, offset: 13261},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 425, col: 9, offset: 13261},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 419, col: 79, offset: 13105},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 408, col: 31, offset: 12551},
																																										run: (*parser).callonRelativeLink161,
																																										expr: &seqExpr{
																																											pos: position{line: 408, col: 31, offset: 12551},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 408, col: 31, offset: 12551},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 408, col: 35, offset: 12555},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonRelativeLink165,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 408, col: 54, offset: 12574},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 502, col: 8, offset: 15730},
																																				run: (*parser).callonRelativeLink171,
																																				expr: &litMatcher{
																																					pos:        position{line: 502, col: 8, offset: 15730},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 487, col: 79, offset: 15106},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 489, col: 9, offset: 15179},
																													run: (*parser).callonRelativeLink174,
																													expr: &seqExpr{
																														pos: position{line: 489, col: 9, offset: 15179},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 489, col: 9, offset: 15179},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 489, col: 14, offset: 15184},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2112, col: 7, offset: 72433},
																																	run: (*parser).callonRelativeLink178,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2112, col: 7, offset: 72433},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2112, col: 7, offset: 72433},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 489, col: 22, offset: 15192},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1962, col: 11, offset: 67792},
																										run: (*parser).callonRelativeLink182,
																										expr: &charClassMatcher{
																											pos:        position{line: 1962, col: 12, offset: 67793},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2104, col: 7, offset: 72221},
																				run: (*parser).callonRelativeLink184,
																				expr: &litMatcher{
																					pos:        position{line: 2104, col: 7, offset: 72221},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 692, col: 23, offset: 21691},
															run: (*parser).callonRelativeLink186,
															expr: &seqExpr{
																pos: position{line: 692, col: 23, offset: 21691},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 51, offset: 21719},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 692, col: 56, offset: 21724},
																			run: (*parser).callonRelativeLink190,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 692, col: 56, offset: 21724},
																				expr: &charClassMatcher{
																					pos:        position{line: 692, col: 56, offset: 21724},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 995, col: 40, offset: 32794},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 58, offset: 32812},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 999, col: 1, offset: 32934},
			expr: &actionExpr{
				pos: position{line: 999, col: 17, offset: 32950},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 999, col: 17, offset: 32950},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 999, col: 17, offset: 32950},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2093, col: 23, offset: 71843},
								run: (*parser).callonExternalLink4,
								expr: &seqExpr{
									pos: position{line: 2093, col: 23, offset: 71843},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2093, col: 23, offset: 71843},
											label: "scheme",
											expr: &choiceExpr{
												pos: position{line: 2110, col: 11, offset: 72369},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2110, col: 11, offset: 72369},
														val:        "http://",
														ignoreCase: false,
														want:       "\"http://\"",
													},
													&litMatcher{
														pos:        position{line: 2110, col: 23, offset: 72381},
														val:        "https://",
														ignoreCase: false,
														want:       "\"https://\"",
													},
													&litMatcher{
														pos:        position{line: 2110, col: 36, offset: 72394},
														val:        "ftp://",
														ignoreCase: false,
														want:       "\"ftp://\"",
													},
													&litMatcher{
														pos:        position{line: 2110, col: 47, offset: 72405},
														val:        "irc://",
														ignoreCase: false,
														want:       "\"irc://\"",
													},
													&litMatcher{
														pos:        position{line: 2110, col: 58, offset: 72416},
														val:        "mailto:",
														ignoreCase: false,
														want:       "\"mailto:\"",
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2093, col: 39, offset: 71859},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2093, col: 44, offset: 71864},
												expr: &choiceExpr{
													pos: position{line: 2093, col: 45, offset: 71865},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2097, col: 13, offset: 71981},
															run: (*parser).callonExternalLink16,
															expr: &labeledExpr{
																pos:   position{line: 2097, col: 13, offset: 71981},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2097, col: 22, offset: 71990},
																	expr: &choiceExpr{
																		pos: position{line: 2099, col: 5, offset: 72029},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2099, col: 5, offset: 72029},
																				run: (*parser).callonExternalLink20,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2099, col: 5, offset: 72029},
																					expr: &charClassMatcher{
																						pos:        position{line: 2099, col: 6, offset: 72030},
																						val:        "[^\\r\\n[]�{&<> ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 398, col: 5, offset: 12261},
																				run: (*parser).callonExternalLink23,
																				expr: &seqExpr{
																					pos: position{line: 398, col: 5, offset: 12261},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							run: (*parser).callonExternalLink25,
																						},
																						&labeledExpr{
																							pos:   position{line: 401, col: 5, offset: 12325},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 401, col: 14, offset: 12334},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 415, col: 25, offset: 12896},
																										run: (*parser).callonExternalLink28,
																										expr: &seqExpr{
																											pos: position{line: 415, col: 25, offset: 12896},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 415, col: 25, offset: 12896},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 415, col: 37, offset: 12908},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonExternalLink32,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 415, col: 56, offset: 12927},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 415, col: 62, offset: 12933},
																														expr: &actionExpr{
																															pos: position{line: 423, col: 17, offset: 13196},
																															run: (*parser).callonExternalLink39,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 17, offset: 13196},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 17, offset: 13196},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 21, offset: 13200},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					run: (*parser).callonExternalLink44,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 423, col: 28, offset: 13207},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 425, col: 9, offset: 13261},
																																					run: (*parser).callonExternalLink46,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 425, col: 9, offset: 13261},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 425, col: 9, offset: 13261},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 415, col: 78, offset: 12949},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 419, col: 25, offset: 13051},
																										run: (*parser).callonExternalLink50,
																										expr: &seqExpr{
																											pos: position{line: 419, col: 25, offset: 13051},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 419, col: 25, offset: 13051},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 38, offset: 13064},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonExternalLink54,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 57, offset: 13083},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 419, col: 63, offset: 13089},
																														expr: &actionExpr{
																															pos: position{line: 423, col: 17, offset: 13196},
																															run: (*parser).callonExternalLink61,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 17, offset: 13196},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 17, offset: 13196},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 21, offset: 13200},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 423, col: 28, offset: 13207},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					run: (*parser).callonExternalLink66,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 423, col: 28, offset: 13207},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 425, col: 9, offset: 13261},
																																					run: (*parser).callonExternalLink68,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 425, col: 9, offset: 13261},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 425, col: 9, offset: 13261},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 419, col: 79, offset: 13105},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 408, col: 31, offset: 12551},
																										run: (*parser).callonExternalLink72,
																										expr: &seqExpr{
																											pos: position{line: 408, col: 31, offset: 12551},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 408, col: 31, offset: 12551},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 408, col: 35, offset: 12555},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 98, col: 18, offset: 2832},
																														run: (*parser).callonExternalLink76,
																														expr: &seqExpr{
																															pos: position{line: 98, col: 18, offset: 2832},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 98, col: 18, offset: 2832},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 98, col: 28, offset: 2842},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 98, col: 29, offset: 2843},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 408, col: 54, offset: 12574},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1954, col: 5, offset: 67519},
																				run: (*parser).callonExternalLink82,
																				expr: &seqExpr{
																					pos: position{line: 1954, col: 5, offset: 67519},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 1954, col: 5, offset: 67519},
																							run: (*parser).callonExternalLink84,
																						},
																						&labeledExpr{
																							pos:   position{line: 1957, col: 5, offset: 67590},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 1959, col: 9, offset: 67688},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1959, col: 9, offset: 67688},
																										run: (*parser).callonExternalLink87,
																										expr: &choiceExpr{
																											pos: position{line: 487, col: 27, offset: 15054},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 487, col: 27, offset: 15054},
																													run: (*parser).callonExternalLink89,
																													expr: &seqExpr{
																														pos: position{line: 487, col: 27, offset: 15054},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 487, col: 27, offset: 15054},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 487, col: 32, offset: 15059},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2112, col: 7, offset: 72433},
																																	run: (*parser).callonExternalLink93,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2112, col: 7, offset: 72433},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2112, col: 7, offset: 72433},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 487, col: 40, offset: 15067},
																																expr: &choiceExpr{
																																	pos: position{line: 2124, col: 10, offset: 72709},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2124, col: 10, offset: 72709},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2124, col: 16, offset: 72715},
																																			run: (*parser).callonExternalLink99,
																																			expr: &litMatcher{
																																				pos:        position{line: 2124, col: 16, offset: 72715},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 487, col: 47, offset: 15074},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 487, col: 51, offset: 15078},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 497, col: 24, offset: 15491},
																																	expr: &choiceExpr{
																																		pos: position{line: 498, col: 5, offset: 15497},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 498, col: 6, offset: 15498},
																																				run: (*parser).callonExternalLink105,
																																				expr: &seqExpr{
																																					pos: position{line: 498, col: 6, offset: 15498},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 498, col: 6, offset: 15498},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 498, col: 14, offset: 15506},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 498, col: 14, offset: 15506},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 398, col: 5, offset: 12261},
																																				run: (*parser).callonExternalLink110,
																																				expr: &seqExpr{
																																					pos: position{line: 398, col: 5, offset: 12261},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 398, col: 5, offset: 12261},
																																							run: (*parser).callonExternalLink112,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 401, col: 5, offset: 12325},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 401, col: 14, offset: 12334},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 415, col: 25, offset: 12896},
																																										run: (*parser).callonExternalLink115,
																																										expr: &seqExpr{
																																											pos: position{line: 415, col: 25, offset: 12896},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 415, col: 25, offset: 12896},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 415, col: 37, offset: 12908},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonExternalLink119,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 415, col: 56, offset: 12927},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 415, col: 62, offset: 12933},
																																														expr: &actionExpr{
																																															pos: position{line: 423, col: 17, offset: 13196},
																																															run: (*parser).callonExternalLink126,
																																															expr: &seqExpr{
																																																pos: position{line: 423, col: 17, offset: 13196},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 423, col: 17, offset: 13196},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 423, col: 21, offset: 13200},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					run: (*parser).callonExternalLink131,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 423, col: 28, offset: 13207},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 425, col: 9, offset: 13261},
																																																					run: (*parser).callonExternalLink133,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 425, col: 9, offset: 13261},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 425, col: 9, offset: 13261},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 415, col: 78, offset: 12949},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 419, col: 25, offset: 13051},
																																										run: (*parser).callonExternalLink137,
																																										expr: &seqExpr{
																																											pos: position{line: 419, col: 25, offset: 13051},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 419, col: 25, offset: 13051},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 419, col: 38, offset: 13064},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonExternalLink141,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 419, col: 57, offset: 13083},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 419, col: 63, offset: 13089},
																																														expr: &actionExpr{
																																															pos: position{line: 423, col: 17, offset: 13196},
																																															run: (*parser).callonExternalLink148,
																																															expr: &seqExpr{
																																																pos: position{line: 423, col: 17, offset: 13196},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 423, col: 17, offset: 13196},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 423, col: 21, offset: 13200},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 423, col: 28, offset: 13207},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 423, col: 28, offset: 13207},
																																																					run: (*parser).callonExternalLink153,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 423, col: 28, offset: 13207},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 425, col: 9, offset: 13261},
																																																					run: (*parser).callonExternalLink155,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 425, col: 9, offset: 13261},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 425, col: 9, offset: 13261},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 419, col: 79, offset: 13105},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 408, col: 31, offset: 12551},
																																										run: (*parser).callonExternalLink159,
																																										expr: &seqExpr{
																																											pos: position{line: 408, col: 31, offset: 12551},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 408, col: 31, offset: 12551},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 408, col: 35, offset: 12555},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 98, col: 18, offset: 2832},
																																														run: (*parser).callonExternalLink163,
																																														expr: &seqExpr{
																																															pos: position{line: 98, col: 18, offset: 2832},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 98, col: 18, offset: 2832},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 98, col: 28, offset: 2842},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 98, col: 29, offset: 2843},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 408, col: 54, offset: 12574},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 502, col: 8, offset: 15730},
																																				run: (*parser).callonExternalLink169,
																																				expr: &litMatcher{
																																					pos:        position{line: 502, col: 8, offset: 15730},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 487, col: 79, offset: 15106},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 489, col: 9, offset: 15179},
																													run: (*parser).callonExternalLink172,
																													expr: &seqExpr{
																														pos: position{line: 489, col: 9, offset: 15179},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 489, col: 9, offset: 15179},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 489, col: 14, offset: 15184},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2112, col: 7, offset: 72433},
																																	run: (*parser).callonExternalLink176,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2112, col: 7, offset: 72433},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2112, col: 7, offset: 72433},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 489, col: 22, offset: 15192},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1962, col: 11, offset: 67792},
																										run: (*parser).callonExternalLink180,
																										expr: &charClassMatcher{
																											pos:        position{line: 1962, col: 12, offset: 67793},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2104, col: 7, offset: 72221},
																				run: (*parser).callonExternalLink182,
																				expr: &litMatcher{
																					pos:        position{line: 2104, col: 7, offset: 72221},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 692, col: 23, offset: 21691},
															run: (*parser).callonExternalLink184,
															expr: &seqExpr{
																pos: position{line: 692, col: 23, offset: 21691},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 51, offset: 21719},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 692, col: 56, offset: 21724},
																			run: (*parser).callonExternalLink188,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 692, col: 56, offset: 21724},
																				expr: &charClassMatcher{
																					pos:        position{line: 692, col: 56, offset: 21724},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 691, col: 32, offset: 21660},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 999, col: 42, offset: 32975},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 999, col: 59, offset: 32992},
								expr: &ruleRefExpr{
									pos:  position{line: 999, col: 60, offset: 32993},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1153, col: 1, offset: 38283},
			expr: &actionExpr{
				pos: position{line: 1155, col: 5, offset: 38361},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 5, offset: 38361},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1155, col: 5, offset: 38361},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1158, col: 5, offset: 38423},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1158, col: 9, offset: 38427},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1158, col: 14, offset: 38432},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1158, col: 14, offset: 38432},
									expr: &charClassMatcher{
										pos:        position{line: 1158, col: 14, offset: 38432},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1158, col: 62, offset: 38480},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1158, col: 66, offset: 38484},
							expr: &choiceExpr{
								pos: position{line: 2124, col: 10, offset: 72709},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonCallout13,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1158, col: 73, offset: 38491},
							expr: &choiceExpr{
								pos: position{line: 1158, col: 75, offset: 38493},
								alternatives: []interface{}{
									&notExpr{
										pos: position{line: 2132, col: 8, offset: 72882},
										expr: &anyMatcher{
											line: 2132, col: 9, offset: 72883,
										},
									},
									&litMatcher{
										pos:        position{line: 2128, col: 12, offset: 72775},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2128, col: 19, offset: 72782},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2128, col: 28, offset: 72791},
										run: (*parser).callonCallout21,
										expr: &litMatcher{
											pos:        position{line: 2128, col: 28, offset: 72791},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1158, col: 81, offset: 38499},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1187, col: 1, offset: 39422},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 5, offset: 39441},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1189, col: 9, offset: 39451},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1189, col: 9, offset: 39451},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1189, col: 9, offset: 39451},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1189, col: 20, offset: 39462},
										expr: &ruleRefExpr{
											pos:  position{line: 1189, col: 21, offset: 39463},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 9, offset: 39589},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1190, col: 15, offset: 39595},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1190, col: 15, offset: 39595},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1190, col: 41, offset: 39621},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 7, offset: 39740},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1200, col: 1, offset: 39905},
			expr: &choiceExpr{
				pos: position{line: 1201, col: 5, offset: 39935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1201, col: 5, offset: 39935},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 7, offset: 39962},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 7, offset: 39990},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 7, offset: 40018},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 7, offset: 40050},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 7, offset: 40071},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1208, col: 1, offset: 40089},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 5, offset: 40121},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1209, col: 5, offset: 40121},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 7, offset: 40147},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 7, offset: 40175},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 7, offset: 40203},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1214, col: 1, offset: 40229},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 40310},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 40310},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1215, col: 5, offset: 40310},
							expr: &litMatcher{
								pos:        position{line: 1215, col: 7, offset: 40312},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 5, offset: 40321},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1217, col: 9, offset: 40339},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1217, col: 9, offset: 40339},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1218, col: 11, offset: 40366},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1219, col: 11, offset: 40394},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1220, col: 11, offset: 40422},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1221, col: 11, offset: 40454},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1222, col: 11, offset: 40486},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1243, col: 1, offset: 40946},
			expr: &choiceExpr{
				pos: position{line: 1243, col: 13, offset: 40958},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1243, col: 13, offset: 40958},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 35, offset: 40980},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1245, col: 1, offset: 41047},
			expr: &actionExpr{
				pos: position{line: 1245, col: 24, offset: 41070},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 24, offset: 41070},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1245, col: 24, offset: 41070},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1245, col: 29, offset: 41075},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1245, col: 39, offset: 41085},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1245, col: 68, offset: 41114},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1249, col: 1, offset: 41213},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1249, col: 32, offset: 41244},
				expr: &ruleRefExpr{
					pos:  position{line: 1249, col: 32, offset: 41244},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1251, col: 1, offset: 41275},
			expr: &actionExpr{
				pos: position{line: 1251, col: 31, offset: 41305},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1251, col: 31, offset: 41305},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1251, col: 31, offset: 41305},
							expr: &litMatcher{
								pos:        position{line: 1251, col: 33, offset: 41307},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 39, offset: 41313},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1251, col: 48, offset: 41322},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2061, col: 5, offset: 70785},
										run: (*parser).callonDoubleQuoteBoldTextElement7,
										expr: &seqExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2061, col: 5, offset: 70785},
													expr: &charClassMatcher{
														pos:        position{line: 2061, col: 5, offset: 70785},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2061, col: 15, offset: 70795},
													expr: &choiceExpr{
														pos: position{line: 2061, col: 17, offset: 70797},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2061, col: 17, offset: 70797},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2132, col: 8, offset: 72882},
																expr: &anyMatcher{
																	line: 2132, col: 9, offset: 72883,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2063, col: 9, offset: 70879},
										run: (*parser).callonDoubleQuoteBoldTextElement16,
										expr: &seqExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2063, col: 9, offset: 70879},
													expr: &charClassMatcher{
														pos:        position{line: 2063, col: 9, offset: 70879},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2063, col: 19, offset: 70889},
													expr: &seqExpr{
														pos: position{line: 2063, col: 20, offset: 70890},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2063, col: 20, offset: 70890},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2063, col: 27, offset: 70897},
																expr: &charClassMatcher{
																	pos:        position{line: 2063, col: 27, offset: 70897},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonDoubleQuoteBoldTextElement26,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
									&seqExpr{
										pos: position{line: 1253, col: 7, offset: 41378},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2128, col: 12, offset: 72775},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2128, col: 12, offset: 72775},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2128, col: 19, offset: 72782},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2128, col: 28, offset: 72791},
														run: (*parser).callonDoubleQuoteBoldTextElement32,
														expr: &litMatcher{
															pos:        position{line: 2128, col: 28, offset: 72791},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1253, col: 15, offset: 41386},
												expr: &choiceExpr{
													pos: position{line: 2128, col: 12, offset: 72775},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2128, col: 12, offset: 72775},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2128, col: 19, offset: 72782},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2128, col: 28, offset: 72791},
															run: (*parser).callonDoubleQuoteBoldTextElement38,
															expr: &litMatcher{
																pos:        position{line: 2128, col: 28, offset: 72791},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 398, col: 5, offset: 12261},
										run: (*parser).callonDoubleQuoteBoldTextElement40,
										expr: &seqExpr{
											pos: position{line: 398, col: 5, offset: 12261},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 398, col: 5, offset: 12261},
													run: (*parser).callonDoubleQuoteBoldTextElement42,
												},
												&labeledExpr{
													pos:   position{line: 401, col: 5, offset: 12325},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 401, col: 14, offset: 12334},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 415, col: 25, offset: 12896},
																run: (*parser).callonDoubleQuoteBoldTextElement45,
																expr: &seqExpr{
																	pos: position{line: 415, col: 25, offset: 12896},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 415, col: 25, offset: 12896},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 415, col: 37, offset: 12908},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonDoubleQuoteBoldTextElement49,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 415, col: 56, offset: 12927},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 415, col: 62, offset: 12933},
																				expr: &actionExpr{
																					pos: position{line: 423, col: 17, offset: 13196},
																					run: (*parser).callonDoubleQuoteBoldTextElement56,
																					expr: &seqExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 423, col: 17, offset: 13196},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 423, col: 21, offset: 13200},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 423, col: 28, offset: 13207},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											run: (*parser).callonDoubleQuoteBoldTextElement61,
																											expr: &charClassMatcher{
																												pos:        position{line: 423, col: 28, offset: 13207},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 425, col: 9, offset: 13261},
																											run: (*parser).callonDoubleQuoteBoldTextElement63,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												expr: &charClassMatcher{
																													pos:        position{line: 425, col: 9, offset: 13261},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 415, col: 78, offset: 12949},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 419, col: 25, offset: 13051},
																run: (*parser).callonDoubleQuoteBoldTextElement67,
																expr: &seqExpr{
																	pos: position{line: 419, col: 25, offset: 13051},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 419, col: 25, offset: 13051},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 419, col: 38, offset: 13064},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonDoubleQuoteBoldTextElement71,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 419, col: 57, offset: 13083},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 419, col: 63, offset: 13089},
																				expr: &actionExpr{
																					pos: position{line: 423, col: 17, offset: 13196},
																					run: (*parser).callonDoubleQuoteBoldTextElement78,
																					expr: &seqExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 423, col: 17, offset: 13196},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 423, col: 21, offset: 13200},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 423, col: 28, offset: 13207},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											run: (*parser).callonDoubleQuoteBoldTextElement83,
																											expr: &charClassMatcher{
																												pos:        position{line: 423, col: 28, offset: 13207},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 425, col: 9, offset: 13261},
																											run: (*parser).callonDoubleQuoteBoldTextElement85,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												expr: &charClassMatcher{
																													pos:        position{line: 425, col: 9, offset: 13261},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 419, col: 79, offset: 13105},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 408, col: 31, offset: 12551},
																run: (*parser).callonDoubleQuoteBoldTextElement89,
																expr: &seqExpr{
																	pos: position{line: 408, col: 31, offset: 12551},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 408, col: 31, offset: 12551},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 408, col: 35, offset: 12555},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonDoubleQuoteBoldTextElement93,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 408, col: 54, offset: 12574},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1954, col: 5, offset: 67519},
										run: (*parser).callonDoubleQuoteBoldTextElement99,
										expr: &seqExpr{
											pos: position{line: 1954, col: 5, offset: 67519},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1954, col: 5, offset: 67519},
													run: (*parser).callonDoubleQuoteBoldTextElement101,
												},
												&labeledExpr{
													pos:   position{line: 1957, col: 5, offset: 67590},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1959, col: 9, offset: 67688},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1959, col: 9, offset: 67688},
																run: (*parser).callonDoubleQuoteBoldTextElement104,
																expr: &choiceExpr{
																	pos: position{line: 487, col: 27, offset: 15054},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 487, col: 27, offset: 15054},
																			run: (*parser).callonDoubleQuoteBoldTextElement106,
																			expr: &seqExpr{
																				pos: position{line: 487, col: 27, offset: 15054},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 487, col: 27, offset: 15054},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 487, col: 32, offset: 15059},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							run: (*parser).callonDoubleQuoteBoldTextElement110,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								expr: &charClassMatcher{
																									pos:        position{line: 2112, col: 7, offset: 72433},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 487, col: 40, offset: 15067},
																						expr: &choiceExpr{
																							pos: position{line: 2124, col: 10, offset: 72709},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2124, col: 10, offset: 72709},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2124, col: 16, offset: 72715},
																									run: (*parser).callonDoubleQuoteBoldTextElement116,
																									expr: &litMatcher{
																										pos:        position{line: 2124, col: 16, offset: 72715},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 487, col: 47, offset: 15074},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 487, col: 51, offset: 15078},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 497, col: 24, offset: 15491},
																							expr: &choiceExpr{
																								pos: position{line: 498, col: 5, offset: 15497},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 498, col: 6, offset: 15498},
																										run: (*parser).callonDoubleQuoteBoldTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 498, col: 6, offset: 15498},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 498, col: 6, offset: 15498},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 498, col: 14, offset: 15506},
																													expr: &charClassMatcher{
																														pos:        position{line: 498, col: 14, offset: 15506},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 398, col: 5, offset: 12261},
																										run: (*parser).callonDoubleQuoteBoldTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 398, col: 5, offset: 12261},
																													run: (*parser).callonDoubleQuoteBoldTextElement129,
																												},
																												&labeledExpr{
																													pos:   position{line: 401, col: 5, offset: 12325},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 401, col: 14, offset: 12334},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 415, col: 25, offset: 12896},
																																run: (*parser).callonDoubleQuoteBoldTextElement132,
																																expr: &seqExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 415, col: 25, offset: 12896},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 37, offset: 12908},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonDoubleQuoteBoldTextElement136,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 56, offset: 12927},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 415, col: 62, offset: 12933},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonDoubleQuoteBoldTextElement143,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonDoubleQuoteBoldTextElement148,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonDoubleQuoteBoldTextElement150,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 415, col: 78, offset: 12949},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 419, col: 25, offset: 13051},
																																run: (*parser).callonDoubleQuoteBoldTextElement154,
																																expr: &seqExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 419, col: 25, offset: 13051},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 38, offset: 13064},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonDoubleQuoteBoldTextElement158,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 57, offset: 13083},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 419, col: 63, offset: 13089},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonDoubleQuoteBoldTextElement165,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonDoubleQuoteBoldTextElement170,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonDoubleQuoteBoldTextElement172,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 419, col: 79, offset: 13105},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 408, col: 31, offset: 12551},
																																run: (*parser).callonDoubleQuoteBoldTextElement176,
																																expr: &seqExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 408, col: 31, offset: 12551},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 408, col: 35, offset: 12555},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonDoubleQuoteBoldTextElement180,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 408, col: 54, offset: 12574},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 502, col: 8, offset: 15730},
																										run: (*parser).callonDoubleQuoteBoldTextElement186,
																										expr: &litMatcher{
																											pos:        position{line: 502, col: 8, offset: 15730},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 487, col: 79, offset: 15106},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 489, col: 9, offset: 15179},
																			run: (*parser).callonDoubleQuoteBoldTextElement189,
																			expr: &seqExpr{
																				pos: position{line: 489, col: 9, offset: 15179},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 489, col: 9, offset: 15179},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 489, col: 14, offset: 15184},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							run: (*parser).callonDoubleQuoteBoldTextElement193,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								expr: &charClassMatcher{
																									pos:        position{line: 2112, col: 7, offset: 72433},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 489, col: 22, offset: 15192},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1962, col: 11, offset: 67792},
																run: (*parser).callonDoubleQuoteBoldTextElement197,
																expr: &charClassMatcher{
																	pos:        position{line: 1962, col: 12, offset: 67793},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1256, col: 7, offset: 41452},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1257, col: 7, offset: 41470},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1258, col: 7, offset: 41489},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&actionExpr{
										pos: position{line: 692, col: 23, offset: 21691},
										run: (*parser).callonDoubleQuoteBoldTextElement202,
										expr: &seqExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 691, col: 32, offset: 21660},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 692, col: 51, offset: 21719},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 692, col: 56, offset: 21724},
														run: (*parser).callonDoubleQuoteBoldTextElement206,
														expr: &oneOrMoreExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															expr: &charClassMatcher{
																pos:        position{line: 692, col: 56, offset: 21724},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 691, col: 32, offset: 21660},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1276, col: 5, offset: 41976},
										val:        "[^\\r\\n*]",
										chars:      []rune{'\r', '\n', '*'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1277, col: 7, offset: 42073},
										run: (*parser).callonDoubleQuoteBoldTextElement211,
										expr: &seqExpr{
											pos: position{line: 1277, col: 7, offset: 42073},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1277, col: 7, offset: 42073},
													val:        "**",
													ignoreCase: false,
													want:       "\"**\"",
												},
												&actionExpr{
													pos: position{line: 2053, col: 14, offset: 70404},
													run: (*parser).callonDoubleQuoteBoldTextElement214,
													expr: &oneOrMoreExpr{
														pos: position{line: 2053, col: 14, offset: 70404},
														expr: &charClassMatcher{
															pos:        position{line: 2053, col: 14, offset: 70404},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1264, col: 1, offset: 41627},
			expr: &actionExpr{
				pos: position{line: 1265, col: 5, offset: 41667},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 5, offset: 41667},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1265, col: 5, offset: 41667},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1265, col: 16, offset: 41678},
								expr: &ruleRefExpr{
									pos:  position{line: 1265, col: 17, offset: 41679},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 5, offset: 41705},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1266, col: 11, offset: 41711},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1266, col: 11, offset: 41711},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1267, col: 11, offset: 41741},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1268, col: 11, offset: 41762},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1269, col: 11, offset: 41783},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1270, col: 11, offset: 41807},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1271, col: 11, offset: 41831},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1281, col: 1, offset: 42249},
			expr: &choiceExpr{
				pos: position{line: 1282, col: 5, offset: 42277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1282, col: 5, offset: 42277},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1282, col: 5, offset: 42277},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1282, col: 6, offset: 42278},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&notExpr{
									pos: position{line: 1282, col: 10, offset: 42282},
									expr: &litMatcher{
										pos:        position{line: 1282, col: 11, offset: 42283},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1282, col: 16, offset: 42288},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1282, col: 26, offset: 42298},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1282, col: 55, offset: 42327},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1282, col: 59, offset: 42331},
									expr: &notExpr{
										pos: position{line: 1282, col: 61, offset: 42333},
										expr: &charClassMatcher{
											pos:        position{line: 2049, col: 13, offset: 70330},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1284, col: 9, offset: 42540},
						run: (*parser).callonSingleQuoteBoldText13,
						expr: &seqExpr{
							pos: position{line: 1284, col: 9, offset: 42540},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1284, col: 9, offset: 42540},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1284, col: 13, offset: 42544},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1284, col: 23, offset: 42554},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1284, col: 23, offset: 42554},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1284, col: 27, offset: 42558},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1284, col: 56, offset: 42587},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1288, col: 1, offset: 42805},
			expr: &seqExpr{
				pos: position{line: 1288, col: 32, offset: 42836},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1288, col: 32, offset: 42836},
						expr: &choiceExpr{
							pos: position{line: 2124, col: 10, offset: 72709},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2124, col: 10, offset: 72709},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2124, col: 16, offset: 72715},
									run: (*parser).callonSingleQuoteBoldTextElements5,
									expr: &litMatcher{
										pos:        position{line: 2124, col: 16, offset: 72715},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1288, col: 39, offset: 42843},
						expr: &ruleRefExpr{
							pos:  position{line: 1288, col: 39, offset: 42843},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1290, col: 1, offset: 42872},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 5, offset: 42907},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2061, col: 5, offset: 70785},
						run: (*parser).callonSingleQuoteBoldTextElement2,
						expr: &seqExpr{
							pos: position{line: 2061, col: 5, offset: 70785},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2061, col: 5, offset: 70785},
									expr: &charClassMatcher{
										pos:        position{line: 2061, col: 5, offset: 70785},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2061, col: 15, offset: 70795},
									expr: &choiceExpr{
										pos: position{line: 2061, col: 17, offset: 70797},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2061, col: 17, offset: 70797},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2132, col: 8, offset: 72882},
												expr: &anyMatcher{
													line: 2132, col: 9, offset: 72883,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2063, col: 9, offset: 70879},
						run: (*parser).callonSingleQuoteBoldTextElement11,
						expr: &seqExpr{
							pos: position{line: 2063, col: 9, offset: 70879},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 9, offset: 70879},
									expr: &charClassMatcher{
										pos:        position{line: 2063, col: 9, offset: 70879},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 19, offset: 70889},
									expr: &seqExpr{
										pos: position{line: 2063, col: 20, offset: 70890},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2063, col: 20, offset: 70890},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2063, col: 27, offset: 70897},
												expr: &charClassMatcher{
													pos:        position{line: 2063, col: 27, offset: 70897},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1292, col: 7, offset: 42918},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2128, col: 12, offset: 72775},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2128, col: 12, offset: 72775},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2128, col: 19, offset: 72782},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2128, col: 28, offset: 72791},
										run: (*parser).callonSingleQuoteBoldTextElement24,
										expr: &litMatcher{
											pos:        position{line: 2128, col: 28, offset: 72791},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1292, col: 15, offset: 42926},
								expr: &choiceExpr{
									pos: position{line: 2128, col: 12, offset: 72775},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2128, col: 12, offset: 72775},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2128, col: 19, offset: 72782},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2128, col: 28, offset: 72791},
											run: (*parser).callonSingleQuoteBoldTextElement30,
											expr: &litMatcher{
												pos:        position{line: 2128, col: 28, offset: 72791},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 12261},
						run: (*parser).callonSingleQuoteBoldTextElement32,
						expr: &seqExpr{
							pos: position{line: 398, col: 5, offset: 12261},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 398, col: 5, offset: 12261},
									run: (*parser).callonSingleQuoteBoldTextElement34,
								},
								&labeledExpr{
									pos:   position{line: 401, col: 5, offset: 12325},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 401, col: 14, offset: 12334},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 415, col: 25, offset: 12896},
												run: (*parser).callonSingleQuoteBoldTextElement37,
												expr: &seqExpr{
													pos: position{line: 415, col: 25, offset: 12896},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 415, col: 25, offset: 12896},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 415, col: 37, offset: 12908},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteBoldTextElement41,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 415, col: 56, offset: 12927},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 415, col: 62, offset: 12933},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonSingleQuoteBoldTextElement48,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonSingleQuoteBoldTextElement53,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonSingleQuoteBoldTextElement55,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 415, col: 78, offset: 12949},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 419, col: 25, offset: 13051},
												run: (*parser).callonSingleQuoteBoldTextElement59,
												expr: &seqExpr{
													pos: position{line: 419, col: 25, offset: 13051},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 419, col: 25, offset: 13051},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 419, col: 38, offset: 13064},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteBoldTextElement63,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 419, col: 57, offset: 13083},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 419, col: 63, offset: 13089},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonSingleQuoteBoldTextElement70,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonSingleQuoteBoldTextElement75,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonSingleQuoteBoldTextElement77,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 419, col: 79, offset: 13105},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 408, col: 31, offset: 12551},
												run: (*parser).callonSingleQuoteBoldTextElement81,
												expr: &seqExpr{
													pos: position{line: 408, col: 31, offset: 12551},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 408, col: 31, offset: 12551},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 408, col: 35, offset: 12555},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteBoldTextElement85,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 408, col: 54, offset: 12574},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1954, col: 5, offset: 67519},
						run: (*parser).callonSingleQuoteBoldTextElement91,
						expr: &seqExpr{
							pos: position{line: 1954, col: 5, offset: 67519},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1954, col: 5, offset: 67519},
									run: (*parser).callonSingleQuoteBoldTextElement93,
								},
								&labeledExpr{
									pos:   position{line: 1957, col: 5, offset: 67590},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 1959, col: 9, offset: 67688},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1959, col: 9, offset: 67688},
												run: (*parser).callonSingleQuoteBoldTextElement96,
												expr: &choiceExpr{
													pos: position{line: 487, col: 27, offset: 15054},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 487, col: 27, offset: 15054},
															run: (*parser).callonSingleQuoteBoldTextElement98,
															expr: &seqExpr{
																pos: position{line: 487, col: 27, offset: 15054},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 487, col: 27, offset: 15054},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 32, offset: 15059},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonSingleQuoteBoldTextElement102,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 487, col: 40, offset: 15067},
																		expr: &choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonSingleQuoteBoldTextElement108,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 47, offset: 15074},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 51, offset: 15078},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 497, col: 24, offset: 15491},
																			expr: &choiceExpr{
																				pos: position{line: 498, col: 5, offset: 15497},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 498, col: 6, offset: 15498},
																						run: (*parser).callonSingleQuoteBoldTextElement114,
																						expr: &seqExpr{
																							pos: position{line: 498, col: 6, offset: 15498},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 498, col: 6, offset: 15498},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 498, col: 14, offset: 15506},
																									expr: &charClassMatcher{
																										pos:        position{line: 498, col: 14, offset: 15506},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 398, col: 5, offset: 12261},
																						run: (*parser).callonSingleQuoteBoldTextElement119,
																						expr: &seqExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 398, col: 5, offset: 12261},
																									run: (*parser).callonSingleQuoteBoldTextElement121,
																								},
																								&labeledExpr{
																									pos:   position{line: 401, col: 5, offset: 12325},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 401, col: 14, offset: 12334},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 415, col: 25, offset: 12896},
																												run: (*parser).callonSingleQuoteBoldTextElement124,
																												expr: &seqExpr{
																													pos: position{line: 415, col: 25, offset: 12896},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 415, col: 25, offset: 12896},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 37, offset: 12908},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteBoldTextElement128,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 56, offset: 12927},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 415, col: 62, offset: 12933},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonSingleQuoteBoldTextElement135,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonSingleQuoteBoldTextElement140,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonSingleQuoteBoldTextElement142,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 415, col: 78, offset: 12949},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 419, col: 25, offset: 13051},
																												run: (*parser).callonSingleQuoteBoldTextElement146,
																												expr: &seqExpr{
																													pos: position{line: 419, col: 25, offset: 13051},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 419, col: 25, offset: 13051},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 38, offset: 13064},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteBoldTextElement150,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 57, offset: 13083},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 419, col: 63, offset: 13089},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonSingleQuoteBoldTextElement157,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonSingleQuoteBoldTextElement162,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonSingleQuoteBoldTextElement164,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 419, col: 79, offset: 13105},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 408, col: 31, offset: 12551},
																												run: (*parser).callonSingleQuoteBoldTextElement168,
																												expr: &seqExpr{
																													pos: position{line: 408, col: 31, offset: 12551},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 408, col: 31, offset: 12551},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 408, col: 35, offset: 12555},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteBoldTextElement172,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 408, col: 54, offset: 12574},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 502, col: 8, offset: 15730},
																						run: (*parser).callonSingleQuoteBoldTextElement178,
																						expr: &litMatcher{
																							pos:        position{line: 502, col: 8, offset: 15730},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 79, offset: 15106},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 489, col: 9, offset: 15179},
															run: (*parser).callonSingleQuoteBoldTextElement181,
															expr: &seqExpr{
																pos: position{line: 489, col: 9, offset: 15179},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 489, col: 9, offset: 15179},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 489, col: 14, offset: 15184},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonSingleQuoteBoldTextElement185,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 489, col: 22, offset: 15192},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1962, col: 11, offset: 67792},
												run: (*parser).callonSingleQuoteBoldTextElement189,
												expr: &charClassMatcher{
													pos:        position{line: 1962, col: 12, offset: 67793},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 7, offset: 42992},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 7, offset: 43010},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1297, col: 7, offset: 43029},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1297, col: 7, offset: 43029},
								expr: &choiceExpr{
									pos: position{line: 2124, col: 10, offset: 72709},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2124, col: 10, offset: 72709},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2124, col: 16, offset: 72715},
											run: (*parser).callonSingleQuoteBoldTextElement197,
											expr: &litMatcher{
												pos:        position{line: 2124, col: 16, offset: 72715},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1297, col: 14, offset: 43036},
								expr: &seqExpr{
									pos: position{line: 1297, col: 15, offset: 43037},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1297, col: 15, offset: 43037},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1297, col: 19, offset: 43041},
											expr: &litMatcher{
												pos:        position{line: 1297, col: 20, offset: 43042},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 7, offset: 43054},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&actionExpr{
						pos: position{line: 692, col: 23, offset: 21691},
						run: (*parser).callonSingleQuoteBoldTextElement205,
						expr: &seqExpr{
							pos: position{line: 692, col: 23, offset: 21691},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 692, col: 51, offset: 21719},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 692, col: 56, offset: 21724},
										run: (*parser).callonSingleQuoteBoldTextElement209,
										expr: &oneOrMoreExpr{
											pos: position{line: 692, col: 56, offset: 21724},
											expr: &charClassMatcher{
												pos:        position{line: 692, col: 56, offset: 21724},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1313, col: 5, offset: 43503},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1314, col: 7, offset: 43600},
						run: (*parser).callonSingleQuoteBoldTextElement214,
						expr: &seqExpr{
							pos: position{line: 1314, col: 7, offset: 43600},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1314, col: 7, offset: 43600},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&actionExpr{
									pos: position{line: 2053, col: 14, offset: 70404},
									run: (*parser).callonSingleQuoteBoldTextElement217,
									expr: &oneOrMoreExpr{
										pos: position{line: 2053, col: 14, offset: 70404},
										expr: &charClassMatcher{
											pos:        position{line: 2053, col: 14, offset: 70404},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1302, col: 1, offset: 43155},
			expr: &actionExpr{
				pos: position{line: 1303, col: 5, offset: 43195},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1303, col: 5, offset: 43195},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1303, col: 5, offset: 43195},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1303, col: 16, offset: 43206},
								expr: &ruleRefExpr{
									pos:  position{line: 1303, col: 17, offset: 43207},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 5, offset: 43233},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1304, col: 11, offset: 43239},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1304, col: 11, offset: 43239},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1305, col: 11, offset: 43269},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1306, col: 11, offset: 43290},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1307, col: 11, offset: 43311},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1308, col: 11, offset: 43335},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 11, offset: 43359},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1318, col: 1, offset: 43775},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 5, offset: 43799},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1319, col: 5, offset: 43799},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1319, col: 5, offset: 43799},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1319, col: 5, offset: 43799},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1236, col: 25, offset: 40830},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1236, col: 25, offset: 40830},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1236, col: 25, offset: 40830},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1236, col: 30, offset: 40835},
													expr: &litMatcher{
														pos:        position{line: 1236, col: 30, offset: 40835},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 40, offset: 43834},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1319, col: 45, offset: 43839},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1319, col: 55, offset: 43849},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 84, offset: 43878},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1321, col: 9, offset: 44035},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1321, col: 9, offset: 44035},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1321, col: 9, offset: 44035},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1232, col: 25, offset: 40757},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1232, col: 25, offset: 40757},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 25, offset: 40757},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 44, offset: 44070},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1321, col: 49, offset: 44075},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1321, col: 59, offset: 44085},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 88, offset: 44114},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1324, col: 9, offset: 44314},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1324, col: 9, offset: 44314},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1324, col: 9, offset: 44314},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1232, col: 25, offset: 40757},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1232, col: 25, offset: 40757},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 25, offset: 40757},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 44, offset: 44349},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1324, col: 48, offset: 44353},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 58, offset: 44363},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 87, offset: 44392},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1331, col: 1, offset: 44613},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 15, offset: 44627},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1331, col: 15, offset: 44627},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 39, offset: 44651},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1333, col: 1, offset: 44674},
			expr: &actionExpr{
				pos: position{line: 1333, col: 26, offset: 44699},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1333, col: 26, offset: 44699},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1333, col: 26, offset: 44699},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1333, col: 31, offset: 44704},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1333, col: 41, offset: 44714},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1333, col: 72, offset: 44745},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1337, col: 1, offset: 44891},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1337, col: 34, offset: 44924},
				expr: &ruleRefExpr{
					pos:  position{line: 1337, col: 34, offset: 44924},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1339, col: 1, offset: 44956},
			expr: &actionExpr{
				pos: position{line: 1340, col: 5, offset: 44993},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1340, col: 5, offset: 44993},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1340, col: 5, offset: 44993},
							expr: &litMatcher{
								pos:        position{line: 1340, col: 7, offset: 44995},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1340, col: 13, offset: 45001},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1340, col: 22, offset: 45010},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2061, col: 5, offset: 70785},
										run: (*parser).callonDoubleQuoteItalicTextElement7,
										expr: &seqExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2061, col: 5, offset: 70785},
													expr: &charClassMatcher{
														pos:        position{line: 2061, col: 5, offset: 70785},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2061, col: 15, offset: 70795},
													expr: &choiceExpr{
														pos: position{line: 2061, col: 17, offset: 70797},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2061, col: 17, offset: 70797},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2132, col: 8, offset: 72882},
																expr: &anyMatcher{
																	line: 2132, col: 9, offset: 72883,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2063, col: 9, offset: 70879},
										run: (*parser).callonDoubleQuoteItalicTextElement16,
										expr: &seqExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2063, col: 9, offset: 70879},
													expr: &charClassMatcher{
														pos:        position{line: 2063, col: 9, offset: 70879},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2063, col: 19, offset: 70889},
													expr: &seqExpr{
														pos: position{line: 2063, col: 20, offset: 70890},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2063, col: 20, offset: 70890},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2063, col: 27, offset: 70897},
																expr: &charClassMatcher{
																	pos:        position{line: 2063, col: 27, offset: 70897},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonDoubleQuoteItalicTextElement26,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
									&seqExpr{
										pos: position{line: 1342, col: 7, offset: 45066},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2128, col: 12, offset: 72775},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2128, col: 12, offset: 72775},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2128, col: 19, offset: 72782},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2128, col: 28, offset: 72791},
														run: (*parser).callonDoubleQuoteItalicTextElement32,
														expr: &litMatcher{
															pos:        position{line: 2128, col: 28, offset: 72791},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1342, col: 15, offset: 45074},
												expr: &choiceExpr{
													pos: position{line: 2128, col: 12, offset: 72775},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2128, col: 12, offset: 72775},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2128, col: 19, offset: 72782},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2128, col: 28, offset: 72791},
															run: (*parser).callonDoubleQuoteItalicTextElement38,
															expr: &litMatcher{
																pos:        position{line: 2128, col: 28, offset: 72791},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 398, col: 5, offset: 12261},
										run: (*parser).callonDoubleQuoteItalicTextElement40,
										expr: &seqExpr{
											pos: position{line: 398, col: 5, offset: 12261},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 398, col: 5, offset: 12261},
													run: (*parser).callonDoubleQuoteItalicTextElement42,
												},
												&labeledExpr{
													pos:   position{line: 401, col: 5, offset: 12325},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 401, col: 14, offset: 12334},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 415, col: 25, offset: 12896},
																run: (*parser).callonDoubleQuoteItalicTextElement45,
																expr: &seqExpr{
																	pos: position{line: 415, col: 25, offset: 12896},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 415, col: 25, offset: 12896},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 415, col: 37, offset: 12908},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonDoubleQuoteItalicTextElement49,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 415, col: 56, offset: 12927},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 415, col: 62, offset: 12933},
																				expr: &actionExpr{
																					pos: position{line: 423, col: 17, offset: 13196},
																					run: (*parser).callonDoubleQuoteItalicTextElement56,
																					expr: &seqExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 423, col: 17, offset: 13196},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 423, col: 21, offset: 13200},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 423, col: 28, offset: 13207},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											run: (*parser).callonDoubleQuoteItalicTextElement61,
																											expr: &charClassMatcher{
																												pos:        position{line: 423, col: 28, offset: 13207},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 425, col: 9, offset: 13261},
																											run: (*parser).callonDoubleQuoteItalicTextElement63,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												expr: &charClassMatcher{
																													pos:        position{line: 425, col: 9, offset: 13261},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 415, col: 78, offset: 12949},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 419, col: 25, offset: 13051},
																run: (*parser).callonDoubleQuoteItalicTextElement67,
																expr: &seqExpr{
																	pos: position{line: 419, col: 25, offset: 13051},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 419, col: 25, offset: 13051},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 419, col: 38, offset: 13064},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonDoubleQuoteItalicTextElement71,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 419, col: 57, offset: 13083},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 419, col: 63, offset: 13089},
																				expr: &actionExpr{
																					pos: position{line: 423, col: 17, offset: 13196},
																					run: (*parser).callonDoubleQuoteItalicTextElement78,
																					expr: &seqExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 423, col: 17, offset: 13196},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 423, col: 21, offset: 13200},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 423, col: 28, offset: 13207},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											run: (*parser).callonDoubleQuoteItalicTextElement83,
																											expr: &charClassMatcher{
																												pos:        position{line: 423, col: 28, offset: 13207},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 425, col: 9, offset: 13261},
																											run: (*parser).callonDoubleQuoteItalicTextElement85,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												expr: &charClassMatcher{
																													pos:        position{line: 425, col: 9, offset: 13261},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 419, col: 79, offset: 13105},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 408, col: 31, offset: 12551},
																run: (*parser).callonDoubleQuoteItalicTextElement89,
																expr: &seqExpr{
																	pos: position{line: 408, col: 31, offset: 12551},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 408, col: 31, offset: 12551},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 408, col: 35, offset: 12555},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonDoubleQuoteItalicTextElement93,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 408, col: 54, offset: 12574},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1954, col: 5, offset: 67519},
										run: (*parser).callonDoubleQuoteItalicTextElement99,
										expr: &seqExpr{
											pos: position{line: 1954, col: 5, offset: 67519},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1954, col: 5, offset: 67519},
													run: (*parser).callonDoubleQuoteItalicTextElement101,
												},
												&labeledExpr{
													pos:   position{line: 1957, col: 5, offset: 67590},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1959, col: 9, offset: 67688},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1959, col: 9, offset: 67688},
																run: (*parser).callonDoubleQuoteItalicTextElement104,
																expr: &choiceExpr{
																	pos: position{line: 487, col: 27, offset: 15054},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 487, col: 27, offset: 15054},
																			run: (*parser).callonDoubleQuoteItalicTextElement106,
																			expr: &seqExpr{
																				pos: position{line: 487, col: 27, offset: 15054},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 487, col: 27, offset: 15054},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 487, col: 32, offset: 15059},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							run: (*parser).callonDoubleQuoteItalicTextElement110,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								expr: &charClassMatcher{
																									pos:        position{line: 2112, col: 7, offset: 72433},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 487, col: 40, offset: 15067},
																						expr: &choiceExpr{
																							pos: position{line: 2124, col: 10, offset: 72709},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2124, col: 10, offset: 72709},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2124, col: 16, offset: 72715},
																									run: (*parser).callonDoubleQuoteItalicTextElement116,
																									expr: &litMatcher{
																										pos:        position{line: 2124, col: 16, offset: 72715},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 487, col: 47, offset: 15074},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 487, col: 51, offset: 15078},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 497, col: 24, offset: 15491},
																							expr: &choiceExpr{
																								pos: position{line: 498, col: 5, offset: 15497},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 498, col: 6, offset: 15498},
																										run: (*parser).callonDoubleQuoteItalicTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 498, col: 6, offset: 15498},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 498, col: 6, offset: 15498},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 498, col: 14, offset: 15506},
																													expr: &charClassMatcher{
																														pos:        position{line: 498, col: 14, offset: 15506},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 398, col: 5, offset: 12261},
																										run: (*parser).callonDoubleQuoteItalicTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 398, col: 5, offset: 12261},
																													run: (*parser).callonDoubleQuoteItalicTextElement129,
																												},
																												&labeledExpr{
																													pos:   position{line: 401, col: 5, offset: 12325},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 401, col: 14, offset: 12334},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 415, col: 25, offset: 12896},
																																run: (*parser).callonDoubleQuoteItalicTextElement132,
																																expr: &seqExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 415, col: 25, offset: 12896},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 37, offset: 12908},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonDoubleQuoteItalicTextElement136,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 56, offset: 12927},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 415, col: 62, offset: 12933},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonDoubleQuoteItalicTextElement143,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonDoubleQuoteItalicTextElement148,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonDoubleQuoteItalicTextElement150,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 415, col: 78, offset: 12949},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 419, col: 25, offset: 13051},
																																run: (*parser).callonDoubleQuoteItalicTextElement154,
																																expr: &seqExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 419, col: 25, offset: 13051},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 38, offset: 13064},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonDoubleQuoteItalicTextElement158,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 57, offset: 13083},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 419, col: 63, offset: 13089},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonDoubleQuoteItalicTextElement165,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonDoubleQuoteItalicTextElement170,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonDoubleQuoteItalicTextElement172,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 419, col: 79, offset: 13105},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 408, col: 31, offset: 12551},
																																run: (*parser).callonDoubleQuoteItalicTextElement176,
																																expr: &seqExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 408, col: 31, offset: 12551},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 408, col: 35, offset: 12555},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonDoubleQuoteItalicTextElement180,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 408, col: 54, offset: 12574},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 502, col: 8, offset: 15730},
																										run: (*parser).callonDoubleQuoteItalicTextElement186,
																										expr: &litMatcher{
																											pos:        position{line: 502, col: 8, offset: 15730},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 487, col: 79, offset: 15106},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 489, col: 9, offset: 15179},
																			run: (*parser).callonDoubleQuoteItalicTextElement189,
																			expr: &seqExpr{
																				pos: position{line: 489, col: 9, offset: 15179},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 489, col: 9, offset: 15179},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 489, col: 14, offset: 15184},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							run: (*parser).callonDoubleQuoteItalicTextElement193,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								expr: &charClassMatcher{
																									pos:        position{line: 2112, col: 7, offset: 72433},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 489, col: 22, offset: 15192},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1962, col: 11, offset: 67792},
																run: (*parser).callonDoubleQuoteItalicTextElement197,
																expr: &charClassMatcher{
																	pos:        position{line: 1962, col: 12, offset: 67793},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 7, offset: 45140},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1346, col: 7, offset: 45158},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1347, col: 7, offset: 45177},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&actionExpr{
										pos: position{line: 692, col: 23, offset: 21691},
										run: (*parser).callonDoubleQuoteItalicTextElement202,
										expr: &seqExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 691, col: 32, offset: 21660},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 692, col: 51, offset: 21719},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 692, col: 56, offset: 21724},
														run: (*parser).callonDoubleQuoteItalicTextElement206,
														expr: &oneOrMoreExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															expr: &charClassMatcher{
																pos:        position{line: 692, col: 56, offset: 21724},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 691, col: 32, offset: 21660},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1365, col: 5, offset: 45672},
										val:        "[^\\r\\n_]",
										chars:      []rune{'\r', '\n', '_'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1366, col: 7, offset: 45771},
										run: (*parser).callonDoubleQuoteItalicTextElement211,
										expr: &seqExpr{
											pos: position{line: 1366, col: 7, offset: 45771},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1366, col: 7, offset: 45771},
													val:        "__",
													ignoreCase: false,
													want:       "\"__\"",
												},
												&actionExpr{
													pos: position{line: 2053, col: 14, offset: 70404},
													run: (*parser).callonDoubleQuoteItalicTextElement214,
													expr: &oneOrMoreExpr{
														pos: position{line: 2053, col: 14, offset: 70404},
														expr: &charClassMatcher{
															pos:        position{line: 2053, col: 14, offset: 70404},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1353, col: 1, offset: 45319},
			expr: &actionExpr{
				pos: position{line: 1354, col: 5, offset: 45361},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1354, col: 5, offset: 45361},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1354, col: 5, offset: 45361},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1354, col: 16, offset: 45372},
								expr: &ruleRefExpr{
									pos:  position{line: 1354, col: 17, offset: 45373},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1355, col: 5, offset: 45399},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1355, col: 11, offset: 45405},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1355, col: 11, offset: 45405},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1356, col: 11, offset: 45437},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1357, col: 11, offset: 45456},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1358, col: 11, offset: 45477},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1359, col: 11, offset: 45501},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1360, col: 11, offset: 45525},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1370, col: 1, offset: 45949},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 5, offset: 45979},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 45979},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1371, col: 5, offset: 45979},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1371, col: 6, offset: 45980},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&notExpr{
									pos: position{line: 1371, col: 10, offset: 45984},
									expr: &litMatcher{
										pos:        position{line: 1371, col: 11, offset: 45985},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1371, col: 16, offset: 45990},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 26, offset: 46000},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 57, offset: 46031},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1373, col: 9, offset: 46233},
						run: (*parser).callonSingleQuoteItalicText10,
						expr: &seqExpr{
							pos: position{line: 1373, col: 9, offset: 46233},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1373, col: 9, offset: 46233},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1373, col: 13, offset: 46237},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1373, col: 23, offset: 46247},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1373, col: 23, offset: 46247},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1373, col: 27, offset: 46251},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1373, col: 58, offset: 46282},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1377, col: 1, offset: 46504},
			expr: &actionExpr{
				pos: position{line: 1377, col: 34, offset: 46537},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1377, col: 34, offset: 46537},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1377, col: 34, offset: 46537},
							expr: &choiceExpr{
								pos: position{line: 2124, col: 10, offset: 72709},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonSingleQuoteItalicTextElements6,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1377, col: 41, offset: 46544},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1377, col: 51, offset: 46554},
								expr: &ruleRefExpr{
									pos:  position{line: 1377, col: 51, offset: 46554},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1381, col: 1, offset: 46615},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 5, offset: 46652},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1394, col: 15, offset: 46979},
						run: (*parser).callonSingleQuoteItalicTextElement2,
						expr: &seqExpr{
							pos: position{line: 1394, col: 15, offset: 46979},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1394, col: 15, offset: 46979},
									expr: &charClassMatcher{
										pos:        position{line: 1394, col: 15, offset: 46979},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1394, col: 25, offset: 46989},
									expr: &charClassMatcher{
										pos:        position{line: 1394, col: 27, offset: 46991},
										val:        "[ _]",
										chars:      []rune{' ', '_'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1383, col: 7, offset: 46669},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1383, col: 7, offset: 46669},
								expr: &choiceExpr{
									pos: position{line: 2124, col: 10, offset: 72709},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2124, col: 10, offset: 72709},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2124, col: 16, offset: 72715},
											run: (*parser).callonSingleQuoteItalicTextElement12,
											expr: &litMatcher{
												pos:        position{line: 2124, col: 16, offset: 72715},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1383, col: 14, offset: 46676},
								expr: &seqExpr{
									pos: position{line: 1383, col: 15, offset: 46677},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1383, col: 15, offset: 46677},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1383, col: 19, offset: 46681},
											expr: &litMatcher{
												pos:        position{line: 1383, col: 20, offset: 46682},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1384, col: 7, offset: 46694},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2128, col: 12, offset: 72775},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2128, col: 12, offset: 72775},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2128, col: 19, offset: 72782},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2128, col: 28, offset: 72791},
										run: (*parser).callonSingleQuoteItalicTextElement23,
										expr: &litMatcher{
											pos:        position{line: 2128, col: 28, offset: 72791},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1384, col: 15, offset: 46702},
								expr: &choiceExpr{
									pos: position{line: 2128, col: 12, offset: 72775},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2128, col: 12, offset: 72775},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2128, col: 19, offset: 72782},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2128, col: 28, offset: 72791},
											run: (*parser).callonSingleQuoteItalicTextElement29,
											expr: &litMatcher{
												pos:        position{line: 2128, col: 28, offset: 72791},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 12261},
						run: (*parser).callonSingleQuoteItalicTextElement31,
						expr: &seqExpr{
							pos: position{line: 398, col: 5, offset: 12261},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 398, col: 5, offset: 12261},
									run: (*parser).callonSingleQuoteItalicTextElement33,
								},
								&labeledExpr{
									pos:   position{line: 401, col: 5, offset: 12325},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 401, col: 14, offset: 12334},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 415, col: 25, offset: 12896},
												run: (*parser).callonSingleQuoteItalicTextElement36,
												expr: &seqExpr{
													pos: position{line: 415, col: 25, offset: 12896},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 415, col: 25, offset: 12896},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 415, col: 37, offset: 12908},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteItalicTextElement40,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 415, col: 56, offset: 12927},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 415, col: 62, offset: 12933},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonSingleQuoteItalicTextElement47,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonSingleQuoteItalicTextElement52,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonSingleQuoteItalicTextElement54,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 415, col: 78, offset: 12949},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 419, col: 25, offset: 13051},
												run: (*parser).callonSingleQuoteItalicTextElement58,
												expr: &seqExpr{
													pos: position{line: 419, col: 25, offset: 13051},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 419, col: 25, offset: 13051},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 419, col: 38, offset: 13064},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteItalicTextElement62,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 419, col: 57, offset: 13083},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 419, col: 63, offset: 13089},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonSingleQuoteItalicTextElement69,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonSingleQuoteItalicTextElement74,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonSingleQuoteItalicTextElement76,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 419, col: 79, offset: 13105},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 408, col: 31, offset: 12551},
												run: (*parser).callonSingleQuoteItalicTextElement80,
												expr: &seqExpr{
													pos: position{line: 408, col: 31, offset: 12551},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 408, col: 31, offset: 12551},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 408, col: 35, offset: 12555},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteItalicTextElement84,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 408, col: 54, offset: 12574},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1954, col: 5, offset: 67519},
						run: (*parser).callonSingleQuoteItalicTextElement90,
						expr: &seqExpr{
							pos: position{line: 1954, col: 5, offset: 67519},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1954, col: 5, offset: 67519},
									run: (*parser).callonSingleQuoteItalicTextElement92,
								},
								&labeledExpr{
									pos:   position{line: 1957, col: 5, offset: 67590},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 1959, col: 9, offset: 67688},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1959, col: 9, offset: 67688},
												run: (*parser).callonSingleQuoteItalicTextElement95,
												expr: &choiceExpr{
													pos: position{line: 487, col: 27, offset: 15054},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 487, col: 27, offset: 15054},
															run: (*parser).callonSingleQuoteItalicTextElement97,
															expr: &seqExpr{
																pos: position{line: 487, col: 27, offset: 15054},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 487, col: 27, offset: 15054},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 32, offset: 15059},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonSingleQuoteItalicTextElement101,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 487, col: 40, offset: 15067},
																		expr: &choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonSingleQuoteItalicTextElement107,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 47, offset: 15074},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 51, offset: 15078},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 497, col: 24, offset: 15491},
																			expr: &choiceExpr{
																				pos: position{line: 498, col: 5, offset: 15497},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 498, col: 6, offset: 15498},
																						run: (*parser).callonSingleQuoteItalicTextElement113,
																						expr: &seqExpr{
																							pos: position{line: 498, col: 6, offset: 15498},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 498, col: 6, offset: 15498},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 498, col: 14, offset: 15506},
																									expr: &charClassMatcher{
																										pos:        position{line: 498, col: 14, offset: 15506},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 398, col: 5, offset: 12261},
																						run: (*parser).callonSingleQuoteItalicTextElement118,
																						expr: &seqExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 398, col: 5, offset: 12261},
																									run: (*parser).callonSingleQuoteItalicTextElement120,
																								},
																								&labeledExpr{
																									pos:   position{line: 401, col: 5, offset: 12325},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 401, col: 14, offset: 12334},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 415, col: 25, offset: 12896},
																												run: (*parser).callonSingleQuoteItalicTextElement123,
																												expr: &seqExpr{
																													pos: position{line: 415, col: 25, offset: 12896},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 415, col: 25, offset: 12896},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 37, offset: 12908},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteItalicTextElement127,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 56, offset: 12927},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 415, col: 62, offset: 12933},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonSingleQuoteItalicTextElement134,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonSingleQuoteItalicTextElement139,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonSingleQuoteItalicTextElement141,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 415, col: 78, offset: 12949},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 419, col: 25, offset: 13051},
																												run: (*parser).callonSingleQuoteItalicTextElement145,
																												expr: &seqExpr{
																													pos: position{line: 419, col: 25, offset: 13051},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 419, col: 25, offset: 13051},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 38, offset: 13064},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteItalicTextElement149,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 57, offset: 13083},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 419, col: 63, offset: 13089},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonSingleQuoteItalicTextElement156,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonSingleQuoteItalicTextElement161,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonSingleQuoteItalicTextElement163,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 419, col: 79, offset: 13105},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 408, col: 31, offset: 12551},
																												run: (*parser).callonSingleQuoteItalicTextElement167,
																												expr: &seqExpr{
																													pos: position{line: 408, col: 31, offset: 12551},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 408, col: 31, offset: 12551},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 408, col: 35, offset: 12555},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteItalicTextElement171,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 408, col: 54, offset: 12574},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 502, col: 8, offset: 15730},
																						run: (*parser).callonSingleQuoteItalicTextElement177,
																						expr: &litMatcher{
																							pos:        position{line: 502, col: 8, offset: 15730},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 79, offset: 15106},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 489, col: 9, offset: 15179},
															run: (*parser).callonSingleQuoteItalicTextElement180,
															expr: &seqExpr{
																pos: position{line: 489, col: 9, offset: 15179},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 489, col: 9, offset: 15179},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 489, col: 14, offset: 15184},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonSingleQuoteItalicTextElement184,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 489, col: 22, offset: 15192},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1962, col: 11, offset: 67792},
												run: (*parser).callonSingleQuoteItalicTextElement188,
												expr: &charClassMatcher{
													pos:        position{line: 1962, col: 12, offset: 67793},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1387, col: 7, offset: 46768},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 7, offset: 46786},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 7, offset: 46805},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&actionExpr{
						pos: position{line: 692, col: 23, offset: 21691},
						run: (*parser).callonSingleQuoteItalicTextElement193,
						expr: &seqExpr{
							pos: position{line: 692, col: 23, offset: 21691},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 692, col: 51, offset: 21719},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 692, col: 56, offset: 21724},
										run: (*parser).callonSingleQuoteItalicTextElement197,
										expr: &oneOrMoreExpr{
											pos: position{line: 692, col: 56, offset: 21724},
											expr: &charClassMatcher{
												pos:        position{line: 692, col: 56, offset: 21724},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1410, col: 5, offset: 47409},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1411, col: 7, offset: 47508},
						run: (*parser).callonSingleQuoteItalicTextElement202,
						expr: &seqExpr{
							pos: position{line: 1411, col: 7, offset: 47508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1411, col: 7, offset: 47508},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&actionExpr{
									pos: position{line: 2053, col: 14, offset: 70404},
									run: (*parser).callonSingleQuoteItalicTextElement205,
									expr: &oneOrMoreExpr{
										pos: position{line: 2053, col: 14, offset: 70404},
										expr: &charClassMatcher{
											pos:        position{line: 2053, col: 14, offset: 70404},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1398, col: 1, offset: 47057},
			expr: &actionExpr{
				pos: position{line: 1399, col: 5, offset: 47098},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1399, col: 5, offset: 47098},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1399, col: 5, offset: 47098},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1399, col: 16, offset: 47109},
								expr: &ruleRefExpr{
									pos:  position{line: 1399, col: 17, offset: 47110},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 5, offset: 47136},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1400, col: 11, offset: 47142},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1400, col: 11, offset: 47142},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1401, col: 11, offset: 47161},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1402, col: 11, offset: 47193},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1403, col: 11, offset: 47214},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1404, col: 11, offset: 47238},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1405, col: 11, offset: 47262},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1415, col: 1, offset: 47686},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 5, offset: 47712},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 47712},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1416, col: 5, offset: 47712},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1416, col: 5, offset: 47712},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1236, col: 25, offset: 40830},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1236, col: 25, offset: 40830},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1236, col: 25, offset: 40830},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1236, col: 30, offset: 40835},
													expr: &litMatcher{
														pos:        position{line: 1236, col: 30, offset: 40835},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 40, offset: 47747},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1416, col: 45, offset: 47752},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1416, col: 55, offset: 47762},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 86, offset: 47793},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1418, col: 9, offset: 47950},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 1418, col: 9, offset: 47950},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1418, col: 9, offset: 47950},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1232, col: 25, offset: 40757},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1232, col: 25, offset: 40757},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 25, offset: 40757},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 44, offset: 47985},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1418, col: 49, offset: 47990},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1418, col: 59, offset: 48000},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 90, offset: 48031},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1421, col: 9, offset: 48231},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 1421, col: 9, offset: 48231},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1421, col: 9, offset: 48231},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1232, col: 25, offset: 40757},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1232, col: 25, offset: 40757},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 25, offset: 40757},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1421, col: 44, offset: 48266},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1421, col: 48, offset: 48270},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1421, col: 58, offset: 48280},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1421, col: 89, offset: 48311},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1428, col: 1, offset: 48538},
			expr: &choiceExpr{
				pos: position{line: 1428, col: 18, offset: 48555},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1428, col: 18, offset: 48555},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 45, offset: 48582},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1430, col: 1, offset: 48608},
			expr: &actionExpr{
				pos: position{line: 1430, col: 29, offset: 48636},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1430, col: 29, offset: 48636},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1430, col: 29, offset: 48636},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1430, col: 34, offset: 48641},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1430, col: 44, offset: 48651},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1430, col: 78, offset: 48685},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1434, col: 1, offset: 48834},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1434, col: 37, offset: 48870},
				expr: &ruleRefExpr{
					pos:  position{line: 1434, col: 37, offset: 48870},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1436, col: 1, offset: 48937},
			expr: &actionExpr{
				pos: position{line: 1437, col: 5, offset: 48977},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1437, col: 5, offset: 48977},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1437, col: 5, offset: 48977},
							expr: &litMatcher{
								pos:        position{line: 1437, col: 7, offset: 48979},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1437, col: 13, offset: 48985},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1437, col: 22, offset: 48994},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2061, col: 5, offset: 70785},
										run: (*parser).callonDoubleQuoteMonospaceTextElement7,
										expr: &seqExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2061, col: 5, offset: 70785},
													expr: &charClassMatcher{
														pos:        position{line: 2061, col: 5, offset: 70785},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2061, col: 15, offset: 70795},
													expr: &choiceExpr{
														pos: position{line: 2061, col: 17, offset: 70797},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2061, col: 17, offset: 70797},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2132, col: 8, offset: 72882},
																expr: &anyMatcher{
																	line: 2132, col: 9, offset: 72883,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2063, col: 9, offset: 70879},
										run: (*parser).callonDoubleQuoteMonospaceTextElement16,
										expr: &seqExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2063, col: 9, offset: 70879},
													expr: &charClassMatcher{
														pos:        position{line: 2063, col: 9, offset: 70879},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2063, col: 19, offset: 70889},
													expr: &seqExpr{
														pos: position{line: 2063, col: 20, offset: 70890},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2063, col: 20, offset: 70890},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2063, col: 27, offset: 70897},
																expr: &charClassMatcher{
																	pos:        position{line: 2063, col: 27, offset: 70897},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonDoubleQuoteMonospaceTextElement26,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
									&seqExpr{
										pos: position{line: 1439, col: 7, offset: 49050},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2128, col: 12, offset: 72775},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2128, col: 12, offset: 72775},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2128, col: 19, offset: 72782},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2128, col: 28, offset: 72791},
														run: (*parser).callonDoubleQuoteMonospaceTextElement32,
														expr: &litMatcher{
															pos:        position{line: 2128, col: 28, offset: 72791},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1439, col: 15, offset: 49058},
												expr: &choiceExpr{
													pos: position{line: 2128, col: 12, offset: 72775},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2128, col: 12, offset: 72775},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2128, col: 19, offset: 72782},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2128, col: 28, offset: 72791},
															run: (*parser).callonDoubleQuoteMonospaceTextElement38,
															expr: &litMatcher{
																pos:        position{line: 2128, col: 28, offset: 72791},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 398, col: 5, offset: 12261},
										run: (*parser).callonDoubleQuoteMonospaceTextElement40,
										expr: &seqExpr{
											pos: position{line: 398, col: 5, offset: 12261},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 398, col: 5, offset: 12261},
													run: (*parser).callonDoubleQuoteMonospaceTextElement42,
												},
												&labeledExpr{
													pos:   position{line: 401, col: 5, offset: 12325},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 401, col: 14, offset: 12334},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 415, col: 25, offset: 12896},
																run: (*parser).callonDoubleQuoteMonospaceTextElement45,
																expr: &seqExpr{
																	pos: position{line: 415, col: 25, offset: 12896},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 415, col: 25, offset: 12896},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 415, col: 37, offset: 12908},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement49,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 415, col: 56, offset: 12927},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 415, col: 62, offset: 12933},
																				expr: &actionExpr{
																					pos: position{line: 423, col: 17, offset: 13196},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement56,
																					expr: &seqExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 423, col: 17, offset: 13196},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 423, col: 21, offset: 13200},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 423, col: 28, offset: 13207},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement61,
																											expr: &charClassMatcher{
																												pos:        position{line: 423, col: 28, offset: 13207},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 425, col: 9, offset: 13261},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement63,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												expr: &charClassMatcher{
																													pos:        position{line: 425, col: 9, offset: 13261},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 415, col: 78, offset: 12949},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 419, col: 25, offset: 13051},
																run: (*parser).callonDoubleQuoteMonospaceTextElement67,
																expr: &seqExpr{
																	pos: position{line: 419, col: 25, offset: 13051},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 419, col: 25, offset: 13051},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 419, col: 38, offset: 13064},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement71,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 419, col: 57, offset: 13083},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 419, col: 63, offset: 13089},
																				expr: &actionExpr{
																					pos: position{line: 423, col: 17, offset: 13196},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement78,
																					expr: &seqExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 423, col: 17, offset: 13196},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 423, col: 21, offset: 13200},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 423, col: 28, offset: 13207},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement83,
																											expr: &charClassMatcher{
																												pos:        position{line: 423, col: 28, offset: 13207},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 425, col: 9, offset: 13261},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement85,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												expr: &charClassMatcher{
																													pos:        position{line: 425, col: 9, offset: 13261},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 419, col: 79, offset: 13105},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 408, col: 31, offset: 12551},
																run: (*parser).callonDoubleQuoteMonospaceTextElement89,
																expr: &seqExpr{
																	pos: position{line: 408, col: 31, offset: 12551},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 408, col: 31, offset: 12551},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 408, col: 35, offset: 12555},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement93,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 408, col: 54, offset: 12574},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1954, col: 5, offset: 67519},
										run: (*parser).callonDoubleQuoteMonospaceTextElement99,
										expr: &seqExpr{
											pos: position{line: 1954, col: 5, offset: 67519},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1954, col: 5, offset: 67519},
													run: (*parser).callonDoubleQuoteMonospaceTextElement101,
												},
												&labeledExpr{
													pos:   position{line: 1957, col: 5, offset: 67590},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1959, col: 9, offset: 67688},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1959, col: 9, offset: 67688},
																run: (*parser).callonDoubleQuoteMonospaceTextElement104,
																expr: &choiceExpr{
																	pos: position{line: 487, col: 27, offset: 15054},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 487, col: 27, offset: 15054},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement106,
																			expr: &seqExpr{
																				pos: position{line: 487, col: 27, offset: 15054},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 487, col: 27, offset: 15054},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 487, col: 32, offset: 15059},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement110,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								expr: &charClassMatcher{
																									pos:        position{line: 2112, col: 7, offset: 72433},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 487, col: 40, offset: 15067},
																						expr: &choiceExpr{
																							pos: position{line: 2124, col: 10, offset: 72709},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2124, col: 10, offset: 72709},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2124, col: 16, offset: 72715},
																									run: (*parser).callonDoubleQuoteMonospaceTextElement116,
																									expr: &litMatcher{
																										pos:        position{line: 2124, col: 16, offset: 72715},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 487, col: 47, offset: 15074},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 487, col: 51, offset: 15078},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 497, col: 24, offset: 15491},
																							expr: &choiceExpr{
																								pos: position{line: 498, col: 5, offset: 15497},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 498, col: 6, offset: 15498},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 498, col: 6, offset: 15498},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 498, col: 6, offset: 15498},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 498, col: 14, offset: 15506},
																													expr: &charClassMatcher{
																														pos:        position{line: 498, col: 14, offset: 15506},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 398, col: 5, offset: 12261},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 398, col: 5, offset: 12261},
																													run: (*parser).callonDoubleQuoteMonospaceTextElement129,
																												},
																												&labeledExpr{
																													pos:   position{line: 401, col: 5, offset: 12325},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 401, col: 14, offset: 12334},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 415, col: 25, offset: 12896},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement132,
																																expr: &seqExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 415, col: 25, offset: 12896},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 37, offset: 12908},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement136,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 56, offset: 12927},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 415, col: 62, offset: 12933},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonDoubleQuoteMonospaceTextElement143,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement148,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement150,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 415, col: 78, offset: 12949},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 419, col: 25, offset: 13051},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement154,
																																expr: &seqExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 419, col: 25, offset: 13051},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 38, offset: 13064},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement158,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 57, offset: 13083},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 419, col: 63, offset: 13089},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonDoubleQuoteMonospaceTextElement165,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement170,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement172,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 419, col: 79, offset: 13105},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 408, col: 31, offset: 12551},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement176,
																																expr: &seqExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 408, col: 31, offset: 12551},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 408, col: 35, offset: 12555},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement180,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 408, col: 54, offset: 12574},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 502, col: 8, offset: 15730},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement186,
																										expr: &litMatcher{
																											pos:        position{line: 502, col: 8, offset: 15730},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 487, col: 79, offset: 15106},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 489, col: 9, offset: 15179},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement189,
																			expr: &seqExpr{
																				pos: position{line: 489, col: 9, offset: 15179},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 489, col: 9, offset: 15179},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 489, col: 14, offset: 15184},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement193,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								expr: &charClassMatcher{
																									pos:        position{line: 2112, col: 7, offset: 72433},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 489, col: 22, offset: 15192},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1962, col: 11, offset: 67792},
																run: (*parser).callonDoubleQuoteMonospaceTextElement197,
																expr: &charClassMatcher{
																	pos:        position{line: 1962, col: 12, offset: 67793},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1442, col: 7, offset: 49124},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1443, col: 7, offset: 49142},
										name: "QuotedString",
									},
									&litMatcher{
										pos:        position{line: 1978, col: 18, offset: 68217},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1445, col: 7, offset: 49224},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&actionExpr{
										pos: position{line: 692, col: 23, offset: 21691},
										run: (*parser).callonDoubleQuoteMonospaceTextElement203,
										expr: &seqExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 691, col: 32, offset: 21660},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 692, col: 51, offset: 21719},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 692, col: 56, offset: 21724},
														run: (*parser).callonDoubleQuoteMonospaceTextElement207,
														expr: &oneOrMoreExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															expr: &charClassMatcher{
																pos:        position{line: 692, col: 56, offset: 21724},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 691, col: 32, offset: 21660},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1463, col: 5, offset: 49731},
										val:        "[^\\r\\n`]",
										chars:      []rune{'\r', '\n', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1464, col: 7, offset: 49833},
										run: (*parser).callonDoubleQuoteMonospaceTextElement212,
										expr: &seqExpr{
											pos: position{line: 1464, col: 7, offset: 49833},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1464, col: 7, offset: 49833},
													val:        "``",
													ignoreCase: false,
													want:       "\"``\"",
												},
												&actionExpr{
													pos: position{line: 2053, col: 14, offset: 70404},
													run: (*parser).callonDoubleQuoteMonospaceTextElement215,
													expr: &oneOrMoreExpr{
														pos: position{line: 2053, col: 14, offset: 70404},
														expr: &charClassMatcher{
															pos:        position{line: 2053, col: 14, offset: 70404},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1451, col: 1, offset: 49372},
			expr: &actionExpr{
				pos: position{line: 1452, col: 5, offset: 49416},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 5, offset: 49416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1452, col: 5, offset: 49416},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1452, col: 16, offset: 49427},
								expr: &ruleRefExpr{
									pos:  position{line: 1452, col: 17, offset: 49428},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1453, col: 5, offset: 49454},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1453, col: 11, offset: 49460},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1453, col: 11, offset: 49460},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1454, col: 11, offset: 49495},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1455, col: 11, offset: 49514},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1456, col: 11, offset: 49535},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1457, col: 11, offset: 49556},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1458, col: 11, offset: 49580},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1468, col: 1, offset: 50016},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 5, offset: 50049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1469, col: 5, offset: 50049},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1469, col: 5, offset: 50049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1469, col: 6, offset: 50050},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1469, col: 10, offset: 50054},
									expr: &litMatcher{
										pos:        position{line: 1469, col: 11, offset: 50055},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1469, col: 16, offset: 50060},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1469, col: 26, offset: 50070},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1469, col: 60, offset: 50104},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1471, col: 9, offset: 50309},
						run: (*parser).callonSingleQuoteMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1471, col: 9, offset: 50309},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1471, col: 9, offset: 50309},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1471, col: 13, offset: 50313},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1471, col: 23, offset: 50323},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1471, col: 23, offset: 50323},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1471, col: 27, offset: 50327},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1471, col: 61, offset: 50361},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1475, col: 1, offset: 50587},
			expr: &seqExpr{
				pos: position{line: 1475, col: 37, offset: 50623},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1475, col: 37, offset: 50623},
						expr: &choiceExpr{
							pos: position{line: 2124, col: 10, offset: 72709},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2124, col: 10, offset: 72709},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2124, col: 16, offset: 72715},
									run: (*parser).callonSingleQuoteMonospaceTextElements5,
									expr: &litMatcher{
										pos:        position{line: 2124, col: 16, offset: 72715},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1475, col: 44, offset: 50630},
						expr: &ruleRefExpr{
							pos:  position{line: 1475, col: 44, offset: 50630},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1477, col: 1, offset: 50664},
			expr: &choiceExpr{
				pos: position{line: 1478, col: 5, offset: 50705},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2061, col: 5, offset: 70785},
						run: (*parser).callonSingleQuoteMonospaceTextElement2,
						expr: &seqExpr{
							pos: position{line: 2061, col: 5, offset: 70785},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2061, col: 5, offset: 70785},
									expr: &charClassMatcher{
										pos:        position{line: 2061, col: 5, offset: 70785},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2061, col: 15, offset: 70795},
									expr: &choiceExpr{
										pos: position{line: 2061, col: 17, offset: 70797},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2061, col: 17, offset: 70797},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2132, col: 8, offset: 72882},
												expr: &anyMatcher{
													line: 2132, col: 9, offset: 72883,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2063, col: 9, offset: 70879},
						run: (*parser).callonSingleQuoteMonospaceTextElement11,
						expr: &seqExpr{
							pos: position{line: 2063, col: 9, offset: 70879},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 9, offset: 70879},
									expr: &charClassMatcher{
										pos:        position{line: 2063, col: 9, offset: 70879},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 19, offset: 70889},
									expr: &seqExpr{
										pos: position{line: 2063, col: 20, offset: 70890},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2063, col: 20, offset: 70890},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2063, col: 27, offset: 70897},
												expr: &charClassMatcher{
													pos:        position{line: 2063, col: 27, offset: 70897},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1479, col: 7, offset: 50716},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2128, col: 12, offset: 72775},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2128, col: 12, offset: 72775},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2128, col: 19, offset: 72782},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2128, col: 28, offset: 72791},
										run: (*parser).callonSingleQuoteMonospaceTextElement24,
										expr: &litMatcher{
											pos:        position{line: 2128, col: 28, offset: 72791},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1479, col: 15, offset: 50724},
								expr: &choiceExpr{
									pos: position{line: 2128, col: 12, offset: 72775},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2128, col: 12, offset: 72775},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2128, col: 19, offset: 72782},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2128, col: 28, offset: 72791},
											run: (*parser).callonSingleQuoteMonospaceTextElement30,
											expr: &litMatcher{
												pos:        position{line: 2128, col: 28, offset: 72791},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 12261},
						run: (*parser).callonSingleQuoteMonospaceTextElement32,
						expr: &seqExpr{
							pos: position{line: 398, col: 5, offset: 12261},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 398, col: 5, offset: 12261},
									run: (*parser).callonSingleQuoteMonospaceTextElement34,
								},
								&labeledExpr{
									pos:   position{line: 401, col: 5, offset: 12325},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 401, col: 14, offset: 12334},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 415, col: 25, offset: 12896},
												run: (*parser).callonSingleQuoteMonospaceTextElement37,
												expr: &seqExpr{
													pos: position{line: 415, col: 25, offset: 12896},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 415, col: 25, offset: 12896},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 415, col: 37, offset: 12908},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteMonospaceTextElement41,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 415, col: 56, offset: 12927},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 415, col: 62, offset: 12933},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonSingleQuoteMonospaceTextElement48,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonSingleQuoteMonospaceTextElement53,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonSingleQuoteMonospaceTextElement55,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 415, col: 78, offset: 12949},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 419, col: 25, offset: 13051},
												run: (*parser).callonSingleQuoteMonospaceTextElement59,
												expr: &seqExpr{
													pos: position{line: 419, col: 25, offset: 13051},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 419, col: 25, offset: 13051},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 419, col: 38, offset: 13064},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteMonospaceTextElement63,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 419, col: 57, offset: 13083},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 419, col: 63, offset: 13089},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonSingleQuoteMonospaceTextElement70,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonSingleQuoteMonospaceTextElement75,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonSingleQuoteMonospaceTextElement77,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 419, col: 79, offset: 13105},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 408, col: 31, offset: 12551},
												run: (*parser).callonSingleQuoteMonospaceTextElement81,
												expr: &seqExpr{
													pos: position{line: 408, col: 31, offset: 12551},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 408, col: 31, offset: 12551},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 408, col: 35, offset: 12555},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteMonospaceTextElement85,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 408, col: 54, offset: 12574},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1954, col: 5, offset: 67519},
						run: (*parser).callonSingleQuoteMonospaceTextElement91,
						expr: &seqExpr{
							pos: position{line: 1954, col: 5, offset: 67519},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1954, col: 5, offset: 67519},
									run: (*parser).callonSingleQuoteMonospaceTextElement93,
								},
								&labeledExpr{
									pos:   position{line: 1957, col: 5, offset: 67590},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 1959, col: 9, offset: 67688},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1959, col: 9, offset: 67688},
												run: (*parser).callonSingleQuoteMonospaceTextElement96,
												expr: &choiceExpr{
													pos: position{line: 487, col: 27, offset: 15054},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 487, col: 27, offset: 15054},
															run: (*parser).callonSingleQuoteMonospaceTextElement98,
															expr: &seqExpr{
																pos: position{line: 487, col: 27, offset: 15054},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 487, col: 27, offset: 15054},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 32, offset: 15059},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonSingleQuoteMonospaceTextElement102,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 487, col: 40, offset: 15067},
																		expr: &choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonSingleQuoteMonospaceTextElement108,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 47, offset: 15074},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 51, offset: 15078},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 497, col: 24, offset: 15491},
																			expr: &choiceExpr{
																				pos: position{line: 498, col: 5, offset: 15497},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 498, col: 6, offset: 15498},
																						run: (*parser).callonSingleQuoteMonospaceTextElement114,
																						expr: &seqExpr{
																							pos: position{line: 498, col: 6, offset: 15498},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 498, col: 6, offset: 15498},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 498, col: 14, offset: 15506},
																									expr: &charClassMatcher{
																										pos:        position{line: 498, col: 14, offset: 15506},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 398, col: 5, offset: 12261},
																						run: (*parser).callonSingleQuoteMonospaceTextElement119,
																						expr: &seqExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 398, col: 5, offset: 12261},
																									run: (*parser).callonSingleQuoteMonospaceTextElement121,
																								},
																								&labeledExpr{
																									pos:   position{line: 401, col: 5, offset: 12325},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 401, col: 14, offset: 12334},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 415, col: 25, offset: 12896},
																												run: (*parser).callonSingleQuoteMonospaceTextElement124,
																												expr: &seqExpr{
																													pos: position{line: 415, col: 25, offset: 12896},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 415, col: 25, offset: 12896},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 37, offset: 12908},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteMonospaceTextElement128,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 56, offset: 12927},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 415, col: 62, offset: 12933},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonSingleQuoteMonospaceTextElement135,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement140,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement142,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 415, col: 78, offset: 12949},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 419, col: 25, offset: 13051},
																												run: (*parser).callonSingleQuoteMonospaceTextElement146,
																												expr: &seqExpr{
																													pos: position{line: 419, col: 25, offset: 13051},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 419, col: 25, offset: 13051},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 38, offset: 13064},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteMonospaceTextElement150,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 57, offset: 13083},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 419, col: 63, offset: 13089},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonSingleQuoteMonospaceTextElement157,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement162,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement164,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 419, col: 79, offset: 13105},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 408, col: 31, offset: 12551},
																												run: (*parser).callonSingleQuoteMonospaceTextElement168,
																												expr: &seqExpr{
																													pos: position{line: 408, col: 31, offset: 12551},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 408, col: 31, offset: 12551},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 408, col: 35, offset: 12555},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteMonospaceTextElement172,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 408, col: 54, offset: 12574},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 502, col: 8, offset: 15730},
																						run: (*parser).callonSingleQuoteMonospaceTextElement178,
																						expr: &litMatcher{
																							pos:        position{line: 502, col: 8, offset: 15730},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 79, offset: 15106},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 489, col: 9, offset: 15179},
															run: (*parser).callonSingleQuoteMonospaceTextElement181,
															expr: &seqExpr{
																pos: position{line: 489, col: 9, offset: 15179},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 489, col: 9, offset: 15179},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 489, col: 14, offset: 15184},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonSingleQuoteMonospaceTextElement185,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 489, col: 22, offset: 15192},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1962, col: 11, offset: 67792},
												run: (*parser).callonSingleQuoteMonospaceTextElement189,
												expr: &charClassMatcher{
													pos:        position{line: 1962, col: 12, offset: 67793},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1482, col: 7, offset: 50790},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1483, col: 7, offset: 50808},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1484, col: 7, offset: 50827},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1484, col: 7, offset: 50827},
								expr: &choiceExpr{
									pos: position{line: 2124, col: 10, offset: 72709},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2124, col: 10, offset: 72709},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2124, col: 16, offset: 72715},
											run: (*parser).callonSingleQuoteMonospaceTextElement197,
											expr: &litMatcher{
												pos:        position{line: 2124, col: 16, offset: 72715},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1484, col: 14, offset: 50834},
								expr: &seqExpr{
									pos: position{line: 1484, col: 15, offset: 50835},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1484, col: 15, offset: 50835},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1484, col: 19, offset: 50839},
											expr: &litMatcher{
												pos:        position{line: 1484, col: 20, offset: 50840},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1485, col: 7, offset: 50964},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&litMatcher{
						pos:        position{line: 1978, col: 18, offset: 68217},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
					&actionExpr{
						pos: position{line: 692, col: 23, offset: 21691},
						run: (*parser).callonSingleQuoteMonospaceTextElement206,
						expr: &seqExpr{
							pos: position{line: 692, col: 23, offset: 21691},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 692, col: 51, offset: 21719},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 692, col: 56, offset: 21724},
										run: (*parser).callonSingleQuoteMonospaceTextElement210,
										expr: &oneOrMoreExpr{
											pos: position{line: 692, col: 56, offset: 21724},
											expr: &charClassMatcher{
												pos:        position{line: 692, col: 56, offset: 21724},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1502, col: 5, offset: 51454},
						run: (*parser).callonSingleQuoteMonospaceTextElement214,
						expr: &choiceExpr{
							pos: position{line: 1502, col: 6, offset: 51455},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 1502, col: 6, offset: 51455},
									val:        "[^\\r\\n`]",
									chars:      []rune{'\r', '\n', '`'},
									ignoreCase: false,
									inverted:   true,
								},
								&seqExpr{
									pos: position{line: 1503, col: 7, offset: 51559},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1503, col: 7, offset: 51559},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&actionExpr{
											pos: position{line: 2053, col: 14, offset: 70404},
											run: (*parser).callonSingleQuoteMonospaceTextElement219,
											expr: &oneOrMoreExpr{
												pos: position{line: 2053, col: 14, offset: 70404},
												expr: &charClassMatcher{
													pos:        position{line: 2053, col: 14, offset: 70404},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1490, col: 1, offset: 51095},
			expr: &actionExpr{
				pos: position{line: 1491, col: 5, offset: 51139},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1491, col: 5, offset: 51139},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1491, col: 5, offset: 51139},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1491, col: 16, offset: 51150},
								expr: &ruleRefExpr{
									pos:  position{line: 1491, col: 17, offset: 51151},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1492, col: 5, offset: 51177},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1492, col: 11, offset: 51183},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1492, col: 11, offset: 51183},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1493, col: 11, offset: 51218},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1494, col: 11, offset: 51237},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1495, col: 11, offset: 51258},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1496, col: 11, offset: 51279},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1497, col: 11, offset: 51303},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1507, col: 1, offset: 51741},
			expr: &choiceExpr{
				pos: position{line: 1508, col: 5, offset: 51770},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1508, col: 5, offset: 51770},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1508, col: 5, offset: 51770},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1508, col: 5, offset: 51770},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1236, col: 25, offset: 40830},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1236, col: 25, offset: 40830},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1236, col: 25, offset: 40830},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1236, col: 30, offset: 40835},
													expr: &litMatcher{
														pos:        position{line: 1236, col: 30, offset: 40835},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1508, col: 40, offset: 51805},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1508, col: 45, offset: 51810},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1508, col: 55, offset: 51820},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1508, col: 89, offset: 51854},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1510, col: 9, offset: 52011},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1510, col: 9, offset: 52011},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1510, col: 9, offset: 52011},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1232, col: 25, offset: 40757},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1232, col: 25, offset: 40757},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 25, offset: 40757},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1510, col: 44, offset: 52046},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1510, col: 49, offset: 52051},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 59, offset: 52061},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1510, col: 93, offset: 52095},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1513, col: 9, offset: 52295},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 1513, col: 9, offset: 52295},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1513, col: 9, offset: 52295},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1232, col: 25, offset: 40757},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1232, col: 25, offset: 40757},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 25, offset: 40757},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1513, col: 44, offset: 52330},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1513, col: 48, offset: 52334},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1513, col: 58, offset: 52344},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1513, col: 92, offset: 52378},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1520, col: 1, offset: 52599},
			expr: &choiceExpr{
				pos: position{line: 1520, col: 15, offset: 52613},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1520, col: 15, offset: 52613},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1520, col: 39, offset: 52637},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1522, col: 1, offset: 52660},
			expr: &actionExpr{
				pos: position{line: 1522, col: 26, offset: 52685},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1522, col: 26, offset: 52685},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1522, col: 26, offset: 52685},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 31, offset: 52690},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1522, col: 41, offset: 52700},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1522, col: 72, offset: 52731},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1526, col: 1, offset: 52877},
			expr: &seqExpr{
				pos: position{line: 1526, col: 34, offset: 52910},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1526, col: 34, offset: 52910},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1526, col: 63, offset: 52939},
						expr: &seqExpr{
							pos: position{line: 1526, col: 64, offset: 52940},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1526, col: 64, offset: 52940},
									expr: &litMatcher{
										pos:        position{line: 1526, col: 66, offset: 52942},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1526, col: 73, offset: 52949},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2124, col: 10, offset: 72709},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2124, col: 16, offset: 72715},
											run: (*parser).callonDoubleQuoteMarkedTextElements9,
											expr: &litMatcher{
												pos:        position{line: 2124, col: 16, offset: 72715},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1526, col: 81, offset: 52957},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1528, col: 1, offset: 53024},
			expr: &choiceExpr{
				pos: position{line: 1528, col: 33, offset: 53056},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2061, col: 5, offset: 70785},
						run: (*parser).callonDoubleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2061, col: 5, offset: 70785},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2061, col: 5, offset: 70785},
									expr: &charClassMatcher{
										pos:        position{line: 2061, col: 5, offset: 70785},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2061, col: 15, offset: 70795},
									expr: &choiceExpr{
										pos: position{line: 2061, col: 17, offset: 70797},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2061, col: 17, offset: 70797},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2132, col: 8, offset: 72882},
												expr: &anyMatcher{
													line: 2132, col: 9, offset: 72883,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2063, col: 9, offset: 70879},
						run: (*parser).callonDoubleQuoteMarkedTextElement11,
						expr: &seqExpr{
							pos: position{line: 2063, col: 9, offset: 70879},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 9, offset: 70879},
									expr: &charClassMatcher{
										pos:        position{line: 2063, col: 9, offset: 70879},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 19, offset: 70889},
									expr: &seqExpr{
										pos: position{line: 2063, col: 20, offset: 70890},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2063, col: 20, offset: 70890},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2063, col: 27, offset: 70897},
												expr: &charClassMatcher{
													pos:        position{line: 2063, col: 27, offset: 70897},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1529, col: 7, offset: 53067},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2128, col: 12, offset: 72775},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2128, col: 12, offset: 72775},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2128, col: 19, offset: 72782},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2128, col: 28, offset: 72791},
										run: (*parser).callonDoubleQuoteMarkedTextElement24,
										expr: &litMatcher{
											pos:        position{line: 2128, col: 28, offset: 72791},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1529, col: 15, offset: 53075},
								expr: &choiceExpr{
									pos: position{line: 2128, col: 12, offset: 72775},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2128, col: 12, offset: 72775},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2128, col: 19, offset: 72782},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2128, col: 28, offset: 72791},
											run: (*parser).callonDoubleQuoteMarkedTextElement30,
											expr: &litMatcher{
												pos:        position{line: 2128, col: 28, offset: 72791},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 12261},
						run: (*parser).callonDoubleQuoteMarkedTextElement32,
						expr: &seqExpr{
							pos: position{line: 398, col: 5, offset: 12261},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 398, col: 5, offset: 12261},
									run: (*parser).callonDoubleQuoteMarkedTextElement34,
								},
								&labeledExpr{
									pos:   position{line: 401, col: 5, offset: 12325},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 401, col: 14, offset: 12334},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 415, col: 25, offset: 12896},
												run: (*parser).callonDoubleQuoteMarkedTextElement37,
												expr: &seqExpr{
													pos: position{line: 415, col: 25, offset: 12896},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 415, col: 25, offset: 12896},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 415, col: 37, offset: 12908},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonDoubleQuoteMarkedTextElement41,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 415, col: 56, offset: 12927},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 415, col: 62, offset: 12933},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonDoubleQuoteMarkedTextElement48,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonDoubleQuoteMarkedTextElement53,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonDoubleQuoteMarkedTextElement55,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 415, col: 78, offset: 12949},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 419, col: 25, offset: 13051},
												run: (*parser).callonDoubleQuoteMarkedTextElement59,
												expr: &seqExpr{
													pos: position{line: 419, col: 25, offset: 13051},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 419, col: 25, offset: 13051},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 419, col: 38, offset: 13064},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonDoubleQuoteMarkedTextElement63,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 419, col: 57, offset: 13083},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 419, col: 63, offset: 13089},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonDoubleQuoteMarkedTextElement70,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonDoubleQuoteMarkedTextElement75,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonDoubleQuoteMarkedTextElement77,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 419, col: 79, offset: 13105},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 408, col: 31, offset: 12551},
												run: (*parser).callonDoubleQuoteMarkedTextElement81,
												expr: &seqExpr{
													pos: position{line: 408, col: 31, offset: 12551},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 408, col: 31, offset: 12551},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 408, col: 35, offset: 12555},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonDoubleQuoteMarkedTextElement85,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 408, col: 54, offset: 12574},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1954, col: 5, offset: 67519},
						run: (*parser).callonDoubleQuoteMarkedTextElement91,
						expr: &seqExpr{
							pos: position{line: 1954, col: 5, offset: 67519},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1954, col: 5, offset: 67519},
									run: (*parser).callonDoubleQuoteMarkedTextElement93,
								},
								&labeledExpr{
									pos:   position{line: 1957, col: 5, offset: 67590},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 1959, col: 9, offset: 67688},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1959, col: 9, offset: 67688},
												run: (*parser).callonDoubleQuoteMarkedTextElement96,
												expr: &choiceExpr{
													pos: position{line: 487, col: 27, offset: 15054},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 487, col: 27, offset: 15054},
															run: (*parser).callonDoubleQuoteMarkedTextElement98,
															expr: &seqExpr{
																pos: position{line: 487, col: 27, offset: 15054},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 487, col: 27, offset: 15054},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 32, offset: 15059},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonDoubleQuoteMarkedTextElement102,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 487, col: 40, offset: 15067},
																		expr: &choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonDoubleQuoteMarkedTextElement108,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 47, offset: 15074},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 51, offset: 15078},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 497, col: 24, offset: 15491},
																			expr: &choiceExpr{
																				pos: position{line: 498, col: 5, offset: 15497},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 498, col: 6, offset: 15498},
																						run: (*parser).callonDoubleQuoteMarkedTextElement114,
																						expr: &seqExpr{
																							pos: position{line: 498, col: 6, offset: 15498},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 498, col: 6, offset: 15498},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 498, col: 14, offset: 15506},
																									expr: &charClassMatcher{
																										pos:        position{line: 498, col: 14, offset: 15506},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 398, col: 5, offset: 12261},
																						run: (*parser).callonDoubleQuoteMarkedTextElement119,
																						expr: &seqExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 398, col: 5, offset: 12261},
																									run: (*parser).callonDoubleQuoteMarkedTextElement121,
																								},
																								&labeledExpr{
																									pos:   position{line: 401, col: 5, offset: 12325},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 401, col: 14, offset: 12334},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 415, col: 25, offset: 12896},
																												run: (*parser).callonDoubleQuoteMarkedTextElement124,
																												expr: &seqExpr{
																													pos: position{line: 415, col: 25, offset: 12896},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 415, col: 25, offset: 12896},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 37, offset: 12908},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonDoubleQuoteMarkedTextElement128,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 56, offset: 12927},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 415, col: 62, offset: 12933},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonDoubleQuoteMarkedTextElement135,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonDoubleQuoteMarkedTextElement140,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonDoubleQuoteMarkedTextElement142,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 415, col: 78, offset: 12949},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 419, col: 25, offset: 13051},
																												run: (*parser).callonDoubleQuoteMarkedTextElement146,
																												expr: &seqExpr{
																													pos: position{line: 419, col: 25, offset: 13051},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 419, col: 25, offset: 13051},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 38, offset: 13064},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonDoubleQuoteMarkedTextElement150,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 57, offset: 13083},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 419, col: 63, offset: 13089},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonDoubleQuoteMarkedTextElement157,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonDoubleQuoteMarkedTextElement162,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonDoubleQuoteMarkedTextElement164,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 419, col: 79, offset: 13105},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 408, col: 31, offset: 12551},
																												run: (*parser).callonDoubleQuoteMarkedTextElement168,
																												expr: &seqExpr{
																													pos: position{line: 408, col: 31, offset: 12551},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 408, col: 31, offset: 12551},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 408, col: 35, offset: 12555},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonDoubleQuoteMarkedTextElement172,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 408, col: 54, offset: 12574},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 502, col: 8, offset: 15730},
																						run: (*parser).callonDoubleQuoteMarkedTextElement178,
																						expr: &litMatcher{
																							pos:        position{line: 502, col: 8, offset: 15730},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 79, offset: 15106},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 489, col: 9, offset: 15179},
															run: (*parser).callonDoubleQuoteMarkedTextElement181,
															expr: &seqExpr{
																pos: position{line: 489, col: 9, offset: 15179},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 489, col: 9, offset: 15179},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 489, col: 14, offset: 15184},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonDoubleQuoteMarkedTextElement185,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 489, col: 22, offset: 15192},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1962, col: 11, offset: 67792},
												run: (*parser).callonDoubleQuoteMarkedTextElement189,
												expr: &charClassMatcher{
													pos:        position{line: 1962, col: 12, offset: 67793},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1532, col: 7, offset: 53141},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1533, col: 7, offset: 53159},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1534, col: 7, offset: 53178},
						name: "NonDoubleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 692, col: 23, offset: 21691},
						run: (*parser).callonDoubleQuoteMarkedTextElement194,
						expr: &seqExpr{
							pos: position{line: 692, col: 23, offset: 21691},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 692, col: 51, offset: 21719},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 692, col: 56, offset: 21724},
										run: (*parser).callonDoubleQuoteMarkedTextElement198,
										expr: &oneOrMoreExpr{
											pos: position{line: 692, col: 56, offset: 21724},
											expr: &charClassMatcher{
												pos:        position{line: 692, col: 56, offset: 21724},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1550, col: 5, offset: 53618},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1551, col: 7, offset: 53717},
						run: (*parser).callonDoubleQuoteMarkedTextElement203,
						expr: &seqExpr{
							pos: position{line: 1551, col: 7, offset: 53717},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1551, col: 7, offset: 53717},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&actionExpr{
									pos: position{line: 2053, col: 14, offset: 70404},
									run: (*parser).callonDoubleQuoteMarkedTextElement206,
									expr: &oneOrMoreExpr{
										pos: position{line: 2053, col: 14, offset: 70404},
										expr: &charClassMatcher{
											pos:        position{line: 2053, col: 14, offset: 70404},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1538, col: 1, offset: 53274},
			expr: &actionExpr{
				pos: position{line: 1539, col: 5, offset: 53306},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1539, col: 5, offset: 53306},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1539, col: 5, offset: 53306},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1539, col: 16, offset: 53317},
								expr: &ruleRefExpr{
									pos:  position{line: 1539, col: 17, offset: 53318},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 5, offset: 53344},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1540, col: 11, offset: 53350},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1540, col: 11, offset: 53350},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1541, col: 11, offset: 53369},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1542, col: 11, offset: 53390},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1543, col: 11, offset: 53414},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1544, col: 11, offset: 53446},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1545, col: 11, offset: 53470},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1555, col: 1, offset: 53895},
			expr: &choiceExpr{
				pos: position{line: 1555, col: 26, offset: 53920},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1555, col: 26, offset: 53920},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1555, col: 26, offset: 53920},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1555, col: 27, offset: 53921},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&notExpr{
									pos: position{line: 1555, col: 31, offset: 53925},
									expr: &litMatcher{
										pos:        position{line: 1555, col: 32, offset: 53926},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1555, col: 37, offset: 53931},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1555, col: 47, offset: 53941},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1555, col: 78, offset: 53972},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1557, col: 9, offset: 54174},
						run: (*parser).callonSingleQuoteMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1557, col: 9, offset: 54174},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1557, col: 9, offset: 54174},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1557, col: 13, offset: 54178},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1557, col: 23, offset: 54188},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1557, col: 23, offset: 54188},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1557, col: 27, offset: 54192},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1557, col: 58, offset: 54223},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1561, col: 1, offset: 54444},
			expr: &seqExpr{
				pos: position{line: 1561, col: 34, offset: 54477},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1561, col: 34, offset: 54477},
						expr: &choiceExpr{
							pos: position{line: 2124, col: 10, offset: 72709},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2124, col: 10, offset: 72709},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2124, col: 16, offset: 72715},
									run: (*parser).callonSingleQuoteMarkedTextElements5,
									expr: &litMatcher{
										pos:        position{line: 2124, col: 16, offset: 72715},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1561, col: 41, offset: 54484},
						expr: &ruleRefExpr{
							pos:  position{line: 1561, col: 41, offset: 54484},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1563, col: 1, offset: 54515},
			expr: &choiceExpr{
				pos: position{line: 1563, col: 33, offset: 54547},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2061, col: 5, offset: 70785},
						run: (*parser).callonSingleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2061, col: 5, offset: 70785},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2061, col: 5, offset: 70785},
									expr: &charClassMatcher{
										pos:        position{line: 2061, col: 5, offset: 70785},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2061, col: 15, offset: 70795},
									expr: &choiceExpr{
										pos: position{line: 2061, col: 17, offset: 70797},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2061, col: 17, offset: 70797},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2132, col: 8, offset: 72882},
												expr: &anyMatcher{
													line: 2132, col: 9, offset: 72883,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2063, col: 9, offset: 70879},
						run: (*parser).callonSingleQuoteMarkedTextElement11,
						expr: &seqExpr{
							pos: position{line: 2063, col: 9, offset: 70879},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 9, offset: 70879},
									expr: &charClassMatcher{
										pos:        position{line: 2063, col: 9, offset: 70879},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2063, col: 19, offset: 70889},
									expr: &seqExpr{
										pos: position{line: 2063, col: 20, offset: 70890},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2063, col: 20, offset: 70890},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2063, col: 27, offset: 70897},
												expr: &charClassMatcher{
													pos:        position{line: 2063, col: 27, offset: 70897},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1564, col: 7, offset: 54558},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2128, col: 12, offset: 72775},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2128, col: 12, offset: 72775},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2128, col: 19, offset: 72782},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2128, col: 28, offset: 72791},
										run: (*parser).callonSingleQuoteMarkedTextElement24,
										expr: &litMatcher{
											pos:        position{line: 2128, col: 28, offset: 72791},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1564, col: 15, offset: 54566},
								expr: &choiceExpr{
									pos: position{line: 2128, col: 12, offset: 72775},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2128, col: 12, offset: 72775},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2128, col: 19, offset: 72782},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2128, col: 28, offset: 72791},
											run: (*parser).callonSingleQuoteMarkedTextElement30,
											expr: &litMatcher{
												pos:        position{line: 2128, col: 28, offset: 72791},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 12261},
						run: (*parser).callonSingleQuoteMarkedTextElement32,
						expr: &seqExpr{
							pos: position{line: 398, col: 5, offset: 12261},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 398, col: 5, offset: 12261},
									run: (*parser).callonSingleQuoteMarkedTextElement34,
								},
								&labeledExpr{
									pos:   position{line: 401, col: 5, offset: 12325},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 401, col: 14, offset: 12334},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 415, col: 25, offset: 12896},
												run: (*parser).callonSingleQuoteMarkedTextElement37,
												expr: &seqExpr{
													pos: position{line: 415, col: 25, offset: 12896},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 415, col: 25, offset: 12896},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 415, col: 37, offset: 12908},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteMarkedTextElement41,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 415, col: 56, offset: 12927},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 415, col: 62, offset: 12933},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonSingleQuoteMarkedTextElement48,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonSingleQuoteMarkedTextElement53,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonSingleQuoteMarkedTextElement55,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 415, col: 78, offset: 12949},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 419, col: 25, offset: 13051},
												run: (*parser).callonSingleQuoteMarkedTextElement59,
												expr: &seqExpr{
													pos: position{line: 419, col: 25, offset: 13051},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 419, col: 25, offset: 13051},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 419, col: 38, offset: 13064},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteMarkedTextElement63,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 419, col: 57, offset: 13083},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 419, col: 63, offset: 13089},
																expr: &actionExpr{
																	pos: position{line: 423, col: 17, offset: 13196},
																	run: (*parser).callonSingleQuoteMarkedTextElement70,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 17, offset: 13196},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 17, offset: 13196},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 21, offset: 13200},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 423, col: 28, offset: 13207},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 423, col: 28, offset: 13207},
																							run: (*parser).callonSingleQuoteMarkedTextElement75,
																							expr: &charClassMatcher{
																								pos:        position{line: 423, col: 28, offset: 13207},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 425, col: 9, offset: 13261},
																							run: (*parser).callonSingleQuoteMarkedTextElement77,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 425, col: 9, offset: 13261},
																								expr: &charClassMatcher{
																									pos:        position{line: 425, col: 9, offset: 13261},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 419, col: 79, offset: 13105},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 408, col: 31, offset: 12551},
												run: (*parser).callonSingleQuoteMarkedTextElement81,
												expr: &seqExpr{
													pos: position{line: 408, col: 31, offset: 12551},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 408, col: 31, offset: 12551},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 408, col: 35, offset: 12555},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 98, col: 18, offset: 2832},
																run: (*parser).callonSingleQuoteMarkedTextElement85,
																expr: &seqExpr{
																	pos: position{line: 98, col: 18, offset: 2832},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 98, col: 18, offset: 2832},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 98, col: 28, offset: 2842},
																			expr: &charClassMatcher{
																				pos:        position{line: 98, col: 29, offset: 2843},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 408, col: 54, offset: 12574},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1954, col: 5, offset: 67519},
						run: (*parser).callonSingleQuoteMarkedTextElement91,
						expr: &seqExpr{
							pos: position{line: 1954, col: 5, offset: 67519},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1954, col: 5, offset: 67519},
									run: (*parser).callonSingleQuoteMarkedTextElement93,
								},
								&labeledExpr{
									pos:   position{line: 1957, col: 5, offset: 67590},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 1959, col: 9, offset: 67688},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1959, col: 9, offset: 67688},
												run: (*parser).callonSingleQuoteMarkedTextElement96,
												expr: &choiceExpr{
													pos: position{line: 487, col: 27, offset: 15054},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 487, col: 27, offset: 15054},
															run: (*parser).callonSingleQuoteMarkedTextElement98,
															expr: &seqExpr{
																pos: position{line: 487, col: 27, offset: 15054},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 487, col: 27, offset: 15054},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 32, offset: 15059},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonSingleQuoteMarkedTextElement102,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 487, col: 40, offset: 15067},
																		expr: &choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonSingleQuoteMarkedTextElement108,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 47, offset: 15074},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 487, col: 51, offset: 15078},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 497, col: 24, offset: 15491},
																			expr: &choiceExpr{
																				pos: position{line: 498, col: 5, offset: 15497},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 498, col: 6, offset: 15498},
																						run: (*parser).callonSingleQuoteMarkedTextElement114,
																						expr: &seqExpr{
																							pos: position{line: 498, col: 6, offset: 15498},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 498, col: 6, offset: 15498},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 498, col: 14, offset: 15506},
																									expr: &charClassMatcher{
																										pos:        position{line: 498, col: 14, offset: 15506},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 398, col: 5, offset: 12261},
																						run: (*parser).callonSingleQuoteMarkedTextElement119,
																						expr: &seqExpr{
																							pos: position{line: 398, col: 5, offset: 12261},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 398, col: 5, offset: 12261},
																									run: (*parser).callonSingleQuoteMarkedTextElement121,
																								},
																								&labeledExpr{
																									pos:   position{line: 401, col: 5, offset: 12325},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 401, col: 14, offset: 12334},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 415, col: 25, offset: 12896},
																												run: (*parser).callonSingleQuoteMarkedTextElement124,
																												expr: &seqExpr{
																													pos: position{line: 415, col: 25, offset: 12896},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 415, col: 25, offset: 12896},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 37, offset: 12908},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteMarkedTextElement128,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 415, col: 56, offset: 12927},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 415, col: 62, offset: 12933},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonSingleQuoteMarkedTextElement135,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonSingleQuoteMarkedTextElement140,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonSingleQuoteMarkedTextElement142,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 415, col: 78, offset: 12949},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 419, col: 25, offset: 13051},
																												run: (*parser).callonSingleQuoteMarkedTextElement146,
																												expr: &seqExpr{
																													pos: position{line: 419, col: 25, offset: 13051},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 419, col: 25, offset: 13051},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 38, offset: 13064},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteMarkedTextElement150,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 57, offset: 13083},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 419, col: 63, offset: 13089},
																																expr: &actionExpr{
																																	pos: position{line: 423, col: 17, offset: 13196},
																																	run: (*parser).callonSingleQuoteMarkedTextElement157,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 17, offset: 13196},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 17, offset: 13196},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 21, offset: 13200},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 423, col: 28, offset: 13207},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 423, col: 28, offset: 13207},
																																							run: (*parser).callonSingleQuoteMarkedTextElement162,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 423, col: 28, offset: 13207},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 425, col: 9, offset: 13261},
																																							run: (*parser).callonSingleQuoteMarkedTextElement164,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 425, col: 9, offset: 13261},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 425, col: 9, offset: 13261},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 419, col: 79, offset: 13105},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 408, col: 31, offset: 12551},
																												run: (*parser).callonSingleQuoteMarkedTextElement168,
																												expr: &seqExpr{
																													pos: position{line: 408, col: 31, offset: 12551},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 408, col: 31, offset: 12551},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 408, col: 35, offset: 12555},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 98, col: 18, offset: 2832},
																																run: (*parser).callonSingleQuoteMarkedTextElement172,
																																expr: &seqExpr{
																																	pos: position{line: 98, col: 18, offset: 2832},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 98, col: 18, offset: 2832},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 98, col: 28, offset: 2842},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 98, col: 29, offset: 2843},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 408, col: 54, offset: 12574},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 502, col: 8, offset: 15730},
																						run: (*parser).callonSingleQuoteMarkedTextElement178,
																						expr: &litMatcher{
																							pos:        position{line: 502, col: 8, offset: 15730},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 487, col: 79, offset: 15106},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 489, col: 9, offset: 15179},
															run: (*parser).callonSingleQuoteMarkedTextElement181,
															expr: &seqExpr{
																pos: position{line: 489, col: 9, offset: 15179},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 489, col: 9, offset: 15179},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 489, col: 14, offset: 15184},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2112, col: 7, offset: 72433},
																			run: (*parser).callonSingleQuoteMarkedTextElement185,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2112, col: 7, offset: 72433},
																				expr: &charClassMatcher{
																					pos:        position{line: 2112, col: 7, offset: 72433},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 489, col: 22, offset: 15192},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1962, col: 11, offset: 67792},
												run: (*parser).callonSingleQuoteMarkedTextElement189,
												expr: &charClassMatcher{
													pos:        position{line: 1962, col: 12, offset: 67793},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1567, col: 7, offset: 54632},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1568, col: 7, offset: 54650},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1569, col: 7, offset: 54669},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1569, col: 7, offset: 54669},
								expr: &choiceExpr{
									pos: position{line: 2124, col: 10, offset: 72709},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2124, col: 10, offset: 72709},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2124, col: 16, offset: 72715},
											run: (*parser).callonSingleQuoteMarkedTextElement197,
											expr: &litMatcher{
												pos:        position{line: 2124, col: 16, offset: 72715},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1569, col: 14, offset: 54676},
								expr: &seqExpr{
									pos: position{line: 1569, col: 15, offset: 54677},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1569, col: 15, offset: 54677},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1569, col: 19, offset: 54681},
											expr: &litMatcher{
												pos:        position{line: 1569, col: 20, offset: 54682},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 7, offset: 54694},
						name: "NonSingleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 692, col: 23, offset: 21691},
						run: (*parser).callonSingleQuoteMarkedTextElement205,
						expr: &seqExpr{
							pos: position{line: 692, col: 23, offset: 21691},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 692, col: 51, offset: 21719},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 692, col: 56, offset: 21724},
										run: (*parser).callonSingleQuoteMarkedTextElement209,
										expr: &oneOrMoreExpr{
											pos: position{line: 692, col: 56, offset: 21724},
											expr: &charClassMatcher{
												pos:        position{line: 692, col: 56, offset: 21724},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 691, col: 32, offset: 21660},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1585, col: 5, offset: 55133},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1586, col: 7, offset: 55230},
						run: (*parser).callonSingleQuoteMarkedTextElement214,
						expr: &seqExpr{
							pos: position{line: 1586, col: 7, offset: 55230},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1586, col: 7, offset: 55230},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&actionExpr{
									pos: position{line: 2053, col: 14, offset: 70404},
									run: (*parser).callonSingleQuoteMarkedTextElement217,
									expr: &oneOrMoreExpr{
										pos: position{line: 2053, col: 14, offset: 70404},
										expr: &charClassMatcher{
											pos:        position{line: 2053, col: 14, offset: 70404},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1574, col: 1, offset: 54790},
			expr: &actionExpr{
				pos: position{line: 1575, col: 5, offset: 54822},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1575, col: 5, offset: 54822},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1575, col: 5, offset: 54822},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1575, col: 16, offset: 54833},
								expr: &ruleRefExpr{
									pos:  position{line: 1575, col: 17, offset: 54834},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1576, col: 5, offset: 54860},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1576, col: 11, offset: 54866},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1576, col: 11, offset: 54866},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1577, col: 11, offset: 54898},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1578, col: 11, offset: 54917},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 11, offset: 54938},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1580, col: 11, offset: 54962},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1581, col: 11, offset: 54986},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1590, col: 1, offset: 55405},
			expr: &choiceExpr{
				pos: position{line: 1591, col: 5, offset: 55430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1591, col: 5, offset: 55430},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1591, col: 5, offset: 55430},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1591, col: 5, offset: 55430},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1236, col: 25, offset: 40830},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1236, col: 25, offset: 40830},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1236, col: 25, offset: 40830},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1236, col: 30, offset: 40835},
													expr: &litMatcher{
														pos:        position{line: 1236, col: 30, offset: 40835},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1591, col: 40, offset: 55465},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1591, col: 45, offset: 55470},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1591, col: 55, offset: 55480},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1591, col: 86, offset: 55511},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1593, col: 9, offset: 55668},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1593, col: 9, offset: 55668},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1593, col: 9, offset: 55668},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1232, col: 25, offset: 40757},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1232, col: 25, offset: 40757},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 25, offset: 40757},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1593, col: 44, offset: 55703},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1593, col: 49, offset: 55708},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1593, col: 59, offset: 55718},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1593, col: 90, offset: 55749},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1596, col: 9, offset: 55949},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 1596, col: 9, offset: 55949},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1596, col: 9, offset: 55949},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1232, col: 25, offset: 40757},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1232, col: 25, offset: 40757},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 25, offset: 40757},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1596, col: 44, offset: 55984},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1596, col: 48, offset: 55988},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1596, col: 58, offset: 55998},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1596, col: 89, offset: 56029},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1603, col: 1, offset: 56257},
			expr: &actionExpr{
				pos: position{line: 1603, col: 18, offset: 56274},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1603, col: 18, offset: 56274},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1603, col: 18, offset: 56274},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 22, offset: 56278},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1603, col: 31, offset: 56287},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1603, col: 53, offset: 56309},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1607, col: 1, offset: 56417},
			expr: &choiceExpr{
				pos: position{line: 1607, col: 25, offset: 56441},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1607, col: 25, offset: 56441},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 1609, col: 21, offset: 56493},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 1609, col: 21, offset: 56493},
							expr: &charClassMatcher{
								pos:        position{line: 1609, col: 21, offset: 56493},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1613, col: 1, offset: 56578},
			expr: &actionExpr{
				pos: position{line: 1613, col: 25, offset: 56602},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 25, offset: 56602},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1613, col: 25, offset: 56602},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1232, col: 25, offset: 40757},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1232, col: 25, offset: 40757},
									expr: &litMatcher{
										pos:        position{line: 1232, col: 25, offset: 40757},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1613, col: 60, offset: 56637},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1613, col: 64, offset: 56641},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1613, col: 73, offset: 56650},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1613, col: 95, offset: 56672},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1620, col: 1, offset: 56890},
			expr: &actionExpr{
				pos: position{line: 1620, col: 20, offset: 56909},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1620, col: 20, offset: 56909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1620, col: 20, offset: 56909},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1620, col: 24, offset: 56913},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1620, col: 33, offset: 56922},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1620, col: 57, offset: 56946},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1624, col: 1, offset: 57056},
			expr: &choiceExpr{
				pos: position{line: 1624, col: 27, offset: 57082},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1624, col: 27, offset: 57082},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 1626, col: 23, offset: 57138},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 1626, col: 23, offset: 57138},
							expr: &charClassMatcher{
								pos:        position{line: 1626, col: 23, offset: 57138},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1630, col: 1, offset: 57223},
			expr: &actionExpr{
				pos: position{line: 1630, col: 27, offset: 57249},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1630, col: 27, offset: 57249},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1630, col: 27, offset: 57249},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1232, col: 25, offset: 40757},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1232, col: 25, offset: 40757},
									expr: &litMatcher{
										pos:        position{line: 1232, col: 25, offset: 40757},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1630, col: 62, offset: 57284},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 66, offset: 57288},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1630, col: 75, offset: 57297},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1630, col: 99, offset: 57321},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1638, col: 1, offset: 57633},
			expr: &choiceExpr{
				pos: position{line: 1638, col: 17, offset: 57649},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1638, col: 17, offset: 57649},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 38, offset: 57670},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1640, col: 1, offset: 57690},
			expr: &actionExpr{
				pos: position{line: 1640, col: 23, offset: 57712},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1640, col: 23, offset: 57712},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1648, col: 27, offset: 58035},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&notExpr{
							pos: position{line: 1648, col: 32, offset: 58040},
							expr: &charClassMatcher{
								pos:        position{line: 1648, col: 33, offset: 58041},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1640, col: 46, offset: 57735},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1640, col: 55, offset: 57744},
								name: "SingleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1650, col: 25, offset: 58076},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1644, col: 1, offset: 57883},
			expr: &actionExpr{
				pos: position{line: 1644, col: 31, offset: 57913},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1644, col: 31, offset: 57913},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1644, col: 41, offset: 57923},
						expr: &ruleRefExpr{
							pos:  position{line: 1644, col: 41, offset: 57923},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1653, col: 1, offset: 58164},
			expr: &actionExpr{
				pos: position{line: 1654, col: 5, offset: 58198},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1654, col: 5, offset: 58198},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1655, col: 9, offset: 58216},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1655, col: 9, offset: 58216},
								exprs: []interface{}{
									&actionExpr{
										pos: position{line: 699, col: 14, offset: 22046},
										run: (*parser).callonSingleQuotedStringElement5,
										expr: &seqExpr{
											pos: position{line: 699, col: 14, offset: 22046},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2124, col: 10, offset: 72709},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2124, col: 10, offset: 72709},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2124, col: 16, offset: 72715},
															run: (*parser).callonSingleQuotedStringElement9,
															expr: &litMatcher{
																pos:        position{line: 2124, col: 16, offset: 72715},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 699, col: 20, offset: 22052},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 699, col: 24, offset: 22056},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonSingleQuotedStringElement15,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 699, col: 31, offset: 22063},
													expr: &choiceExpr{
														pos: position{line: 2134, col: 8, offset: 72893},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2132, col: 8, offset: 72882},
																expr: &anyMatcher{
																	line: 2132, col: 9, offset: 72883,
																},
															},
															&litMatcher{
																pos:        position{line: 2128, col: 12, offset: 72775},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2128, col: 19, offset: 72782},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2128, col: 28, offset: 72791},
																run: (*parser).callonSingleQuotedStringElement23,
																expr: &litMatcher{
																	pos:        position{line: 2128, col: 28, offset: 72791},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 1655, col: 19, offset: 58226},
										expr: &litMatcher{
											pos:        position{line: 1650, col: 25, offset: 58076},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1656, col: 11, offset: 58283},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1656, col: 11, offset: 58283},
										expr: &choiceExpr{
											pos: position{line: 2124, col: 10, offset: 72709},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2124, col: 10, offset: 72709},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2124, col: 16, offset: 72715},
													run: (*parser).callonSingleQuotedStringElement31,
													expr: &litMatcher{
														pos:        position{line: 2124, col: 16, offset: 72715},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 1656, col: 18, offset: 58290},
										expr: &litMatcher{
											pos:        position{line: 1650, col: 25, offset: 58076},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1657, col: 12, offset: 58323},
								run: (*parser).callonSingleQuotedStringElement35,
								expr: &seqExpr{
									pos: position{line: 1657, col: 12, offset: 58323},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1657, col: 12, offset: 58323},
											expr: &litMatcher{
												pos:        position{line: 1657, col: 13, offset: 58324},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1657, col: 17, offset: 58328},
											label: "element",
											expr: &choiceExpr{
												pos: position{line: 1972, col: 11, offset: 68044},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 1974, col: 15, offset: 68138},
														run: (*parser).callonSingleQuotedStringElement41,
														expr: &litMatcher{
															pos:        position{line: 1974, col: 15, offset: 68138},
															val:        "`'",
															ignoreCase: false,
															want:       "\"`'\"",
														},
													},
													&actionExpr{
														pos: position{line: 1980, col: 14, offset: 68253},
														run: (*parser).callonSingleQuotedStringElement43,
														expr: &litMatcher{
															pos:        position{line: 1980, col: 14, offset: 68253},
															val:        "(C)",
															ignoreCase: false,
															want:       "\"(C)\"",
														},
													},
													&actionExpr{
														pos: position{line: 1984, col: 14, offset: 68329},
														run: (*parser).callonSingleQuotedStringElement45,
														expr: &litMatcher{
															pos:        position{line: 1984, col: 14, offset: 68329},
															val:        "(TM)",
															ignoreCase: false,
															want:       "\"(TM)\"",
														},
													},
													&actionExpr{
														pos: position{line: 1988, col: 15, offset: 68407},
														run: (*parser).callonSingleQuotedStringElement47,
														expr: &litMatcher{
															pos:        position{line: 1988, col: 15, offset: 68407},
															val:        "(R)",
															ignoreCase: false,
															want:       "\"(R)\"",
														},
													},
													&actionExpr{
														pos: position{line: 1992, col: 13, offset: 68482},
														run: (*parser).callonSingleQuotedStringElement49,
														expr: &litMatcher{
															pos:        position{line: 1992, col: 13, offset: 68482},
															val:        "...",
															ignoreCase: false,
															want:       "\"...\"",
														},
													},
													&actionExpr{
														pos: position{line: 2000, col: 22, offset: 68788},
														run: (*parser).callonSingleQuotedStringElement51,
														expr: &seqExpr{
															pos: position{line: 2000, col: 22, offset: 68788},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2049, col: 13, offset: 70330},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&litMatcher{
																	pos:        position{line: 2000, col: 31, offset: 68797},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&andExpr{
																	pos: position{line: 2000, col: 35, offset: 68801},
																	expr: &charClassMatcher{
																		pos:        position{line: 2000, col: 36, offset: 68802},
																		val:        "[\\pL]",
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1658, col: 11, offset: 58409},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1659, col: 11, offset: 58450},
								name: "DoubleQuotedString",
							},
							&charClassMatcher{
								pos:        position{line: 1676, col: 41, offset: 58932},
								val:        "[^\\r\\n\\t `]",
								chars:      []rune{'\r', '\n', '\t', ' ', '`'},
								ignoreCase: false,
								inverted:   true,
							},
							&actionExpr{
								pos: position{line: 1676, col: 55, offset: 58946},
								run: (*parser).callonSingleQuotedStringElement60,
								expr: &seqExpr{
									pos: position{line: 1676, col: 55, offset: 58946},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1676, col: 55, offset: 58946},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1676, col: 59, offset: 58950},
											expr: &litMatcher{
												pos:        position{line: 1676, col: 60, offset: 58951},
												val:        "'",
												ignoreCase: false,
												want:       "\"'\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1665, col: 1, offset: 58558},
			expr: &actionExpr{
				pos: position{line: 1666, col: 5, offset: 58596},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1666, col: 5, offset: 58596},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1666, col: 5, offset: 58596},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1666, col: 16, offset: 58607},
								expr: &ruleRefExpr{
									pos:  position{line: 1666, col: 17, offset: 58608},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1667, col: 5, offset: 58634},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1667, col: 11, offset: 58640},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1667, col: 11, offset: 58640},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1668, col: 11, offset: 58659},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1669, col: 12, offset: 58681},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1669, col: 12, offset: 58681},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1669, col: 12, offset: 58681},
													expr: &litMatcher{
														pos:        position{line: 1669, col: 13, offset: 58682},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1669, col: 18, offset: 58687},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1669, col: 27, offset: 58696},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1670, col: 11, offset: 58745},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1671, col: 11, offset: 58769},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1672, col: 11, offset: 58795},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1680, col: 1, offset: 59023},
			expr: &actionExpr{
				pos: position{line: 1680, col: 23, offset: 59045},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1680, col: 23, offset: 59045},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1709, col: 27, offset: 60062},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&notExpr{
							pos: position{line: 1709, col: 33, offset: 60068},
							expr: &charClassMatcher{
								pos:        position{line: 1709, col: 34, offset: 60069},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1680, col: 46, offset: 59068},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1680, col: 55, offset: 59077},
								name: "DoubleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1711, col: 25, offset: 60104},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1684, col: 1, offset: 59216},
			expr: &actionExpr{
				pos: position{line: 1684, col: 31, offset: 59246},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1684, col: 31, offset: 59246},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1684, col: 41, offset: 59256},
						expr: &ruleRefExpr{
							pos:  position{line: 1684, col: 41, offset: 59256},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1689, col: 1, offset: 59424},
			expr: &actionExpr{
				pos: position{line: 1689, col: 30, offset: 59453},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1689, col: 30, offset: 59453},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1690, col: 5, offset: 59467},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1690, col: 5, offset: 59467},
								exprs: []interface{}{
									&actionExpr{
										pos: position{line: 699, col: 14, offset: 22046},
										run: (*parser).callonDoubleQuotedStringElement5,
										expr: &seqExpr{
											pos: position{line: 699, col: 14, offset: 22046},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2124, col: 10, offset: 72709},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2124, col: 10, offset: 72709},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2124, col: 16, offset: 72715},
															run: (*parser).callonDoubleQuotedStringElement9,
															expr: &litMatcher{
																pos:        position{line: 2124, col: 16, offset: 72715},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 699, col: 20, offset: 22052},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 699, col: 24, offset: 22056},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonDoubleQuotedStringElement15,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 699, col: 31, offset: 22063},
													expr: &choiceExpr{
														pos: position{line: 2134, col: 8, offset: 72893},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2132, col: 8, offset: 72882},
																expr: &anyMatcher{
																	line: 2132, col: 9, offset: 72883,
																},
															},
															&litMatcher{
																pos:        position{line: 2128, col: 12, offset: 72775},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2128, col: 19, offset: 72782},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2128, col: 28, offset: 72791},
																run: (*parser).callonDoubleQuotedStringElement23,
																expr: &litMatcher{
																	pos:        position{line: 2128, col: 28, offset: 72791},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 1690, col: 15, offset: 59477},
										expr: &litMatcher{
											pos:        position{line: 1711, col: 25, offset: 60104},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1691, col: 7, offset: 59530},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1691, col: 7, offset: 59530},
										expr: &choiceExpr{
											pos: position{line: 2124, col: 10, offset: 72709},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2124, col: 10, offset: 72709},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2124, col: 16, offset: 72715},
													run: (*parser).callonDoubleQuotedStringElement31,
													expr: &litMatcher{
														pos:        position{line: 2124, col: 16, offset: 72715},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 1691, col: 14, offset: 59537},
										expr: &litMatcher{
											pos:        position{line: 1711, col: 25, offset: 60104},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1692, col: 7, offset: 59565},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1693, col: 7, offset: 59602},
								name: "SingleQuotedString",
							},
							&actionExpr{
								pos: position{line: 1713, col: 41, offset: 60151},
								run: (*parser).callonDoubleQuotedStringElement37,
								expr: &choiceExpr{
									pos: position{line: 1713, col: 42, offset: 60152},
									alternatives: []interface{}{
										&charClassMatcher{
											pos:        position{line: 1713, col: 42, offset: 60152},
											val:        "[^\\r\\n\\t `]",
											chars:      []rune{'\r', '\n', '\t', ' ', '`'},
											ignoreCase: false,
											inverted:   true,
										},
										&seqExpr{
											pos: position{line: 1713, col: 56, offset: 60166},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1713, col: 56, offset: 60166},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&notExpr{
													pos: position{line: 1713, col: 60, offset: 60170},
													expr: &litMatcher{
														pos:        position{line: 1713, col: 61, offset: 60171},
														val:        "\"",
														ignoreCase: false,
														want:       "\"\\\"\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1698, col: 1, offset: 59701},
			expr: &actionExpr{
				pos: position{line: 1699, col: 5, offset: 59739},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1699, col: 5, offset: 59739},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1699, col: 5, offset: 59739},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1699, col: 16, offset: 59750},
								expr: &ruleRefExpr{
									pos:  position{line: 1699, col: 17, offset: 59751},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1700, col: 5, offset: 59777},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1700, col: 11, offset: 59783},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1700, col: 11, offset: 59783},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1701, col: 11, offset: 59802},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1702, col: 12, offset: 59824},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1702, col: 12, offset: 59824},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1702, col: 12, offset: 59824},
													expr: &litMatcher{
														pos:        position{line: 1702, col: 13, offset: 59825},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1702, col: 19, offset: 59831},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1702, col: 28, offset: 59840},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1703, col: 11, offset: 59889},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1704, col: 11, offset: 59913},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1705, col: 11, offset: 59939},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1774, col: 1, offset: 62303},
			expr: &actionExpr{
				pos: position{line: 1774, col: 20, offset: 62322},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1774, col: 20, offset: 62322},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1774, col: 20, offset: 62322},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1774, col: 29, offset: 62331},
								expr: &choiceExpr{
									pos: position{line: 1775, col: 5, offset: 62337},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2072, col: 5, offset: 71182},
											run: (*parser).callonAttributesGroup6,
											expr: &seqExpr{
												pos: position{line: 2072, col: 5, offset: 71182},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2072, col: 5, offset: 71182},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2072, col: 14, offset: 71191},
															run: (*parser).callonAttributesGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2072, col: 14, offset: 71191},
																expr: &charClassMatcher{
																	pos:        position{line: 2072, col: 14, offset: 71191},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2075, col: 5, offset: 71272},
														expr: &choiceExpr{
															pos: position{line: 2075, col: 7, offset: 71274},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2075, col: 7, offset: 71274},
																	val:        "[\\r\\n �]",
																	chars:      []rune{'\r', '\n', ' ', '�'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											run: (*parser).callonAttributesGroup17,
											expr: &seqExpr{
												pos: position{line: 2061, col: 5, offset: 70785},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2061, col: 5, offset: 70785},
														expr: &charClassMatcher{
															pos:        position{line: 2061, col: 5, offset: 70785},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2061, col: 15, offset: 70795},
														expr: &choiceExpr{
															pos: position{line: 2061, col: 17, offset: 70797},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2061, col: 17, offset: 70797},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											run: (*parser).callonAttributesGroup26,
											expr: &seqExpr{
												pos: position{line: 2063, col: 9, offset: 70879},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 9, offset: 70879},
														expr: &charClassMatcher{
															pos:        position{line: 2063, col: 9, offset: 70879},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 19, offset: 70889},
														expr: &seqExpr{
															pos: position{line: 2063, col: 20, offset: 70890},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2063, col: 20, offset: 70890},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2063, col: 27, offset: 70897},
																	expr: &charClassMatcher{
																		pos:        position{line: 2063, col: 27, offset: 70897},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1776, col: 7, offset: 62354},
											name: "InlinePassthrough",
										},
										&actionExpr{
											pos: position{line: 398, col: 5, offset: 12261},
											run: (*parser).callonAttributesGroup36,
											expr: &seqExpr{
												pos: position{line: 398, col: 5, offset: 12261},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 398, col: 5, offset: 12261},
														run: (*parser).callonAttributesGroup38,
													},
													&labeledExpr{
														pos:   position{line: 401, col: 5, offset: 12325},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 401, col: 14, offset: 12334},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 415, col: 25, offset: 12896},
																	run: (*parser).callonAttributesGroup41,
																	expr: &seqExpr{
																		pos: position{line: 415, col: 25, offset: 12896},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 415, col: 25, offset: 12896},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 415, col: 37, offset: 12908},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonAttributesGroup45,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 415, col: 56, offset: 12927},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 415, col: 62, offset: 12933},
																					expr: &actionExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						run: (*parser).callonAttributesGroup52,
																						expr: &seqExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 423, col: 17, offset: 13196},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 423, col: 21, offset: 13200},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 423, col: 28, offset: 13207},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												run: (*parser).callonAttributesGroup57,
																												expr: &charClassMatcher{
																													pos:        position{line: 423, col: 28, offset: 13207},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												run: (*parser).callonAttributesGroup59,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													expr: &charClassMatcher{
																														pos:        position{line: 425, col: 9, offset: 13261},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 415, col: 78, offset: 12949},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 419, col: 25, offset: 13051},
																	run: (*parser).callonAttributesGroup63,
																	expr: &seqExpr{
																		pos: position{line: 419, col: 25, offset: 13051},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 419, col: 25, offset: 13051},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 419, col: 38, offset: 13064},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonAttributesGroup67,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 419, col: 57, offset: 13083},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 419, col: 63, offset: 13089},
																					expr: &actionExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						run: (*parser).callonAttributesGroup74,
																						expr: &seqExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 423, col: 17, offset: 13196},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 423, col: 21, offset: 13200},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 423, col: 28, offset: 13207},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												run: (*parser).callonAttributesGroup79,
																												expr: &charClassMatcher{
																													pos:        position{line: 423, col: 28, offset: 13207},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												run: (*parser).callonAttributesGroup81,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													expr: &charClassMatcher{
																														pos:        position{line: 425, col: 9, offset: 13261},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 419, col: 79, offset: 13105},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 408, col: 31, offset: 12551},
																	run: (*parser).callonAttributesGroup85,
																	expr: &seqExpr{
																		pos: position{line: 408, col: 31, offset: 12551},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 408, col: 31, offset: 12551},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 408, col: 35, offset: 12555},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonAttributesGroup89,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 408, col: 54, offset: 12574},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											run: (*parser).callonAttributesGroup95,
											expr: &seqExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 692, col: 51, offset: 21719},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															run: (*parser).callonAttributesGroup99,
															expr: &oneOrMoreExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																expr: &charClassMatcher{
																	pos:        position{line: 692, col: 56, offset: 21724},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2081, col: 12, offset: 71493},
											run: (*parser).callonAttributesGroup103,
											expr: &anyMatcher{
												line: 2081, col: 12, offset: 71493,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1794, col: 1, offset: 62948},
			expr: &actionExpr{
				pos: position{line: 1794, col: 16, offset: 62963},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1794, col: 16, offset: 62963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1794, col: 16, offset: 62963},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1794, col: 25, offset: 62972},
								expr: &choiceExpr{
									pos: position{line: 1795, col: 5, offset: 62978},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2072, col: 5, offset: 71182},
											run: (*parser).callonHeaderGroup6,
											expr: &seqExpr{
												pos: position{line: 2072, col: 5, offset: 71182},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2072, col: 5, offset: 71182},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2072, col: 14, offset: 71191},
															run: (*parser).callonHeaderGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2072, col: 14, offset: 71191},
																expr: &charClassMatcher{
																	pos:        position{line: 2072, col: 14, offset: 71191},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2075, col: 5, offset: 71272},
														expr: &choiceExpr{
															pos: position{line: 2075, col: 7, offset: 71274},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2075, col: 7, offset: 71274},
																	val:        "[\\r\\n �]",
																	chars:      []rune{'\r', '\n', ' ', '�'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											run: (*parser).callonHeaderGroup17,
											expr: &seqExpr{
												pos: position{line: 2061, col: 5, offset: 70785},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2061, col: 5, offset: 70785},
														expr: &charClassMatcher{
															pos:        position{line: 2061, col: 5, offset: 70785},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2061, col: 15, offset: 70795},
														expr: &choiceExpr{
															pos: position{line: 2061, col: 17, offset: 70797},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2061, col: 17, offset: 70797},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											run: (*parser).callonHeaderGroup26,
											expr: &seqExpr{
												pos: position{line: 2063, col: 9, offset: 70879},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 9, offset: 70879},
														expr: &charClassMatcher{
															pos:        position{line: 2063, col: 9, offset: 70879},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 19, offset: 70889},
														expr: &seqExpr{
															pos: position{line: 2063, col: 20, offset: 70890},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2063, col: 20, offset: 70890},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2063, col: 27, offset: 70897},
																	expr: &charClassMatcher{
																		pos:        position{line: 2063, col: 27, offset: 70897},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1796, col: 7, offset: 62995},
											name: "InlinePassthrough",
										},
										&actionExpr{
											pos: position{line: 1954, col: 5, offset: 67519},
											run: (*parser).callonHeaderGroup36,
											expr: &seqExpr{
												pos: position{line: 1954, col: 5, offset: 67519},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1954, col: 5, offset: 67519},
														run: (*parser).callonHeaderGroup38,
													},
													&labeledExpr{
														pos:   position{line: 1957, col: 5, offset: 67590},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 1959, col: 9, offset: 67688},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1959, col: 9, offset: 67688},
																	run: (*parser).callonHeaderGroup41,
																	expr: &choiceExpr{
																		pos: position{line: 487, col: 27, offset: 15054},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 487, col: 27, offset: 15054},
																				run: (*parser).callonHeaderGroup43,
																				expr: &seqExpr{
																					pos: position{line: 487, col: 27, offset: 15054},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 487, col: 27, offset: 15054},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 32, offset: 15059},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonHeaderGroup47,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 487, col: 40, offset: 15067},
																							expr: &choiceExpr{
																								pos: position{line: 2124, col: 10, offset: 72709},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2124, col: 10, offset: 72709},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2124, col: 16, offset: 72715},
																										run: (*parser).callonHeaderGroup53,
																										expr: &litMatcher{
																											pos:        position{line: 2124, col: 16, offset: 72715},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 47, offset: 15074},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 51, offset: 15078},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 497, col: 24, offset: 15491},
																								expr: &choiceExpr{
																									pos: position{line: 498, col: 5, offset: 15497},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 498, col: 6, offset: 15498},
																											run: (*parser).callonHeaderGroup59,
																											expr: &seqExpr{
																												pos: position{line: 498, col: 6, offset: 15498},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 498, col: 6, offset: 15498},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 498, col: 14, offset: 15506},
																														expr: &charClassMatcher{
																															pos:        position{line: 498, col: 14, offset: 15506},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											run: (*parser).callonHeaderGroup64,
																											expr: &seqExpr{
																												pos: position{line: 398, col: 5, offset: 12261},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 398, col: 5, offset: 12261},
																														run: (*parser).callonHeaderGroup66,
																													},
																													&labeledExpr{
																														pos:   position{line: 401, col: 5, offset: 12325},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 401, col: 14, offset: 12334},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	run: (*parser).callonHeaderGroup69,
																																	expr: &seqExpr{
																																		pos: position{line: 415, col: 25, offset: 12896},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 415, col: 25, offset: 12896},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 37, offset: 12908},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonHeaderGroup73,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 56, offset: 12927},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 415, col: 62, offset: 12933},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonHeaderGroup80,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonHeaderGroup85,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonHeaderGroup87,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 415, col: 78, offset: 12949},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	run: (*parser).callonHeaderGroup91,
																																	expr: &seqExpr{
																																		pos: position{line: 419, col: 25, offset: 13051},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 419, col: 25, offset: 13051},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 38, offset: 13064},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonHeaderGroup95,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 57, offset: 13083},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 419, col: 63, offset: 13089},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonHeaderGroup102,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonHeaderGroup107,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonHeaderGroup109,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 419, col: 79, offset: 13105},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	run: (*parser).callonHeaderGroup113,
																																	expr: &seqExpr{
																																		pos: position{line: 408, col: 31, offset: 12551},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 408, col: 31, offset: 12551},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 408, col: 35, offset: 12555},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonHeaderGroup117,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 408, col: 54, offset: 12574},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 502, col: 8, offset: 15730},
																											run: (*parser).callonHeaderGroup123,
																											expr: &litMatcher{
																												pos:        position{line: 502, col: 8, offset: 15730},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 79, offset: 15106},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 489, col: 9, offset: 15179},
																				run: (*parser).callonHeaderGroup126,
																				expr: &seqExpr{
																					pos: position{line: 489, col: 9, offset: 15179},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 489, col: 9, offset: 15179},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 489, col: 14, offset: 15184},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonHeaderGroup130,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 489, col: 22, offset: 15192},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1962, col: 11, offset: 67792},
																	run: (*parser).callonHeaderGroup134,
																	expr: &charClassMatcher{
																		pos:        position{line: 1962, col: 12, offset: 67793},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1798, col: 7, offset: 63042},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 398, col: 5, offset: 12261},
											run: (*parser).callonHeaderGroup137,
											expr: &seqExpr{
												pos: position{line: 398, col: 5, offset: 12261},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 398, col: 5, offset: 12261},
														run: (*parser).callonHeaderGroup139,
													},
													&labeledExpr{
														pos:   position{line: 401, col: 5, offset: 12325},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 401, col: 14, offset: 12334},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 415, col: 25, offset: 12896},
																	run: (*parser).callonHeaderGroup142,
																	expr: &seqExpr{
																		pos: position{line: 415, col: 25, offset: 12896},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 415, col: 25, offset: 12896},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 415, col: 37, offset: 12908},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonHeaderGroup146,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 415, col: 56, offset: 12927},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 415, col: 62, offset: 12933},
																					expr: &actionExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						run: (*parser).callonHeaderGroup153,
																						expr: &seqExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 423, col: 17, offset: 13196},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 423, col: 21, offset: 13200},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 423, col: 28, offset: 13207},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												run: (*parser).callonHeaderGroup158,
																												expr: &charClassMatcher{
																													pos:        position{line: 423, col: 28, offset: 13207},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												run: (*parser).callonHeaderGroup160,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													expr: &charClassMatcher{
																														pos:        position{line: 425, col: 9, offset: 13261},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 415, col: 78, offset: 12949},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 419, col: 25, offset: 13051},
																	run: (*parser).callonHeaderGroup164,
																	expr: &seqExpr{
																		pos: position{line: 419, col: 25, offset: 13051},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 419, col: 25, offset: 13051},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 419, col: 38, offset: 13064},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonHeaderGroup168,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 419, col: 57, offset: 13083},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 419, col: 63, offset: 13089},
																					expr: &actionExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						run: (*parser).callonHeaderGroup175,
																						expr: &seqExpr{
																							pos: position{line: 423, col: 17, offset: 13196},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 423, col: 17, offset: 13196},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 423, col: 21, offset: 13200},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 423, col: 28, offset: 13207},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 423, col: 28, offset: 13207},
																												run: (*parser).callonHeaderGroup180,
																												expr: &charClassMatcher{
																													pos:        position{line: 423, col: 28, offset: 13207},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												run: (*parser).callonHeaderGroup182,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 425, col: 9, offset: 13261},
																													expr: &charClassMatcher{
																														pos:        position{line: 425, col: 9, offset: 13261},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 419, col: 79, offset: 13105},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 408, col: 31, offset: 12551},
																	run: (*parser).callonHeaderGroup186,
																	expr: &seqExpr{
																		pos: position{line: 408, col: 31, offset: 12551},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 408, col: 31, offset: 12551},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 408, col: 35, offset: 12555},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					run: (*parser).callonHeaderGroup190,
																					expr: &seqExpr{
																						pos: position{line: 98, col: 18, offset: 2832},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 98, col: 18, offset: 2832},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 98, col: 28, offset: 2842},
																								expr: &charClassMatcher{
																									pos:        position{line: 98, col: 29, offset: 2843},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 408, col: 54, offset: 12574},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											run: (*parser).callonHeaderGroup196,
											expr: &seqExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 692, col: 51, offset: 21719},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															run: (*parser).callonHeaderGroup200,
															expr: &oneOrMoreExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																expr: &charClassMatcher{
																	pos:        position{line: 692, col: 56, offset: 21724},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1943, col: 5, offset: 67298},
											run: (*parser).callonHeaderGroup204,
											expr: &seqExpr{
												pos: position{line: 1943, col: 5, offset: 67298},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1943, col: 5, offset: 67298},
														run: (*parser).callonHeaderGroup206,
													},
													&labeledExpr{
														pos:   position{line: 1946, col: 5, offset: 67364},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 1972, col: 11, offset: 68044},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1974, col: 15, offset: 68138},
																	run: (*parser).callonHeaderGroup209,
																	expr: &litMatcher{
																		pos:        position{line: 1974, col: 15, offset: 68138},
																		val:        "`'",
																		ignoreCase: false,
																		want:       "\"`'\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1980, col: 14, offset: 68253},
																	run: (*parser).callonHeaderGroup211,
																	expr: &litMatcher{
																		pos:        position{line: 1980, col: 14, offset: 68253},
																		val:        "(C)",
																		ignoreCase: false,
																		want:       "\"(C)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1984, col: 14, offset: 68329},
																	run: (*parser).callonHeaderGroup213,
																	expr: &litMatcher{
																		pos:        position{line: 1984, col: 14, offset: 68329},
																		val:        "(TM)",
																		ignoreCase: false,
																		want:       "\"(TM)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1988, col: 15, offset: 68407},
																	run: (*parser).callonHeaderGroup215,
																	expr: &litMatcher{
																		pos:        position{line: 1988, col: 15, offset: 68407},
																		val:        "(R)",
																		ignoreCase: false,
																		want:       "\"(R)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1992, col: 13, offset: 68482},
																	run: (*parser).callonHeaderGroup217,
																	expr: &litMatcher{
																		pos:        position{line: 1992, col: 13, offset: 68482},
																		val:        "...",
																		ignoreCase: false,
																		want:       "\"...\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2000, col: 22, offset: 68788},
																	run: (*parser).callonHeaderGroup219,
																	expr: &seqExpr{
																		pos: position{line: 2000, col: 22, offset: 68788},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2049, col: 13, offset: 70330},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&litMatcher{
																				pos:        position{line: 2000, col: 31, offset: 68797},
																				val:        "'",
																				ignoreCase: false,
																				want:       "\"'\"",
																			},
																			&andExpr{
																				pos: position{line: 2000, col: 35, offset: 68801},
																				expr: &charClassMatcher{
																					pos:        position{line: 2000, col: 36, offset: 68802},
																					val:        "[\\pL]",
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2081, col: 12, offset: 71493},
											run: (*parser).callonHeaderGroup225,
											expr: &anyMatcher{
												line: 2081, col: 12, offset: 71493,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1807, col: 1, offset: 63319},
			expr: &actionExpr{
				pos: position{line: 1807, col: 16, offset: 63334},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1807, col: 16, offset: 63334},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1807, col: 16, offset: 63334},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1807, col: 25, offset: 63343},
								expr: &choiceExpr{
									pos: position{line: 1808, col: 5, offset: 63349},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2072, col: 5, offset: 71182},
											run: (*parser).callonMacrosGroup6,
											expr: &seqExpr{
												pos: position{line: 2072, col: 5, offset: 71182},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2072, col: 5, offset: 71182},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2072, col: 14, offset: 71191},
															run: (*parser).callonMacrosGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2072, col: 14, offset: 71191},
																expr: &charClassMatcher{
																	pos:        position{line: 2072, col: 14, offset: 71191},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2075, col: 5, offset: 71272},
														expr: &choiceExpr{
															pos: position{line: 2075, col: 7, offset: 71274},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2075, col: 7, offset: 71274},
																	val:        "[\\r\\n �]",
																	chars:      []rune{'\r', '\n', ' ', '�'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											run: (*parser).callonMacrosGroup17,
											expr: &seqExpr{
												pos: position{line: 2061, col: 5, offset: 70785},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2061, col: 5, offset: 70785},
														expr: &charClassMatcher{
															pos:        position{line: 2061, col: 5, offset: 70785},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2061, col: 15, offset: 70795},
														expr: &choiceExpr{
															pos: position{line: 2061, col: 17, offset: 70797},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2061, col: 17, offset: 70797},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											run: (*parser).callonMacrosGroup26,
											expr: &seqExpr{
												pos: position{line: 2063, col: 9, offset: 70879},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 9, offset: 70879},
														expr: &charClassMatcher{
															pos:        position{line: 2063, col: 9, offset: 70879},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 19, offset: 70889},
														expr: &seqExpr{
															pos: position{line: 2063, col: 20, offset: 70890},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2063, col: 20, offset: 70890},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2063, col: 27, offset: 70897},
																	expr: &charClassMatcher{
																		pos:        position{line: 2063, col: 27, offset: 70897},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1809, col: 7, offset: 63366},
											name: "InlineMacro",
										},
										&actionExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											run: (*parser).callonMacrosGroup36,
											expr: &seqExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 692, col: 51, offset: 21719},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															run: (*parser).callonMacrosGroup40,
															expr: &oneOrMoreExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																expr: &charClassMatcher{
																	pos:        position{line: 692, col: 56, offset: 21724},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2081, col: 12, offset: 71493},
											run: (*parser).callonMacrosGroup44,
											expr: &anyMatcher{
												line: 2081, col: 12, offset: 71493,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1817, col: 1, offset: 63667},
			expr: &actionExpr{
				pos: position{line: 1817, col: 14, offset: 63680},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1817, col: 14, offset: 63680},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1817, col: 14, offset: 63680},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1817, col: 23, offset: 63689},
								expr: &ruleRefExpr{
									pos:  position{line: 1817, col: 24, offset: 63690},
									name: "NormalGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1831, col: 1, offset: 64212},
			expr: &actionExpr{
				pos: position{line: 1831, col: 16, offset: 64227},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1831, col: 16, offset: 64227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1831, col: 16, offset: 64227},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1831, col: 25, offset: 64236},
								expr: &ruleRefExpr{
									pos:  position{line: 1831, col: 26, offset: 64237},
									name: "NormalGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1835, col: 1, offset: 64314},
			expr: &actionExpr{
				pos: position{line: 1835, col: 23, offset: 64336},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1835, col: 23, offset: 64336},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1835, col: 23, offset: 64336},
							expr: &notExpr{
								pos: position{line: 2132, col: 8, offset: 72882},
								expr: &anyMatcher{
									line: 2132, col: 9, offset: 72883,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1836, col: 5, offset: 64345},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1837, col: 9, offset: 64363},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2072, col: 5, offset: 71182},
										run: (*parser).callonNormalGroupElement8,
										expr: &seqExpr{
											pos: position{line: 2072, col: 5, offset: 71182},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 2072, col: 5, offset: 71182},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2072, col: 14, offset: 71191},
														run: (*parser).callonNormalGroupElement11,
														expr: &oneOrMoreExpr{
															pos: position{line: 2072, col: 14, offset: 71191},
															expr: &charClassMatcher{
																pos:        position{line: 2072, col: 14, offset: 71191},
																val:        "[,?!;0-9\\pL]",
																chars:      []rune{',', '?', '!', ';'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 2075, col: 5, offset: 71272},
													expr: &choiceExpr{
														pos: position{line: 2075, col: 7, offset: 71274},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2075, col: 7, offset: 71274},
																val:        "[\\r\\n �]",
																chars:      []rune{'\r', '\n', ' ', '�'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2132, col: 8, offset: 72882},
																expr: &anyMatcher{
																	line: 2132, col: 9, offset: 72883,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2061, col: 5, offset: 70785},
										run: (*parser).callonNormalGroupElement19,
										expr: &seqExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2061, col: 5, offset: 70785},
													expr: &charClassMatcher{
														pos:        position{line: 2061, col: 5, offset: 70785},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2061, col: 15, offset: 70795},
													expr: &choiceExpr{
														pos: position{line: 2061, col: 17, offset: 70797},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2061, col: 17, offset: 70797},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2132, col: 8, offset: 72882},
																expr: &anyMatcher{
																	line: 2132, col: 9, offset: 72883,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2063, col: 9, offset: 70879},
										run: (*parser).callonNormalGroupElement28,
										expr: &seqExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2063, col: 9, offset: 70879},
													expr: &charClassMatcher{
														pos:        position{line: 2063, col: 9, offset: 70879},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2063, col: 19, offset: 70889},
													expr: &seqExpr{
														pos: position{line: 2063, col: 20, offset: 70890},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2063, col: 20, offset: 70890},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2063, col: 27, offset: 70897},
																expr: &charClassMatcher{
																	pos:        position{line: 2063, col: 27, offset: 70897},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 699, col: 14, offset: 22046},
										run: (*parser).callonNormalGroupElement37,
										expr: &seqExpr{
											pos: position{line: 699, col: 14, offset: 22046},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2124, col: 10, offset: 72709},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2124, col: 10, offset: 72709},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2124, col: 16, offset: 72715},
															run: (*parser).callonNormalGroupElement41,
															expr: &litMatcher{
																pos:        position{line: 2124, col: 16, offset: 72715},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 699, col: 20, offset: 22052},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 699, col: 24, offset: 22056},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonNormalGroupElement47,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 699, col: 31, offset: 22063},
													expr: &choiceExpr{
														pos: position{line: 2134, col: 8, offset: 72893},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2132, col: 8, offset: 72882},
																expr: &anyMatcher{
																	line: 2132, col: 9, offset: 72883,
																},
															},
															&litMatcher{
																pos:        position{line: 2128, col: 12, offset: 72775},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2128, col: 19, offset: 72782},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2128, col: 28, offset: 72791},
																run: (*parser).callonNormalGroupElement55,
																expr: &litMatcher{
																	pos:        position{line: 2128, col: 28, offset: 72791},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2124, col: 10, offset: 72709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2124, col: 16, offset: 72715},
										run: (*parser).callonNormalGroupElement58,
										expr: &litMatcher{
											pos:        position{line: 2124, col: 16, offset: 72715},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2128, col: 12, offset: 72775},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2128, col: 19, offset: 72782},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2128, col: 28, offset: 72791},
										run: (*parser).callonNormalGroupElement62,
										expr: &litMatcher{
											pos:        position{line: 2128, col: 28, offset: 72791},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1841, col: 11, offset: 64469},
										name: "InlinePassthrough",
									},
									&actionExpr{
										pos: position{line: 1954, col: 5, offset: 67519},
										run: (*parser).callonNormalGroupElement65,
										expr: &seqExpr{
											pos: position{line: 1954, col: 5, offset: 67519},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1954, col: 5, offset: 67519},
													run: (*parser).callonNormalGroupElement67,
												},
												&labeledExpr{
													pos:   position{line: 1957, col: 5, offset: 67590},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1959, col: 9, offset: 67688},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1959, col: 9, offset: 67688},
																run: (*parser).callonNormalGroupElement70,
																expr: &choiceExpr{
																	pos: position{line: 487, col: 27, offset: 15054},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 487, col: 27, offset: 15054},
																			run: (*parser).callonNormalGroupElement72,
																			expr: &seqExpr{
																				pos: position{line: 487, col: 27, offset: 15054},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 487, col: 27, offset: 15054},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 487, col: 32, offset: 15059},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							run: (*parser).callonNormalGroupElement76,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								expr: &charClassMatcher{
																									pos:        position{line: 2112, col: 7, offset: 72433},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 487, col: 40, offset: 15067},
																						expr: &choiceExpr{
																							pos: position{line: 2124, col: 10, offset: 72709},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2124, col: 10, offset: 72709},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2124, col: 16, offset: 72715},
																									run: (*parser).callonNormalGroupElement82,
																									expr: &litMatcher{
																										pos:        position{line: 2124, col: 16, offset: 72715},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 487, col: 47, offset: 15074},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 487, col: 51, offset: 15078},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 497, col: 24, offset: 15491},
																							expr: &choiceExpr{
																								pos: position{line: 498, col: 5, offset: 15497},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 498, col: 6, offset: 15498},
																										run: (*parser).callonNormalGroupElement88,
																										expr: &seqExpr{
																											pos: position{line: 498, col: 6, offset: 15498},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 498, col: 6, offset: 15498},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 498, col: 14, offset: 15506},
																													expr: &charClassMatcher{
																														pos:        position{line: 498, col: 14, offset: 15506},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 398, col: 5, offset: 12261},
																										run: (*parser).callonNormalGroupElement93,
																										expr: &seqExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 398, col: 5, offset: 12261},
																													run: (*parser).callonNormalGroupElement95,
																												},
																												&labeledExpr{
																													pos:   position{line: 401, col: 5, offset: 12325},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 401, col: 14, offset: 12334},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 415, col: 25, offset: 12896},
																																run: (*parser).callonNormalGroupElement98,
																																expr: &seqExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 415, col: 25, offset: 12896},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 37, offset: 12908},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonNormalGroupElement102,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 415, col: 56, offset: 12927},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 415, col: 62, offset: 12933},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonNormalGroupElement109,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonNormalGroupElement114,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonNormalGroupElement116,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 415, col: 78, offset: 12949},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 419, col: 25, offset: 13051},
																																run: (*parser).callonNormalGroupElement120,
																																expr: &seqExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 419, col: 25, offset: 13051},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 38, offset: 13064},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonNormalGroupElement124,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 419, col: 57, offset: 13083},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 419, col: 63, offset: 13089},
																																				expr: &actionExpr{
																																					pos: position{line: 423, col: 17, offset: 13196},
																																					run: (*parser).callonNormalGroupElement131,
																																					expr: &seqExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 423, col: 17, offset: 13196},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 423, col: 21, offset: 13200},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 423, col: 28, offset: 13207},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 423, col: 28, offset: 13207},
																																											run: (*parser).callonNormalGroupElement136,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 423, col: 28, offset: 13207},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 425, col: 9, offset: 13261},
																																											run: (*parser).callonNormalGroupElement138,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 425, col: 9, offset: 13261},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 419, col: 79, offset: 13105},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 408, col: 31, offset: 12551},
																																run: (*parser).callonNormalGroupElement142,
																																expr: &seqExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 408, col: 31, offset: 12551},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 408, col: 35, offset: 12555},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 98, col: 18, offset: 2832},
																																				run: (*parser).callonNormalGroupElement146,
																																				expr: &seqExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 98, col: 18, offset: 2832},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 98, col: 28, offset: 2842},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 98, col: 29, offset: 2843},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 408, col: 54, offset: 12574},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 502, col: 8, offset: 15730},
																										run: (*parser).callonNormalGroupElement152,
																										expr: &litMatcher{
																											pos:        position{line: 502, col: 8, offset: 15730},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 487, col: 79, offset: 15106},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 489, col: 9, offset: 15179},
																			run: (*parser).callonNormalGroupElement155,
																			expr: &seqExpr{
																				pos: position{line: 489, col: 9, offset: 15179},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 489, col: 9, offset: 15179},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 489, col: 14, offset: 15184},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2112, col: 7, offset: 72433},
																							run: (*parser).callonNormalGroupElement159,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								expr: &charClassMatcher{
																									pos:        position{line: 2112, col: 7, offset: 72433},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 489, col: 22, offset: 15192},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1962, col: 11, offset: 67792},
																run: (*parser).callonNormalGroupElement163,
																expr: &charClassMatcher{
																	pos:        position{line: 1962, col: 12, offset: 67793},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1843, col: 11, offset: 64524},
										name: "Quote",
									},
									&actionExpr{
										pos: position{line: 398, col: 5, offset: 12261},
										run: (*parser).callonNormalGroupElement166,
										expr: &seqExpr{
											pos: position{line: 398, col: 5, offset: 12261},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 398, col: 5, offset: 12261},
													run: (*parser).callonNormalGroupElement168,
												},
												&labeledExpr{
													pos:   position{line: 401, col: 5, offset: 12325},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 401, col: 14, offset: 12334},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 415, col: 25, offset: 12896},
																run: (*parser).callonNormalGroupElement171,
																expr: &seqExpr{
																	pos: position{line: 415, col: 25, offset: 12896},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 415, col: 25, offset: 12896},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 415, col: 37, offset: 12908},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonNormalGroupElement175,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 415, col: 56, offset: 12927},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 415, col: 62, offset: 12933},
																				expr: &actionExpr{
																					pos: position{line: 423, col: 17, offset: 13196},
																					run: (*parser).callonNormalGroupElement182,
																					expr: &seqExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 423, col: 17, offset: 13196},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 423, col: 21, offset: 13200},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 423, col: 28, offset: 13207},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											run: (*parser).callonNormalGroupElement187,
																											expr: &charClassMatcher{
																												pos:        position{line: 423, col: 28, offset: 13207},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 425, col: 9, offset: 13261},
																											run: (*parser).callonNormalGroupElement189,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												expr: &charClassMatcher{
																													pos:        position{line: 425, col: 9, offset: 13261},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 415, col: 78, offset: 12949},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 419, col: 25, offset: 13051},
																run: (*parser).callonNormalGroupElement193,
																expr: &seqExpr{
																	pos: position{line: 419, col: 25, offset: 13051},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 419, col: 25, offset: 13051},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 419, col: 38, offset: 13064},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonNormalGroupElement197,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 419, col: 57, offset: 13083},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 419, col: 63, offset: 13089},
																				expr: &actionExpr{
																					pos: position{line: 423, col: 17, offset: 13196},
																					run: (*parser).callonNormalGroupElement204,
																					expr: &seqExpr{
																						pos: position{line: 423, col: 17, offset: 13196},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 423, col: 17, offset: 13196},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 423, col: 21, offset: 13200},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 423, col: 28, offset: 13207},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 423, col: 28, offset: 13207},
																											run: (*parser).callonNormalGroupElement209,
																											expr: &charClassMatcher{
																												pos:        position{line: 423, col: 28, offset: 13207},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 425, col: 9, offset: 13261},
																											run: (*parser).callonNormalGroupElement211,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 425, col: 9, offset: 13261},
																												expr: &charClassMatcher{
																													pos:        position{line: 425, col: 9, offset: 13261},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 419, col: 79, offset: 13105},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 408, col: 31, offset: 12551},
																run: (*parser).callonNormalGroupElement215,
																expr: &seqExpr{
																	pos: position{line: 408, col: 31, offset: 12551},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 408, col: 31, offset: 12551},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 408, col: 35, offset: 12555},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 98, col: 18, offset: 2832},
																				run: (*parser).callonNormalGroupElement219,
																				expr: &seqExpr{
																					pos: position{line: 98, col: 18, offset: 2832},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 98, col: 18, offset: 2832},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 98, col: 28, offset: 2842},
																							expr: &charClassMatcher{
																								pos:        position{line: 98, col: 29, offset: 2843},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 408, col: 54, offset: 12574},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1943, col: 5, offset: 67298},
										run: (*parser).callonNormalGroupElement225,
										expr: &seqExpr{
											pos: position{line: 1943, col: 5, offset: 67298},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1943, col: 5, offset: 67298},
													run: (*parser).callonNormalGroupElement227,
												},
												&labeledExpr{
													pos:   position{line: 1946, col: 5, offset: 67364},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1972, col: 11, offset: 68044},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1974, col: 15, offset: 68138},
																run: (*parser).callonNormalGroupElement230,
																expr: &litMatcher{
																	pos:        position{line: 1974, col: 15, offset: 68138},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 1980, col: 14, offset: 68253},
																run: (*parser).callonNormalGroupElement232,
																expr: &litMatcher{
																	pos:        position{line: 1980, col: 14, offset: 68253},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 1984, col: 14, offset: 68329},
																run: (*parser).callonNormalGroupElement234,
																expr: &litMatcher{
																	pos:        position{line: 1984, col: 14, offset: 68329},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 1988, col: 15, offset: 68407},
																run: (*parser).callonNormalGroupElement236,
																expr: &litMatcher{
																	pos:        position{line: 1988, col: 15, offset: 68407},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 1992, col: 13, offset: 68482},
																run: (*parser).callonNormalGroupElement238,
																expr: &litMatcher{
																	pos:        position{line: 1992, col: 13, offset: 68482},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2000, col: 22, offset: 68788},
																run: (*parser).callonNormalGroupElement240,
																expr: &seqExpr{
																	pos: position{line: 2000, col: 22, offset: 68788},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2049, col: 13, offset: 70330},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2000, col: 31, offset: 68797},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2000, col: 35, offset: 68801},
																			expr: &charClassMatcher{
																				pos:        position{line: 2000, col: 36, offset: 68802},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1846, col: 11, offset: 64594},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 1921, col: 5, offset: 66840},
										run: (*parser).callonNormalGroupElement247,
										expr: &seqExpr{
											pos: position{line: 1921, col: 5, offset: 66840},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1921, col: 5, offset: 66840},
													run: (*parser).callonNormalGroupElement249,
												},
												&labeledExpr{
													pos:   position{line: 1924, col: 5, offset: 66910},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 699, col: 14, offset: 22046},
														run: (*parser).callonNormalGroupElement251,
														expr: &seqExpr{
															pos: position{line: 699, col: 14, offset: 22046},
															exprs: []interface{}{
																&choiceExpr{
																	pos: position{line: 2124, col: 10, offset: 72709},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2124, col: 10, offset: 72709},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2124, col: 16, offset: 72715},
																			run: (*parser).callonNormalGroupElement255,
																			expr: &litMatcher{
																				pos:        position{line: 2124, col: 16, offset: 72715},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 699, col: 20, offset: 22052},
																	val:        "+",
																	ignoreCase: false,
																	want:       "\"+\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 699, col: 24, offset: 22056},
																	expr: &choiceExpr{
																		pos: position{line: 2124, col: 10, offset: 72709},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2124, col: 10, offset: 72709},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2124, col: 16, offset: 72715},
																				run: (*parser).callonNormalGroupElement261,
																				expr: &litMatcher{
																					pos:        position{line: 2124, col: 16, offset: 72715},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&andExpr{
																	pos: position{line: 699, col: 31, offset: 22063},
																	expr: &choiceExpr{
																		pos: position{line: 2134, col: 8, offset: 72893},
																		alternatives: []interface{}{
																			&notExpr{
																				pos: position{line: 2132, col: 8, offset: 72882},
																				expr: &anyMatcher{
																					line: 2132, col: 9, offset: 72883,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2128, col: 12, offset: 72775},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2128, col: 19, offset: 72782},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&actionExpr{
																				pos: position{line: 2128, col: 28, offset: 72791},
																				run: (*parser).callonNormalGroupElement269,
																				expr: &litMatcher{
																					pos:        position{line: 2128, col: 28, offset: 72791},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 692, col: 23, offset: 21691},
										run: (*parser).callonNormalGroupElement271,
										expr: &seqExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 691, col: 32, offset: 21660},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 692, col: 51, offset: 21719},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 692, col: 56, offset: 21724},
														run: (*parser).callonNormalGroupElement275,
														expr: &oneOrMoreExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															expr: &charClassMatcher{
																pos:        position{line: 692, col: 56, offset: 21724},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 691, col: 32, offset: 21660},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2081, col: 12, offset: 71493},
										run: (*parser).callonNormalGroupElement279,
										expr: &anyMatcher{
											line: 2081, col: 12, offset: 71493,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1854, col: 1, offset: 64853},
			expr: &actionExpr{
				pos: position{line: 1854, col: 16, offset: 64868},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1854, col: 16, offset: 64868},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1854, col: 16, offset: 64868},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1854, col: 25, offset: 64877},
								expr: &choiceExpr{
									pos: position{line: 1855, col: 5, offset: 64883},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2072, col: 5, offset: 71182},
											run: (*parser).callonQuotesGroup6,
											expr: &seqExpr{
												pos: position{line: 2072, col: 5, offset: 71182},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2072, col: 5, offset: 71182},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2072, col: 14, offset: 71191},
															run: (*parser).callonQuotesGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2072, col: 14, offset: 71191},
																expr: &charClassMatcher{
																	pos:        position{line: 2072, col: 14, offset: 71191},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2075, col: 5, offset: 71272},
														expr: &choiceExpr{
															pos: position{line: 2075, col: 7, offset: 71274},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2075, col: 7, offset: 71274},
																	val:        "[\\r\\n �]",
																	chars:      []rune{'\r', '\n', ' ', '�'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											run: (*parser).callonQuotesGroup17,
											expr: &seqExpr{
												pos: position{line: 2061, col: 5, offset: 70785},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2061, col: 5, offset: 70785},
														expr: &charClassMatcher{
															pos:        position{line: 2061, col: 5, offset: 70785},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2061, col: 15, offset: 70795},
														expr: &choiceExpr{
															pos: position{line: 2061, col: 17, offset: 70797},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2061, col: 17, offset: 70797},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											run: (*parser).callonQuotesGroup26,
											expr: &seqExpr{
												pos: position{line: 2063, col: 9, offset: 70879},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 9, offset: 70879},
														expr: &charClassMatcher{
															pos:        position{line: 2063, col: 9, offset: 70879},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 19, offset: 70889},
														expr: &seqExpr{
															pos: position{line: 2063, col: 20, offset: 70890},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2063, col: 20, offset: 70890},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2063, col: 27, offset: 70897},
																	expr: &charClassMatcher{
																		pos:        position{line: 2063, col: 27, offset: 70897},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1856, col: 7, offset: 64900},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											run: (*parser).callonQuotesGroup36,
											expr: &seqExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 692, col: 51, offset: 21719},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															run: (*parser).callonQuotesGroup40,
															expr: &oneOrMoreExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																expr: &charClassMatcher{
																	pos:        position{line: 692, col: 56, offset: 21724},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2081, col: 12, offset: 71493},
											run: (*parser).callonQuotesGroup44,
											expr: &anyMatcher{
												line: 2081, col: 12, offset: 71493,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1863, col: 1, offset: 65137},
			expr: &actionExpr{
				pos: position{line: 1863, col: 22, offset: 65158},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1863, col: 22, offset: 65158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1863, col: 22, offset: 65158},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1863, col: 31, offset: 65167},
								expr: &choiceExpr{
									pos: position{line: 1864, col: 5, offset: 65173},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2072, col: 5, offset: 71182},
											run: (*parser).callonReplacementsGroup6,
											expr: &seqExpr{
												pos: position{line: 2072, col: 5, offset: 71182},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2072, col: 5, offset: 71182},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2072, col: 14, offset: 71191},
															run: (*parser).callonReplacementsGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2072, col: 14, offset: 71191},
																expr: &charClassMatcher{
																	pos:        position{line: 2072, col: 14, offset: 71191},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2075, col: 5, offset: 71272},
														expr: &choiceExpr{
															pos: position{line: 2075, col: 7, offset: 71274},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2075, col: 7, offset: 71274},
																	val:        "[\\r\\n �]",
																	chars:      []rune{'\r', '\n', ' ', '�'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											run: (*parser).callonReplacementsGroup17,
											expr: &seqExpr{
												pos: position{line: 2061, col: 5, offset: 70785},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2061, col: 5, offset: 70785},
														expr: &charClassMatcher{
															pos:        position{line: 2061, col: 5, offset: 70785},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2061, col: 15, offset: 70795},
														expr: &choiceExpr{
															pos: position{line: 2061, col: 17, offset: 70797},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2061, col: 17, offset: 70797},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											run: (*parser).callonReplacementsGroup26,
											expr: &seqExpr{
												pos: position{line: 2063, col: 9, offset: 70879},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 9, offset: 70879},
														expr: &charClassMatcher{
															pos:        position{line: 2063, col: 9, offset: 70879},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 19, offset: 70889},
														expr: &seqExpr{
															pos: position{line: 2063, col: 20, offset: 70890},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2063, col: 20, offset: 70890},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2063, col: 27, offset: 70897},
																	expr: &charClassMatcher{
																		pos:        position{line: 2063, col: 27, offset: 70897},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1943, col: 5, offset: 67298},
											run: (*parser).callonReplacementsGroup35,
											expr: &seqExpr{
												pos: position{line: 1943, col: 5, offset: 67298},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1943, col: 5, offset: 67298},
														run: (*parser).callonReplacementsGroup37,
													},
													&labeledExpr{
														pos:   position{line: 1946, col: 5, offset: 67364},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 1972, col: 11, offset: 68044},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1974, col: 15, offset: 68138},
																	run: (*parser).callonReplacementsGroup40,
																	expr: &litMatcher{
																		pos:        position{line: 1974, col: 15, offset: 68138},
																		val:        "`'",
																		ignoreCase: false,
																		want:       "\"`'\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1980, col: 14, offset: 68253},
																	run: (*parser).callonReplacementsGroup42,
																	expr: &litMatcher{
																		pos:        position{line: 1980, col: 14, offset: 68253},
																		val:        "(C)",
																		ignoreCase: false,
																		want:       "\"(C)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1984, col: 14, offset: 68329},
																	run: (*parser).callonReplacementsGroup44,
																	expr: &litMatcher{
																		pos:        position{line: 1984, col: 14, offset: 68329},
																		val:        "(TM)",
																		ignoreCase: false,
																		want:       "\"(TM)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1988, col: 15, offset: 68407},
																	run: (*parser).callonReplacementsGroup46,
																	expr: &litMatcher{
																		pos:        position{line: 1988, col: 15, offset: 68407},
																		val:        "(R)",
																		ignoreCase: false,
																		want:       "\"(R)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 1992, col: 13, offset: 68482},
																	run: (*parser).callonReplacementsGroup48,
																	expr: &litMatcher{
																		pos:        position{line: 1992, col: 13, offset: 68482},
																		val:        "...",
																		ignoreCase: false,
																		want:       "\"...\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2000, col: 22, offset: 68788},
																	run: (*parser).callonReplacementsGroup50,
																	expr: &seqExpr{
																		pos: position{line: 2000, col: 22, offset: 68788},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2049, col: 13, offset: 70330},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&litMatcher{
																				pos:        position{line: 2000, col: 31, offset: 68797},
																				val:        "'",
																				ignoreCase: false,
																				want:       "\"'\"",
																			},
																			&andExpr{
																				pos: position{line: 2000, col: 35, offset: 68801},
																				expr: &charClassMatcher{
																					pos:        position{line: 2000, col: 36, offset: 68802},
																					val:        "[\\pL]",
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											run: (*parser).callonReplacementsGroup56,
											expr: &seqExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 692, col: 51, offset: 21719},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															run: (*parser).callonReplacementsGroup60,
															expr: &oneOrMoreExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																expr: &charClassMatcher{
																	pos:        position{line: 692, col: 56, offset: 21724},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2081, col: 12, offset: 71493},
											run: (*parser).callonReplacementsGroup64,
											expr: &anyMatcher{
												line: 2081, col: 12, offset: 71493,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1872, col: 1, offset: 65458},
			expr: &actionExpr{
				pos: position{line: 1872, col: 27, offset: 65484},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1872, col: 27, offset: 65484},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1872, col: 27, offset: 65484},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1872, col: 36, offset: 65493},
								expr: &choiceExpr{
									pos: position{line: 1873, col: 5, offset: 65499},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2072, col: 5, offset: 71182},
											run: (*parser).callonSpecialCharactersGroup6,
											expr: &seqExpr{
												pos: position{line: 2072, col: 5, offset: 71182},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2072, col: 5, offset: 71182},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2072, col: 14, offset: 71191},
															run: (*parser).callonSpecialCharactersGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2072, col: 14, offset: 71191},
																expr: &charClassMatcher{
																	pos:        position{line: 2072, col: 14, offset: 71191},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2075, col: 5, offset: 71272},
														expr: &choiceExpr{
															pos: position{line: 2075, col: 7, offset: 71274},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2075, col: 7, offset: 71274},
																	val:        "[\\r\\n �]",
																	chars:      []rune{'\r', '\n', ' ', '�'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											run: (*parser).callonSpecialCharactersGroup17,
											expr: &seqExpr{
												pos: position{line: 2061, col: 5, offset: 70785},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2061, col: 5, offset: 70785},
														expr: &charClassMatcher{
															pos:        position{line: 2061, col: 5, offset: 70785},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2061, col: 15, offset: 70795},
														expr: &choiceExpr{
															pos: position{line: 2061, col: 17, offset: 70797},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2061, col: 17, offset: 70797},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											run: (*parser).callonSpecialCharactersGroup26,
											expr: &seqExpr{
												pos: position{line: 2063, col: 9, offset: 70879},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 9, offset: 70879},
														expr: &charClassMatcher{
															pos:        position{line: 2063, col: 9, offset: 70879},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 19, offset: 70889},
														expr: &seqExpr{
															pos: position{line: 2063, col: 20, offset: 70890},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2063, col: 20, offset: 70890},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2063, col: 27, offset: 70897},
																	expr: &charClassMatcher{
																		pos:        position{line: 2063, col: 27, offset: 70897},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1954, col: 5, offset: 67519},
											run: (*parser).callonSpecialCharactersGroup35,
											expr: &seqExpr{
												pos: position{line: 1954, col: 5, offset: 67519},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1954, col: 5, offset: 67519},
														run: (*parser).callonSpecialCharactersGroup37,
													},
													&labeledExpr{
														pos:   position{line: 1957, col: 5, offset: 67590},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 1959, col: 9, offset: 67688},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1959, col: 9, offset: 67688},
																	run: (*parser).callonSpecialCharactersGroup40,
																	expr: &choiceExpr{
																		pos: position{line: 487, col: 27, offset: 15054},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 487, col: 27, offset: 15054},
																				run: (*parser).callonSpecialCharactersGroup42,
																				expr: &seqExpr{
																					pos: position{line: 487, col: 27, offset: 15054},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 487, col: 27, offset: 15054},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 32, offset: 15059},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonSpecialCharactersGroup46,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 487, col: 40, offset: 15067},
																							expr: &choiceExpr{
																								pos: position{line: 2124, col: 10, offset: 72709},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2124, col: 10, offset: 72709},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2124, col: 16, offset: 72715},
																										run: (*parser).callonSpecialCharactersGroup52,
																										expr: &litMatcher{
																											pos:        position{line: 2124, col: 16, offset: 72715},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 47, offset: 15074},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 51, offset: 15078},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 497, col: 24, offset: 15491},
																								expr: &choiceExpr{
																									pos: position{line: 498, col: 5, offset: 15497},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 498, col: 6, offset: 15498},
																											run: (*parser).callonSpecialCharactersGroup58,
																											expr: &seqExpr{
																												pos: position{line: 498, col: 6, offset: 15498},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 498, col: 6, offset: 15498},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 498, col: 14, offset: 15506},
																														expr: &charClassMatcher{
																															pos:        position{line: 498, col: 14, offset: 15506},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											run: (*parser).callonSpecialCharactersGroup63,
																											expr: &seqExpr{
																												pos: position{line: 398, col: 5, offset: 12261},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 398, col: 5, offset: 12261},
																														run: (*parser).callonSpecialCharactersGroup65,
																													},
																													&labeledExpr{
																														pos:   position{line: 401, col: 5, offset: 12325},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 401, col: 14, offset: 12334},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	run: (*parser).callonSpecialCharactersGroup68,
																																	expr: &seqExpr{
																																		pos: position{line: 415, col: 25, offset: 12896},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 415, col: 25, offset: 12896},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 37, offset: 12908},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonSpecialCharactersGroup72,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 56, offset: 12927},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 415, col: 62, offset: 12933},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonSpecialCharactersGroup79,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonSpecialCharactersGroup84,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonSpecialCharactersGroup86,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 415, col: 78, offset: 12949},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	run: (*parser).callonSpecialCharactersGroup90,
																																	expr: &seqExpr{
																																		pos: position{line: 419, col: 25, offset: 13051},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 419, col: 25, offset: 13051},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 38, offset: 13064},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonSpecialCharactersGroup94,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 57, offset: 13083},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 419, col: 63, offset: 13089},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonSpecialCharactersGroup101,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonSpecialCharactersGroup106,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonSpecialCharactersGroup108,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 419, col: 79, offset: 13105},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	run: (*parser).callonSpecialCharactersGroup112,
																																	expr: &seqExpr{
																																		pos: position{line: 408, col: 31, offset: 12551},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 408, col: 31, offset: 12551},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 408, col: 35, offset: 12555},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonSpecialCharactersGroup116,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 408, col: 54, offset: 12574},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 502, col: 8, offset: 15730},
																											run: (*parser).callonSpecialCharactersGroup122,
																											expr: &litMatcher{
																												pos:        position{line: 502, col: 8, offset: 15730},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 79, offset: 15106},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 489, col: 9, offset: 15179},
																				run: (*parser).callonSpecialCharactersGroup125,
																				expr: &seqExpr{
																					pos: position{line: 489, col: 9, offset: 15179},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 489, col: 9, offset: 15179},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 489, col: 14, offset: 15184},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonSpecialCharactersGroup129,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 489, col: 22, offset: 15192},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1962, col: 11, offset: 67792},
																	run: (*parser).callonSpecialCharactersGroup133,
																	expr: &charClassMatcher{
																		pos:        position{line: 1962, col: 12, offset: 67793},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											run: (*parser).callonSpecialCharactersGroup135,
											expr: &seqExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 692, col: 51, offset: 21719},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															run: (*parser).callonSpecialCharactersGroup139,
															expr: &oneOrMoreExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																expr: &charClassMatcher{
																	pos:        position{line: 692, col: 56, offset: 21724},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2081, col: 12, offset: 71493},
											run: (*parser).callonSpecialCharactersGroup143,
											expr: &anyMatcher{
												line: 2081, col: 12, offset: 71493,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 1880, col: 1, offset: 65718},
			expr: &actionExpr{
				pos: position{line: 1880, col: 18, offset: 65735},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 1880, col: 18, offset: 65735},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1880, col: 18, offset: 65735},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1880, col: 27, offset: 65744},
								expr: &choiceExpr{
									pos: position{line: 1881, col: 5, offset: 65750},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2072, col: 5, offset: 71182},
											run: (*parser).callonVerbatimGroup6,
											expr: &seqExpr{
												pos: position{line: 2072, col: 5, offset: 71182},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2072, col: 5, offset: 71182},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2072, col: 14, offset: 71191},
															run: (*parser).callonVerbatimGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2072, col: 14, offset: 71191},
																expr: &charClassMatcher{
																	pos:        position{line: 2072, col: 14, offset: 71191},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2075, col: 5, offset: 71272},
														expr: &choiceExpr{
															pos: position{line: 2075, col: 7, offset: 71274},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2075, col: 7, offset: 71274},
																	val:        "[\\r\\n �]",
																	chars:      []rune{'\r', '\n', ' ', '�'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2061, col: 5, offset: 70785},
											run: (*parser).callonVerbatimGroup17,
											expr: &seqExpr{
												pos: position{line: 2061, col: 5, offset: 70785},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2061, col: 5, offset: 70785},
														expr: &charClassMatcher{
															pos:        position{line: 2061, col: 5, offset: 70785},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2061, col: 15, offset: 70795},
														expr: &choiceExpr{
															pos: position{line: 2061, col: 17, offset: 70797},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2061, col: 17, offset: 70797},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2132, col: 8, offset: 72882},
																	expr: &anyMatcher{
																		line: 2132, col: 9, offset: 72883,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2063, col: 9, offset: 70879},
											run: (*parser).callonVerbatimGroup26,
											expr: &seqExpr{
												pos: position{line: 2063, col: 9, offset: 70879},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 9, offset: 70879},
														expr: &charClassMatcher{
															pos:        position{line: 2063, col: 9, offset: 70879},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2063, col: 19, offset: 70889},
														expr: &seqExpr{
															pos: position{line: 2063, col: 20, offset: 70890},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2063, col: 20, offset: 70890},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2063, col: 27, offset: 70897},
																	expr: &charClassMatcher{
																		pos:        position{line: 2063, col: 27, offset: 70897},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1882, col: 7, offset: 65767},
											name: "Callout",
										},
										&actionExpr{
											pos: position{line: 1954, col: 5, offset: 67519},
											run: (*parser).callonVerbatimGroup36,
											expr: &seqExpr{
												pos: position{line: 1954, col: 5, offset: 67519},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1954, col: 5, offset: 67519},
														run: (*parser).callonVerbatimGroup38,
													},
													&labeledExpr{
														pos:   position{line: 1957, col: 5, offset: 67590},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 1959, col: 9, offset: 67688},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1959, col: 9, offset: 67688},
																	run: (*parser).callonVerbatimGroup41,
																	expr: &choiceExpr{
																		pos: position{line: 487, col: 27, offset: 15054},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 487, col: 27, offset: 15054},
																				run: (*parser).callonVerbatimGroup43,
																				expr: &seqExpr{
																					pos: position{line: 487, col: 27, offset: 15054},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 487, col: 27, offset: 15054},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 32, offset: 15059},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonVerbatimGroup47,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 487, col: 40, offset: 15067},
																							expr: &choiceExpr{
																								pos: position{line: 2124, col: 10, offset: 72709},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2124, col: 10, offset: 72709},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2124, col: 16, offset: 72715},
																										run: (*parser).callonVerbatimGroup53,
																										expr: &litMatcher{
																											pos:        position{line: 2124, col: 16, offset: 72715},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 47, offset: 15074},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 487, col: 51, offset: 15078},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 497, col: 24, offset: 15491},
																								expr: &choiceExpr{
																									pos: position{line: 498, col: 5, offset: 15497},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 498, col: 6, offset: 15498},
																											run: (*parser).callonVerbatimGroup59,
																											expr: &seqExpr{
																												pos: position{line: 498, col: 6, offset: 15498},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 498, col: 6, offset: 15498},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 498, col: 14, offset: 15506},
																														expr: &charClassMatcher{
																															pos:        position{line: 498, col: 14, offset: 15506},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 398, col: 5, offset: 12261},
																											run: (*parser).callonVerbatimGroup64,
																											expr: &seqExpr{
																												pos: position{line: 398, col: 5, offset: 12261},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 398, col: 5, offset: 12261},
																														run: (*parser).callonVerbatimGroup66,
																													},
																													&labeledExpr{
																														pos:   position{line: 401, col: 5, offset: 12325},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 401, col: 14, offset: 12334},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 415, col: 25, offset: 12896},
																																	run: (*parser).callonVerbatimGroup69,
																																	expr: &seqExpr{
																																		pos: position{line: 415, col: 25, offset: 12896},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 415, col: 25, offset: 12896},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 37, offset: 12908},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonVerbatimGroup73,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 415, col: 56, offset: 12927},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 415, col: 62, offset: 12933},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonVerbatimGroup80,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonVerbatimGroup85,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonVerbatimGroup87,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 415, col: 78, offset: 12949},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 419, col: 25, offset: 13051},
																																	run: (*parser).callonVerbatimGroup91,
																																	expr: &seqExpr{
																																		pos: position{line: 419, col: 25, offset: 13051},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 419, col: 25, offset: 13051},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 38, offset: 13064},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonVerbatimGroup95,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 57, offset: 13083},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 419, col: 63, offset: 13089},
																																					expr: &actionExpr{
																																						pos: position{line: 423, col: 17, offset: 13196},
																																						run: (*parser).callonVerbatimGroup102,
																																						expr: &seqExpr{
																																							pos: position{line: 423, col: 17, offset: 13196},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 423, col: 17, offset: 13196},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 423, col: 21, offset: 13200},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 423, col: 28, offset: 13207},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 423, col: 28, offset: 13207},
																																												run: (*parser).callonVerbatimGroup107,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 423, col: 28, offset: 13207},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 425, col: 9, offset: 13261},
																																												run: (*parser).callonVerbatimGroup109,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 425, col: 9, offset: 13261},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 425, col: 9, offset: 13261},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 419, col: 79, offset: 13105},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 408, col: 31, offset: 12551},
																																	run: (*parser).callonVerbatimGroup113,
																																	expr: &seqExpr{
																																		pos: position{line: 408, col: 31, offset: 12551},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 408, col: 31, offset: 12551},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 408, col: 35, offset: 12555},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 98, col: 18, offset: 2832},
																																					run: (*parser).callonVerbatimGroup117,
																																					expr: &seqExpr{
																																						pos: position{line: 98, col: 18, offset: 2832},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 98, col: 18, offset: 2832},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 98, col: 28, offset: 2842},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 98, col: 29, offset: 2843},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 408, col: 54, offset: 12574},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 502, col: 8, offset: 15730},
																											run: (*parser).callonVerbatimGroup123,
																											expr: &litMatcher{
																												pos:        position{line: 502, col: 8, offset: 15730},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 487, col: 79, offset: 15106},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 489, col: 9, offset: 15179},
																				run: (*parser).callonVerbatimGroup126,
																				expr: &seqExpr{
																					pos: position{line: 489, col: 9, offset: 15179},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 489, col: 9, offset: 15179},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 489, col: 14, offset: 15184},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2112, col: 7, offset: 72433},
																								run: (*parser).callonVerbatimGroup130,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2112, col: 7, offset: 72433},
																									expr: &charClassMatcher{
																										pos:        position{line: 2112, col: 7, offset: 72433},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 489, col: 22, offset: 15192},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1962, col: 11, offset: 67792},
																	run: (*parser).callonVerbatimGroup134,
																	expr: &charClassMatcher{
																		pos:        position{line: 1962, col: 12, offset: 67793},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 692, col: 23, offset: 21691},
											run: (*parser).callonVerbatimGroup136,
											expr: &seqExpr{
												pos: position{line: 692, col: 23, offset: 21691},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 692, col: 51, offset: 21719},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 692, col: 56, offset: 21724},
															run: (*parser).callonVerbatimGroup140,
															expr: &oneOrMoreExpr{
																pos: position{line: 692, col: 56, offset: 21724},
																expr: &charClassMatcher{
																	pos:        position{line: 692, col: 56, offset: 21724},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 691, col: 32, offset: 21660},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2081, col: 12, offset: 71493},
											run: (*parser).callonVerbatimGroup144,
											expr: &anyMatcher{
												line: 2081, col: 12, offset: 71493,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2132, col: 8, offset: 72882},
							expr: &anyMatcher{
								line: 2132, col: 9, offset: 72883,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1889, col: 1, offset: 66029},
			expr: &actionExpr{
				pos: position{line: 1891, col: 5, offset: 66111},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1891, col: 5, offset: 66111},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1891, col: 5, offset: 66111},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1894, col: 5, offset: 66171},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1895, col: 9, offset: 66189},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1895, col: 9, offset: 66189},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1896, col: 11, offset: 66210},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1897, col: 11, offset: 66233},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1898, col: 11, offset: 66249},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1899, col: 11, offset: 66278},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1900, col: 11, offset: 66304},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1901, col: 11, offset: 66330},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 879, col: 20, offset: 27642},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 879, col: 20, offset: 27642},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 879, col: 20, offset: 27642},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 879, col: 25, offset: 27647},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2112, col: 7, offset: 72433},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 2112, col: 7, offset: 72433},
															expr: &charClassMatcher{
																pos:        position{line: 2112, col: 7, offset: 72433},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 879, col: 33, offset: 27655},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 879, col: 38, offset: 27660},
													expr: &choiceExpr{
														pos: position{line: 2124, col: 10, offset: 72709},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2124, col: 10, offset: 72709},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2124, col: 16, offset: 72715},
																run: (*parser).callonInlineMacro24,
																expr: &litMatcher{
																	pos:        position{line: 2124, col: 16, offset: 72715},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 896, col: 23, offset: 28268},
										run: (*parser).callonInlineMacro26,
										expr: &seqExpr{
											pos: position{line: 896, col: 23, offset: 28268},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 896, col: 23, offset: 28268},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 896, col: 29, offset: 28274},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 903, col: 30, offset: 28605},
														run: (*parser).callonInlineMacro30,
														expr: &oneOrMoreExpr{
															pos: position{line: 903, col: 30, offset: 28605},
															expr: &choiceExpr{
																pos: position{line: 903, col: 31, offset: 28606},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2049, col: 13, offset: 70330},
																		val:        "[ 0-9\\pL]",
																		chars:      []rune{' '},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2124, col: 16, offset: 72715},
																		run: (*parser).callonInlineMacro34,
																		expr: &litMatcher{
																			pos:        position{line: 2124, col: 16, offset: 72715},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 897, col: 5, offset: 28313},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 897, col: 11, offset: 28319},
														expr: &actionExpr{
															pos: position{line: 897, col: 12, offset: 28320},
															run: (*parser).callonInlineMacro38,
															expr: &seqExpr{
																pos: position{line: 897, col: 12, offset: 28320},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 897, col: 12, offset: 28320},
																		expr: &choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonInlineMacro43,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 897, col: 19, offset: 28327},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 897, col: 23, offset: 28331},
																		expr: &choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonInlineMacro49,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 897, col: 30, offset: 28338},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 903, col: 30, offset: 28605},
																			run: (*parser).callonInlineMacro52,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 903, col: 30, offset: 28605},
																				expr: &choiceExpr{
																					pos: position{line: 903, col: 31, offset: 28606},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2049, col: 13, offset: 70330},
																							val:        "[ 0-9\\pL]",
																							chars:      []rune{' '},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2124, col: 16, offset: 72715},
																							run: (*parser).callonInlineMacro56,
																							expr: &litMatcher{
																								pos:        position{line: 2124, col: 16, offset: 72715},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 898, col: 5, offset: 28405},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 898, col: 11, offset: 28411},
														expr: &actionExpr{
															pos: position{line: 898, col: 12, offset: 28412},
															run: (*parser).callonInlineMacro60,
															expr: &seqExpr{
																pos: position{line: 898, col: 12, offset: 28412},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 898, col: 12, offset: 28412},
																		expr: &choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonInlineMacro65,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 898, col: 19, offset: 28419},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 898, col: 23, offset: 28423},
																		expr: &choiceExpr{
																			pos: position{line: 2124, col: 10, offset: 72709},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2124, col: 10, offset: 72709},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2124, col: 16, offset: 72715},
																					run: (*parser).callonInlineMacro71,
																					expr: &litMatcher{
																						pos:        position{line: 2124, col: 16, offset: 72715},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 898, col: 30, offset: 28430},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 903, col: 30, offset: 28605},
																			run: (*parser).callonInlineMacro74,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 903, col: 30, offset: 28605},
																				expr: &choiceExpr{
																					pos: position{line: 903, col: 31, offset: 28606},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2049, col: 13, offset: 70330},
																							val:        "[ 0-9\\pL]",
																							chars:      []rune{' '},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2124, col: 16, offset: 72715},
																							run: (*parser).callonInlineMacro78,
																							expr: &litMatcher{
																								pos:        position{line: 2124, col: 16, offset: 72715},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 899, col: 5, offset: 28497},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1904, col: 11, offset: 66412},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1908, col: 1, offset: 66468},
			expr: &actionExpr{
				pos: position{line: 1910, col: 5, offset: 66556},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1910, col: 5, offset: 66556},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1910, col: 5, offset: 66556},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1913, col: 5, offset: 66628},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1914, col: 9, offset: 66646},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 969, col: 26, offset: 31536},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 969, col: 26, offset: 31536},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 967, col: 32, offset: 31504},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 969, col: 54, offset: 31564},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 973, col: 33, offset: 31777},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 973, col: 34, offset: 31778},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 973, col: 34, offset: 31778},
																	expr: &seqExpr{
																		pos: position{line: 973, col: 35, offset: 31779},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 973, col: 35, offset: 31779},
																				expr: &litMatcher{
																					pos:        position{line: 967, col: 32, offset: 31504},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 973, col: 64, offset: 31808,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 975, col: 11, offset: 31981},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 975, col: 11, offset: 31981},
																	expr: &seqExpr{
																		pos: position{line: 975, col: 12, offset: 31982},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 975, col: 12, offset: 31982},
																				expr: &choiceExpr{
																					pos: position{line: 2124, col: 10, offset: 72709},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2124, col: 10, offset: 72709},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2124, col: 16, offset: 72715},
																							run: (*parser).callonInlinePassthrough23,
																							expr: &litMatcher{
																								pos:        position{line: 2124, col: 16, offset: 72715},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 975, col: 19, offset: 31989},
																				expr: &choiceExpr{
																					pos: position{line: 2128, col: 12, offset: 72775},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2128, col: 12, offset: 72775},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2128, col: 19, offset: 72782},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2128, col: 28, offset: 72791},
																							run: (*parser).callonInlinePassthrough29,
																							expr: &litMatcher{
																								pos:        position{line: 2128, col: 28, offset: 72791},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 975, col: 28, offset: 31998},
																				expr: &litMatcher{
																					pos:        position{line: 967, col: 32, offset: 31504},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 975, col: 57, offset: 32027,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 967, col: 32, offset: 31504},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 969, col: 121, offset: 31631},
													expr: &charClassMatcher{
														pos:        position{line: 2049, col: 13, offset: 70330},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 957, col: 26, offset: 30819},
										run: (*parser).callonInlinePassthrough37,
										expr: &seqExpr{
											pos: position{line: 957, col: 26, offset: 30819},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 955, col: 32, offset: 30789},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 957, col: 54, offset: 30847},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 961, col: 33, offset: 31060},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 961, col: 34, offset: 31061},
																run: (*parser).callonInlinePassthrough42,
																expr: &seqExpr{
																	pos: position{line: 961, col: 34, offset: 31061},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 961, col: 35, offset: 31062},
																			expr: &litMatcher{
																				pos:        position{line: 955, col: 32, offset: 30789},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 961, col: 64, offset: 31091},
																			expr: &choiceExpr{
																				pos: position{line: 2124, col: 10, offset: 72709},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2124, col: 10, offset: 72709},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2124, col: 16, offset: 72715},
																						run: (*parser).callonInlinePassthrough49,
																						expr: &litMatcher{
																							pos:        position{line: 2124, col: 16, offset: 72715},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 961, col: 71, offset: 31098},
																			expr: &choiceExpr{
																				pos: position{line: 2128, col: 12, offset: 72775},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2128, col: 12, offset: 72775},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2128, col: 19, offset: 72782},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2128, col: 28, offset: 72791},
																						run: (*parser).callonInlinePassthrough55,
																						expr: &litMatcher{
																							pos:        position{line: 2128, col: 28, offset: 72791},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 961, col: 80, offset: 31107,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 961, col: 83, offset: 31110},
																			expr: &seqExpr{
																				pos: position{line: 961, col: 84, offset: 31111},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 961, col: 84, offset: 31111},
																						expr: &seqExpr{
																							pos: position{line: 961, col: 86, offset: 31113},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 961, col: 86, offset: 31113},
																									expr: &choiceExpr{
																										pos: position{line: 2124, col: 10, offset: 72709},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2124, col: 10, offset: 72709},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2124, col: 16, offset: 72715},
																												run: (*parser).callonInlinePassthrough65,
																												expr: &litMatcher{
																													pos:        position{line: 2124, col: 16, offset: 72715},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 955, col: 32, offset: 30789},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 961, col: 122, offset: 31149},
																						expr: &litMatcher{
																							pos:        position{line: 955, col: 32, offset: 30789},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 961, col: 151, offset: 31178},
																						expr: &choiceExpr{
																							pos: position{line: 2128, col: 12, offset: 72775},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2128, col: 12, offset: 72775},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2128, col: 19, offset: 72782},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2128, col: 28, offset: 72791},
																									run: (*parser).callonInlinePassthrough74,
																									expr: &litMatcher{
																										pos:        position{line: 2128, col: 28, offset: 72791},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 961, col: 160, offset: 31187,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 963, col: 11, offset: 31337},
																run: (*parser).callonInlinePassthrough77,
																expr: &seqExpr{
																	pos: position{line: 963, col: 12, offset: 31338},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 963, col: 12, offset: 31338},
																			expr: &choiceExpr{
																				pos: position{line: 2124, col: 10, offset: 72709},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2124, col: 10, offset: 72709},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2124, col: 16, offset: 72715},
																						run: (*parser).callonInlinePassthrough82,
																						expr: &litMatcher{
																							pos:        position{line: 2124, col: 16, offset: 72715},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 963, col: 19, offset: 31345},
																			expr: &choiceExpr{
																				pos: position{line: 2128, col: 12, offset: 72775},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2128, col: 12, offset: 72775},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2128, col: 19, offset: 72782},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2128, col: 28, offset: 72791},
																						run: (*parser).callonInlinePassthrough88,
																						expr: &litMatcher{
																							pos:        position{line: 2128, col: 28, offset: 72791},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 963, col: 28, offset: 31354},
																			expr: &litMatcher{
																				pos:        position{line: 955, col: 32, offset: 30789},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 963, col: 57, offset: 31383,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 955, col: 32, offset: 30789},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 957, col: 121, offset: 30914},
													expr: &charClassMatcher{
														pos:        position{line: 2049, col: 13, offset: 70330},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1914, col: 57, offset: 66694},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1930, col: 1, offset: 66981},
			expr: &actionExpr{
				pos: position{line: 1932, col: 5, offset: 67057},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1932, col: 5, offset: 67057},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1932, col: 5, offset: 67057},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1935, col: 5, offset: 67117},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1936, col: 9, offset: 67135},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1936, col: 9, offset: 67135},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1937, col: 11, offset: 67157},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2026, col: 1, offset: 69686},
			expr: &actionExpr{
				pos: position{line: 2027, col: 5, offset: 69710},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2027, col: 5, offset: 69710},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2027, col: 5, offset: 69710},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2038, col: 18, offset: 70080},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2038, col: 19, offset: 70081},
									expr: &charClassMatcher{
										pos:        position{line: 2038, col: 19, offset: 70081},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2028, col: 5, offset: 69736},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2032, col: 5, offset: 69876},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2033, col: 5, offset: 69885},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2042, col: 19, offset: 70156},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2042, col: 19, offset: 70156},
									expr: &charClassMatcher{
										pos:        position{line: 2042, col: 19, offset: 70156},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2034, col: 5, offset: 69913},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2034, col: 23, offset: 69931},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2085, col: 1, offset: 71560},
			expr: &actionExpr{
				pos: position{line: 2085, col: 17, offset: 71576},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2085, col: 17, offset: 71576},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2085, col: 22, offset: 71581},
						expr: &choiceExpr{
							pos: position{line: 2085, col: 23, offset: 71582},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2097, col: 13, offset: 71981},
									run: (*parser).callonFileLocation5,
									expr: &labeledExpr{
										pos:   position{line: 2097, col: 13, offset: 71981},
										label: "elements",
										expr: &oneOrMoreExpr{
											pos: position{line: 2097, col: 22, offset: 71990},
											expr: &choiceExpr{
												pos: position{line: 2099, col: 5, offset: 72029},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2099, col: 5, offset: 72029},
														run: (*parser).callonFileLocation9,
														expr: &oneOrMoreExpr{
															pos: position{line: 2099, col: 5, offset: 72029},
															expr: &charClassMatcher{
																pos:        position{line: 2099, col: 6, offset: 72030},
																val:        "[^\\r\\n[]�{&<> ]",
																chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&actionExpr{
														pos: position{line: 398, col: 5, offset: 12261},
														run: (*parser).callonFileLocation12,
														expr: &seqExpr{
															pos: position{line: 398, col: 5, offset: 12261},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 398, col: 5, offset: 12261},
																	run: (*parser).callonFileLocation14,
																},
																&labeledExpr{
																	pos:   position{line: 401, col: 5, offset: 12325},
																	label: "element",
																	expr: &choiceExpr{
																		pos: position{line: 401, col: 14, offset: 12334},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 415, col: 25, offset: 12896},
																				run: (*parser).callonFileLocation17,
																				expr: &seqExpr{
																					pos: position{line: 415, col: 25, offset: 12896},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 415, col: 25, offset: 12896},
																							val:        "{counter:",
																							ignoreCase: false,
																							want:       "\"{counter:\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 415, col: 37, offset: 12908},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 98, col: 18, offset: 2832},
																								run: (*parser).callonFileLocation21,
																								expr: &seqExpr{
																									pos: position{line: 98, col: 18, offset: 2832},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 98, col: 18, offset: 2832},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 98, col: 28, offset: 2842},
																											expr: &charClassMatcher{
																												pos:        position{line: 98, col: 29, offset: 2843},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 415, col: 56, offset: 12927},
																							label: "start",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 415, col: 62, offset: 12933},
																								expr: &actionExpr{
																									pos: position{line: 423, col: 17, offset: 13196},
																									run: (*parser).callonFileLocation28,
																									expr: &seqExpr{
																										pos: position{line: 423, col: 17, offset: 13196},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 423, col: 17, offset: 13196},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 423, col: 21, offset: 13200},
																												label: "start",
																												expr: &choiceExpr{
																													pos: position{line: 423, col: 28, offset: 13207},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 423, col: 28, offset: 13207},
																															run: (*parser).callonFileLocation33,
																															expr: &charClassMatcher{
																																pos:        position{line: 423, col: 28, offset: 13207},
																																val:        "[A-Za-z]",
																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&actionExpr{
																															pos: position{line: 425, col: 9, offset: 13261},
																															run: (*parser).callonFileLocation35,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 425, col: 9, offset: 13261},
																																expr: &charClassMatcher{
																																	pos:        position{line: 425, col: 9, offset: 13261},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 415, col: 78, offset: 12949},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 419, col: 25, offset: 13051},
																				run: (*parser).callonFileLocation39,
																				expr: &seqExpr{
																					pos: position{line: 419, col: 25, offset: 13051},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 419, col: 25, offset: 13051},
																							val:        "{counter2:",
																							ignoreCase: false,
																							want:       "\"{counter2:\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 419, col: 38, offset: 13064},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 98, col: 18, offset: 2832},
																								run: (*parser).callonFileLocation43,
																								expr: &seqExpr{
																									pos: position{line: 98, col: 18, offset: 2832},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 98, col: 18, offset: 2832},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 98, col: 28, offset: 2842},
																											expr: &charClassMatcher{
																												pos:        position{line: 98, col: 29, offset: 2843},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 419, col: 57, offset: 13083},
																							label: "start",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 419, col: 63, offset: 13089},
																								expr: &actionExpr{
																									pos: position{line: 423, col: 17, offset: 13196},
																									run: (*parser).callonFileLocation50,
																									expr: &seqExpr{
																										pos: position{line: 423, col: 17, offset: 13196},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 423, col: 17, offset: 13196},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 423, col: 21, offset: 13200},
																												label: "start",
																												expr: &choiceExpr{
																													pos: position{line: 423, col: 28, offset: 13207},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 423, col: 28, offset: 13207},
																															run: (*parser).callonFileLocation55,
																															expr: &charClassMatcher{
																																pos:        position{line: 423, col: 28, offset: 13207},
																																val:        "[A-Za-z]",
																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&actionExpr{
																															pos: position{line: 425, col: 9, offset: 13261},
																															run: (*parser).callonFileLocation57,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 425, col: 9, offset: 13261},
																																expr: &charClassMatcher{
																																	pos:        position{line: 425, col: 9, offset: 13261},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 419, col: 79, offset: 13105},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 408, col: 31, offset: 12551},
																				run: (*parser).callonFileLocation61,
																				expr: &seqExpr{
																					pos: position{line: 408, col: 31, offset: 12551},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 408, col: 31, offset: 12551},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 408, col: 35, offset: 12555},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 98, col: 18, offset: 2832},
																								run: (*parser).callonFileLocation65,
																								expr: &seqExpr{
																									pos: position{line: 98, col: 18, offset: 2832},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 98, col: 18, offset: 2832},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 98, col: 28, offset: 2842},
																											expr: &charClassMatcher{
																												pos:        position{line: 98, col: 29, offset: 2843},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 408, col: 54, offset: 12574},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1954, col: 5, offset: 67519},
														run: (*parser).callonFileLocation71,
														expr: &seqExpr{
															pos: position{line: 1954, col: 5, offset: 67519},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 1954, col: 5, offset: 67519},
																	run: (*parser).callonFileLocation73,
																},
																&labeledExpr{
																	pos:   position{line: 1957, col: 5, offset: 67590},
																	label: "element",
																	expr: &choiceExpr{
																		pos: position{line: 1959, col: 9, offset: 67688},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1959, col: 9, offset: 67688},
																				run: (*parser).callonFileLocation76,
																				expr: &choiceExpr{
																					pos: position{line: 487, col: 27, offset: 15054},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 487, col: 27, offset: 15054},
																							run: (*parser).callonFileLocation78,
																							expr: &seqExpr{
																								pos: position{line: 487, col: 27, offset: 15054},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 487, col: 27, offset: 15054},
																										val:        "<<",
																										ignoreCase: false,
																										want:       "\"<<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 487, col: 32, offset: 15059},
																										label: "id",
																										expr: &actionExpr{
																											pos: position{line: 2112, col: 7, offset: 72433},
																											run: (*parser).callonFileLocation82,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2112, col: 7, offset: 72433},
																												expr: &charClassMatcher{
																													pos:        position{line: 2112, col: 7, offset: 72433},
																													val:        "[^[]<>,]",
																													chars:      []rune{'[', ']', '<', '>', ','},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 487, col: 40, offset: 15067},
																										expr: &choiceExpr{
																											pos: position{line: 2124, col: 10, offset: 72709},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2124, col: 10, offset: 72709},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2124, col: 16, offset: 72715},
																													run: (*parser).callonFileLocation88,
																													expr: &litMatcher{
																														pos:        position{line: 2124, col: 16, offset: 72715},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 487, col: 47, offset: 15074},
																										val:        ",",
																										ignoreCase: false,
																										want:       "\",\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 487, col: 51, offset: 15078},
																										label: "label",
																										expr: &oneOrMoreExpr{
																											pos: position{line: 497, col: 24, offset: 15491},
																											expr: &choiceExpr{
																												pos: position{line: 498, col: 5, offset: 15497},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 498, col: 6, offset: 15498},
																														run: (*parser).callonFileLocation94,
																														expr: &seqExpr{
																															pos: position{line: 498, col: 6, offset: 15498},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 498, col: 6, offset: 15498},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&oneOrMoreExpr{
																																	pos: position{line: 498, col: 14, offset: 15506},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 498, col: 14, offset: 15506},
																																		val:        "[^\\r\\n{<>]",
																																		chars:      []rune{'\r', '\n', '{', '<', '>'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 398, col: 5, offset: 12261},
																														run: (*parser).callonFileLocation99,
																														expr: &seqExpr{
																															pos: position{line: 398, col: 5, offset: 12261},
																															exprs: []interface{}{
																																&andCodeExpr{
																																	pos: position{line: 398, col: 5, offset: 12261},
																																	run: (*parser).callonFileLocation101,
																																},
																																&labeledExpr{
																																	pos:   position{line: 401, col: 5, offset: 12325},
																																	label: "element",
																																	expr: &choiceExpr{
																																		pos: position{line: 401, col: 14, offset: 12334},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 415, col: 25, offset: 12896},
																																				run: (*parser).callonFileLocation104,
																																				expr: &seqExpr{
																																					pos: position{line: 415, col: 25, offset: 12896},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 415, col: 25, offset: 12896},
																																							val:        "{counter:",
																																							ignoreCase: false,
																																							want:       "\"{counter:\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 415, col: 37, offset: 12908},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 98, col: 18, offset: 2832},
																																								run: (*parser).callonFileLocation108,
																																								expr: &seqExpr{
																																									pos: position{line: 98, col: 18, offset: 2832},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 98, col: 18, offset: 2832},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 98, col: 28, offset: 2842},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 98, col: 29, offset: 2843},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 415, col: 56, offset: 12927},
																																							label: "start",
																																							expr: &zeroOrOneExpr{
																																								pos: position{line: 415, col: 62, offset: 12933},
																																								expr: &actionExpr{
																																									pos: position{line: 423, col: 17, offset: 13196},
																																									run: (*parser).callonFileLocation115,
																																									expr: &seqExpr{
																																										pos: position{line: 423, col: 17, offset: 13196},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 423, col: 17, offset: 13196},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 423, col: 21, offset: 13200},
																																												label: "start",
																																												expr: &choiceExpr{
																																													pos: position{line: 423, col: 28, offset: 13207},
																																													alternatives: []interface{}{
																																														&actionExpr{
																																															pos: position{line: 423, col: 28, offset: 13207},
																																															run: (*parser).callonFileLocation120,
																																															expr: &charClassMatcher{
																																																pos:        position{line: 423, col: 28, offset: 13207},
																																																val:        "[A-Za-z]",
																																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&actionExpr{
																																															pos: position{line: 425, col: 9, offset: 13261},
																																															run: (*parser).callonFileLocation122,
																																															expr: &oneOrMoreExpr{
																																																pos: position{line: 425, col: 9, offset: 13261},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 425, col: 9, offset: 13261},
																																																	val:        "[0-9]",
																																																	ranges:     []rune{'0', '9'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 415, col: 78, offset: 12949},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 419, col: 25, offset: 13051},
																																				run: (*parser).callonFileLocation126,
																																				expr: &seqExpr{
																																					pos: position{line: 419, col: 25, offset: 13051},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 419, col: 25, offset: 13051},
																																							val:        "{counter2:",
																																							ignoreCase: false,
																																							want:       "\"{counter2:\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 419, col: 38, offset: 13064},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 98, col: 18, offset: 2832},
																																								run: (*parser).callonFileLocation130,
																																								expr: &seqExpr{
																																									pos: position{line: 98, col: 18, offset: 2832},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 98, col: 18, offset: 2832},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 98, col: 28, offset: 2842},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 98, col: 29, offset: 2843},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 419, col: 57, offset: 13083},
																																							label: "start",
																																							expr: &zeroOrOneExpr{
																																								pos: position{line: 419, col: 63, offset: 13089},
																																								expr: &actionExpr{
																																									pos: position{line: 423, col: 17, offset: 13196},
																																									run: (*parser).callonFileLocation137,
																																									expr: &seqExpr{
																																										pos: position{line: 423, col: 17, offset: 13196},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 423, col: 17, offset: 13196},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 423, col: 21, offset: 13200},
																																												label: "start",
																																												expr: &choiceExpr{
																																													pos: position{line: 423, col: 28, offset: 13207},
																																													alternatives: []interface{}{
																																														&actionExpr{
																																															pos: position{line: 423, col: 28, offset: 13207},
																																															run: (*parser).callonFileLocation142,
																																															expr: &charClassMatcher{
																																																pos:        position{line: 423, col: 28, offset: 13207},
																																																val:        "[A-Za-z]",
																																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&actionExpr{
																																															pos: position{line: 425, col: 9, offset: 13261},
																																															run: (*parser).callonFileLocation144,
																																															expr: &oneOrMoreExpr{
																																																pos: position{line: 425, col: 9, offset: 13261},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 425, col: 9, offset: 13261},
																																																	val:        "[0-9]",
																																																	ranges:     []rune{'0', '9'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 419, col: 79, offset: 13105},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 408, col: 31, offset: 12551},
																																				run: (*parser).callonFileLocation148,
																																				expr: &seqExpr{
																																					pos: position{line: 408, col: 31, offset: 12551},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 408, col: 31, offset: 12551},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 408, col: 35, offset: 12555},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 98, col: 18, offset: 2832},
																																								run: (*parser).callonFileLocation152,
																																								expr: &seqExpr{
																																									pos: position{line: 98, col: 18, offset: 2832},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 98, col: 18, offset: 2832},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 98, col: 28, offset: 2842},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 98, col: 29, offset: 2843},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 408, col: 54, offset: 12574},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 502, col: 8, offset: 15730},
																														run: (*parser).callonFileLocation158,
																														expr: &litMatcher{
																															pos:        position{line: 502, col: 8, offset: 15730},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 487, col: 79, offset: 15106},
																										val:        ">>",
																										ignoreCase: false,
																										want:       "\">>\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 489, col: 9, offset: 15179},
																							run: (*parser).callonFileLocation161,
																							expr: &seqExpr{
																								pos: position{line: 489, col: 9, offset: 15179},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 489, col: 9, offset: 15179},
																										val:        "<<",
																										ignoreCase: false,
																										want:       "\"<<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 489, col: 14, offset: 15184},
																										label: "id",
																										expr: &actionExpr{
																											pos: position{line: 2112, col: 7, offset: 72433},
																											run: (*parser).callonFileLocation165,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2112, col: 7, offset: 72433},
																												expr: &charClassMatcher{
																													pos:        position{line: 2112, col: 7, offset: 72433},
																													val:        "[^[]<>,]",
																													chars:      []rune{'[', ']', '<', '>', ','},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 489, col: 22, offset: 15192},
																										val:        ">>",
																										ignoreCase: false,
																										want:       "\">>\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1962, col: 11, offset: 67792},
																				run: (*parser).callonFileLocation169,
																				expr: &charClassMatcher{
																					pos:        position{line: 1962, col: 12, offset: 67793},
																					val:        "[<>&]",
																					chars:      []rune{'<', '>', '&'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2104, col: 7, offset: 72221},
														run: (*parser).callonFileLocation171,
														expr: &litMatcher{
															pos:        position{line: 2104, col: 7, offset: 72221},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 692, col: 23, offset: 21691},
									run: (*parser).callonFileLocation173,
									expr: &seqExpr{
										pos: position{line: 692, col: 23, offset: 21691},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 691, col: 32, offset: 21660},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 692, col: 51, offset: 21719},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 692, col: 56, offset: 21724},
													run: (*parser).callonFileLocation177,
													expr: &oneOrMoreExpr{
														pos: position{line: 692, col: 56, offset: 21724},
														expr: &charClassMatcher{
															pos:        position{line: 692, col: 56, offset: 21724},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 691, col: 32, offset: 21660},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDefaultDocumentFragmentElement7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement7()
}

func (c *current) onDefaultDocumentFragmentElement2() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDefaultDocumentFragmentElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement2()
}

func (c *current) onDefaultDocumentFragmentElement14() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDefaultDocumentFragmentElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement14()
}

func (c *current) onDefaultDocumentFragmentElement17(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDefaultDocumentFragmentElement17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement17(stack["level"])
}

func (c *current) onDefaultDocumentFragmentElement21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement21()
}

func (c *current) onDefaultDocumentFragmentElement24() (interface{}, error) {

	return []interface{}{
		types.StringElement{Content: string(c.text)},
	}, nil
}

func (p *parser) callonDefaultDocumentFragmentElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement24()
}

func (c *current) onDefaultDocumentFragmentElement32() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDefaultDocumentFragmentElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement32()
}

func (c *current) onDefaultDocumentFragmentElement11(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonDefaultDocumentFragmentElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement11(stack["level"], stack["title"])
}

func (c *current) onDefaultDocumentFragmentElement49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement49()
}

func (c *current) onDefaultDocumentFragmentElement43() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonDefaultDocumentFragmentElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement43()
}

func (c *current) onDefaultDocumentFragmentElement59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement59()
}

func (c *current) onDefaultDocumentFragmentElement53() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonDefaultDocumentFragmentElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement53()
}

func (c *current) onDefaultDocumentFragmentElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement69()
}

func (c *current) onDefaultDocumentFragmentElement63() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonDefaultDocumentFragmentElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement63()
}

func (c *current) onDefaultDocumentFragmentElement77() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement77()
}

func (c *current) onDefaultDocumentFragmentElement71() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonDefaultDocumentFragmentElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement71()
}

func (c *current) onDefaultDocumentFragmentElement87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement87()
}

func (c *current) onDefaultDocumentFragmentElement81() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonDefaultDocumentFragmentElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement81()
}

func (c *current) onDefaultDocumentFragmentElement97() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement97()
}

func (c *current) onDefaultDocumentFragmentElement91() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonDefaultDocumentFragmentElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement91()
}

func (c *current) onDefaultDocumentFragmentElement107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement107()
}

func (c *current) onDefaultDocumentFragmentElement101() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonDefaultDocumentFragmentElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement101()
}

func (c *current) onDefaultDocumentFragmentElement117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement117()
}

func (c *current) onDefaultDocumentFragmentElement111() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonDefaultDocumentFragmentElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement111()
}

func (c *current) onDefaultDocumentFragmentElement37(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDefaultDocumentFragmentElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement37(stack["delimiter"])
}

func (c *current) onDefaultDocumentFragmentElement121() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonDefaultDocumentFragmentElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement121()
}

func (c *current) onDefaultDocumentFragmentElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement140()
}

func (c *current) onDefaultDocumentFragmentElement147() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonDefaultDocumentFragmentElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement147()
}

func (c *current) onDefaultDocumentFragmentElement150(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonDefaultDocumentFragmentElement150() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement150(stack["depth"])
}

func (c *current) onDefaultDocumentFragmentElement144(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonDefaultDocumentFragmentElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement144(stack["depth"])
}

func (c *current) onDefaultDocumentFragmentElement151() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonDefaultDocumentFragmentElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement151()
}

func (c *current) onDefaultDocumentFragmentElement156() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonDefaultDocumentFragmentElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement156()
}

func (c *current) onDefaultDocumentFragmentElement160() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonDefaultDocumentFragmentElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement160()
}

func (c *current) onDefaultDocumentFragmentElement164() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonDefaultDocumentFragmentElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement164()
}

func (c *current) onDefaultDocumentFragmentElement169() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonDefaultDocumentFragmentElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement169()
}

func (c *current) onDefaultDocumentFragmentElement177() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement177()
}

func (c *current) onDefaultDocumentFragmentElement135(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonDefaultDocumentFragmentElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement135(stack["prefix"])
}

func (c *current) onDefaultDocumentFragmentElement180() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonDefaultDocumentFragmentElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement180()
}

func (c *current) onDefaultDocumentFragmentElement132(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content.([]interface{}))
}

func (p *parser) callonDefaultDocumentFragmentElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement132(stack["prefix"], stack["content"])
}

func (c *current) onDefaultDocumentFragmentElement191() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement191()
}

func (c *current) onDefaultDocumentFragmentElement198() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonDefaultDocumentFragmentElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement198()
}

func (c *current) onDefaultDocumentFragmentElement201(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonDefaultDocumentFragmentElement201() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement201(stack["depth"])
}

func (c *current) onDefaultDocumentFragmentElement195(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonDefaultDocumentFragmentElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement195(stack["depth"])
}

func (c *current) onDefaultDocumentFragmentElement203() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonDefaultDocumentFragmentElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement203()
}

func (c *current) onDefaultDocumentFragmentElement208() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement208()
}

func (c *current) onDefaultDocumentFragmentElement186(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonDefaultDocumentFragmentElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement186(stack["prefix"])
}

func (c *current) onDefaultDocumentFragmentElement218() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonDefaultDocumentFragmentElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement218()
}

func (c *current) onDefaultDocumentFragmentElement220() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonDefaultDocumentFragmentElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement220()
}

func (c *current) onDefaultDocumentFragmentElement222() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonDefaultDocumentFragmentElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement222()
}

func (c *current) onDefaultDocumentFragmentElement227() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement227()
}

func (c *current) onDefaultDocumentFragmentElement212(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonDefaultDocumentFragmentElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement212(stack["style"])
}

func (c *current) onDefaultDocumentFragmentElement230() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonDefaultDocumentFragmentElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement230()
}

func (c *current) onDefaultDocumentFragmentElement183(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content.([]interface{}))

}

func (p *parser) callonDefaultDocumentFragmentElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement183(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onDefaultDocumentFragmentElement243() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement243()
}

func (c *current) onDefaultDocumentFragmentElement246(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonDefaultDocumentFragmentElement246() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement246(stack["separator"])
}

func (c *current) onDefaultDocumentFragmentElement251() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement251()
}

func (c *current) onDefaultDocumentFragmentElement255() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDefaultDocumentFragmentElement255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement255()
}

func (c *current) onDefaultDocumentFragmentElement261() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDefaultDocumentFragmentElement261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement261()
}

func (c *current) onDefaultDocumentFragmentElement240(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonDefaultDocumentFragmentElement240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement240(stack["separator"])
}

func (c *current) onDefaultDocumentFragmentElement236() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDefaultDocumentFragmentElement236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement236()
}

func (c *current) onDefaultDocumentFragmentElement268() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement268()
}

func (c *current) onDefaultDocumentFragmentElement271(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonDefaultDocumentFragmentElement271() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement271(stack["separator"])
}

func (c *current) onDefaultDocumentFragmentElement276() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement276()
}

func (c *current) onDefaultDocumentFragmentElement280() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDefaultDocumentFragmentElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement280()
}

func (c *current) onDefaultDocumentFragmentElement286() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDefaultDocumentFragmentElement286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement286()
}

func (c *current) onDefaultDocumentFragmentElement265(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonDefaultDocumentFragmentElement265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement265(stack["separator"])
}

func (c *current) onDefaultDocumentFragmentElement290() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDefaultDocumentFragmentElement290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement290()
}

func (c *current) onDefaultDocumentFragmentElement233(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term.(string), description)
}

func (p *parser) callonDefaultDocumentFragmentElement233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement233(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onDefaultDocumentFragmentElement300() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonDefaultDocumentFragmentElement300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement300()
}

func (c *current) onDefaultDocumentFragmentElement307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement307()
}

func (c *current) onDefaultDocumentFragmentElement296(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonDefaultDocumentFragmentElement296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement296(stack["ref"])
}

func (c *current) onDefaultDocumentFragmentElement310() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonDefaultDocumentFragmentElement310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement310()
}

func (c *current) onDefaultDocumentFragmentElement293(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.([]interface{}))

}

func (p *parser) callonDefaultDocumentFragmentElement293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement293(stack["ref"], stack["description"])
}

func (c *current) onDefaultDocumentFragmentElement319() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement319()
}

func (c *current) onDefaultDocumentFragmentElement313() (interface{}, error) {
	return types.NewListElementContinuation()
}

func (p *parser) callonDefaultDocumentFragmentElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement313()
}

func (c *current) onDefaultDocumentFragmentElement330() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement330()
}

func (c *current) onDefaultDocumentFragmentElement324() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonDefaultDocumentFragmentElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement324()
}

func (c *current) onDefaultDocumentFragmentElement337() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement337() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement337()
}

func (c *current) onDefaultDocumentFragmentElement341() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement341()
}

func (c *current) onDefaultDocumentFragmentElement349() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDefaultDocumentFragmentElement349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement349()
}

func (c *current) onDefaultDocumentFragmentElement321(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDefaultDocumentFragmentElement321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement321(stack["content"])
}

func (c *current) onDefaultDocumentFragmentElement353() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonDefaultDocumentFragmentElement353() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement353()
}

func (c *current) onDefaultDocumentFragmentElement356() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement356()
}

func (c *current) onDefaultDocumentFragmentElement369() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement369()
}

func (c *current) onDefaultDocumentFragmentElement381() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDefaultDocumentFragmentElement381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement381()
}

func (c *current) onDefaultDocumentFragmentElement385() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDefaultDocumentFragmentElement385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement385()
}

func (c *current) onDefaultDocumentFragmentElement390() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDefaultDocumentFragmentElement390() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement390()
}

func (c *current) onDefaultDocumentFragmentElement397() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement397()
}

func (c *current) onDefaultDocumentFragmentElement409() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement409()
}

func (c *current) onDefaultDocumentFragmentElement411() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDefaultDocumentFragmentElement411() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement411()
}

func (c *current) onDefaultDocumentFragmentElement404(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDefaultDocumentFragmentElement404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement404(stack["start"])
}

func (c *current) onDefaultDocumentFragmentElement393(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDefaultDocumentFragmentElement393() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement393(stack["name"], stack["start"])
}

func (c *current) onDefaultDocumentFragmentElement419() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement419()
}

func (c *current) onDefaultDocumentFragmentElement431() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement431()
}

func (c *current) onDefaultDocumentFragmentElement433() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDefaultDocumentFragmentElement433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement433()
}

func (c *current) onDefaultDocumentFragmentElement426(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDefaultDocumentFragmentElement426() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement426(stack["start"])
}

func (c *current) onDefaultDocumentFragmentElement415(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDefaultDocumentFragmentElement415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement415(stack["name"], stack["start"])
}

func (c *current) onDefaultDocumentFragmentElement441() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement441()
}

func (c *current) onDefaultDocumentFragmentElement437(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDefaultDocumentFragmentElement437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement437(stack["name"])
}

func (c *current) onDefaultDocumentFragmentElement388(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDefaultDocumentFragmentElement388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement388(stack["element"])
}

func (c *current) onDefaultDocumentFragmentElement447() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDefaultDocumentFragmentElement447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement447()
}

func (c *current) onDefaultDocumentFragmentElement373(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonDefaultDocumentFragmentElement373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement373(stack["element"])
}

func (c *current) onDefaultDocumentFragmentElement364(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonDefaultDocumentFragmentElement364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement364(stack["elements"])
}

func (c *current) onDefaultDocumentFragmentElement454() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDefaultDocumentFragmentElement454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement454()
}

func (c *current) onDefaultDocumentFragmentElement351(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonDefaultDocumentFragmentElement351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement351(stack["name"], stack["value"])
}

func (c *current) onDefaultDocumentFragmentElement460() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement460()
}

func (c *current) onDefaultDocumentFragmentElement469() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement469()
}

func (c *current) onDefaultDocumentFragmentElement456(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDefaultDocumentFragmentElement456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement456(stack["name"])
}

func (c *current) onDefaultDocumentFragmentElement477() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement477() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement477()
}

func (c *current) onDefaultDocumentFragmentElement486() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement486()
}

func (c *current) onDefaultDocumentFragmentElement473(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDefaultDocumentFragmentElement473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement473(stack["name"])
}

func (c *current) onDefaultDocumentFragmentElement494() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonDefaultDocumentFragmentElement494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement494()
}

func (c *current) onDefaultDocumentFragmentElement496() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonDefaultDocumentFragmentElement496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement496()
}

func (c *current) onDefaultDocumentFragmentElement498() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonDefaultDocumentFragmentElement498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement498()
}

func (c *current) onDefaultDocumentFragmentElement500() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonDefaultDocumentFragmentElement500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement500()
}

func (c *current) onDefaultDocumentFragmentElement502() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonDefaultDocumentFragmentElement502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement502()
}

func (c *current) onDefaultDocumentFragmentElement506() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDefaultDocumentFragmentElement506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement506()
}

func (c *current) onDefaultDocumentFragmentElement490(kind, content interface{}) (interface{}, error) {

	return types.NewAdmonitionLine(kind.(string), content.(string))

}

func (p *parser) callonDefaultDocumentFragmentElement490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultDocumentFragmentElement490(stack["kind"], stack["content"])
}

func (c *current) onDocumentFragmentElementWithinParagraph7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinParagraph7()
}

func (c *current) onDocumentFragmentElementWithinParagraph2() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragmentElementWithinParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinParagraph2()
}

func (c *current) onDocumentFragmentElementWithinParagraph20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinParagraph20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinParagraph20()
}

func (c *current) onDocumentFragmentElementWithinParagraph14() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonDocumentFragmentElementWithinParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinParagraph14()
}

func (c *current) onDocumentFragmentElementWithinParagraph27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinParagraph27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinParagraph27()
}

func (c *current) onDocumentFragmentElementWithinParagraph31() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinParagraph31()
}

func (c *current) onDocumentFragmentElementWithinParagraph39() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragmentElementWithinParagraph39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinParagraph39()
}

func (c *current) onDocumentFragmentElementWithinParagraph11(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragmentElementWithinParagraph11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinParagraph11(stack["content"])
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock16()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock10() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock10()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock26()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock20() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock20()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock36()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock30() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock30()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock44()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock38() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock38()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock54()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock48() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock48()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock64()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock58() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock58()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock74()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock68() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock68()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock84()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock78() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock78()
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock4(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock4(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock88(delimiter interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block
	return c.isValidBlockDelimiter(delimiter.(*types.BlockDelimiter))

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock88(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock1(stack["delimiter"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes18() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes18()
}

func (c *current) onBlockAttributes25() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes25()
}

func (c *current) onBlockAttributes21(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes21(stack["ref"])
}

func (c *current) onBlockAttributes31() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonBlockAttributes31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes31()
}

func (c *current) onBlockAttributes38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes38()
}

func (c *current) onBlockAttributes50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes50()
}

func (c *current) onBlockAttributes52() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes52()
}

func (c *current) onBlockAttributes45(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes45(stack["start"])
}

func (c *current) onBlockAttributes34(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonBlockAttributes34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes34(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes60()
}

func (c *current) onBlockAttributes72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes72()
}

func (c *current) onBlockAttributes74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes74()
}

func (c *current) onBlockAttributes67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes67(stack["start"])
}

func (c *current) onBlockAttributes56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonBlockAttributes56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes56(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes82()
}

func (c *current) onBlockAttributes78(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes78(stack["name"])
}

func (c *current) onBlockAttributes29(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonBlockAttributes29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29(stack["element"])
}

func (c *current) onBlockAttributes88() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes88()
}

func (c *current) onBlockAttributes14(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes14(stack["elements"])
}

func (c *current) onBlockAttributes10(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes10(stack["id"])
}

func (c *current) onBlockAttributes94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes94()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes110() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes110()
}

func (c *current) onBlockAttributes117() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes117()
}

func (c *current) onBlockAttributes113(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes113(stack["ref"])
}

func (c *current) onBlockAttributes123() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonBlockAttributes123() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes123()
}

func (c *current) onBlockAttributes130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes130()
}

func (c *current) onBlockAttributes142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes142()
}

func (c *current) onBlockAttributes144() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes144()
}

func (c *current) onBlockAttributes137(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes137(stack["start"])
}

func (c *current) onBlockAttributes126(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonBlockAttributes126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes126(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes152() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes152()
}

func (c *current) onBlockAttributes164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes164()
}

func (c *current) onBlockAttributes166() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes166()
}

func (c *current) onBlockAttributes159(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes159(stack["start"])
}

func (c *current) onBlockAttributes148(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonBlockAttributes148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes148(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes174() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes174()
}

func (c *current) onBlockAttributes170(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes170(stack["name"])
}

func (c *current) onBlockAttributes121(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonBlockAttributes121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes121(stack["element"])
}

func (c *current) onBlockAttributes180() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes180()
}

func (c *current) onBlockAttributes103(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes103(stack["elements"])
}

func (c *current) onBlockAttributes99(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonBlockAttributes99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes99(stack["title"])
}

func (c *current) onBlockAttributes185() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes185()
}

func (c *current) onBlockAttributes96(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes96(stack["title"])
}

func (c *current) onBlockAttributes194() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes194()
}

func (c *current) onBlockAttributes187(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes187(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFirstPositionalAttributes18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes18()
}

func (c *current) onFirstPositionalAttributes20(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes20(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonShortHandAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue16()
}

func (c *current) onShortHandAttributeValue12(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonShortHandAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue12(stack["ref"])
}

func (c *current) onShortHandAttributeValue23() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonShortHandAttributeValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue23()
}

func (c *current) onShortHandAttributeValue30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue30()
}

func (c *current) onShortHandAttributeValue42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue42()
}

func (c *current) onShortHandAttributeValue44() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue44()
}

func (c *current) onShortHandAttributeValue37(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue37(stack["start"])
}

func (c *current) onShortHandAttributeValue26(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonShortHandAttributeValue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue26(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue52()
}

func (c *current) onShortHandAttributeValue64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue64()
}

func (c *current) onShortHandAttributeValue66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue66()
}

func (c *current) onShortHandAttributeValue59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue59(stack["start"])
}

func (c *current) onShortHandAttributeValue48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonShortHandAttributeValue48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue48(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue74()
}

func (c *current) onShortHandAttributeValue70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonShortHandAttributeValue70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue70(stack["name"])
}

func (c *current) onShortHandAttributeValue21(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonShortHandAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue21(stack["element"])
}

func (c *current) onShortHandAttributeValue80() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue80()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute13()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute24()
}

func (c *current) onPositionalAttribute32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute32()
}

func (c *current) onPositionalAttribute36(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute36(stack["value"])
}

func (c *current) onPositionalAttribute17(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute17(stack["value"])
}

func (c *current) onNamedAttribute9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute9()
}

func (c *current) onNamedAttribute16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute16()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute22() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute22()
}

func (c *current) onNamedAttribute32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute32()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeValue14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue14()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue13() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuotedAttributeValue13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue13()
}

func (c *current) onSingleQuotedAttributeValue20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue20()
}

func (c *current) onSingleQuotedAttributeValue32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue32()
}

func (c *current) onSingleQuotedAttributeValue34() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue34()
}

func (c *current) onSingleQuotedAttributeValue27(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValue27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue27(stack["start"])
}

func (c *current) onSingleQuotedAttributeValue16(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue16(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValue42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue42()
}

func (c *current) onSingleQuotedAttributeValue54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue54()
}

func (c *current) onSingleQuotedAttributeValue56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue56()
}

func (c *current) onSingleQuotedAttributeValue49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValue49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue49(stack["start"])
}

func (c *current) onSingleQuotedAttributeValue38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuotedAttributeValue38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue38(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValue64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue64()
}

func (c *current) onSingleQuotedAttributeValue60(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuotedAttributeValue60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue60(stack["name"])
}

func (c *current) onSingleQuotedAttributeValue11(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuotedAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue11(stack["element"])
}

func (c *current) onSingleQuotedAttributeValue72() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuotedAttributeValue72() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue72()
}

func (c *current) onSingleQuotedAttributeValue81() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue81()
}

func (c *current) onSingleQuotedAttributeValue87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue87()
}

func (c *current) onSingleQuotedAttributeValue93() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue93()
}

func (c *current) onSingleQuotedAttributeValue100() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuotedAttributeValue100() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue100()
}

func (c *current) onSingleQuotedAttributeValue107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue107()
}

func (c *current) onSingleQuotedAttributeValue119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue119()
}

func (c *current) onSingleQuotedAttributeValue121() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue121()
}

func (c *current) onSingleQuotedAttributeValue114(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValue114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue114(stack["start"])
}

func (c *current) onSingleQuotedAttributeValue103(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuotedAttributeValue103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue103(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValue129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue129()
}

func (c *current) onSingleQuotedAttributeValue141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue141()
}

func (c *current) onSingleQuotedAttributeValue143() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue143()
}

func (c *current) onSingleQuotedAttributeValue136(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValue136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue136(stack["start"])
}

func (c *current) onSingleQuotedAttributeValue125(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuotedAttributeValue125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue125(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValue151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue151()
}

func (c *current) onSingleQuotedAttributeValue147(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuotedAttributeValue147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue147(stack["name"])
}

func (c *current) onSingleQuotedAttributeValue98(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuotedAttributeValue98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue98(stack["element"])
}

func (c *current) onSingleQuotedAttributeValue157() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue157()
}

func (c *current) onSingleQuotedAttributeValue77(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuotedAttributeValue77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue77(stack["id"], stack["label"])
}

func (c *current) onSingleQuotedAttributeValue164() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValue164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue164()
}

func (c *current) onSingleQuotedAttributeValue160(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuotedAttributeValue160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue160(stack["id"])
}

func (c *current) onSingleQuotedAttributeValue75() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue75()
}

func (c *current) onSingleQuotedAttributeValue168() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue168()
}

func (c *current) onSingleQuotedAttributeValue70(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedAttributeValue70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue70(stack["element"])
}

func (c *current) onSingleQuotedAttributeValue174() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedAttributeValue174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue174()
}

func (c *current) onSingleQuotedAttributeValue170(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuotedAttributeValue170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue170(stack["ref"])
}

func (c *current) onSingleQuotedAttributeValue178() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue178()
}

func (c *current) onSingleQuotedAttributeValue181() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue181()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue13() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuotedAttributeValue13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue20()
}

func (c *current) onDoubleQuotedAttributeValue32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue32()
}

func (c *current) onDoubleQuotedAttributeValue34() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue34()
}

func (c *current) onDoubleQuotedAttributeValue27(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValue27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue27(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValue16(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue16(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValue42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue42()
}

func (c *current) onDoubleQuotedAttributeValue54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue54()
}

func (c *current) onDoubleQuotedAttributeValue56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue56()
}

func (c *current) onDoubleQuotedAttributeValue49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValue49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue49(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValue38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuotedAttributeValue38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue38(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValue64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue64()
}

func (c *current) onDoubleQuotedAttributeValue60(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuotedAttributeValue60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue60(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValue11(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuotedAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue11(stack["element"])
}

func (c *current) onDoubleQuotedAttributeValue72() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuotedAttributeValue72() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue72()
}

func (c *current) onDoubleQuotedAttributeValue81() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue81()
}

func (c *current) onDoubleQuotedAttributeValue87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue87()
}

func (c *current) onDoubleQuotedAttributeValue93() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue93()
}

func (c *current) onDoubleQuotedAttributeValue100() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuotedAttributeValue100() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue100()
}

func (c *current) onDoubleQuotedAttributeValue107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue107()
}

func (c *current) onDoubleQuotedAttributeValue119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue119()
}

func (c *current) onDoubleQuotedAttributeValue121() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue121()
}

func (c *current) onDoubleQuotedAttributeValue114(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValue114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue114(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValue103(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuotedAttributeValue103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue103(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValue129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue129()
}

func (c *current) onDoubleQuotedAttributeValue141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue141()
}

func (c *current) onDoubleQuotedAttributeValue143() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue143()
}

func (c *current) onDoubleQuotedAttributeValue136(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValue136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue136(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValue125(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuotedAttributeValue125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue125(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValue151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue151()
}

func (c *current) onDoubleQuotedAttributeValue147(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuotedAttributeValue147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue147(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValue98(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuotedAttributeValue98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue98(stack["element"])
}

func (c *current) onDoubleQuotedAttributeValue157() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue157()
}

func (c *current) onDoubleQuotedAttributeValue77(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuotedAttributeValue77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue77(stack["id"], stack["label"])
}

func (c *current) onDoubleQuotedAttributeValue164() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue164()
}

func (c *current) onDoubleQuotedAttributeValue160(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuotedAttributeValue160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue160(stack["id"])
}

func (c *current) onDoubleQuotedAttributeValue75() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue75()
}

func (c *current) onDoubleQuotedAttributeValue168() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue168()
}

func (c *current) onDoubleQuotedAttributeValue70(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedAttributeValue70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue70(stack["element"])
}

func (c *current) onDoubleQuotedAttributeValue174() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedAttributeValue174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue174()
}

func (c *current) onDoubleQuotedAttributeValue170(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuotedAttributeValue170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue170(stack["ref"])
}

func (c *current) onDoubleQuotedAttributeValue178() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue178()
}

func (c *current) onDoubleQuotedAttributeValue181() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue181()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue6()
}

func (c *current) onUnquotedAttributeValue17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue17()
}

func (c *current) onUnquotedAttributeValue21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue25() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonUnquotedAttributeValue25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue25()
}

func (c *current) onUnquotedAttributeValue32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue32()
}

func (c *current) onUnquotedAttributeValue44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue44()
}

func (c *current) onUnquotedAttributeValue46() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue46()
}

func (c *current) onUnquotedAttributeValue39(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue39(stack["start"])
}

func (c *current) onUnquotedAttributeValue28(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonUnquotedAttributeValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue28(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue54()
}

func (c *current) onUnquotedAttributeValue66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue66()
}

func (c *current) onUnquotedAttributeValue68() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue68()
}

func (c *current) onUnquotedAttributeValue61(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue61(stack["start"])
}

func (c *current) onUnquotedAttributeValue50(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonUnquotedAttributeValue50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue50(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue76()
}

func (c *current) onUnquotedAttributeValue72(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonUnquotedAttributeValue72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue72(stack["name"])
}

func (c *current) onUnquotedAttributeValue23(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue23(stack["element"])
}

func (c *current) onUnquotedAttributeValue84() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonUnquotedAttributeValue84() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue84()
}

func (c *current) onUnquotedAttributeValue93() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue93()
}

func (c *current) onUnquotedAttributeValue99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue99()
}

func (c *current) onUnquotedAttributeValue105() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue105()
}

func (c *current) onUnquotedAttributeValue112() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonUnquotedAttributeValue112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue112()
}

func (c *current) onUnquotedAttributeValue119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue119()
}

func (c *current) onUnquotedAttributeValue131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue131()
}

func (c *current) onUnquotedAttributeValue133() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue133()
}

func (c *current) onUnquotedAttributeValue126(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue126(stack["start"])
}

func (c *current) onUnquotedAttributeValue115(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonUnquotedAttributeValue115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue115(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue141()
}

func (c *current) onUnquotedAttributeValue153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue153()
}

func (c *current) onUnquotedAttributeValue155() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue155()
}

func (c *current) onUnquotedAttributeValue148(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue148(stack["start"])
}

func (c *current) onUnquotedAttributeValue137(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonUnquotedAttributeValue137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue137(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue163()
}

func (c *current) onUnquotedAttributeValue159(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonUnquotedAttributeValue159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue159(stack["name"])
}

func (c *current) onUnquotedAttributeValue110(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue110(stack["element"])
}

func (c *current) onUnquotedAttributeValue169() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue169()
}

func (c *current) onUnquotedAttributeValue89(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonUnquotedAttributeValue89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue89(stack["id"], stack["label"])
}

func (c *current) onUnquotedAttributeValue176() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue176()
}

func (c *current) onUnquotedAttributeValue172(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonUnquotedAttributeValue172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue172(stack["id"])
}

func (c *current) onUnquotedAttributeValue87() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue87()
}

func (c *current) onUnquotedAttributeValue180() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue180()
}

func (c *current) onUnquotedAttributeValue82(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue82(stack["element"])
}

func (c *current) onUnquotedAttributeValue186() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedAttributeValue186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue186()
}

func (c *current) onUnquotedAttributeValue182(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonUnquotedAttributeValue182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue182(stack["ref"])
}

func (c *current) onUnquotedAttributeValue190() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue190()
}

func (c *current) onUnquotedAttributeValue10(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue10(stack["element"])
}

func (c *current) onUnquotedAttributeValue192(elements interface{}) (bool, error) {
	// post-parsing condition to verify that the value is not an empty string
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue192() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue192(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference12()
}

func (c *current) onCrossReference18() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference18()
}

func (c *current) onCrossReference25() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonCrossReference25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference25()
}

func (c *current) onCrossReference32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference32()
}

func (c *current) onCrossReference44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference44()
}

func (c *current) onCrossReference46() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCrossReference46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference46()
}

func (c *current) onCrossReference39(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCrossReference39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference39(stack["start"])
}

func (c *current) onCrossReference28(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCrossReference28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference28(stack["name"], stack["start"])
}

func (c *current) onCrossReference54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference54()
}

func (c *current) onCrossReference66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference66()
}

func (c *current) onCrossReference68() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCrossReference68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference68()
}

func (c *current) onCrossReference61(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCrossReference61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference61(stack["start"])
}

func (c *current) onCrossReference50(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCrossReference50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference50(stack["name"], stack["start"])
}

func (c *current) onCrossReference76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference76()
}

func (c *current) onCrossReference72(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonCrossReference72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference72(stack["name"])
}

func (c *current) onCrossReference23(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonCrossReference23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference23(stack["element"])
}

func (c *current) onCrossReference82() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference82()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference89() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference89()
}

func (c *current) onCrossReference85(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference85(stack["id"])
}

func (c *current) onExternalCrossReference13() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference13()
}

func (c *current) onExternalCrossReference18() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalCrossReference18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference18()
}

func (c *current) onExternalCrossReference25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference25()
}

func (c *current) onExternalCrossReference37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference37()
}

func (c *current) onExternalCrossReference39() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference39()
}

func (c *current) onExternalCrossReference32(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference32(stack["start"])
}

func (c *current) onExternalCrossReference21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference21(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference47()
}

func (c *current) onExternalCrossReference59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference59()
}

func (c *current) onExternalCrossReference61() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference61()
}

func (c *current) onExternalCrossReference54(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference54(stack["start"])
}

func (c *current) onExternalCrossReference43(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalCrossReference43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference43(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference69()
}

func (c *current) onExternalCrossReference65(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalCrossReference65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference65(stack["name"])
}

func (c *current) onExternalCrossReference16(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16(stack["element"])
}

func (c *current) onExternalCrossReference77() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonExternalCrossReference77() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference77()
}

func (c *current) onExternalCrossReference86() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference86()
}

func (c *current) onExternalCrossReference92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference92()
}

func (c *current) onExternalCrossReference98() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference98()
}

func (c *current) onExternalCrossReference105() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalCrossReference105() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference105()
}

func (c *current) onExternalCrossReference112() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference112()
}

func (c *current) onExternalCrossReference124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference124()
}

func (c *current) onExternalCrossReference126() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference126()
}

func (c *current) onExternalCrossReference119(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference119(stack["start"])
}

func (c *current) onExternalCrossReference108(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalCrossReference108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference108(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference134()
}

func (c *current) onExternalCrossReference146() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference146()
}

func (c *current) onExternalCrossReference148() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference148()
}

func (c *current) onExternalCrossReference141(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference141(stack["start"])
}

func (c *current) onExternalCrossReference130(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalCrossReference130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference130(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference156()
}

func (c *current) onExternalCrossReference152(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalCrossReference152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference152(stack["name"])
}

func (c *current) onExternalCrossReference103(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonExternalCrossReference103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference103(stack["element"])
}

func (c *current) onExternalCrossReference162() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference162()
}

func (c *current) onExternalCrossReference82(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference82(stack["id"], stack["label"])
}

func (c *current) onExternalCrossReference169() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference169()
}

func (c *current) onExternalCrossReference165(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalCrossReference165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference165(stack["id"])
}

func (c *current) onExternalCrossReference80() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference80()
}

func (c *current) onExternalCrossReference173() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalCrossReference173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference173()
}

func (c *current) onExternalCrossReference75(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference75(stack["element"])
}

func (c *current) onExternalCrossReference175() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference175()
}

func (c *current) onExternalCrossReference9(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9(stack["elements"])
}

func (c *current) onExternalCrossReference181() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference181()
}

func (c *current) onExternalCrossReference177(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference177(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion16() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion16()
}

func (c *current) onFileInclusion21() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileInclusion21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion21()
}

func (c *current) onFileInclusion28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion28()
}

func (c *current) onFileInclusion40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion40()
}

func (c *current) onFileInclusion42() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion42()
}

func (c *current) onFileInclusion35(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion35(stack["start"])
}

func (c *current) onFileInclusion24(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileInclusion24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion24(stack["name"], stack["start"])
}

func (c *current) onFileInclusion50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion50()
}

func (c *current) onFileInclusion62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion62()
}

func (c *current) onFileInclusion64() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion64()
}

func (c *current) onFileInclusion57(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion57(stack["start"])
}

func (c *current) onFileInclusion46(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileInclusion46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion46(stack["name"], stack["start"])
}

func (c *current) onFileInclusion72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion72()
}

func (c *current) onFileInclusion68(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileInclusion68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion68(stack["name"])
}

func (c *current) onFileInclusion19(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonFileInclusion19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion19(stack["element"])
}

func (c *current) onFileInclusion80() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonFileInclusion80() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion80()
}

func (c *current) onFileInclusion89() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion89()
}

func (c *current) onFileInclusion95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion95()
}

func (c *current) onFileInclusion101() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion101()
}

func (c *current) onFileInclusion108() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileInclusion108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion108()
}

func (c *current) onFileInclusion115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion115()
}

func (c *current) onFileInclusion127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion127()
}

func (c *current) onFileInclusion129() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion129()
}

func (c *current) onFileInclusion122(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion122(stack["start"])
}

func (c *current) onFileInclusion111(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileInclusion111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion111(stack["name"], stack["start"])
}

func (c *current) onFileInclusion137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion137()
}

func (c *current) onFileInclusion149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion149()
}

func (c *current) onFileInclusion151() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion151()
}

func (c *current) onFileInclusion144(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion144(stack["start"])
}

func (c *current) onFileInclusion133(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileInclusion133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion133(stack["name"], stack["start"])
}

func (c *current) onFileInclusion159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion159()
}

func (c *current) onFileInclusion155(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileInclusion155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion155(stack["name"])
}

func (c *current) onFileInclusion106(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonFileInclusion106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion106(stack["element"])
}

func (c *current) onFileInclusion165() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion165()
}

func (c *current) onFileInclusion85(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileInclusion85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion85(stack["id"], stack["label"])
}

func (c *current) onFileInclusion172() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion172()
}

func (c *current) onFileInclusion168(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileInclusion168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion168(stack["id"])
}

func (c *current) onFileInclusion83() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion83()
}

func (c *current) onFileInclusion176() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileInclusion176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion176()
}

func (c *current) onFileInclusion78(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion78(stack["element"])
}

func (c *current) onFileInclusion178() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion178()
}

func (c *current) onFileInclusion12(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFileInclusion12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion12(stack["elements"])
}

func (c *current) onFileInclusion184() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion184()
}

func (c *current) onFileInclusion180(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion180(stack["ref"])
}

func (c *current) onFileInclusion8(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion8(stack["path"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion193() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion193()
}

func (c *current) onFileInclusion200() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFileInclusion200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion200()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges17()
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26()
}

func (c *current) onLineRanges21() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges21()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges35()
}

func (c *current) onLineRanges30() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges30()
}

func (c *current) onLineRanges28(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28(stack["singleline"])
}

func (c *current) onLineRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges47() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges47()
}

func (c *current) onLineRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges61()
}

func (c *current) onLineRanges56() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges56()
}

func (c *current) onLineRanges44(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44(stack["start"], stack["end"])
}

func (c *current) onLineRanges70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges70()
}

func (c *current) onLineRanges65() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges65()
}

func (c *current) onLineRanges63(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges63(stack["singleline"])
}

func (c *current) onLineRanges39(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges39(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges80()
}

func (c *current) onLineRanges75() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges75()
}

func (c *current) onLineRanges89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges89()
}

func (c *current) onLineRanges84() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges84()
}

func (c *current) onLineRanges72(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges72(stack["start"], stack["end"])
}

func (c *current) onLineRanges98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges98()
}

func (c *current) onLineRanges93() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges93()
}

func (c *current) onLineRanges91(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges91(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine31() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonIncludedFileLine31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine31()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onInlineElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement7()
}

func (c *current) onInlineElement4(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement4(stack["content"])
}

func (c *current) onInlineElement15() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement15()
}

func (c *current) onInlineElement24() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement24()
}

func (c *current) onInlineElement37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement37()
}

func (c *current) onInlineElement43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement43()
}

func (c *current) onInlineElement51() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement51()
}

func (c *current) onInlineElement33() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement33()
}

func (c *current) onInlineElement56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement56()
}

func (c *current) onInlineElement65() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement65()
}

func (c *current) onInlineElement70() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonInlineElement70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement70()
}

func (c *current) onInlineElement79() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement79()
}

func (c *current) onInlineElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement85()
}

func (c *current) onInlineElement91() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement91()
}

func (c *current) onInlineElement98() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineElement98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement98()
}

func (c *current) onInlineElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement105()
}

func (c *current) onInlineElement117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement117()
}

func (c *current) onInlineElement119() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement119()
}

func (c *current) onInlineElement112(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement112(stack["start"])
}

func (c *current) onInlineElement101(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement101(stack["name"], stack["start"])
}

func (c *current) onInlineElement127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement127()
}

func (c *current) onInlineElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement139()
}

func (c *current) onInlineElement141() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement141()
}

func (c *current) onInlineElement134(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement134(stack["start"])
}

func (c *current) onInlineElement123(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement123(stack["name"], stack["start"])
}

func (c *current) onInlineElement149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement149()
}

func (c *current) onInlineElement145(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement145(stack["name"])
}

func (c *current) onInlineElement96(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonInlineElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement96(stack["element"])
}

func (c *current) onInlineElement155() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement155()
}

func (c *current) onInlineElement75(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement75(stack["id"], stack["label"])
}

func (c *current) onInlineElement162() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement162()
}

func (c *current) onInlineElement158(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement158(stack["id"])
}

func (c *current) onInlineElement73() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement73()
}

func (c *current) onInlineElement166() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement166()
}

func (c *current) onInlineElement68(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement68(stack["element"])
}

func (c *current) onInlineElement171() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineElement171() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement171()
}

func (c *current) onInlineElement178() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement178()
}

func (c *current) onInlineElement190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement190()
}

func (c *current) onInlineElement192() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement192()
}

func (c *current) onInlineElement185(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement185(stack["start"])
}

func (c *current) onInlineElement174(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement174(stack["name"], stack["start"])
}

func (c *current) onInlineElement200() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement200()
}

func (c *current) onInlineElement212() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement212()
}

func (c *current) onInlineElement214() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement214()
}

func (c *current) onInlineElement207(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement207(stack["start"])
}

func (c *current) onInlineElement196(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement196(stack["name"], stack["start"])
}

func (c *current) onInlineElement222() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement222()
}

func (c *current) onInlineElement218(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement218(stack["name"])
}

func (c *current) onInlineElement169(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonInlineElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement169(stack["element"])
}

func (c *current) onInlineElement230() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonInlineElement230() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement230()
}

func (c *current) onInlineElement233() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonInlineElement233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement233()
}

func (c *current) onInlineElement235() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonInlineElement235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement235()
}

func (c *current) onInlineElement237() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonInlineElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement237()
}

func (c *current) onInlineElement239() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonInlineElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement239()
}

func (c *current) onInlineElement241() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonInlineElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement241()
}

func (c *current) onInlineElement243() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonInlineElement243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement243()
}

func (c *current) onInlineElement228(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement228(stack["element"])
}

func (c *current) onInlineElement252() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonInlineElement252() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement252()
}

func (c *current) onInlineElement258() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement258()
}

func (c *current) onInlineElement264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement264()
}

func (c *current) onInlineElement272() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineElement272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement272()
}

func (c *current) onInlineElement254() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement254()
}

func (c *current) onInlineElement250(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement250(stack["element"])
}

func (c *current) onInlineElement278() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement278()
}

func (c *current) onInlineElement274(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement274(stack["ref"])
}

func (c *current) onInlineElement282() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement282()
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.(types.InlineElements))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent14() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent14()
}

func (c *current) onIndexTermContent26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent26()
}

func (c *current) onIndexTermContent30() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonIndexTermContent30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent30()
}

func (c *current) onIndexTermContent39() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent39()
}

func (c *current) onIndexTermContent45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent45()
}

func (c *current) onIndexTermContent51() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent51()
}

func (c *current) onIndexTermContent58() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonIndexTermContent58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent58()
}

func (c *current) onIndexTermContent65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent65()
}

func (c *current) onIndexTermContent77() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent77()
}

func (c *current) onIndexTermContent79() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonIndexTermContent79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent79()
}

func (c *current) onIndexTermContent72(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonIndexTermContent72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent72(stack["start"])
}

func (c *current) onIndexTermContent61(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonIndexTermContent61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent61(stack["name"], stack["start"])
}

func (c *current) onIndexTermContent87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent87()
}

func (c *current) onIndexTermContent99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent99()
}

func (c *current) onIndexTermContent101() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonIndexTermContent101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent101()
}

func (c *current) onIndexTermContent94(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonIndexTermContent94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent94(stack["start"])
}

func (c *current) onIndexTermContent83(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonIndexTermContent83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent83(stack["name"], stack["start"])
}

func (c *current) onIndexTermContent109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent109()
}

func (c *current) onIndexTermContent105(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonIndexTermContent105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent105(stack["name"])
}

func (c *current) onIndexTermContent56(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonIndexTermContent56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent56(stack["element"])
}

func (c *current) onIndexTermContent115() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent115()
}

func (c *current) onIndexTermContent35(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonIndexTermContent35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent35(stack["id"], stack["label"])
}

func (c *current) onIndexTermContent122() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent122()
}

func (c *current) onIndexTermContent118(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonIndexTermContent118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent118(stack["id"])
}

func (c *current) onIndexTermContent33() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent33()
}

func (c *current) onIndexTermContent126() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent126()
}

func (c *current) onIndexTermContent28(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent28(stack["element"])
}

func (c *current) onIndexTermContent132() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent132()
}

func (c *current) onIndexTermContent128(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent128(stack["ref"])
}

func (c *current) onIndexTermContent136() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent136()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock3() error {
	// for images, we always enable the 'normal' substitutions
	return c.setSubstitutionPhase("normal")

}

func (p *parser) callonImageBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock23() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock23()
}

func (c *current) onImageBlock28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonImageBlock28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock28()
}

func (c *current) onImageBlock35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock35()
}

func (c *current) onImageBlock47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock47()
}

func (c *current) onImageBlock49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock49()
}

func (c *current) onImageBlock42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock42(stack["start"])
}

func (c *current) onImageBlock31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonImageBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock31(stack["name"], stack["start"])
}

func (c *current) onImageBlock57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock57()
}

func (c *current) onImageBlock69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock69()
}

func (c *current) onImageBlock71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock71()
}

func (c *current) onImageBlock64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock64(stack["start"])
}

func (c *current) onImageBlock53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonImageBlock53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock53(stack["name"], stack["start"])
}

func (c *current) onImageBlock79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock79()
}

func (c *current) onImageBlock75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonImageBlock75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock75(stack["name"])
}

func (c *current) onImageBlock26(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonImageBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock26(stack["element"])
}

func (c *current) onImageBlock87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonImageBlock87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock87()
}

func (c *current) onImageBlock96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock96()
}

func (c *current) onImageBlock102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock102()
}

func (c *current) onImageBlock108() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock108()
}

func (c *current) onImageBlock115() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonImageBlock115() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock115()
}

func (c *current) onImageBlock122() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock122()
}

func (c *current) onImageBlock134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock134()
}

func (c *current) onImageBlock136() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock136()
}

func (c *current) onImageBlock129(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock129(stack["start"])
}

func (c *current) onImageBlock118(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonImageBlock118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock118(stack["name"], stack["start"])
}

func (c *current) onImageBlock144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock144()
}

func (c *current) onImageBlock156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock156()
}

func (c *current) onImageBlock158() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock158()
}

func (c *current) onImageBlock151(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock151(stack["start"])
}

func (c *current) onImageBlock140(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonImageBlock140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock140(stack["name"], stack["start"])
}

func (c *current) onImageBlock166() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock166()
}

func (c *current) onImageBlock162(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonImageBlock162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock162(stack["name"])
}

func (c *current) onImageBlock113(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonImageBlock113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock113(stack["element"])
}

func (c *current) onImageBlock172() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock172()
}

func (c *current) onImageBlock92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonImageBlock92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock92(stack["id"], stack["label"])
}

func (c *current) onImageBlock179() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock179()
}

func (c *current) onImageBlock175(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonImageBlock175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock175(stack["id"])
}

func (c *current) onImageBlock90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock90()
}

func (c *current) onImageBlock183() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonImageBlock183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock183()
}

func (c *current) onImageBlock85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock85(stack["element"])
}

func (c *current) onImageBlock185() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock185()
}

func (c *current) onImageBlock19(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonImageBlock19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock19(stack["elements"])
}

func (c *current) onImageBlock191() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock191()
}

func (c *current) onImageBlock187(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock187(stack["ref"])
}

func (c *current) onImageBlock6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock6(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock200() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock200()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage24() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage24()
}

func (c *current) onInlineImage29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineImage29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage29()
}

func (c *current) onInlineImage36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage36()
}

func (c *current) onInlineImage48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage48()
}

func (c *current) onInlineImage50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage50()
}

func (c *current) onInlineImage43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage43(stack["start"])
}

func (c *current) onInlineImage32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineImage32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage32(stack["name"], stack["start"])
}

func (c *current) onInlineImage58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage58()
}

func (c *current) onInlineImage70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage70()
}

func (c *current) onInlineImage72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage72()
}

func (c *current) onInlineImage65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage65(stack["start"])
}

func (c *current) onInlineImage54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineImage54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage54(stack["name"], stack["start"])
}

func (c *current) onInlineImage80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage80()
}

func (c *current) onInlineImage76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineImage76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage76(stack["name"])
}

func (c *current) onInlineImage27(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonInlineImage27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage27(stack["element"])
}

func (c *current) onInlineImage88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonInlineImage88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage88()
}

func (c *current) onInlineImage97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage97()
}

func (c *current) onInlineImage103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage103()
}

func (c *current) onInlineImage109() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage109()
}

func (c *current) onInlineImage116() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineImage116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage116()
}

func (c *current) onInlineImage123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage123()
}

func (c *current) onInlineImage135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage135()
}

func (c *current) onInlineImage137() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage137()
}

func (c *current) onInlineImage130(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage130(stack["start"])
}

func (c *current) onInlineImage119(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineImage119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage119(stack["name"], stack["start"])
}

func (c *current) onInlineImage145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage145()
}

func (c *current) onInlineImage157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage157()
}

func (c *current) onInlineImage159() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage159()
}

func (c *current) onInlineImage152(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage152(stack["start"])
}

func (c *current) onInlineImage141(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineImage141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage141(stack["name"], stack["start"])
}

func (c *current) onInlineImage167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage167()
}

func (c *current) onInlineImage163(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineImage163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage163(stack["name"])
}

func (c *current) onInlineImage114(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonInlineImage114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage114(stack["element"])
}

func (c *current) onInlineImage173() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage173()
}

func (c *current) onInlineImage93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineImage93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage93(stack["id"], stack["label"])
}

func (c *current) onInlineImage180() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage180()
}

func (c *current) onInlineImage176(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineImage176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage176(stack["id"])
}

func (c *current) onInlineImage91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage91()
}

func (c *current) onInlineImage184() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineImage184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage184()
}

func (c *current) onInlineImage86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage86(stack["element"])
}

func (c *current) onInlineImage186() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage186()
}

func (c *current) onInlineImage20(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonInlineImage20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage20(stack["elements"])
}

func (c *current) onInlineImage192() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage192()
}

func (c *current) onInlineImage188(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage188(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote12()
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onRelativeLink22() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink22()
}

func (c *current) onRelativeLink27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonRelativeLink27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink27()
}

func (c *current) onRelativeLink34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink34()
}

func (c *current) onRelativeLink46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink46()
}

func (c *current) onRelativeLink48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink48()
}

func (c *current) onRelativeLink41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink41(stack["start"])
}

func (c *current) onRelativeLink30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonRelativeLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink30(stack["name"], stack["start"])
}

func (c *current) onRelativeLink56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink56()
}

func (c *current) onRelativeLink68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink68()
}

func (c *current) onRelativeLink70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink70()
}

func (c *current) onRelativeLink63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink63(stack["start"])
}

func (c *current) onRelativeLink52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonRelativeLink52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink52(stack["name"], stack["start"])
}

func (c *current) onRelativeLink78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink78()
}

func (c *current) onRelativeLink74(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonRelativeLink74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink74(stack["name"])
}

func (c *current) onRelativeLink25(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonRelativeLink25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink25(stack["element"])
}

func (c *current) onRelativeLink86() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonRelativeLink86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink86()
}

func (c *current) onRelativeLink95() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink95()
}

func (c *current) onRelativeLink101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink101()
}

func (c *current) onRelativeLink107() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink107()
}

func (c *current) onRelativeLink114() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonRelativeLink114() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink114()
}

func (c *current) onRelativeLink121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink121()
}

func (c *current) onRelativeLink133() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink133()
}

func (c *current) onRelativeLink135() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink135()
}

func (c *current) onRelativeLink128(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink128(stack["start"])
}

func (c *current) onRelativeLink117(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonRelativeLink117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink117(stack["name"], stack["start"])
}

func (c *current) onRelativeLink143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink143()
}

func (c *current) onRelativeLink155() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink155()
}

func (c *current) onRelativeLink157() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink157()
}

func (c *current) onRelativeLink150(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink150(stack["start"])
}

func (c *current) onRelativeLink139(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonRelativeLink139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink139(stack["name"], stack["start"])
}

func (c *current) onRelativeLink165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink165()
}

func (c *current) onRelativeLink161(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonRelativeLink161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink161(stack["name"])
}

func (c *current) onRelativeLink112(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonRelativeLink112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink112(stack["element"])
}

func (c *current) onRelativeLink171() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink171()
}

func (c *current) onRelativeLink91(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonRelativeLink91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink91(stack["id"], stack["label"])
}

func (c *current) onRelativeLink178() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink178()
}

func (c *current) onRelativeLink174(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonRelativeLink174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink174(stack["id"])
}

func (c *current) onRelativeLink89() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink89()
}

func (c *current) onRelativeLink182() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonRelativeLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink182()
}

func (c *current) onRelativeLink84(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink84(stack["element"])
}

func (c *current) onRelativeLink184() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink184()
}

func (c *current) onRelativeLink18(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonRelativeLink18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink18(stack["elements"])
}

func (c *current) onRelativeLink190() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink190()
}

func (c *current) onRelativeLink186(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink186(stack["ref"])
}

func (c *current) onRelativeLink5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink5(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink20() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink20()
}

func (c *current) onExternalLink25() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalLink25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink25()
}

func (c *current) onExternalLink32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink32()
}

func (c *current) onExternalLink44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink44()
}

func (c *current) onExternalLink46() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink46()
}

func (c *current) onExternalLink39(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink39(stack["start"])
}

func (c *current) onExternalLink28(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalLink28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink28(stack["name"], stack["start"])
}

func (c *current) onExternalLink54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink54()
}

func (c *current) onExternalLink66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink66()
}

func (c *current) onExternalLink68() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink68()
}

func (c *current) onExternalLink61(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink61(stack["start"])
}

func (c *current) onExternalLink50(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalLink50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink50(stack["name"], stack["start"])
}

func (c *current) onExternalLink76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink76()
}

func (c *current) onExternalLink72(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalLink72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink72(stack["name"])
}

func (c *current) onExternalLink23(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonExternalLink23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink23(stack["element"])
}

func (c *current) onExternalLink84() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonExternalLink84() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink84()
}

func (c *current) onExternalLink93() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink93()
}

func (c *current) onExternalLink99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink99()
}

func (c *current) onExternalLink105() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink105()
}

func (c *current) onExternalLink112() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalLink112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink112()
}

func (c *current) onExternalLink119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink119()
}

func (c *current) onExternalLink131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink131()
}

func (c *current) onExternalLink133() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink133()
}

func (c *current) onExternalLink126(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink126(stack["start"])
}

func (c *current) onExternalLink115(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink115(stack["name"], stack["start"])
}

func (c *current) onExternalLink141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink141()
}

func (c *current) onExternalLink153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink153()
}

func (c *current) onExternalLink155() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink155()
}

func (c *current) onExternalLink148(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink148(stack["start"])
}

func (c *current) onExternalLink137(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalLink137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink137(stack["name"], stack["start"])
}

func (c *current) onExternalLink163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink163()
}

func (c *current) onExternalLink159(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalLink159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink159(stack["name"])
}

func (c *current) onExternalLink110(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonExternalLink110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink110(stack["element"])
}

func (c *current) onExternalLink169() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink169()
}

func (c *current) onExternalLink89(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink89(stack["id"], stack["label"])
}

func (c *current) onExternalLink176() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink176()
}

func (c *current) onExternalLink172(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalLink172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink172(stack["id"])
}

func (c *current) onExternalLink87() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink87()
}

func (c *current) onExternalLink180() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalLink180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink180()
}

func (c *current) onExternalLink82(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink82(stack["element"])
}

func (c *current) onExternalLink182() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink182()
}

func (c *current) onExternalLink16(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonExternalLink16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink16(stack["elements"])
}

func (c *current) onExternalLink188() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink188()
}

func (c *current) onExternalLink184(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalLink184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink184(stack["ref"])
}

func (c *current) onExternalLink4(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink4(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCallout13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout13()
}

func (c *current) onCallout21() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonCallout21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout21()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement7()
}

func (c *current) onDoubleQuoteBoldTextElement16() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement16()
}

func (c *current) onDoubleQuoteBoldTextElement26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement26()
}

func (c *current) onDoubleQuoteBoldTextElement32() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement32()
}

func (c *current) onDoubleQuoteBoldTextElement38() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement38()
}

func (c *current) onDoubleQuoteBoldTextElement42() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteBoldTextElement42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement42()
}

func (c *current) onDoubleQuoteBoldTextElement49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement49()
}

func (c *current) onDoubleQuoteBoldTextElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement61()
}

func (c *current) onDoubleQuoteBoldTextElement63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement63()
}

func (c *current) onDoubleQuoteBoldTextElement56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement56(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteBoldTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement45(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement71()
}

func (c *current) onDoubleQuoteBoldTextElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement83()
}

func (c *current) onDoubleQuoteBoldTextElement85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement85()
}

func (c *current) onDoubleQuoteBoldTextElement78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement78(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteBoldTextElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement67(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement93()
}

func (c *current) onDoubleQuoteBoldTextElement89(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement89(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement40(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement40(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement101() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteBoldTextElement101() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement101()
}

func (c *current) onDoubleQuoteBoldTextElement110() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement110()
}

func (c *current) onDoubleQuoteBoldTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement116()
}

func (c *current) onDoubleQuoteBoldTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement122()
}

func (c *current) onDoubleQuoteBoldTextElement129() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteBoldTextElement129() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement129()
}

func (c *current) onDoubleQuoteBoldTextElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement136()
}

func (c *current) onDoubleQuoteBoldTextElement148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement148()
}

func (c *current) onDoubleQuoteBoldTextElement150() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement150()
}

func (c *current) onDoubleQuoteBoldTextElement143(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement143(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement132(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteBoldTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement132(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement158()
}

func (c *current) onDoubleQuoteBoldTextElement170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement170()
}

func (c *current) onDoubleQuoteBoldTextElement172() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement172()
}

func (c *current) onDoubleQuoteBoldTextElement165(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement165(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement154(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteBoldTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement154(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement180()
}

func (c *current) onDoubleQuoteBoldTextElement176(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement176(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement127(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement127(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement186() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement186()
}

func (c *current) onDoubleQuoteBoldTextElement106(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteBoldTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement106(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteBoldTextElement193() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement193()
}

func (c *current) onDoubleQuoteBoldTextElement189(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteBoldTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement189(stack["id"])
}

func (c *current) onDoubleQuoteBoldTextElement104() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement104()
}

func (c *current) onDoubleQuoteBoldTextElement197() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement197()
}

func (c *current) onDoubleQuoteBoldTextElement99(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement99(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement206() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement206()
}

func (c *current) onDoubleQuoteBoldTextElement202(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement202(stack["ref"])
}

func (c *current) onDoubleQuoteBoldTextElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement214()
}

func (c *current) onDoubleQuoteBoldTextElement211() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement211()
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText13(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText13(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements5()
}

func (c *current) onSingleQuoteBoldTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement2()
}

func (c *current) onSingleQuoteBoldTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement11()
}

func (c *current) onSingleQuoteBoldTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement24()
}

func (c *current) onSingleQuoteBoldTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement30()
}

func (c *current) onSingleQuoteBoldTextElement34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteBoldTextElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement34()
}

func (c *current) onSingleQuoteBoldTextElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement41()
}

func (c *current) onSingleQuoteBoldTextElement53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement53()
}

func (c *current) onSingleQuoteBoldTextElement55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement55()
}

func (c *current) onSingleQuoteBoldTextElement48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement48(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteBoldTextElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement37(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement63()
}

func (c *current) onSingleQuoteBoldTextElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement75()
}

func (c *current) onSingleQuoteBoldTextElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement77()
}

func (c *current) onSingleQuoteBoldTextElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement70(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteBoldTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement59(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement85()
}

func (c *current) onSingleQuoteBoldTextElement81(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement81(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement32(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement32(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteBoldTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement93()
}

func (c *current) onSingleQuoteBoldTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement102()
}

func (c *current) onSingleQuoteBoldTextElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement108()
}

func (c *current) onSingleQuoteBoldTextElement114() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement114()
}

func (c *current) onSingleQuoteBoldTextElement121() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteBoldTextElement121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement121()
}

func (c *current) onSingleQuoteBoldTextElement128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement128()
}

func (c *current) onSingleQuoteBoldTextElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement140()
}

func (c *current) onSingleQuoteBoldTextElement142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement142()
}

func (c *current) onSingleQuoteBoldTextElement135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement135(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteBoldTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement124(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement150()
}

func (c *current) onSingleQuoteBoldTextElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement162()
}

func (c *current) onSingleQuoteBoldTextElement164() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement164()
}

func (c *current) onSingleQuoteBoldTextElement157(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement157(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement146(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteBoldTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement146(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement172()
}

func (c *current) onSingleQuoteBoldTextElement168(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement168(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement119(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement119(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement178()
}

func (c *current) onSingleQuoteBoldTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteBoldTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement98(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteBoldTextElement185() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement185()
}

func (c *current) onSingleQuoteBoldTextElement181(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteBoldTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement181(stack["id"])
}

func (c *current) onSingleQuoteBoldTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement96()
}

func (c *current) onSingleQuoteBoldTextElement189() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement189()
}

func (c *current) onSingleQuoteBoldTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement91(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement197()
}

func (c *current) onSingleQuoteBoldTextElement209() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement209()
}

func (c *current) onSingleQuoteBoldTextElement205(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement205(stack["ref"])
}

func (c *current) onSingleQuoteBoldTextElement217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement217()
}

func (c *current) onSingleQuoteBoldTextElement214() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement214()
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement7()
}

func (c *current) onDoubleQuoteItalicTextElement16() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement16()
}

func (c *current) onDoubleQuoteItalicTextElement26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement26()
}

func (c *current) onDoubleQuoteItalicTextElement32() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement32()
}

func (c *current) onDoubleQuoteItalicTextElement38() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement38()
}

func (c *current) onDoubleQuoteItalicTextElement42() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteItalicTextElement42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement42()
}

func (c *current) onDoubleQuoteItalicTextElement49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement49()
}

func (c *current) onDoubleQuoteItalicTextElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement61()
}

func (c *current) onDoubleQuoteItalicTextElement63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement63()
}

func (c *current) onDoubleQuoteItalicTextElement56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement56(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteItalicTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement45(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement71()
}

func (c *current) onDoubleQuoteItalicTextElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement83()
}

func (c *current) onDoubleQuoteItalicTextElement85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement85()
}

func (c *current) onDoubleQuoteItalicTextElement78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement78(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteItalicTextElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement67(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement93()
}

func (c *current) onDoubleQuoteItalicTextElement89(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement89(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement40(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement40(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement101() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteItalicTextElement101() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement101()
}

func (c *current) onDoubleQuoteItalicTextElement110() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement110()
}

func (c *current) onDoubleQuoteItalicTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement116()
}

func (c *current) onDoubleQuoteItalicTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement122()
}

func (c *current) onDoubleQuoteItalicTextElement129() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteItalicTextElement129() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement129()
}

func (c *current) onDoubleQuoteItalicTextElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement136()
}

func (c *current) onDoubleQuoteItalicTextElement148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement148()
}

func (c *current) onDoubleQuoteItalicTextElement150() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement150()
}

func (c *current) onDoubleQuoteItalicTextElement143(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement143(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement132(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteItalicTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement132(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement158()
}

func (c *current) onDoubleQuoteItalicTextElement170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement170()
}

func (c *current) onDoubleQuoteItalicTextElement172() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement172()
}

func (c *current) onDoubleQuoteItalicTextElement165(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement165(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement154(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteItalicTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement154(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement180()
}

func (c *current) onDoubleQuoteItalicTextElement176(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement176(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement127(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement127(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement186() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement186()
}

func (c *current) onDoubleQuoteItalicTextElement106(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteItalicTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement106(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteItalicTextElement193() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement193()
}

func (c *current) onDoubleQuoteItalicTextElement189(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteItalicTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement189(stack["id"])
}

func (c *current) onDoubleQuoteItalicTextElement104() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement104()
}

func (c *current) onDoubleQuoteItalicTextElement197() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement197()
}

func (c *current) onDoubleQuoteItalicTextElement99(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement99(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement206() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement206()
}

func (c *current) onDoubleQuoteItalicTextElement202(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement202(stack["ref"])
}

func (c *current) onDoubleQuoteItalicTextElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement214()
}

func (c *current) onDoubleQuoteItalicTextElement211() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement211()
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText10(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText10(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements6()
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement2()
}

func (c *current) onSingleQuoteItalicTextElement12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement12()
}

func (c *current) onSingleQuoteItalicTextElement23() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement23()
}

func (c *current) onSingleQuoteItalicTextElement29() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement29()
}

func (c *current) onSingleQuoteItalicTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteItalicTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement33()
}

func (c *current) onSingleQuoteItalicTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement40()
}

func (c *current) onSingleQuoteItalicTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement52()
}

func (c *current) onSingleQuoteItalicTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement54()
}

func (c *current) onSingleQuoteItalicTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement47(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteItalicTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement36(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement62()
}

func (c *current) onSingleQuoteItalicTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement74()
}

func (c *current) onSingleQuoteItalicTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement76()
}

func (c *current) onSingleQuoteItalicTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement69(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteItalicTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement58(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement84()
}

func (c *current) onSingleQuoteItalicTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement80(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement31(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement31(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement92() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteItalicTextElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement92()
}

func (c *current) onSingleQuoteItalicTextElement101() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement101()
}

func (c *current) onSingleQuoteItalicTextElement107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement107()
}

func (c *current) onSingleQuoteItalicTextElement113() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement113()
}

func (c *current) onSingleQuoteItalicTextElement120() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteItalicTextElement120() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement120()
}

func (c *current) onSingleQuoteItalicTextElement127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement127()
}

func (c *current) onSingleQuoteItalicTextElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement139()
}

func (c *current) onSingleQuoteItalicTextElement141() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement141()
}

func (c *current) onSingleQuoteItalicTextElement134(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement134(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement123(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteItalicTextElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement123(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement149()
}

func (c *current) onSingleQuoteItalicTextElement161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement161()
}

func (c *current) onSingleQuoteItalicTextElement163() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement163()
}

func (c *current) onSingleQuoteItalicTextElement156(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement156(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement145(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteItalicTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement145(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement171()
}

func (c *current) onSingleQuoteItalicTextElement167(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement167(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement118(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement118(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement177() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement177()
}

func (c *current) onSingleQuoteItalicTextElement97(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteItalicTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement97(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteItalicTextElement184() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement184()
}

func (c *current) onSingleQuoteItalicTextElement180(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteItalicTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement180(stack["id"])
}

func (c *current) onSingleQuoteItalicTextElement95() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement95()
}

func (c *current) onSingleQuoteItalicTextElement188() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement188()
}

func (c *current) onSingleQuoteItalicTextElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement90(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement197() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement197()
}

func (c *current) onSingleQuoteItalicTextElement193(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement193(stack["ref"])
}

func (c *current) onSingleQuoteItalicTextElement205() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement205()
}

func (c *current) onSingleQuoteItalicTextElement202() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement202()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement7()
}

func (c *current) onDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement16()
}

func (c *current) onDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement26()
}

func (c *current) onDoubleQuoteMonospaceTextElement32() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement32()
}

func (c *current) onDoubleQuoteMonospaceTextElement38() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement38()
}

func (c *current) onDoubleQuoteMonospaceTextElement42() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement42()
}

func (c *current) onDoubleQuoteMonospaceTextElement49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement49()
}

func (c *current) onDoubleQuoteMonospaceTextElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement61()
}

func (c *current) onDoubleQuoteMonospaceTextElement63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement63()
}

func (c *current) onDoubleQuoteMonospaceTextElement56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement56(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement45(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement71()
}

func (c *current) onDoubleQuoteMonospaceTextElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement83()
}

func (c *current) onDoubleQuoteMonospaceTextElement85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement85()
}

func (c *current) onDoubleQuoteMonospaceTextElement78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement78(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement67(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement93()
}

func (c *current) onDoubleQuoteMonospaceTextElement89(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement89(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement40(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement40(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement101() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement101() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement101()
}

func (c *current) onDoubleQuoteMonospaceTextElement110() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement110()
}

func (c *current) onDoubleQuoteMonospaceTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement116()
}

func (c *current) onDoubleQuoteMonospaceTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement122()
}

func (c *current) onDoubleQuoteMonospaceTextElement129() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement129() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement129()
}

func (c *current) onDoubleQuoteMonospaceTextElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement136()
}

func (c *current) onDoubleQuoteMonospaceTextElement148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement148()
}

func (c *current) onDoubleQuoteMonospaceTextElement150() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement150()
}

func (c *current) onDoubleQuoteMonospaceTextElement143(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement143(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement132(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement132(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement158()
}

func (c *current) onDoubleQuoteMonospaceTextElement170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement170()
}

func (c *current) onDoubleQuoteMonospaceTextElement172() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement172()
}

func (c *current) onDoubleQuoteMonospaceTextElement165(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement165(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement154(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement154(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement180()
}

func (c *current) onDoubleQuoteMonospaceTextElement176(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement176(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement127(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement127(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement186() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement186()
}

func (c *current) onDoubleQuoteMonospaceTextElement106(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement106(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMonospaceTextElement193() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement193()
}

func (c *current) onDoubleQuoteMonospaceTextElement189(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement189(stack["id"])
}

func (c *current) onDoubleQuoteMonospaceTextElement104() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement104()
}

func (c *current) onDoubleQuoteMonospaceTextElement197() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement197()
}

func (c *current) onDoubleQuoteMonospaceTextElement99(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement99(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement207() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement207()
}

func (c *current) onDoubleQuoteMonospaceTextElement203(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement203(stack["ref"])
}

func (c *current) onDoubleQuoteMonospaceTextElement215() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement215()
}

func (c *current) onDoubleQuoteMonospaceTextElement212() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement212()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText10(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText10(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements5()
}

func (c *current) onSingleQuoteMonospaceTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement2()
}

func (c *current) onSingleQuoteMonospaceTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement11()
}

func (c *current) onSingleQuoteMonospaceTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement24()
}

func (c *current) onSingleQuoteMonospaceTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement30()
}

func (c *current) onSingleQuoteMonospaceTextElement34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMonospaceTextElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement34()
}

func (c *current) onSingleQuoteMonospaceTextElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement41()
}

func (c *current) onSingleQuoteMonospaceTextElement53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement53()
}

func (c *current) onSingleQuoteMonospaceTextElement55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement55()
}

func (c *current) onSingleQuoteMonospaceTextElement48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement48(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMonospaceTextElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement37(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement63()
}

func (c *current) onSingleQuoteMonospaceTextElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement75()
}

func (c *current) onSingleQuoteMonospaceTextElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement77()
}

func (c *current) onSingleQuoteMonospaceTextElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement70(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMonospaceTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement59(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement85()
}

func (c *current) onSingleQuoteMonospaceTextElement81(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement81(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement32(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement32(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteMonospaceTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement93()
}

func (c *current) onSingleQuoteMonospaceTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement102()
}

func (c *current) onSingleQuoteMonospaceTextElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement108()
}

func (c *current) onSingleQuoteMonospaceTextElement114() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement114()
}

func (c *current) onSingleQuoteMonospaceTextElement121() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMonospaceTextElement121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement121()
}

func (c *current) onSingleQuoteMonospaceTextElement128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement128()
}

func (c *current) onSingleQuoteMonospaceTextElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement140()
}

func (c *current) onSingleQuoteMonospaceTextElement142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement142()
}

func (c *current) onSingleQuoteMonospaceTextElement135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement135(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMonospaceTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement124(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement150()
}

func (c *current) onSingleQuoteMonospaceTextElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement162()
}

func (c *current) onSingleQuoteMonospaceTextElement164() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement164()
}

func (c *current) onSingleQuoteMonospaceTextElement157(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement157(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement146(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMonospaceTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement146(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement172()
}

func (c *current) onSingleQuoteMonospaceTextElement168(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement168(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement119(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement119(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement178()
}

func (c *current) onSingleQuoteMonospaceTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMonospaceTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement98(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMonospaceTextElement185() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement185()
}

func (c *current) onSingleQuoteMonospaceTextElement181(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMonospaceTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement181(stack["id"])
}

func (c *current) onSingleQuoteMonospaceTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement96()
}

func (c *current) onSingleQuoteMonospaceTextElement189() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement189()
}

func (c *current) onSingleQuoteMonospaceTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement91(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement197()
}

func (c *current) onSingleQuoteMonospaceTextElement210() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement210()
}

func (c *current) onSingleQuoteMonospaceTextElement206(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement206(stack["ref"])
}

func (c *current) onSingleQuoteMonospaceTextElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement219()
}

func (c *current) onSingleQuoteMonospaceTextElement214() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement214()
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElements9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElements9()
}

func (c *current) onDoubleQuoteMarkedTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement2()
}

func (c *current) onDoubleQuoteMarkedTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement11()
}

func (c *current) onDoubleQuoteMarkedTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement24()
}

func (c *current) onDoubleQuoteMarkedTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement30()
}

func (c *current) onDoubleQuoteMarkedTextElement34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMarkedTextElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement34()
}

func (c *current) onDoubleQuoteMarkedTextElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement41()
}

func (c *current) onDoubleQuoteMarkedTextElement53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement53()
}

func (c *current) onDoubleQuoteMarkedTextElement55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement55()
}

func (c *current) onDoubleQuoteMarkedTextElement48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement48(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMarkedTextElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement37(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement63()
}

func (c *current) onDoubleQuoteMarkedTextElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement75()
}

func (c *current) onDoubleQuoteMarkedTextElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement77()
}

func (c *current) onDoubleQuoteMarkedTextElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement70(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMarkedTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement59(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement85()
}

func (c *current) onDoubleQuoteMarkedTextElement81(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement81(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement32(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement32(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteMarkedTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement93()
}

func (c *current) onDoubleQuoteMarkedTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement102()
}

func (c *current) onDoubleQuoteMarkedTextElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement108()
}

func (c *current) onDoubleQuoteMarkedTextElement114() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement114()
}

func (c *current) onDoubleQuoteMarkedTextElement121() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMarkedTextElement121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement121()
}

func (c *current) onDoubleQuoteMarkedTextElement128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement128()
}

func (c *current) onDoubleQuoteMarkedTextElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement140()
}

func (c *current) onDoubleQuoteMarkedTextElement142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement142()
}

func (c *current) onDoubleQuoteMarkedTextElement135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement135(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMarkedTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement124(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement150()
}

func (c *current) onDoubleQuoteMarkedTextElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement162()
}

func (c *current) onDoubleQuoteMarkedTextElement164() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement164()
}

func (c *current) onDoubleQuoteMarkedTextElement157(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement157(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement146(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMarkedTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement146(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement172()
}

func (c *current) onDoubleQuoteMarkedTextElement168(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement168(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement119(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement119(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement178()
}

func (c *current) onDoubleQuoteMarkedTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMarkedTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement98(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMarkedTextElement185() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement185()
}

func (c *current) onDoubleQuoteMarkedTextElement181(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMarkedTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement181(stack["id"])
}

func (c *current) onDoubleQuoteMarkedTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement96()
}

func (c *current) onDoubleQuoteMarkedTextElement189() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement189()
}

func (c *current) onDoubleQuoteMarkedTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement91(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement198() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement198()
}

func (c *current) onDoubleQuoteMarkedTextElement194(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement194(stack["ref"])
}

func (c *current) onDoubleQuoteMarkedTextElement206() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement206()
}

func (c *current) onDoubleQuoteMarkedTextElement203() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement203()
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText10(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText10(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements5()
}

func (c *current) onSingleQuoteMarkedTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement2()
}

func (c *current) onSingleQuoteMarkedTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement11()
}

func (c *current) onSingleQuoteMarkedTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement24()
}

func (c *current) onSingleQuoteMarkedTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement30()
}

func (c *current) onSingleQuoteMarkedTextElement34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMarkedTextElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement34()
}

func (c *current) onSingleQuoteMarkedTextElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement41()
}

func (c *current) onSingleQuoteMarkedTextElement53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement53()
}

func (c *current) onSingleQuoteMarkedTextElement55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement55()
}

func (c *current) onSingleQuoteMarkedTextElement48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement48(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMarkedTextElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement37(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement63()
}

func (c *current) onSingleQuoteMarkedTextElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement75()
}

func (c *current) onSingleQuoteMarkedTextElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement77()
}

func (c *current) onSingleQuoteMarkedTextElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement70(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMarkedTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement59(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement85()
}

func (c *current) onSingleQuoteMarkedTextElement81(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement81(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement32(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement32(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteMarkedTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement93()
}

func (c *current) onSingleQuoteMarkedTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement102()
}

func (c *current) onSingleQuoteMarkedTextElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement108()
}

func (c *current) onSingleQuoteMarkedTextElement114() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement114()
}

func (c *current) onSingleQuoteMarkedTextElement121() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMarkedTextElement121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement121()
}

func (c *current) onSingleQuoteMarkedTextElement128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement128()
}

func (c *current) onSingleQuoteMarkedTextElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement140()
}

func (c *current) onSingleQuoteMarkedTextElement142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement142()
}

func (c *current) onSingleQuoteMarkedTextElement135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement135(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMarkedTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement124(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement150()
}

func (c *current) onSingleQuoteMarkedTextElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement162()
}

func (c *current) onSingleQuoteMarkedTextElement164() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement164()
}

func (c *current) onSingleQuoteMarkedTextElement157(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement157(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement146(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMarkedTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement146(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement172()
}

func (c *current) onSingleQuoteMarkedTextElement168(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement168(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement119(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement119(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement178()
}

func (c *current) onSingleQuoteMarkedTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMarkedTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement98(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMarkedTextElement185() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement185()
}

func (c *current) onSingleQuoteMarkedTextElement181(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMarkedTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement181(stack["id"])
}

func (c *current) onSingleQuoteMarkedTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement96()
}

func (c *current) onSingleQuoteMarkedTextElement189() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement189()
}

func (c *current) onSingleQuoteMarkedTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement91(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement197()
}

func (c *current) onSingleQuoteMarkedTextElement209() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement209()
}

func (c *current) onSingleQuoteMarkedTextElement205(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement205(stack["ref"])
}

func (c *current) onSingleQuoteMarkedTextElement217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement217()
}

func (c *current) onSingleQuoteMarkedTextElement214() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement214()
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement9()
}

func (c *current) onSingleQuotedStringElement15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement15()
}

func (c *current) onSingleQuotedStringElement23() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringElement23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement23()
}

func (c *current) onSingleQuotedStringElement5() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonSingleQuotedStringElement5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement5()
}

func (c *current) onSingleQuotedStringElement31() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement31()
}

func (c *current) onSingleQuotedStringElement41() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuotedStringElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement41()
}

func (c *current) onSingleQuotedStringElement43() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuotedStringElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement43()
}

func (c *current) onSingleQuotedStringElement45() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuotedStringElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement45()
}

func (c *current) onSingleQuotedStringElement47() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuotedStringElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement47()
}

func (c *current) onSingleQuotedStringElement49() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuotedStringElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement49()
}

func (c *current) onSingleQuotedStringElement51() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuotedStringElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement51()
}

func (c *current) onSingleQuotedStringElement35(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement35(stack["element"])
}

func (c *current) onSingleQuotedStringElement60() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement60()
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement9()
}

func (c *current) onDoubleQuotedStringElement15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement15()
}

func (c *current) onDoubleQuotedStringElement23() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringElement23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement23()
}

func (c *current) onDoubleQuotedStringElement5() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonDoubleQuotedStringElement5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement5()
}

func (c *current) onDoubleQuotedStringElement31() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement31()
}

func (c *current) onDoubleQuotedStringElement37() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement37()
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onAttributesGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup9()
}

func (c *current) onAttributesGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonAttributesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup6(stack["content"])
}

func (c *current) onAttributesGroup17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup17()
}

func (c *current) onAttributesGroup26() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup26()
}

func (c *current) onAttributesGroup38() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributesGroup38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup38()
}

func (c *current) onAttributesGroup45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup45()
}

func (c *current) onAttributesGroup57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup57()
}

func (c *current) onAttributesGroup59() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup59()
}

func (c *current) onAttributesGroup52(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup52(stack["start"])
}

func (c *current) onAttributesGroup41(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributesGroup41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup41(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup67()
}

func (c *current) onAttributesGroup79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup79()
}

func (c *current) onAttributesGroup81() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup81()
}

func (c *current) onAttributesGroup74(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup74(stack["start"])
}

func (c *current) onAttributesGroup63(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributesGroup63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup63(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup89()
}

func (c *current) onAttributesGroup85(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributesGroup85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup85(stack["name"])
}

func (c *current) onAttributesGroup36(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributesGroup36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup36(stack["element"])
}

func (c *current) onAttributesGroup99() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributesGroup99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup99()
}

func (c *current) onAttributesGroup95(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonAttributesGroup95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup95(stack["ref"])
}

func (c *current) onAttributesGroup103() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup103()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup9()
}

func (c *current) onHeaderGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonHeaderGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup6(stack["content"])
}

func (c *current) onHeaderGroup17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup17()
}

func (c *current) onHeaderGroup26() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroup26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup26()
}

func (c *current) onHeaderGroup38() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonHeaderGroup38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup38()
}

func (c *current) onHeaderGroup47() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup47()
}

func (c *current) onHeaderGroup53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup53()
}

func (c *current) onHeaderGroup59() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroup59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup59()
}

func (c *current) onHeaderGroup66() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroup66() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup66()
}

func (c *current) onHeaderGroup73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup73()
}

func (c *current) onHeaderGroup85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup85()
}

func (c *current) onHeaderGroup87() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroup87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup87()
}

func (c *current) onHeaderGroup80(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroup80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup80(stack["start"])
}

func (c *current) onHeaderGroup69(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroup69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup69(stack["name"], stack["start"])
}

func (c *current) onHeaderGroup95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup95()
}

func (c *current) onHeaderGroup107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup107()
}

func (c *current) onHeaderGroup109() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroup109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup109()
}

func (c *current) onHeaderGroup102(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroup102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup102(stack["start"])
}

func (c *current) onHeaderGroup91(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroup91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup91(stack["name"], stack["start"])
}

func (c *current) onHeaderGroup117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup117()
}

func (c *current) onHeaderGroup113(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroup113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup113(stack["name"])
}

func (c *current) onHeaderGroup64(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonHeaderGroup64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup64(stack["element"])
}

func (c *current) onHeaderGroup123() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroup123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup123()
}

func (c *current) onHeaderGroup43(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonHeaderGroup43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup43(stack["id"], stack["label"])
}

func (c *current) onHeaderGroup130() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup130()
}

func (c *current) onHeaderGroup126(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonHeaderGroup126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup126(stack["id"])
}

func (c *current) onHeaderGroup41() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroup41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup41()
}

func (c *current) onHeaderGroup134() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonHeaderGroup134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup134()
}

func (c *current) onHeaderGroup36(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroup36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup36(stack["element"])
}

func (c *current) onHeaderGroup139() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroup139() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup139()
}

func (c *current) onHeaderGroup146() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup146()
}

func (c *current) onHeaderGroup158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup158()
}

func (c *current) onHeaderGroup160() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroup160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup160()
}

func (c *current) onHeaderGroup153(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroup153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup153(stack["start"])
}

func (c *current) onHeaderGroup142(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroup142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup142(stack["name"], stack["start"])
}

func (c *current) onHeaderGroup168() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup168()
}

func (c *current) onHeaderGroup180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup180()
}

func (c *current) onHeaderGroup182() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroup182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup182()
}

func (c *current) onHeaderGroup175(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroup175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup175(stack["start"])
}

func (c *current) onHeaderGroup164(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroup164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup164(stack["name"], stack["start"])
}

func (c *current) onHeaderGroup190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroup190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup190()
}

func (c *current) onHeaderGroup186(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroup186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup186(stack["name"])
}

func (c *current) onHeaderGroup137(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonHeaderGroup137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup137(stack["element"])
}

func (c *current) onHeaderGroup200() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroup200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup200()
}

func (c *current) onHeaderGroup196(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroup196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup196(stack["ref"])
}

func (c *current) onHeaderGroup206() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonHeaderGroup206() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup206()
}

func (c *current) onHeaderGroup209() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonHeaderGroup209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup209()
}

func (c *current) onHeaderGroup211() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonHeaderGroup211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup211()
}

func (c *current) onHeaderGroup213() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonHeaderGroup213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup213()
}

func (c *current) onHeaderGroup215() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonHeaderGroup215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup215()
}

func (c *current) onHeaderGroup217() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonHeaderGroup217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup217()
}

func (c *current) onHeaderGroup219() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonHeaderGroup219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup219()
}

func (c *current) onHeaderGroup204(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroup204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup204(stack["element"])
}

func (c *current) onHeaderGroup225() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroup225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup225()
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onMacrosGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup9()
}

func (c *current) onMacrosGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonMacrosGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup6(stack["content"])
}

func (c *current) onMacrosGroup17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup17()
}

func (c *current) onMacrosGroup26() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup26()
}

func (c *current) onMacrosGroup40() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMacrosGroup40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup40()
}

func (c *current) onMacrosGroup36(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonMacrosGroup36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup36(stack["ref"])
}

func (c *current) onMacrosGroup44() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup44()
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["elements"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement11() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement11()
}

func (c *current) onNormalGroupElement8(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonNormalGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement8(stack["content"])
}

func (c *current) onNormalGroupElement19() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement19()
}

func (c *current) onNormalGroupElement28() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement28()
}

func (c *current) onNormalGroupElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement41()
}

func (c *current) onNormalGroupElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement47()
}

func (c *current) onNormalGroupElement55() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNormalGroupElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement55()
}

func (c *current) onNormalGroupElement37() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonNormalGroupElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement37()
}

func (c *current) onNormalGroupElement58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement58()
}

func (c *current) onNormalGroupElement62() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNormalGroupElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement62()
}

func (c *current) onNormalGroupElement67() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonNormalGroupElement67() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement67()
}

func (c *current) onNormalGroupElement76() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement76()
}

func (c *current) onNormalGroupElement82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement82()
}

func (c *current) onNormalGroupElement88() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement88()
}

func (c *current) onNormalGroupElement95() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonNormalGroupElement95() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement95()
}

func (c *current) onNormalGroupElement102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement102()
}

func (c *current) onNormalGroupElement114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement114()
}

func (c *current) onNormalGroupElement116() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement116()
}

func (c *current) onNormalGroupElement109(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement109(stack["start"])
}

func (c *current) onNormalGroupElement98(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonNormalGroupElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement98(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement124()
}

func (c *current) onNormalGroupElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement136()
}

func (c *current) onNormalGroupElement138() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement138()
}

func (c *current) onNormalGroupElement131(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement131(stack["start"])
}

func (c *current) onNormalGroupElement120(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonNormalGroupElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement120(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement146() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement146()
}

func (c *current) onNormalGroupElement142(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonNormalGroupElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement142(stack["name"])
}

func (c *current) onNormalGroupElement93(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonNormalGroupElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement93(stack["element"])
}

func (c *current) onNormalGroupElement152() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement152()
}

func (c *current) onNormalGroupElement72(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonNormalGroupElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement72(stack["id"], stack["label"])
}

func (c *current) onNormalGroupElement159() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement159()
}

func (c *current) onNormalGroupElement155(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonNormalGroupElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement155(stack["id"])
}

func (c *current) onNormalGroupElement70() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement70()
}

func (c *current) onNormalGroupElement163() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonNormalGroupElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement163()
}

func (c *current) onNormalGroupElement65(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement65(stack["element"])
}

func (c *current) onNormalGroupElement168() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonNormalGroupElement168() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement168()
}

func (c *current) onNormalGroupElement175() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement175()
}

func (c *current) onNormalGroupElement187() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement187()
}

func (c *current) onNormalGroupElement189() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement189()
}

func (c *current) onNormalGroupElement182(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement182(stack["start"])
}

func (c *current) onNormalGroupElement171(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonNormalGroupElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement171(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement197()
}

func (c *current) onNormalGroupElement209() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement209()
}

func (c *current) onNormalGroupElement211() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement211()
}

func (c *current) onNormalGroupElement204(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement204(stack["start"])
}

func (c *current) onNormalGroupElement193(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonNormalGroupElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement193(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement219()
}

func (c *current) onNormalGroupElement215(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonNormalGroupElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement215(stack["name"])
}

func (c *current) onNormalGroupElement166(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonNormalGroupElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement166(stack["element"])
}

func (c *current) onNormalGroupElement227() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonNormalGroupElement227() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement227()
}

func (c *current) onNormalGroupElement230() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonNormalGroupElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement230()
}

func (c *current) onNormalGroupElement232() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonNormalGroupElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement232()
}

func (c *current) onNormalGroupElement234() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonNormalGroupElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement234()
}

func (c *current) onNormalGroupElement236() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonNormalGroupElement236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement236()
}

func (c *current) onNormalGroupElement238() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonNormalGroupElement238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement238()
}

func (c *current) onNormalGroupElement240() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonNormalGroupElement240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement240()
}

func (c *current) onNormalGroupElement225(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement225(stack["element"])
}

func (c *current) onNormalGroupElement249() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonNormalGroupElement249() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement249()
}

func (c *current) onNormalGroupElement255() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement255()
}

func (c *current) onNormalGroupElement261() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement261()
}

func (c *current) onNormalGroupElement269() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNormalGroupElement269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement269()
}

func (c *current) onNormalGroupElement251() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonNormalGroupElement251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement251()
}

func (c *current) onNormalGroupElement247(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement247(stack["element"])
}

func (c *current) onNormalGroupElement275() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement275()
}

func (c *current) onNormalGroupElement271(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNormalGroupElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement271(stack["ref"])
}

func (c *current) onNormalGroupElement279() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement279()
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onQuotesGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup9()
}

func (c *current) onQuotesGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonQuotesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup6(stack["content"])
}

func (c *current) onQuotesGroup17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup17()
}

func (c *current) onQuotesGroup26() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup26()
}

func (c *current) onQuotesGroup40() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotesGroup40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup40()
}

func (c *current) onQuotesGroup36(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonQuotesGroup36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup36(stack["ref"])
}

func (c *current) onQuotesGroup44() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup44()
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup9()
}

func (c *current) onReplacementsGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonReplacementsGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup6(stack["content"])
}

func (c *current) onReplacementsGroup17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup17()
}

func (c *current) onReplacementsGroup26() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup26()
}

func (c *current) onReplacementsGroup37() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacementsGroup37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup37()
}

func (c *current) onReplacementsGroup40() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonReplacementsGroup40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup40()
}

func (c *current) onReplacementsGroup42() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonReplacementsGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup42()
}

func (c *current) onReplacementsGroup44() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonReplacementsGroup44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup44()
}

func (c *current) onReplacementsGroup46() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonReplacementsGroup46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup46()
}

func (c *current) onReplacementsGroup48() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonReplacementsGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup48()
}

func (c *current) onReplacementsGroup50() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonReplacementsGroup50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup50()
}

func (c *current) onReplacementsGroup35(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacementsGroup35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup35(stack["element"])
}

func (c *current) onReplacementsGroup60() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonReplacementsGroup60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup60()
}

func (c *current) onReplacementsGroup56(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonReplacementsGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup56(stack["ref"])
}

func (c *current) onReplacementsGroup64() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup64()
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup9()
}

func (c *current) onSpecialCharactersGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonSpecialCharactersGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup6(stack["content"])
}

func (c *current) onSpecialCharactersGroup17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup17()
}

func (c *current) onSpecialCharactersGroup26() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup26()
}

func (c *current) onSpecialCharactersGroup37() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharactersGroup37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup37()
}

func (c *current) onSpecialCharactersGroup46() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup46()
}

func (c *current) onSpecialCharactersGroup52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup52()
}

func (c *current) onSpecialCharactersGroup58() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup58()
}

func (c *current) onSpecialCharactersGroup65() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSpecialCharactersGroup65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup65()
}

func (c *current) onSpecialCharactersGroup72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup72()
}

func (c *current) onSpecialCharactersGroup84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup84()
}

func (c *current) onSpecialCharactersGroup86() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup86()
}

func (c *current) onSpecialCharactersGroup79(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSpecialCharactersGroup79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup79(stack["start"])
}

func (c *current) onSpecialCharactersGroup68(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSpecialCharactersGroup68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup68(stack["name"], stack["start"])
}

func (c *current) onSpecialCharactersGroup94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup94()
}

func (c *current) onSpecialCharactersGroup106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup106()
}

func (c *current) onSpecialCharactersGroup108() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup108()
}

func (c *current) onSpecialCharactersGroup101(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSpecialCharactersGroup101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup101(stack["start"])
}

func (c *current) onSpecialCharactersGroup90(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSpecialCharactersGroup90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup90(stack["name"], stack["start"])
}

func (c *current) onSpecialCharactersGroup116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup116()
}

func (c *current) onSpecialCharactersGroup112(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSpecialCharactersGroup112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup112(stack["name"])
}

func (c *current) onSpecialCharactersGroup63(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonSpecialCharactersGroup63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup63(stack["element"])
}

func (c *current) onSpecialCharactersGroup122() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup122()
}

func (c *current) onSpecialCharactersGroup42(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSpecialCharactersGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup42(stack["id"], stack["label"])
}

func (c *current) onSpecialCharactersGroup129() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup129()
}

func (c *current) onSpecialCharactersGroup125(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSpecialCharactersGroup125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup125(stack["id"])
}

func (c *current) onSpecialCharactersGroup40() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup40()
}

func (c *current) onSpecialCharactersGroup133() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup133()
}

func (c *current) onSpecialCharactersGroup35(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharactersGroup35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup35(stack["element"])
}

func (c *current) onSpecialCharactersGroup139() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpecialCharactersGroup139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup139()
}

func (c *current) onSpecialCharactersGroup135(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSpecialCharactersGroup135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup135(stack["ref"])
}

func (c *current) onSpecialCharactersGroup143() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup143()
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup9()
}

func (c *current) onVerbatimGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonVerbatimGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup6(stack["content"])
}

func (c *current) onVerbatimGroup17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup17()
}

func (c *current) onVerbatimGroup26() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup26()
}

func (c *current) onVerbatimGroup38() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonVerbatimGroup38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup38()
}

func (c *current) onVerbatimGroup47() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup47()
}

func (c *current) onVerbatimGroup53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup53()
}

func (c *current) onVerbatimGroup59() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup59()
}

func (c *current) onVerbatimGroup66() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonVerbatimGroup66() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup66()
}

func (c *current) onVerbatimGroup73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup73()
}

func (c *current) onVerbatimGroup85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup85()
}

func (c *current) onVerbatimGroup87() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonVerbatimGroup87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup87()
}

func (c *current) onVerbatimGroup80(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonVerbatimGroup80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup80(stack["start"])
}

func (c *current) onVerbatimGroup69(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonVerbatimGroup69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup69(stack["name"], stack["start"])
}

func (c *current) onVerbatimGroup95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup95()
}

func (c *current) onVerbatimGroup107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup107()
}

func (c *current) onVerbatimGroup109() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonVerbatimGroup109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup109()
}

func (c *current) onVerbatimGroup102(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonVerbatimGroup102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup102(stack["start"])
}

func (c *current) onVerbatimGroup91(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonVerbatimGroup91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup91(stack["name"], stack["start"])
}

func (c *current) onVerbatimGroup117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup117()
}

func (c *current) onVerbatimGroup113(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonVerbatimGroup113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup113(stack["name"])
}

func (c *current) onVerbatimGroup64(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonVerbatimGroup64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup64(stack["element"])
}

func (c *current) onVerbatimGroup123() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup123()
}

func (c *current) onVerbatimGroup43(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonVerbatimGroup43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup43(stack["id"], stack["label"])
}

func (c *current) onVerbatimGroup130() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup130()
}

func (c *current) onVerbatimGroup126(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonVerbatimGroup126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup126(stack["id"])
}

func (c *current) onVerbatimGroup41() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup41()
}

func (c *current) onVerbatimGroup134() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonVerbatimGroup134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup134()
}

func (c *current) onVerbatimGroup36(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonVerbatimGroup36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup36(stack["element"])
}

func (c *current) onVerbatimGroup140() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimGroup140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup140()
}

func (c *current) onVerbatimGroup136(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonVerbatimGroup136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup136(stack["ref"])
}

func (c *current) onVerbatimGroup144() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup144()
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro24()
}

func (c *current) onInlineMacro13(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineMacro13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro34()
}

func (c *current) onInlineMacro30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro30()
}

func (c *current) onInlineMacro43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro43()
}

func (c *current) onInlineMacro49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro49()
}

func (c *current) onInlineMacro56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro56()
}

func (c *current) onInlineMacro52() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro52()
}

func (c *current) onInlineMacro38(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro38(stack["content"])
}

func (c *current) onInlineMacro65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro65()
}

func (c *current) onInlineMacro71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro71()
}

func (c *current) onInlineMacro78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro78()
}

func (c *current) onInlineMacro74() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro74()
}

func (c *current) onInlineMacro60(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro60(stack["content"])
}

func (c *current) onInlineMacro26(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro26(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough23()
}

func (c *current) onInlinePassthrough29() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough29()
}

func (c *current) onInlinePassthrough17() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough49()
}

func (c *current) onInlinePassthrough55() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough55()
}

func (c *current) onInlinePassthrough65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough65()
}

func (c *current) onInlinePassthrough74() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough74()
}

func (c *current) onInlinePassthrough42() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough42()
}

func (c *current) onInlinePassthrough82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough82()
}

func (c *current) onInlinePassthrough88() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough88()
}

func (c *current) onInlinePassthrough77() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough77()
}

func (c *current) onInlinePassthrough37(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough37(stack["content"])
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onFileLocation9() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation9()
}

func (c *current) onFileLocation14() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileLocation14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation14()
}

func (c *current) onFileLocation21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation21()
}

func (c *current) onFileLocation33() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation33()
}

func (c *current) onFileLocation35() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation35()
}

func (c *current) onFileLocation28(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation28(stack["start"])
}

func (c *current) onFileLocation17(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileLocation17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation17(stack["name"], stack["start"])
}

func (c *current) onFileLocation43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation43()
}

func (c *current) onFileLocation55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation55()
}

func (c *current) onFileLocation57() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation57()
}

func (c *current) onFileLocation50(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation50(stack["start"])
}

func (c *current) onFileLocation39(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileLocation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation39(stack["name"], stack["start"])
}

func (c *current) onFileLocation65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation65()
}

func (c *current) onFileLocation61(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileLocation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation61(stack["name"])
}

func (c *current) onFileLocation12(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12(stack["element"])
}

func (c *current) onFileLocation73() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonFileLocation73() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation73()
}

func (c *current) onFileLocation82() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation82()
}

func (c *current) onFileLocation88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation88()
}

func (c *current) onFileLocation94() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation94()
}

func (c *current) onFileLocation101() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileLocation101() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation101()
}

func (c *current) onFileLocation108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation108()
}

func (c *current) onFileLocation120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation120()
}

func (c *current) onFileLocation122() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation122()
}

func (c *current) onFileLocation115(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation115(stack["start"])
}

func (c *current) onFileLocation104(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileLocation104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation104(stack["name"], stack["start"])
}

func (c *current) onFileLocation130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation130()
}

func (c *current) onFileLocation142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation142()
}

func (c *current) onFileLocation144() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation144()
}

func (c *current) onFileLocation137(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation137(stack["start"])
}

func (c *current) onFileLocation126(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileLocation126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation126(stack["name"], stack["start"])
}

func (c *current) onFileLocation152() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation152()
}

func (c *current) onFileLocation148(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileLocation148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation148(stack["name"])
}

func (c *current) onFileLocation99(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonFileLocation99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation99(stack["element"])
}

func (c *current) onFileLocation158() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation158()
}

func (c *current) onFileLocation78(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileLocation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation78(stack["id"], stack["label"])
}

func (c *current) onFileLocation165() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation165()
}

func (c *current) onFileLocation161(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileLocation161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation161(stack["id"])
}

func (c *current) onFileLocation76() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation76()
}

func (c *current) onFileLocation169() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileLocation169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation169()
}

func (c *current) onFileLocation71(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation71(stack["element"])
}

func (c *current) onFileLocation171() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation171()
}

func (c *current) onFileLocation5(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5(stack["elements"])
}

func (c *current) onFileLocation177() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation177()
}

func (c *current) onFileLocation173(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation173(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

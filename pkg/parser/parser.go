// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 413},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 7, offset: 429},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 443},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 470},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 492},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 513},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 535},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 34, col: 1, offset: 768},
			expr: &actionExpr{
				pos: position{line: 35, col: 5, offset: 797},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 35, col: 5, offset: 797},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 35, col: 5, offset: 797},
							run: (*parser).callonAttributeDeclaration3,
						},
						&litMatcher{
							pos:        position{line: 39, col: 5, offset: 941},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 9, offset: 945},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 15, offset: 951},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 39, col: 30, offset: 966},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 40, col: 5, offset: 975},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 11, offset: 981},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 12, offset: 982},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 5, offset: 1015},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 50, col: 1, offset: 1368},
			expr: &actionExpr{
				pos: position{line: 50, col: 18, offset: 1385},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 50, col: 18, offset: 1385},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 50, col: 18, offset: 1385},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 28, offset: 1395},
							expr: &charClassMatcher{
								pos:        position{line: 50, col: 29, offset: 1396},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 54, col: 1, offset: 1452},
			expr: &actionExpr{
				pos: position{line: 54, col: 30, offset: 1481},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 54, col: 30, offset: 1481},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 54, col: 30, offset: 1481},
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 30, offset: 1481},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 54, col: 37, offset: 1488},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 54, col: 46, offset: 1497},
								expr: &ruleRefExpr{
									pos:  position{line: 54, col: 47, offset: 1498},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 58, col: 1, offset: 1620},
			expr: &actionExpr{
				pos: position{line: 58, col: 37, offset: 1656},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 58, col: 37, offset: 1656},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 58, col: 37, offset: 1656},
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 38, offset: 1657},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 59, col: 5, offset: 1666},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 60, col: 9, offset: 1684},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 60, col: 10, offset: 1685},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 60, col: 10, offset: 1685},
											expr: &charClassMatcher{
												pos:        position{line: 60, col: 10, offset: 1685},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1780},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 64, col: 12, offset: 1813},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 64, col: 12, offset: 1813},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 71, col: 1, offset: 1950},
			expr: &choiceExpr{
				pos: position{line: 71, col: 19, offset: 1968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 71, col: 19, offset: 1968},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 71, col: 19, offset: 1968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 71, col: 19, offset: 1968},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 71, col: 24, offset: 1973},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 30, offset: 1979},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 71, col: 45, offset: 1994},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 71, col: 49, offset: 1998},
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 49, offset: 1998},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 56, offset: 2005},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2065},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 2065},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 73, col: 5, offset: 2065},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 73, col: 9, offset: 2069},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 15, offset: 2075},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 73, col: 30, offset: 2090},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 73, col: 35, offset: 2095},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 35, offset: 2095},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 42, offset: 2102},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 80, col: 1, offset: 2284},
			expr: &actionExpr{
				pos: position{line: 81, col: 5, offset: 2308},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 81, col: 5, offset: 2308},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 81, col: 5, offset: 2308},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 85, col: 5, offset: 2446},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 85, col: 16, offset: 2457},
								expr: &choiceExpr{
									pos: position{line: 87, col: 9, offset: 2524},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 87, col: 10, offset: 2525},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 87, col: 10, offset: 2525},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 87, col: 10, offset: 2525},
														label: "anchor",
														expr: &ruleRefExpr{
															pos:  position{line: 87, col: 18, offset: 2533},
															name: "ShortHandAnchor",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 87, col: 35, offset: 2550},
														expr: &ruleRefExpr{
															pos:  position{line: 87, col: 35, offset: 2550},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 91, col: 12, offset: 2667},
											run: (*parser).callonBlockAttributes13,
											expr: &seqExpr{
												pos: position{line: 91, col: 12, offset: 2667},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 91, col: 12, offset: 2667},
														label: "title",
														expr: &ruleRefExpr{
															pos:  position{line: 91, col: 19, offset: 2674},
															name: "ShortHandTitle",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 91, col: 35, offset: 2690},
														expr: &ruleRefExpr{
															pos:  position{line: 91, col: 35, offset: 2690},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 95, col: 12, offset: 2777},
											run: (*parser).callonBlockAttributes19,
											expr: &seqExpr{
												pos: position{line: 95, col: 12, offset: 2777},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 95, col: 12, offset: 2777},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 95, col: 24, offset: 2789},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 95, col: 44, offset: 2809},
														expr: &ruleRefExpr{
															pos:  position{line: 95, col: 44, offset: 2809},
															name: "Space",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 103, col: 1, offset: 2983},
			expr: &actionExpr{
				pos: position{line: 104, col: 5, offset: 3007},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 104, col: 5, offset: 3007},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 104, col: 5, offset: 3007},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3015},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 16, offset: 3026},
								expr: &choiceExpr{
									pos: position{line: 105, col: 17, offset: 3027},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 105, col: 17, offset: 3027},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 105, col: 39, offset: 3049},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 106, col: 5, offset: 3070},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 111, col: 1, offset: 3198},
			expr: &actionExpr{
				pos: position{line: 112, col: 4, offset: 3220},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 112, col: 4, offset: 3220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 112, col: 4, offset: 3220},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 113, col: 5, offset: 3230},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 114, col: 9, offset: 3243},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 114, col: 9, offset: 3243},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 114, col: 18, offset: 3252},
										expr: &choiceExpr{
											pos: position{line: 115, col: 13, offset: 3266},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 115, col: 14, offset: 3267},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 115, col: 14, offset: 3267},
														expr: &charClassMatcher{
															pos:        position{line: 115, col: 14, offset: 3267},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 118, col: 15, offset: 3433},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 15, offset: 3466},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 120, col: 16, offset: 3503},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 120, col: 16, offset: 3503},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 126, col: 5, offset: 3689},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 131, col: 1, offset: 3790},
			expr: &actionExpr{
				pos: position{line: 131, col: 19, offset: 3808},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 131, col: 19, offset: 3808},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 131, col: 19, offset: 3808},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 131, col: 23, offset: 3812},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 132, col: 5, offset: 3824},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 132, col: 5, offset: 3824},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 132, col: 5, offset: 3824},
											expr: &charClassMatcher{
												pos:        position{line: 132, col: 6, offset: 3825},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 133, col: 5, offset: 3937},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 133, col: 14, offset: 3946},
												expr: &choiceExpr{
													pos: position{line: 134, col: 9, offset: 3956},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 134, col: 10, offset: 3957},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 134, col: 10, offset: 3957},
																expr: &charClassMatcher{
																	pos:        position{line: 134, col: 10, offset: 3957},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 137, col: 11, offset: 4054},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 138, col: 11, offset: 4083},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 139, col: 12, offset: 4116},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 139, col: 12, offset: 4116},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 150, col: 1, offset: 4516},
			expr: &actionExpr{
				pos: position{line: 151, col: 5, offset: 4542},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 151, col: 5, offset: 4542},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 151, col: 5, offset: 4542},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 151, col: 9, offset: 4546},
							expr: &litMatcher{
								pos:        position{line: 151, col: 10, offset: 4547},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 153, col: 5, offset: 4717},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 153, col: 31, offset: 4743},
								expr: &ruleRefExpr{
									pos:  position{line: 153, col: 32, offset: 4744},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 5, offset: 4776},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 154, col: 21, offset: 4792},
								expr: &choiceExpr{
									pos: position{line: 154, col: 22, offset: 4793},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 154, col: 22, offset: 4793},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 154, col: 44, offset: 4815},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 155, col: 5, offset: 4836},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 168, col: 1, offset: 5364},
			expr: &actionExpr{
				pos: position{line: 169, col: 5, offset: 5398},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 169, col: 5, offset: 5398},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 169, col: 5, offset: 5398},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 169, col: 10, offset: 5403},
								expr: &ruleRefExpr{
									pos:  position{line: 170, col: 9, offset: 5413},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 172, col: 5, offset: 5443},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 172, col: 12, offset: 5450},
								expr: &choiceExpr{
									pos: position{line: 173, col: 9, offset: 5461},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 173, col: 9, offset: 5461},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 174, col: 11, offset: 5493},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 175, col: 11, offset: 5528},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 176, col: 8, offset: 5561},
							expr: &seqExpr{
								pos: position{line: 176, col: 9, offset: 5562},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 176, col: 9, offset: 5562},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 176, col: 13, offset: 5566},
										expr: &ruleRefExpr{
											pos:  position{line: 176, col: 13, offset: 5566},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 177, col: 5, offset: 5580},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 193, col: 1, offset: 5996},
			expr: &actionExpr{
				pos: position{line: 193, col: 25, offset: 6020},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 193, col: 25, offset: 6020},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 193, col: 25, offset: 6020},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 29, offset: 6024},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 33, offset: 6028},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 197, col: 1, offset: 6102},
			expr: &actionExpr{
				pos: position{line: 197, col: 23, offset: 6124},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 197, col: 23, offset: 6124},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 197, col: 30, offset: 6131},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 202, col: 1, offset: 6257},
			expr: &actionExpr{
				pos: position{line: 202, col: 30, offset: 6286},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 202, col: 30, offset: 6286},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 202, col: 30, offset: 6286},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 34, offset: 6290},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 40, offset: 6296},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 207, col: 1, offset: 6418},
			expr: &actionExpr{
				pos: position{line: 207, col: 29, offset: 6446},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 207, col: 29, offset: 6446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 29, offset: 6446},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 33, offset: 6450},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 41, offset: 6458},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 212, col: 1, offset: 6571},
			expr: &choiceExpr{
				pos: position{line: 213, col: 5, offset: 6603},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6603},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 7, offset: 6637},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 215, col: 7, offset: 6671},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 215, col: 7, offset: 6671},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 215, col: 7, offset: 6671},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 215, col: 16, offset: 6680},
										expr: &choiceExpr{
											pos: position{line: 218, col: 5, offset: 6850},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 218, col: 6, offset: 6851},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 218, col: 6, offset: 6851},
														expr: &charClassMatcher{
															pos:        position{line: 218, col: 6, offset: 6851},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 221, col: 5, offset: 6945},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 222, col: 5, offset: 6970},
													name: "Quote",
												},
												&ruleRefExpr{
													pos:  position{line: 223, col: 5, offset: 6982},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 224, col: 6, offset: 7011},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 224, col: 6, offset: 7011},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 226, col: 10, offset: 7081},
									expr: &charClassMatcher{
										pos:        position{line: 226, col: 11, offset: 7082},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 230, col: 1, offset: 7158},
			expr: &choiceExpr{
				pos: position{line: 230, col: 24, offset: 7181},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 7187},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 231, col: 5, offset: 7187},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 231, col: 5, offset: 7187},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 231, col: 12, offset: 7194},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 231, col: 29, offset: 7211},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 231, col: 29, offset: 7211},
											expr: &seqExpr{
												pos: position{line: 231, col: 30, offset: 7212},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 231, col: 30, offset: 7212},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 231, col: 34, offset: 7216},
														expr: &ruleRefExpr{
															pos:  position{line: 231, col: 34, offset: 7216},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 231, col: 45, offset: 7227},
											expr: &litMatcher{
												pos:        position{line: 231, col: 46, offset: 7228},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 236, col: 6, offset: 7465},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 236, col: 6, offset: 7465},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 236, col: 6, offset: 7465},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 236, col: 13, offset: 7472},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 236, col: 13, offset: 7472},
												expr: &ruleRefExpr{
													pos:  position{line: 236, col: 13, offset: 7472},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 236, col: 21, offset: 7480},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 236, col: 22, offset: 7481},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 236, col: 22, offset: 7481},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 236, col: 26, offset: 7485},
																expr: &ruleRefExpr{
																	pos:  position{line: 236, col: 26, offset: 7485},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 236, col: 36, offset: 7495},
														expr: &litMatcher{
															pos:        position{line: 236, col: 37, offset: 7496},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 237, col: 5, offset: 7506},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 247, col: 1, offset: 7821},
			expr: &actionExpr{
				pos: position{line: 247, col: 19, offset: 7839},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 247, col: 19, offset: 7839},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 247, col: 19, offset: 7839},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 24, offset: 7844},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 43, offset: 7863},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 47, offset: 7867},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 47, offset: 7867},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 54, offset: 7874},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 61, offset: 7881},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 247, col: 77, offset: 7897},
							expr: &seqExpr{
								pos: position{line: 247, col: 78, offset: 7898},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 247, col: 78, offset: 7898},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 247, col: 82, offset: 7902},
										expr: &ruleRefExpr{
											pos:  position{line: 247, col: 82, offset: 7902},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 252, col: 1, offset: 8126},
			expr: &actionExpr{
				pos: position{line: 252, col: 22, offset: 8147},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 252, col: 22, offset: 8147},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 252, col: 22, offset: 8147},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 23, offset: 8148},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 252, col: 29, offset: 8154},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 29, offset: 8154},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 42, offset: 8167},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 42, offset: 8167},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 256, col: 1, offset: 8237},
			expr: &actionExpr{
				pos: position{line: 257, col: 5, offset: 8260},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 257, col: 5, offset: 8260},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 257, col: 5, offset: 8260},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 258, col: 9, offset: 8276},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 258, col: 9, offset: 8276},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 259, col: 11, offset: 8314},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 260, col: 11, offset: 8352},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 262, col: 5, offset: 8386},
							expr: &notExpr{
								pos: position{line: 262, col: 7, offset: 8388},
								expr: &seqExpr{
									pos: position{line: 262, col: 9, offset: 8390},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 262, col: 9, offset: 8390},
											expr: &ruleRefExpr{
												pos:  position{line: 262, col: 9, offset: 8390},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 262, col: 16, offset: 8397},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 266, col: 1, offset: 8438},
			expr: &actionExpr{
				pos: position{line: 267, col: 5, offset: 8473},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 267, col: 5, offset: 8473},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 5, offset: 8473},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 5, offset: 8482},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 268, col: 14, offset: 8491},
								expr: &choiceExpr{
									pos: position{line: 269, col: 9, offset: 8501},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 9, offset: 8501},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 270, col: 12, offset: 8518},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 270, col: 12, offset: 8518},
												expr: &charClassMatcher{
													pos:        position{line: 270, col: 12, offset: 8518},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 273, col: 11, offset: 8664},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 274, col: 11, offset: 8693},
											name: "AttributeSubstitution",
										},
										&choiceExpr{
											pos: position{line: 275, col: 12, offset: 8726},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 275, col: 12, offset: 8726},
													run: (*parser).callonSingleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 275, col: 12, offset: 8726},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 278, col: 11, offset: 8818},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 278, col: 17, offset: 8824},
													run: (*parser).callonSingleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 278, col: 17, offset: 8824},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 282, col: 5, offset: 8913},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 286, col: 1, offset: 8969},
			expr: &actionExpr{
				pos: position{line: 287, col: 5, offset: 9004},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 287, col: 5, offset: 9004},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 287, col: 5, offset: 9004},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 5, offset: 9014},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 288, col: 14, offset: 9023},
								expr: &choiceExpr{
									pos: position{line: 289, col: 9, offset: 9033},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 289, col: 9, offset: 9033},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 290, col: 12, offset: 9050},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 290, col: 12, offset: 9050},
												expr: &charClassMatcher{
													pos:        position{line: 290, col: 12, offset: 9050},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 293, col: 11, offset: 9196},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 294, col: 11, offset: 9225},
											name: "AttributeSubstitution",
										},
										&choiceExpr{
											pos: position{line: 295, col: 12, offset: 9258},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 295, col: 12, offset: 9258},
													run: (*parser).callonDoubleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 295, col: 12, offset: 9258},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 298, col: 11, offset: 9350},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 298, col: 17, offset: 9356},
													run: (*parser).callonDoubleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 298, col: 17, offset: 9356},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 5, offset: 9445},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 307, col: 1, offset: 9580},
			expr: &actionExpr{
				pos: position{line: 308, col: 5, offset: 9611},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 308, col: 5, offset: 9611},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 308, col: 5, offset: 9611},
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 6, offset: 9612},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 5, offset: 9622},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 309, col: 14, offset: 9631},
								expr: &choiceExpr{
									pos: position{line: 310, col: 9, offset: 9641},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 310, col: 9, offset: 9641},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 311, col: 11, offset: 9657},
											name: "Space",
										},
										&actionExpr{
											pos: position{line: 312, col: 12, offset: 9674},
											run: (*parser).callonUnquotedAttributeValue10,
											expr: &oneOrMoreExpr{
												pos: position{line: 312, col: 12, offset: 9674},
												expr: &charClassMatcher{
													pos:        position{line: 312, col: 12, offset: 9674},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 315, col: 11, offset: 9776},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 316, col: 11, offset: 9805},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 317, col: 12, offset: 9838},
											run: (*parser).callonUnquotedAttributeValue15,
											expr: &litMatcher{
												pos:        position{line: 317, col: 12, offset: 9838},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 321, col: 5, offset: 9926},
							run: (*parser).callonUnquotedAttributeValue17,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 332, col: 1, offset: 10241},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 10332},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 334, col: 5, offset: 10332},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 334, col: 5, offset: 10332},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 337, col: 5, offset: 10396},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 337, col: 14, offset: 10405},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 337, col: 14, offset: 10405},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 337, col: 36, offset: 10427},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 344, col: 1, offset: 10592},
			expr: &actionExpr{
				pos: position{line: 344, col: 31, offset: 10622},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 344, col: 31, offset: 10622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 31, offset: 10622},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 35, offset: 10626},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 40, offset: 10631},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 54, offset: 10645},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 349, col: 1, offset: 10761},
			expr: &choiceExpr{
				pos: position{line: 349, col: 24, offset: 10784},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 349, col: 24, offset: 10784},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 47, offset: 10807},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 351, col: 1, offset: 10943},
			expr: &actionExpr{
				pos: position{line: 351, col: 25, offset: 10967},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 351, col: 25, offset: 10967},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 351, col: 25, offset: 10967},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 351, col: 37, offset: 10979},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 42, offset: 10984},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 56, offset: 10998},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 351, col: 62, offset: 11004},
								expr: &ruleRefExpr{
									pos:  position{line: 351, col: 63, offset: 11005},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 78, offset: 11020},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 355, col: 1, offset: 11098},
			expr: &actionExpr{
				pos: position{line: 355, col: 25, offset: 11122},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 355, col: 25, offset: 11122},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 25, offset: 11122},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 38, offset: 11135},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 43, offset: 11140},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 57, offset: 11154},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 63, offset: 11160},
								expr: &ruleRefExpr{
									pos:  position{line: 355, col: 64, offset: 11161},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 355, col: 79, offset: 11176},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 359, col: 1, offset: 11251},
			expr: &actionExpr{
				pos: position{line: 359, col: 17, offset: 11267},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 359, col: 17, offset: 11267},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 359, col: 17, offset: 11267},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 359, col: 21, offset: 11271},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 359, col: 28, offset: 11278},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 359, col: 28, offset: 11278},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 359, col: 28, offset: 11278},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 361, col: 9, offset: 11332},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 361, col: 9, offset: 11332},
											expr: &charClassMatcher{
												pos:        position{line: 361, col: 9, offset: 11332},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 370, col: 1, offset: 11534},
			expr: &actionExpr{
				pos: position{line: 370, col: 14, offset: 11547},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 370, col: 14, offset: 11547},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 370, col: 14, offset: 11547},
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 14, offset: 11547},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 21, offset: 11554},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 377, col: 1, offset: 11791},
			expr: &actionExpr{
				pos: position{line: 377, col: 12, offset: 11802},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 377, col: 12, offset: 11802},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 12, offset: 11802},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 16, offset: 11806},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 377, col: 21, offset: 11811},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 377, col: 21, offset: 11811},
									expr: &charClassMatcher{
										pos:        position{line: 377, col: 21, offset: 11811},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 377, col: 69, offset: 11859},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 377, col: 73, offset: 11863},
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 73, offset: 11863},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 377, col: 80, offset: 11870},
							expr: &choiceExpr{
								pos: position{line: 377, col: 82, offset: 11872},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 377, col: 82, offset: 11872},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 88, offset: 11878},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 381, col: 1, offset: 11939},
			expr: &actionExpr{
				pos: position{line: 381, col: 20, offset: 11958},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 381, col: 20, offset: 11958},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 381, col: 20, offset: 11958},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 25, offset: 11963},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 48, offset: 11986},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 61, offset: 11999},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 385, col: 1, offset: 12111},
			expr: &actionExpr{
				pos: position{line: 385, col: 26, offset: 12136},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 385, col: 26, offset: 12136},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 385, col: 26, offset: 12136},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 30, offset: 12140},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 385, col: 35, offset: 12145},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 385, col: 35, offset: 12145},
									expr: &charClassMatcher{
										pos:        position{line: 385, col: 35, offset: 12145},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 83, offset: 12193},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 385, col: 87, offset: 12197},
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 87, offset: 12197},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 393, col: 1, offset: 12428},
			expr: &seqExpr{
				pos: position{line: 393, col: 31, offset: 12458},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 393, col: 31, offset: 12458},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 393, col: 38, offset: 12465},
						expr: &ruleRefExpr{
							pos:  position{line: 393, col: 38, offset: 12465},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 45, offset: 12472},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 395, col: 1, offset: 12477},
			expr: &choiceExpr{
				pos: position{line: 395, col: 29, offset: 12505},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 395, col: 30, offset: 12506},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 395, col: 30, offset: 12506},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 395, col: 37, offset: 12513},
								expr: &ruleRefExpr{
									pos:  position{line: 395, col: 37, offset: 12513},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 395, col: 44, offset: 12520},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 395, col: 51, offset: 12527},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 412, col: 1, offset: 13017},
			expr: &actionExpr{
				pos: position{line: 417, col: 5, offset: 13176},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 417, col: 5, offset: 13176},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 417, col: 14, offset: 13185},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 421, col: 1, offset: 13231},
			expr: &actionExpr{
				pos: position{line: 421, col: 12, offset: 13242},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 421, col: 12, offset: 13242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 421, col: 12, offset: 13242},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 421, col: 20, offset: 13250},
								expr: &anyMatcher{
									line: 421, col: 21, offset: 13251,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 421, col: 25, offset: 13255},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 425, col: 1, offset: 13308},
			expr: &actionExpr{
				pos: position{line: 425, col: 22, offset: 13329},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 425, col: 22, offset: 13329},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 425, col: 22, offset: 13329},
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 23, offset: 13330},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 425, col: 45, offset: 13352},
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 45, offset: 13352},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 425, col: 52, offset: 13359},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 57, offset: 13364},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 66, offset: 13373},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 92, offset: 13399},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 429, col: 1, offset: 13472},
			expr: &actionExpr{
				pos: position{line: 429, col: 29, offset: 13500},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 429, col: 29, offset: 13500},
					expr: &charClassMatcher{
						pos:        position{line: 429, col: 29, offset: 13500},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 436, col: 1, offset: 13665},
			expr: &choiceExpr{
				pos: position{line: 436, col: 19, offset: 13683},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 436, col: 19, offset: 13683},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 44, offset: 13708},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 438, col: 1, offset: 13733},
			expr: &choiceExpr{
				pos: position{line: 438, col: 27, offset: 13759},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 438, col: 27, offset: 13759},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 438, col: 27, offset: 13759},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 438, col: 27, offset: 13759},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 438, col: 32, offset: 13764},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 438, col: 36, offset: 13768},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 438, col: 40, offset: 13772},
									expr: &ruleRefExpr{
										pos:  position{line: 438, col: 40, offset: 13772},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 438, col: 47, offset: 13779},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 438, col: 51, offset: 13783},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 438, col: 58, offset: 13790},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 438, col: 79, offset: 13811},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 9, offset: 13884},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 440, col: 9, offset: 13884},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 440, col: 9, offset: 13884},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 440, col: 14, offset: 13889},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 18, offset: 13893},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 440, col: 22, offset: 13897},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 444, col: 1, offset: 13968},
			expr: &actionExpr{
				pos: position{line: 444, col: 27, offset: 13994},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 444, col: 27, offset: 13994},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 444, col: 27, offset: 13994},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 444, col: 35, offset: 14002},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 40, offset: 14007},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 444, col: 54, offset: 14021},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 72, offset: 14039},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 448, col: 1, offset: 14173},
			expr: &oneOrMoreExpr{
				pos: position{line: 448, col: 24, offset: 14196},
				expr: &choiceExpr{
					pos: position{line: 449, col: 5, offset: 14202},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 449, col: 6, offset: 14203},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 449, col: 6, offset: 14203},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 449, col: 6, offset: 14203},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 449, col: 14, offset: 14211},
										expr: &charClassMatcher{
											pos:        position{line: 449, col: 14, offset: 14211},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 7, offset: 14406},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 453, col: 8, offset: 14435},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 453, col: 8, offset: 14435},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 462, col: 1, offset: 14710},
			expr: &actionExpr{
				pos: position{line: 462, col: 19, offset: 14728},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 462, col: 19, offset: 14728},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 462, col: 19, offset: 14728},
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 21, offset: 14730},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 463, col: 5, offset: 14760},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 463, col: 16, offset: 14771},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 463, col: 16, offset: 14771},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 464, col: 7, offset: 14830},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 465, col: 7, offset: 14858},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 466, col: 7, offset: 14887},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 467, col: 7, offset: 14916},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 468, col: 7, offset: 14945},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 469, col: 7, offset: 14971},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 470, col: 7, offset: 14999},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 474, col: 1, offset: 15065},
			expr: &actionExpr{
				pos: position{line: 474, col: 26, offset: 15090},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 474, col: 26, offset: 15090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 474, col: 26, offset: 15090},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 474, col: 33, offset: 15097},
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 33, offset: 15097},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 40, offset: 15104},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 478, col: 1, offset: 15163},
			expr: &actionExpr{
				pos: position{line: 478, col: 25, offset: 15187},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 478, col: 25, offset: 15187},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 478, col: 25, offset: 15187},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 478, col: 31, offset: 15193},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 31, offset: 15193},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 478, col: 38, offset: 15200},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 482, col: 1, offset: 15258},
			expr: &actionExpr{
				pos: position{line: 482, col: 26, offset: 15283},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 482, col: 26, offset: 15283},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 482, col: 26, offset: 15283},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 482, col: 33, offset: 15290},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 33, offset: 15290},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 482, col: 40, offset: 15297},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 486, col: 1, offset: 15356},
			expr: &ruleRefExpr{
				pos:  position{line: 486, col: 25, offset: 15380},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 488, col: 1, offset: 15403},
			expr: &actionExpr{
				pos: position{line: 488, col: 26, offset: 15428},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 488, col: 26, offset: 15428},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 488, col: 26, offset: 15428},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 488, col: 33, offset: 15435},
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 33, offset: 15435},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 40, offset: 15442},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 492, col: 1, offset: 15501},
			expr: &actionExpr{
				pos: position{line: 492, col: 26, offset: 15526},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 492, col: 26, offset: 15526},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 492, col: 26, offset: 15526},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 492, col: 33, offset: 15533},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 33, offset: 15533},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 40, offset: 15540},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 496, col: 1, offset: 15599},
			expr: &actionExpr{
				pos: position{line: 496, col: 24, offset: 15622},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 496, col: 24, offset: 15622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 24, offset: 15622},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 496, col: 31, offset: 15629},
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 31, offset: 15629},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 38, offset: 15636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 500, col: 1, offset: 15693},
			expr: &actionExpr{
				pos: position{line: 500, col: 26, offset: 15718},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 500, col: 26, offset: 15718},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 500, col: 26, offset: 15718},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 500, col: 33, offset: 15725},
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 33, offset: 15725},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 40, offset: 15732},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 504, col: 1, offset: 15791},
			expr: &actionExpr{
				pos: position{line: 504, col: 30, offset: 15820},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 504, col: 30, offset: 15820},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 504, col: 30, offset: 15820},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 504, col: 37, offset: 15827},
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 37, offset: 15827},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 504, col: 44, offset: 15834},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 571, col: 1, offset: 17952},
			expr: &actionExpr{
				pos: position{line: 572, col: 9, offset: 17978},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 572, col: 9, offset: 17978},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 572, col: 9, offset: 17978},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 572, col: 13, offset: 17982},
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 13, offset: 17982},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 20, offset: 17989},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 27, offset: 17996},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 49, offset: 18018},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 572, col: 53, offset: 18022},
								expr: &ruleRefExpr{
									pos:  position{line: 572, col: 53, offset: 18022},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 71, offset: 18040},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 576, col: 1, offset: 18155},
			expr: &choiceExpr{
				pos: position{line: 577, col: 9, offset: 18191},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 577, col: 9, offset: 18191},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 11, offset: 18219},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 579, col: 11, offset: 18251},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 580, col: 11, offset: 18281},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 582, col: 1, offset: 18298},
			expr: &choiceExpr{
				pos: position{line: 583, col: 9, offset: 18335},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 583, col: 9, offset: 18335},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 584, col: 11, offset: 18363},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 585, col: 11, offset: 18395},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 586, col: 11, offset: 18425},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 588, col: 1, offset: 18443},
			expr: &choiceExpr{
				pos: position{line: 588, col: 20, offset: 18462},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 588, col: 20, offset: 18462},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 588, col: 48, offset: 18490},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 590, col: 1, offset: 18520},
			expr: &actionExpr{
				pos: position{line: 590, col: 30, offset: 18549},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 590, col: 30, offset: 18549},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 590, col: 30, offset: 18549},
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 30, offset: 18549},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 590, col: 37, offset: 18556},
							expr: &litMatcher{
								pos:        position{line: 590, col: 38, offset: 18557},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 590, col: 42, offset: 18561},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 590, col: 51, offset: 18570},
								expr: &ruleRefExpr{
									pos:  position{line: 590, col: 51, offset: 18570},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 590, col: 68, offset: 18587},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 594, col: 1, offset: 18657},
			expr: &actionExpr{
				pos: position{line: 594, col: 33, offset: 18689},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 594, col: 33, offset: 18689},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 594, col: 33, offset: 18689},
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 33, offset: 18689},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 594, col: 40, offset: 18696},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 594, col: 51, offset: 18707},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 59, offset: 18715},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 594, col: 75, offset: 18731},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 598, col: 1, offset: 18810},
			expr: &actionExpr{
				pos: position{line: 598, col: 19, offset: 18828},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 598, col: 19, offset: 18828},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 598, col: 19, offset: 18828},
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 19, offset: 18828},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 26, offset: 18835},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 36, offset: 18845},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 56, offset: 18865},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 62, offset: 18871},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 63, offset: 18872},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 598, col: 85, offset: 18894},
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 85, offset: 18894},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 598, col: 92, offset: 18901},
							expr: &litMatcher{
								pos:        position{line: 598, col: 92, offset: 18901},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 598, col: 97, offset: 18906},
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 97, offset: 18906},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 603, col: 1, offset: 19051},
			expr: &actionExpr{
				pos: position{line: 603, col: 23, offset: 19073},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 603, col: 23, offset: 19073},
					expr: &charClassMatcher{
						pos:        position{line: 603, col: 23, offset: 19073},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 607, col: 1, offset: 19120},
			expr: &actionExpr{
				pos: position{line: 607, col: 24, offset: 19143},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 607, col: 24, offset: 19143},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 607, col: 24, offset: 19143},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 607, col: 28, offset: 19147},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 607, col: 35, offset: 19154},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 607, col: 36, offset: 19155},
									expr: &charClassMatcher{
										pos:        position{line: 607, col: 36, offset: 19155},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 609, col: 4, offset: 19202},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 615, col: 1, offset: 19363},
			expr: &actionExpr{
				pos: position{line: 615, col: 21, offset: 19383},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 615, col: 21, offset: 19383},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 615, col: 21, offset: 19383},
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 21, offset: 19383},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 615, col: 28, offset: 19390},
							expr: &litMatcher{
								pos:        position{line: 615, col: 29, offset: 19391},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 615, col: 33, offset: 19395},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 616, col: 9, offset: 19414},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 616, col: 10, offset: 19415},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 616, col: 10, offset: 19415},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 616, col: 10, offset: 19415},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 616, col: 21, offset: 19426},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 616, col: 45, offset: 19450},
													expr: &litMatcher{
														pos:        position{line: 616, col: 45, offset: 19450},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 616, col: 50, offset: 19455},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 616, col: 58, offset: 19463},
														expr: &ruleRefExpr{
															pos:  position{line: 616, col: 59, offset: 19464},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 616, col: 82, offset: 19487},
													expr: &litMatcher{
														pos:        position{line: 616, col: 82, offset: 19487},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 616, col: 87, offset: 19492},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 616, col: 97, offset: 19502},
														expr: &ruleRefExpr{
															pos:  position{line: 616, col: 98, offset: 19503},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 618, col: 15, offset: 19620},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 618, col: 15, offset: 19620},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 618, col: 15, offset: 19620},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 618, col: 24, offset: 19629},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 618, col: 46, offset: 19651},
													expr: &litMatcher{
														pos:        position{line: 618, col: 46, offset: 19651},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 618, col: 51, offset: 19656},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 618, col: 61, offset: 19666},
														expr: &ruleRefExpr{
															pos:  position{line: 618, col: 62, offset: 19667},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 13, offset: 19776},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 625, col: 1, offset: 19906},
			expr: &choiceExpr{
				pos: position{line: 625, col: 27, offset: 19932},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 625, col: 27, offset: 19932},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 625, col: 27, offset: 19932},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 625, col: 27, offset: 19932},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 625, col: 32, offset: 19937},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 625, col: 39, offset: 19944},
									expr: &charClassMatcher{
										pos:        position{line: 625, col: 39, offset: 19944},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 19992},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 627, col: 5, offset: 19992},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 627, col: 5, offset: 19992},
									expr: &litMatcher{
										pos:        position{line: 627, col: 5, offset: 19992},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 627, col: 11, offset: 19998},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 627, col: 18, offset: 20005},
									expr: &charClassMatcher{
										pos:        position{line: 627, col: 18, offset: 20005},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 627, col: 29, offset: 20016},
									expr: &ruleRefExpr{
										pos:  position{line: 627, col: 29, offset: 20016},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 627, col: 36, offset: 20023},
									expr: &litMatcher{
										pos:        position{line: 627, col: 37, offset: 20024},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 631, col: 1, offset: 20064},
			expr: &actionExpr{
				pos: position{line: 631, col: 25, offset: 20088},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 631, col: 25, offset: 20088},
					expr: &charClassMatcher{
						pos:        position{line: 631, col: 25, offset: 20088},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 635, col: 1, offset: 20134},
			expr: &actionExpr{
				pos: position{line: 635, col: 27, offset: 20160},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 635, col: 27, offset: 20160},
					expr: &charClassMatcher{
						pos:        position{line: 635, col: 27, offset: 20160},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 642, col: 1, offset: 20335},
			expr: &litMatcher{
				pos:        position{line: 642, col: 32, offset: 20366},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 643, col: 1, offset: 20375},
			expr: &actionExpr{
				pos: position{line: 643, col: 23, offset: 20397},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 643, col: 23, offset: 20397},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 643, col: 23, offset: 20397},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 643, col: 51, offset: 20425},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 643, col: 56, offset: 20430},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 643, col: 56, offset: 20430},
									expr: &charClassMatcher{
										pos:        position{line: 643, col: 56, offset: 20430},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 643, col: 95, offset: 20469},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 650, col: 1, offset: 20739},
			expr: &actionExpr{
				pos: position{line: 650, col: 14, offset: 20752},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 650, col: 14, offset: 20752},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 650, col: 14, offset: 20752},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 650, col: 20, offset: 20758},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 650, col: 24, offset: 20762},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 24, offset: 20762},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 650, col: 31, offset: 20769},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 32, offset: 20770},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 657, col: 1, offset: 20934},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 20956},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 20956},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 20956},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 659, col: 9, offset: 20971},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 659, col: 9, offset: 20971},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 659, col: 9, offset: 20971},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 660, col: 9, offset: 20992},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 660, col: 15, offset: 20998},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 661, col: 9, offset: 21021},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 661, col: 27, offset: 21039},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 665, col: 5, offset: 21200},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 5, offset: 21200},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 665, col: 12, offset: 21207},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 669, col: 1, offset: 21267},
			expr: &ruleRefExpr{
				pos:  position{line: 669, col: 26, offset: 21292},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 672, col: 1, offset: 21332},
			expr: &actionExpr{
				pos: position{line: 672, col: 15, offset: 21346},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 672, col: 15, offset: 21346},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 672, col: 15, offset: 21346},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 672, col: 22, offset: 21353},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 672, col: 22, offset: 21353},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 7, offset: 21379},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 7, offset: 21401},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 7, offset: 21424},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 679, col: 1, offset: 21514},
			expr: &actionExpr{
				pos: position{line: 679, col: 23, offset: 21536},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 679, col: 23, offset: 21536},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 679, col: 23, offset: 21536},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 679, col: 30, offset: 21543},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 679, col: 30, offset: 21543},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 47, offset: 21560},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 5, offset: 21582},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 680, col: 12, offset: 21589},
								expr: &actionExpr{
									pos: position{line: 681, col: 9, offset: 21599},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 681, col: 9, offset: 21599},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 681, col: 10, offset: 21600},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 681, col: 10, offset: 21600},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 681, col: 16, offset: 21606},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 682, col: 9, offset: 21717},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 682, col: 16, offset: 21724},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 682, col: 16, offset: 21724},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 682, col: 33, offset: 21741},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 688, col: 1, offset: 21883},
			expr: &actionExpr{
				pos: position{line: 688, col: 19, offset: 21901},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 688, col: 19, offset: 21901},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 688, col: 19, offset: 21901},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 26, offset: 21908},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 688, col: 34, offset: 21916},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 688, col: 39, offset: 21921},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 44, offset: 21926},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 692, col: 1, offset: 22022},
			expr: &actionExpr{
				pos: position{line: 692, col: 20, offset: 22041},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 692, col: 20, offset: 22041},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 692, col: 32, offset: 22053},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 697, col: 1, offset: 22176},
			expr: &actionExpr{
				pos: position{line: 697, col: 14, offset: 22189},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 697, col: 14, offset: 22189},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 697, col: 14, offset: 22189},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 21, offset: 22196},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 40, offset: 22215},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 701, col: 1, offset: 22305},
			expr: &actionExpr{
				pos: position{line: 701, col: 22, offset: 22326},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 701, col: 22, offset: 22326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 701, col: 22, offset: 22326},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 29, offset: 22333},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 702, col: 5, offset: 22347},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 702, col: 12, offset: 22354},
								expr: &actionExpr{
									pos: position{line: 703, col: 9, offset: 22364},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 703, col: 9, offset: 22364},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 703, col: 10, offset: 22365},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 703, col: 10, offset: 22365},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 703, col: 16, offset: 22371},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 704, col: 9, offset: 22482},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 704, col: 16, offset: 22489},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 710, col: 1, offset: 22624},
			expr: &choiceExpr{
				pos: position{line: 710, col: 13, offset: 22636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 710, col: 13, offset: 22636},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 710, col: 13, offset: 22636},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 710, col: 18, offset: 22641},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 710, col: 18, offset: 22641},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 710, col: 30, offset: 22653},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 9, offset: 22729},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 712, col: 9, offset: 22729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 712, col: 9, offset: 22729},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 712, col: 13, offset: 22733},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 712, col: 18, offset: 22738},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 712, col: 18, offset: 22738},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 712, col: 30, offset: 22750},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 716, col: 1, offset: 22826},
			expr: &actionExpr{
				pos: position{line: 716, col: 16, offset: 22841},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 716, col: 16, offset: 22841},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 716, col: 16, offset: 22841},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 716, col: 23, offset: 22848},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 716, col: 23, offset: 22848},
									expr: &litMatcher{
										pos:        position{line: 716, col: 24, offset: 22849},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 719, col: 5, offset: 22903},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 726, col: 1, offset: 23070},
			expr: &actionExpr{
				pos: position{line: 726, col: 21, offset: 23090},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 726, col: 21, offset: 23090},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 726, col: 21, offset: 23090},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 726, col: 29, offset: 23098},
								expr: &choiceExpr{
									pos: position{line: 726, col: 30, offset: 23099},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 726, col: 30, offset: 23099},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 726, col: 53, offset: 23122},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 726, col: 74, offset: 23143},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 726, col: 74, offset: 23143,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 726, col: 107, offset: 23176},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 730, col: 1, offset: 23255},
			expr: &actionExpr{
				pos: position{line: 730, col: 25, offset: 23279},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 730, col: 25, offset: 23279},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 730, col: 25, offset: 23279},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 730, col: 33, offset: 23287},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 730, col: 38, offset: 23292},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 730, col: 38, offset: 23292},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 730, col: 78, offset: 23332},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 734, col: 1, offset: 23405},
			expr: &actionExpr{
				pos: position{line: 734, col: 23, offset: 23427},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 734, col: 23, offset: 23427},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 734, col: 23, offset: 23427},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 31, offset: 23435},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 734, col: 36, offset: 23440},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 734, col: 36, offset: 23440},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 734, col: 76, offset: 23480},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 753, col: 1, offset: 24025},
			expr: &choiceExpr{
				pos: position{line: 753, col: 24, offset: 24048},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 753, col: 24, offset: 24048},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 753, col: 47, offset: 24071},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 753, col: 59, offset: 24083},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 755, col: 1, offset: 24100},
			expr: &actionExpr{
				pos: position{line: 755, col: 26, offset: 24125},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 755, col: 26, offset: 24125},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 755, col: 26, offset: 24125},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 755, col: 32, offset: 24131},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 32, offset: 24131},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 39, offset: 24138},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 759, col: 1, offset: 24201},
			expr: &actionExpr{
				pos: position{line: 759, col: 20, offset: 24220},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 759, col: 20, offset: 24220},
					expr: &anyMatcher{
						line: 759, col: 21, offset: 24221,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 766, col: 1, offset: 24391},
			expr: &actionExpr{
				pos: position{line: 767, col: 5, offset: 24414},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 767, col: 5, offset: 24414},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 767, col: 15, offset: 24424},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 767, col: 15, offset: 24424},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 767, col: 15, offset: 24424},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 767, col: 24, offset: 24433},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 769, col: 9, offset: 24525},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 769, col: 9, offset: 24525},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 769, col: 9, offset: 24525},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 769, col: 18, offset: 24534},
												expr: &ruleRefExpr{
													pos:  position{line: 769, col: 19, offset: 24535},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 769, col: 35, offset: 24551},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 785, col: 1, offset: 24868},
			expr: &actionExpr{
				pos: position{line: 786, col: 5, offset: 24891},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 786, col: 5, offset: 24891},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 786, col: 14, offset: 24900},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 786, col: 14, offset: 24900},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 787, col: 11, offset: 24961},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 788, col: 11, offset: 25006},
								expr: &ruleRefExpr{
									pos:  position{line: 788, col: 11, offset: 25006},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 789, col: 11, offset: 25024},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 789, col: 11, offset: 25024},
										expr: &ruleRefExpr{
											pos:  position{line: 789, col: 12, offset: 25025},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 790, col: 13, offset: 25043},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 790, col: 13, offset: 25043},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 791, col: 15, offset: 25074},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 792, col: 15, offset: 25094},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 793, col: 15, offset: 25131},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 794, col: 15, offset: 25157},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 795, col: 15, offset: 25183},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 796, col: 15, offset: 25213},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 798, col: 15, offset: 25313},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 830, col: 1, offset: 26329},
			expr: &actionExpr{
				pos: position{line: 830, col: 20, offset: 26348},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 830, col: 20, offset: 26348},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 830, col: 20, offset: 26348},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 830, col: 25, offset: 26353},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 830, col: 29, offset: 26357},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 830, col: 33, offset: 26361},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 830, col: 38, offset: 26366},
							expr: &ruleRefExpr{
								pos:  position{line: 830, col: 38, offset: 26366},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 837, col: 1, offset: 26612},
			expr: &actionExpr{
				pos: position{line: 837, col: 14, offset: 26625},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 837, col: 14, offset: 26625},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 837, col: 14, offset: 26625},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 837, col: 19, offset: 26630},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 25, offset: 26636},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 837, col: 43, offset: 26654},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 841, col: 1, offset: 26719},
			expr: &actionExpr{
				pos: position{line: 841, col: 21, offset: 26739},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 841, col: 21, offset: 26739},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 841, col: 30, offset: 26748},
						expr: &choiceExpr{
							pos: position{line: 841, col: 31, offset: 26749},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 841, col: 31, offset: 26749},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 38, offset: 26756},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 53, offset: 26771},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 66, offset: 26784},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 74, offset: 26792},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 93, offset: 26811},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 841, col: 114, offset: 26832},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 841, col: 115, offset: 26833},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 841, col: 115, offset: 26833},
												expr: &litMatcher{
													pos:        position{line: 841, col: 116, offset: 26834},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 841, col: 121, offset: 26839,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 847, col: 1, offset: 26945},
			expr: &actionExpr{
				pos: position{line: 847, col: 23, offset: 26967},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 847, col: 23, offset: 26967},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 847, col: 23, offset: 26967},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 847, col: 29, offset: 26973},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 36, offset: 26980},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 5, offset: 27012},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 848, col: 11, offset: 27018},
								expr: &actionExpr{
									pos: position{line: 848, col: 12, offset: 27019},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 848, col: 12, offset: 27019},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 848, col: 12, offset: 27019},
												expr: &ruleRefExpr{
													pos:  position{line: 848, col: 12, offset: 27019},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 848, col: 19, offset: 27026},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 848, col: 23, offset: 27030},
												expr: &ruleRefExpr{
													pos:  position{line: 848, col: 23, offset: 27030},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 848, col: 30, offset: 27037},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 848, col: 39, offset: 27046},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 849, col: 5, offset: 27104},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 849, col: 11, offset: 27110},
								expr: &actionExpr{
									pos: position{line: 849, col: 12, offset: 27111},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 849, col: 12, offset: 27111},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 849, col: 12, offset: 27111},
												expr: &ruleRefExpr{
													pos:  position{line: 849, col: 12, offset: 27111},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 849, col: 19, offset: 27118},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 849, col: 23, offset: 27122},
												expr: &ruleRefExpr{
													pos:  position{line: 849, col: 23, offset: 27122},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 849, col: 30, offset: 27129},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 849, col: 39, offset: 27138},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 850, col: 5, offset: 27196},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 854, col: 1, offset: 27275},
			expr: &actionExpr{
				pos: position{line: 854, col: 30, offset: 27304},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 854, col: 30, offset: 27304},
					expr: &choiceExpr{
						pos: position{line: 854, col: 31, offset: 27305},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 854, col: 31, offset: 27305},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 854, col: 42, offset: 27316},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 861, col: 1, offset: 27462},
			expr: &actionExpr{
				pos: position{line: 862, col: 5, offset: 27481},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 862, col: 5, offset: 27481},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 862, col: 5, offset: 27481},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 866, col: 5, offset: 27633},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 866, col: 15, offset: 27643},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 866, col: 21, offset: 27649},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 866, col: 31, offset: 27659},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 866, col: 49, offset: 27677},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 866, col: 67, offset: 27695},
							expr: &ruleRefExpr{
								pos:  position{line: 866, col: 67, offset: 27695},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 866, col: 74, offset: 27702},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 871, col: 1, offset: 27949},
			expr: &actionExpr{
				pos: position{line: 871, col: 16, offset: 27964},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 871, col: 16, offset: 27964},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 871, col: 16, offset: 27964},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 871, col: 25, offset: 27973},
							expr: &litMatcher{
								pos:        position{line: 871, col: 26, offset: 27974},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 871, col: 30, offset: 27978},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 36, offset: 27984},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 871, col: 46, offset: 27994},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 64, offset: 28012},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 878, col: 1, offset: 28356},
			expr: &actionExpr{
				pos: position{line: 878, col: 15, offset: 28370},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 878, col: 15, offset: 28370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 878, col: 15, offset: 28370},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 878, col: 23, offset: 28378},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 878, col: 29, offset: 28384},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 878, col: 29, offset: 28384},
									expr: &charClassMatcher{
										pos:        position{line: 878, col: 29, offset: 28384},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 878, col: 73, offset: 28428},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 878, col: 85, offset: 28440},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 885, col: 1, offset: 28720},
			expr: &choiceExpr{
				pos: position{line: 885, col: 19, offset: 28738},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 885, col: 19, offset: 28738},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 885, col: 19, offset: 28738},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 885, col: 19, offset: 28738},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 885, col: 32, offset: 28751},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 885, col: 41, offset: 28760},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 885, col: 58, offset: 28777},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 887, col: 9, offset: 28853},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 887, col: 9, offset: 28853},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 887, col: 9, offset: 28853},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 887, col: 21, offset: 28865},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 26, offset: 28870},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 887, col: 39, offset: 28883},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 887, col: 43, offset: 28887},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 887, col: 51, offset: 28895},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 52, offset: 28896},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 887, col: 70, offset: 28914},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 891, col: 1, offset: 28983},
			expr: &ruleRefExpr{
				pos:  position{line: 891, col: 16, offset: 28998},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 893, col: 1, offset: 29009},
			expr: &actionExpr{
				pos: position{line: 893, col: 20, offset: 29028},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 893, col: 20, offset: 29028},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 893, col: 29, offset: 29037},
						expr: &seqExpr{
							pos: position{line: 893, col: 30, offset: 29038},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 893, col: 30, offset: 29038},
									expr: &litMatcher{
										pos:        position{line: 893, col: 31, offset: 29039},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 893, col: 35, offset: 29043},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 901, col: 1, offset: 29286},
			expr: &litMatcher{
				pos:        position{line: 901, col: 32, offset: 29317},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 903, col: 1, offset: 29322},
			expr: &actionExpr{
				pos: position{line: 903, col: 26, offset: 29347},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 903, col: 26, offset: 29347},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 903, col: 26, offset: 29347},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 903, col: 54, offset: 29375},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 63, offset: 29384},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 93, offset: 29414},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 903, col: 121, offset: 29442},
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 122, offset: 29443},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 907, col: 1, offset: 29556},
			expr: &choiceExpr{
				pos: position{line: 907, col: 33, offset: 29588},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 907, col: 34, offset: 29589},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 907, col: 34, offset: 29589},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 907, col: 35, offset: 29590},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 907, col: 35, offset: 29590},
											expr: &ruleRefExpr{
												pos:  position{line: 907, col: 36, offset: 29591},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 907, col: 64, offset: 29619},
											expr: &ruleRefExpr{
												pos:  position{line: 907, col: 65, offset: 29620},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 907, col: 71, offset: 29626},
											expr: &ruleRefExpr{
												pos:  position{line: 907, col: 72, offset: 29627},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 907, col: 80, offset: 29635,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 907, col: 83, offset: 29638},
									expr: &seqExpr{
										pos: position{line: 907, col: 84, offset: 29639},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 907, col: 84, offset: 29639},
												expr: &seqExpr{
													pos: position{line: 907, col: 86, offset: 29641},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 907, col: 86, offset: 29641},
															expr: &ruleRefExpr{
																pos:  position{line: 907, col: 86, offset: 29641},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 907, col: 93, offset: 29648},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 907, col: 122, offset: 29677},
												expr: &ruleRefExpr{
													pos:  position{line: 907, col: 123, offset: 29678},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 907, col: 151, offset: 29706},
												expr: &ruleRefExpr{
													pos:  position{line: 907, col: 152, offset: 29707},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 907, col: 160, offset: 29715,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 909, col: 11, offset: 29865},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 909, col: 12, offset: 29866},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 909, col: 12, offset: 29866},
									expr: &ruleRefExpr{
										pos:  position{line: 909, col: 13, offset: 29867},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 909, col: 19, offset: 29873},
									expr: &ruleRefExpr{
										pos:  position{line: 909, col: 20, offset: 29874},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 909, col: 28, offset: 29882},
									expr: &ruleRefExpr{
										pos:  position{line: 909, col: 29, offset: 29883},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 909, col: 57, offset: 29911,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 913, col: 1, offset: 30001},
			expr: &litMatcher{
				pos:        position{line: 913, col: 32, offset: 30032},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 915, col: 1, offset: 30039},
			expr: &actionExpr{
				pos: position{line: 915, col: 26, offset: 30064},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 915, col: 26, offset: 30064},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 915, col: 26, offset: 30064},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 915, col: 54, offset: 30092},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 63, offset: 30101},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 915, col: 93, offset: 30131},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 915, col: 121, offset: 30159},
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 122, offset: 30160},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 919, col: 1, offset: 30273},
			expr: &choiceExpr{
				pos: position{line: 919, col: 33, offset: 30305},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 34, offset: 30306},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 919, col: 34, offset: 30306},
							expr: &seqExpr{
								pos: position{line: 919, col: 35, offset: 30307},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 919, col: 35, offset: 30307},
										expr: &ruleRefExpr{
											pos:  position{line: 919, col: 36, offset: 30308},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 919, col: 64, offset: 30336,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 921, col: 11, offset: 30509},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 921, col: 11, offset: 30509},
							expr: &seqExpr{
								pos: position{line: 921, col: 12, offset: 30510},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 921, col: 12, offset: 30510},
										expr: &ruleRefExpr{
											pos:  position{line: 921, col: 13, offset: 30511},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 921, col: 19, offset: 30517},
										expr: &ruleRefExpr{
											pos:  position{line: 921, col: 20, offset: 30518},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 921, col: 28, offset: 30526},
										expr: &ruleRefExpr{
											pos:  position{line: 921, col: 29, offset: 30527},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 921, col: 57, offset: 30555,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 925, col: 1, offset: 30646},
			expr: &choiceExpr{
				pos: position{line: 925, col: 21, offset: 30666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 925, col: 21, offset: 30666},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 925, col: 21, offset: 30666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 925, col: 21, offset: 30666},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 925, col: 30, offset: 30675},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 925, col: 38, offset: 30683},
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 39, offset: 30684},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 925, col: 67, offset: 30712},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 927, col: 9, offset: 30816},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 927, col: 9, offset: 30816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 927, col: 9, offset: 30816},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 927, col: 19, offset: 30826},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 927, col: 27, offset: 30834},
										expr: &choiceExpr{
											pos: position{line: 927, col: 28, offset: 30835},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 927, col: 28, offset: 30835},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 927, col: 41, offset: 30848},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 927, col: 69, offset: 30876},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 931, col: 1, offset: 30980},
			expr: &actionExpr{
				pos: position{line: 931, col: 30, offset: 31009},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 931, col: 30, offset: 31009},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 938, col: 1, offset: 31179},
			expr: &choiceExpr{
				pos: position{line: 938, col: 9, offset: 31187},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 938, col: 9, offset: 31187},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 24, offset: 31202},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 941, col: 1, offset: 31283},
			expr: &actionExpr{
				pos: position{line: 941, col: 17, offset: 31299},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 941, col: 17, offset: 31299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 941, col: 17, offset: 31299},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 941, col: 25, offset: 31307},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 941, col: 30, offset: 31312},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 941, col: 40, offset: 31322},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 941, col: 58, offset: 31340},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 945, col: 1, offset: 31462},
			expr: &actionExpr{
				pos: position{line: 945, col: 17, offset: 31478},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 945, col: 17, offset: 31478},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 945, col: 17, offset: 31478},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 945, col: 22, offset: 31483},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 945, col: 42, offset: 31503},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 945, col: 59, offset: 31520},
								expr: &ruleRefExpr{
									pos:  position{line: 945, col: 60, offset: 31521},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 953, col: 1, offset: 31863},
			expr: &choiceExpr{
				pos: position{line: 954, col: 5, offset: 31882},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 955, col: 9, offset: 31892},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 955, col: 9, offset: 31892},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 955, col: 9, offset: 31892},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 955, col: 20, offset: 31903},
										expr: &ruleRefExpr{
											pos:  position{line: 955, col: 21, offset: 31904},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 956, col: 9, offset: 31934},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 956, col: 15, offset: 31940},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 956, col: 15, offset: 31940},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 956, col: 41, offset: 31966},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 7, offset: 32085},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 962, col: 1, offset: 32104},
			expr: &choiceExpr{
				pos: position{line: 962, col: 32, offset: 32135},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 962, col: 32, offset: 32135},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 962, col: 32, offset: 32135},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 962, col: 36, offset: 32139},
								expr: &litMatcher{
									pos:        position{line: 962, col: 37, offset: 32140},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 962, col: 43, offset: 32146},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 962, col: 43, offset: 32146},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 962, col: 47, offset: 32150},
								expr: &litMatcher{
									pos:        position{line: 962, col: 48, offset: 32151},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 962, col: 54, offset: 32157},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 962, col: 54, offset: 32157},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 962, col: 58, offset: 32161},
								expr: &litMatcher{
									pos:        position{line: 962, col: 59, offset: 32162},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 962, col: 65, offset: 32168},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 962, col: 65, offset: 32168},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 962, col: 69, offset: 32172},
								expr: &litMatcher{
									pos:        position{line: 962, col: 70, offset: 32173},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 964, col: 1, offset: 32178},
			expr: &choiceExpr{
				pos: position{line: 964, col: 34, offset: 32211},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 964, col: 34, offset: 32211},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 964, col: 41, offset: 32218},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 964, col: 48, offset: 32225},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 964, col: 55, offset: 32232},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 964, col: 62, offset: 32239},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 964, col: 68, offset: 32245},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 966, col: 1, offset: 32250},
			expr: &choiceExpr{
				pos: position{line: 967, col: 5, offset: 32280},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 967, col: 5, offset: 32280},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 7, offset: 32307},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 7, offset: 32335},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 7, offset: 32363},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 7, offset: 32395},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 972, col: 7, offset: 32416},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 974, col: 1, offset: 32434},
			expr: &choiceExpr{
				pos: position{line: 975, col: 5, offset: 32466},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 975, col: 5, offset: 32466},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 976, col: 7, offset: 32492},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 7, offset: 32520},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 978, col: 7, offset: 32548},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 980, col: 1, offset: 32574},
			expr: &actionExpr{
				pos: position{line: 981, col: 5, offset: 32655},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 981, col: 5, offset: 32655},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 981, col: 5, offset: 32655},
							expr: &litMatcher{
								pos:        position{line: 981, col: 7, offset: 32657},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 982, col: 5, offset: 32666},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 983, col: 9, offset: 32684},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 983, col: 9, offset: 32684},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 984, col: 11, offset: 32711},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 985, col: 11, offset: 32739},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 986, col: 11, offset: 32767},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 987, col: 11, offset: 32799},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 988, col: 11, offset: 32831},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 994, col: 1, offset: 32898},
			expr: &choiceExpr{
				pos: position{line: 994, col: 33, offset: 32930},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 994, col: 33, offset: 32930},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 994, col: 39, offset: 32936},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 994, col: 39, offset: 32936},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 998, col: 1, offset: 33078},
			expr: &actionExpr{
				pos: position{line: 998, col: 25, offset: 33102},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 998, col: 25, offset: 33102},
					expr: &litMatcher{
						pos:        position{line: 998, col: 25, offset: 33102},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1002, col: 1, offset: 33151},
			expr: &actionExpr{
				pos: position{line: 1002, col: 25, offset: 33175},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1002, col: 25, offset: 33175},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1002, col: 25, offset: 33175},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1002, col: 30, offset: 33180},
							expr: &litMatcher{
								pos:        position{line: 1002, col: 30, offset: 33180},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1009, col: 1, offset: 33291},
			expr: &choiceExpr{
				pos: position{line: 1009, col: 13, offset: 33303},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1009, col: 13, offset: 33303},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 35, offset: 33325},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1011, col: 1, offset: 33392},
			expr: &actionExpr{
				pos: position{line: 1011, col: 24, offset: 33415},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 24, offset: 33415},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1011, col: 24, offset: 33415},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 29, offset: 33420},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 39, offset: 33430},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1011, col: 68, offset: 33459},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1015, col: 1, offset: 33558},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1015, col: 32, offset: 33589},
				expr: &ruleRefExpr{
					pos:  position{line: 1015, col: 32, offset: 33589},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1017, col: 1, offset: 33620},
			expr: &actionExpr{
				pos: position{line: 1017, col: 31, offset: 33650},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1017, col: 31, offset: 33650},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1017, col: 31, offset: 33650},
							expr: &litMatcher{
								pos:        position{line: 1017, col: 33, offset: 33652},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 39, offset: 33658},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1017, col: 48, offset: 33667},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1017, col: 48, offset: 33667},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1018, col: 7, offset: 33678},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1019, col: 7, offset: 33723},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1019, col: 7, offset: 33723},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1019, col: 15, offset: 33731},
												expr: &ruleRefExpr{
													pos:  position{line: 1019, col: 16, offset: 33732},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1020, col: 7, offset: 33746},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1021, col: 7, offset: 33774},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1022, col: 7, offset: 33797},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1023, col: 7, offset: 33815},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1024, col: 7, offset: 33834},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1025, col: 7, offset: 33872},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1026, col: 7, offset: 33897},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1030, col: 1, offset: 33972},
			expr: &actionExpr{
				pos: position{line: 1031, col: 5, offset: 34012},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1031, col: 5, offset: 34012},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1031, col: 5, offset: 34012},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1031, col: 16, offset: 34023},
								expr: &ruleRefExpr{
									pos:  position{line: 1031, col: 17, offset: 34024},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1032, col: 5, offset: 34050},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1032, col: 11, offset: 34056},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1032, col: 11, offset: 34056},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1033, col: 11, offset: 34086},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1034, col: 11, offset: 34107},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1035, col: 11, offset: 34128},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1036, col: 11, offset: 34152},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1037, col: 11, offset: 34176},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1041, col: 1, offset: 34277},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 5, offset: 34321},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1042, col: 5, offset: 34321},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1043, col: 7, offset: 34418},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1043, col: 7, offset: 34418},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1043, col: 7, offset: 34418},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1043, col: 12, offset: 34423},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1047, col: 1, offset: 34594},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 5, offset: 34622},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1048, col: 5, offset: 34622},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1048, col: 5, offset: 34622},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1048, col: 6, offset: 34623},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1048, col: 6, offset: 34623},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1048, col: 10, offset: 34627},
											expr: &litMatcher{
												pos:        position{line: 1048, col: 11, offset: 34628},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 16, offset: 34633},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 26, offset: 34643},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 55, offset: 34672},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1048, col: 59, offset: 34676},
									expr: &notExpr{
										pos: position{line: 1048, col: 61, offset: 34678},
										expr: &ruleRefExpr{
											pos:  position{line: 1048, col: 62, offset: 34679},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1050, col: 9, offset: 34885},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1050, col: 9, offset: 34885},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1050, col: 9, offset: 34885},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1050, col: 13, offset: 34889},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1050, col: 23, offset: 34899},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1050, col: 23, offset: 34899},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1050, col: 27, offset: 34903},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1050, col: 56, offset: 34932},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1054, col: 1, offset: 35150},
			expr: &seqExpr{
				pos: position{line: 1054, col: 32, offset: 35181},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1054, col: 32, offset: 35181},
						expr: &ruleRefExpr{
							pos:  position{line: 1054, col: 33, offset: 35182},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1054, col: 39, offset: 35188},
						expr: &ruleRefExpr{
							pos:  position{line: 1054, col: 39, offset: 35188},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1056, col: 1, offset: 35217},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 5, offset: 35252},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1057, col: 5, offset: 35252},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1058, col: 7, offset: 35263},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1058, col: 7, offset: 35263},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1058, col: 15, offset: 35271},
								expr: &ruleRefExpr{
									pos:  position{line: 1058, col: 16, offset: 35272},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 7, offset: 35286},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 7, offset: 35314},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 7, offset: 35337},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 7, offset: 35355},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1063, col: 7, offset: 35374},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1063, col: 7, offset: 35374},
								expr: &ruleRefExpr{
									pos:  position{line: 1063, col: 7, offset: 35374},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1063, col: 14, offset: 35381},
								expr: &seqExpr{
									pos: position{line: 1063, col: 15, offset: 35382},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1063, col: 15, offset: 35382},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1063, col: 19, offset: 35386},
											expr: &litMatcher{
												pos:        position{line: 1063, col: 20, offset: 35387},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 7, offset: 35399},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 7, offset: 35437},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 7, offset: 35462},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1068, col: 1, offset: 35500},
			expr: &actionExpr{
				pos: position{line: 1069, col: 5, offset: 35540},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 5, offset: 35540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1069, col: 5, offset: 35540},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1069, col: 16, offset: 35551},
								expr: &ruleRefExpr{
									pos:  position{line: 1069, col: 17, offset: 35552},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 5, offset: 35578},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1070, col: 11, offset: 35584},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1070, col: 11, offset: 35584},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1071, col: 11, offset: 35614},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1072, col: 11, offset: 35635},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1073, col: 11, offset: 35656},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1074, col: 11, offset: 35680},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1075, col: 11, offset: 35704},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1078, col: 1, offset: 35804},
			expr: &choiceExpr{
				pos: position{line: 1079, col: 5, offset: 35848},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1079, col: 5, offset: 35848},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1080, col: 7, offset: 35945},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1080, col: 7, offset: 35945},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1080, col: 7, offset: 35945},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1080, col: 11, offset: 35949},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1084, col: 1, offset: 36120},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 5, offset: 36144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1085, col: 5, offset: 36144},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1085, col: 5, offset: 36144},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1085, col: 5, offset: 36144},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 18, offset: 36157},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1085, col: 40, offset: 36179},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 45, offset: 36184},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 55, offset: 36194},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1085, col: 84, offset: 36223},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1087, col: 9, offset: 36380},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1087, col: 9, offset: 36380},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1087, col: 9, offset: 36380},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 22, offset: 36393},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 44, offset: 36415},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1087, col: 49, offset: 36420},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 59, offset: 36430},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 88, offset: 36459},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1090, col: 9, offset: 36659},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1090, col: 9, offset: 36659},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1090, col: 9, offset: 36659},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1090, col: 22, offset: 36672},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1090, col: 44, offset: 36694},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1090, col: 48, offset: 36698},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1090, col: 58, offset: 36708},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1090, col: 87, offset: 36737},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1097, col: 1, offset: 36958},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 15, offset: 36972},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 15, offset: 36972},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 39, offset: 36996},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1099, col: 1, offset: 37019},
			expr: &actionExpr{
				pos: position{line: 1099, col: 26, offset: 37044},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 26, offset: 37044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1099, col: 26, offset: 37044},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 31, offset: 37049},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 41, offset: 37059},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1099, col: 72, offset: 37090},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1103, col: 1, offset: 37236},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1103, col: 34, offset: 37269},
				expr: &ruleRefExpr{
					pos:  position{line: 1103, col: 34, offset: 37269},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1105, col: 1, offset: 37301},
			expr: &actionExpr{
				pos: position{line: 1106, col: 5, offset: 37338},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 5, offset: 37338},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1106, col: 5, offset: 37338},
							expr: &litMatcher{
								pos:        position{line: 1106, col: 7, offset: 37340},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 13, offset: 37346},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1106, col: 22, offset: 37355},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1106, col: 22, offset: 37355},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1107, col: 7, offset: 37366},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1108, col: 7, offset: 37411},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1108, col: 7, offset: 37411},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1108, col: 15, offset: 37419},
												expr: &ruleRefExpr{
													pos:  position{line: 1108, col: 16, offset: 37420},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1109, col: 7, offset: 37434},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1110, col: 7, offset: 37462},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1111, col: 7, offset: 37485},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1112, col: 7, offset: 37503},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1113, col: 7, offset: 37522},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1114, col: 7, offset: 37562},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1115, col: 7, offset: 37587},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1119, col: 1, offset: 37664},
			expr: &actionExpr{
				pos: position{line: 1120, col: 5, offset: 37706},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 5, offset: 37706},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1120, col: 5, offset: 37706},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1120, col: 16, offset: 37717},
								expr: &ruleRefExpr{
									pos:  position{line: 1120, col: 17, offset: 37718},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 5, offset: 37744},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1121, col: 11, offset: 37750},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1121, col: 11, offset: 37750},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1122, col: 11, offset: 37782},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1123, col: 11, offset: 37801},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1124, col: 11, offset: 37822},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1125, col: 11, offset: 37846},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1126, col: 11, offset: 37870},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1130, col: 1, offset: 37971},
			expr: &choiceExpr{
				pos: position{line: 1131, col: 5, offset: 38017},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1131, col: 5, offset: 38017},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1132, col: 7, offset: 38116},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1132, col: 7, offset: 38116},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1132, col: 7, offset: 38116},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1132, col: 12, offset: 38121},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1136, col: 1, offset: 38294},
			expr: &choiceExpr{
				pos: position{line: 1137, col: 5, offset: 38324},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 38324},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1137, col: 5, offset: 38324},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1137, col: 6, offset: 38325},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1137, col: 6, offset: 38325},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1137, col: 10, offset: 38329},
											expr: &litMatcher{
												pos:        position{line: 1137, col: 11, offset: 38330},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 16, offset: 38335},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1137, col: 26, offset: 38345},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1137, col: 57, offset: 38376},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1139, col: 9, offset: 38578},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1139, col: 9, offset: 38578},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 9, offset: 38578},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 13, offset: 38582},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1139, col: 23, offset: 38592},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1139, col: 23, offset: 38592},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1139, col: 27, offset: 38596},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 58, offset: 38627},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1143, col: 1, offset: 38849},
			expr: &actionExpr{
				pos: position{line: 1143, col: 34, offset: 38882},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1143, col: 34, offset: 38882},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1143, col: 34, offset: 38882},
							expr: &ruleRefExpr{
								pos:  position{line: 1143, col: 35, offset: 38883},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1143, col: 41, offset: 38889},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1143, col: 51, offset: 38899},
								expr: &ruleRefExpr{
									pos:  position{line: 1143, col: 51, offset: 38899},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1147, col: 1, offset: 38960},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 5, offset: 38997},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1148, col: 5, offset: 38997},
						name: "ItalicWord",
					},
					&seqExpr{
						pos: position{line: 1149, col: 7, offset: 39014},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1149, col: 7, offset: 39014},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 7, offset: 39014},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1149, col: 14, offset: 39021},
								expr: &seqExpr{
									pos: position{line: 1149, col: 15, offset: 39022},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1149, col: 15, offset: 39022},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1149, col: 19, offset: 39026},
											expr: &litMatcher{
												pos:        position{line: 1149, col: 20, offset: 39027},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1150, col: 7, offset: 39039},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1150, col: 7, offset: 39039},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1150, col: 15, offset: 39047},
								expr: &ruleRefExpr{
									pos:  position{line: 1150, col: 16, offset: 39048},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 7, offset: 39062},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 7, offset: 39090},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 7, offset: 39113},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 7, offset: 39131},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 7, offset: 39150},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 7, offset: 39190},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 7, offset: 39215},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "ItalicWord",
			pos:  position{line: 1160, col: 1, offset: 39310},
			expr: &actionExpr{
				pos: position{line: 1160, col: 15, offset: 39324},
				run: (*parser).callonItalicWord1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 15, offset: 39324},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1160, col: 15, offset: 39324},
							expr: &charClassMatcher{
								pos:        position{line: 1160, col: 15, offset: 39324},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1160, col: 25, offset: 39334},
							expr: &choiceExpr{
								pos: position{line: 1160, col: 27, offset: 39336},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1160, col: 27, offset: 39336},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&litMatcher{
										pos:        position{line: 1160, col: 33, offset: 39342},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1164, col: 1, offset: 39402},
			expr: &actionExpr{
				pos: position{line: 1165, col: 5, offset: 39443},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 5, offset: 39443},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1165, col: 5, offset: 39443},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1165, col: 16, offset: 39454},
								expr: &ruleRefExpr{
									pos:  position{line: 1165, col: 17, offset: 39455},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1166, col: 5, offset: 39481},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1166, col: 11, offset: 39487},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1166, col: 11, offset: 39487},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1167, col: 11, offset: 39506},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1168, col: 11, offset: 39538},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 39559},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1170, col: 11, offset: 39583},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1171, col: 11, offset: 39607},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1175, col: 1, offset: 39708},
			expr: &choiceExpr{
				pos: position{line: 1176, col: 5, offset: 39754},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1176, col: 5, offset: 39754},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1177, col: 7, offset: 39853},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1177, col: 7, offset: 39853},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1177, col: 7, offset: 39853},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1177, col: 11, offset: 39857},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1181, col: 1, offset: 40031},
			expr: &choiceExpr{
				pos: position{line: 1182, col: 5, offset: 40057},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1182, col: 5, offset: 40057},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1182, col: 5, offset: 40057},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1182, col: 5, offset: 40057},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 18, offset: 40070},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 40, offset: 40092},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 45, offset: 40097},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 55, offset: 40107},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 86, offset: 40138},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1184, col: 9, offset: 40295},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1184, col: 9, offset: 40295},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1184, col: 9, offset: 40295},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1184, col: 22, offset: 40308},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1184, col: 44, offset: 40330},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 49, offset: 40335},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1184, col: 59, offset: 40345},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1184, col: 90, offset: 40376},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1187, col: 9, offset: 40576},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1187, col: 9, offset: 40576},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1187, col: 9, offset: 40576},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 22, offset: 40589},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1187, col: 44, offset: 40611},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 48, offset: 40615},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 58, offset: 40625},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1187, col: 89, offset: 40656},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1194, col: 1, offset: 40883},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 18, offset: 40900},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 18, offset: 40900},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 45, offset: 40927},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1196, col: 1, offset: 40953},
			expr: &actionExpr{
				pos: position{line: 1196, col: 29, offset: 40981},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 29, offset: 40981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1196, col: 29, offset: 40981},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1196, col: 34, offset: 40986},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 44, offset: 40996},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1196, col: 78, offset: 41030},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1200, col: 1, offset: 41179},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1200, col: 37, offset: 41215},
				expr: &ruleRefExpr{
					pos:  position{line: 1200, col: 37, offset: 41215},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1202, col: 1, offset: 41282},
			expr: &actionExpr{
				pos: position{line: 1203, col: 5, offset: 41322},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 5, offset: 41322},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1203, col: 5, offset: 41322},
							expr: &litMatcher{
								pos:        position{line: 1203, col: 7, offset: 41324},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 13, offset: 41330},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1203, col: 22, offset: 41339},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1203, col: 22, offset: 41339},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 7, offset: 41350},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1205, col: 7, offset: 41395},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1205, col: 7, offset: 41395},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1205, col: 15, offset: 41403},
												expr: &ruleRefExpr{
													pos:  position{line: 1205, col: 16, offset: 41404},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1206, col: 7, offset: 41418},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1207, col: 7, offset: 41446},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 7, offset: 41469},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 7, offset: 41487},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1210, col: 7, offset: 41506},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1211, col: 7, offset: 41569},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1212, col: 7, offset: 41612},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1213, col: 7, offset: 41637},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1217, col: 1, offset: 41717},
			expr: &actionExpr{
				pos: position{line: 1218, col: 5, offset: 41761},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 5, offset: 41761},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1218, col: 5, offset: 41761},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1218, col: 16, offset: 41772},
								expr: &ruleRefExpr{
									pos:  position{line: 1218, col: 17, offset: 41773},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 5, offset: 41799},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1219, col: 11, offset: 41805},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1219, col: 11, offset: 41805},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1220, col: 11, offset: 41840},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1221, col: 11, offset: 41859},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1222, col: 11, offset: 41880},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1223, col: 11, offset: 41901},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1224, col: 11, offset: 41925},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1228, col: 1, offset: 42027},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 42076},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1229, col: 5, offset: 42076},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1230, col: 7, offset: 42178},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1230, col: 7, offset: 42178},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1230, col: 7, offset: 42178},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1230, col: 12, offset: 42183},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1234, col: 1, offset: 42361},
			expr: &choiceExpr{
				pos: position{line: 1235, col: 5, offset: 42394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1235, col: 5, offset: 42394},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1235, col: 5, offset: 42394},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1235, col: 6, offset: 42395},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1235, col: 6, offset: 42395},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1235, col: 10, offset: 42399},
											expr: &litMatcher{
												pos:        position{line: 1235, col: 11, offset: 42400},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1235, col: 16, offset: 42405},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1235, col: 26, offset: 42415},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1235, col: 60, offset: 42449},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1237, col: 9, offset: 42654},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1237, col: 9, offset: 42654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1237, col: 9, offset: 42654},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1237, col: 13, offset: 42658},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1237, col: 23, offset: 42668},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1237, col: 23, offset: 42668},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1237, col: 27, offset: 42672},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1237, col: 61, offset: 42706},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1241, col: 1, offset: 42932},
			expr: &seqExpr{
				pos: position{line: 1241, col: 37, offset: 42968},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1241, col: 37, offset: 42968},
						expr: &ruleRefExpr{
							pos:  position{line: 1241, col: 38, offset: 42969},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1241, col: 44, offset: 42975},
						expr: &ruleRefExpr{
							pos:  position{line: 1241, col: 44, offset: 42975},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1243, col: 1, offset: 43009},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 5, offset: 43050},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1244, col: 5, offset: 43050},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1245, col: 7, offset: 43061},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1245, col: 7, offset: 43061},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1245, col: 15, offset: 43069},
								expr: &ruleRefExpr{
									pos:  position{line: 1245, col: 16, offset: 43070},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 7, offset: 43084},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 7, offset: 43112},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 7, offset: 43135},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 7, offset: 43153},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1250, col: 7, offset: 43172},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1250, col: 7, offset: 43172},
								expr: &ruleRefExpr{
									pos:  position{line: 1250, col: 7, offset: 43172},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1250, col: 14, offset: 43179},
								expr: &seqExpr{
									pos: position{line: 1250, col: 15, offset: 43180},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1250, col: 15, offset: 43180},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1250, col: 19, offset: 43184},
											expr: &litMatcher{
												pos:        position{line: 1250, col: 20, offset: 43185},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 7, offset: 43309},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 7, offset: 43352},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 7, offset: 43372},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 7, offset: 43397},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1256, col: 1, offset: 43440},
			expr: &actionExpr{
				pos: position{line: 1257, col: 5, offset: 43484},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1257, col: 5, offset: 43484},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1257, col: 5, offset: 43484},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1257, col: 16, offset: 43495},
								expr: &ruleRefExpr{
									pos:  position{line: 1257, col: 17, offset: 43496},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 5, offset: 43522},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1258, col: 11, offset: 43528},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1258, col: 11, offset: 43528},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1259, col: 11, offset: 43563},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 11, offset: 43582},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1261, col: 11, offset: 43603},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1262, col: 11, offset: 43624},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1263, col: 11, offset: 43648},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1267, col: 1, offset: 43750},
			expr: &actionExpr{
				pos: position{line: 1268, col: 5, offset: 43799},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1268, col: 6, offset: 43800},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1268, col: 6, offset: 43800},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1269, col: 7, offset: 43904},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1269, col: 7, offset: 43904},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1269, col: 11, offset: 43908},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1273, col: 1, offset: 44086},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 5, offset: 44115},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1274, col: 5, offset: 44115},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1274, col: 5, offset: 44115},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1274, col: 5, offset: 44115},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 18, offset: 44128},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1274, col: 40, offset: 44150},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1274, col: 45, offset: 44155},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 55, offset: 44165},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1274, col: 89, offset: 44199},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1276, col: 9, offset: 44356},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1276, col: 9, offset: 44356},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1276, col: 9, offset: 44356},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 22, offset: 44369},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 44, offset: 44391},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 49, offset: 44396},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 59, offset: 44406},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 93, offset: 44440},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1279, col: 9, offset: 44640},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1279, col: 9, offset: 44640},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1279, col: 9, offset: 44640},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 22, offset: 44653},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 44, offset: 44675},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1279, col: 48, offset: 44679},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 58, offset: 44689},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 92, offset: 44723},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1286, col: 1, offset: 44944},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 15, offset: 44958},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1286, col: 15, offset: 44958},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 39, offset: 44982},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1288, col: 1, offset: 45005},
			expr: &actionExpr{
				pos: position{line: 1288, col: 26, offset: 45030},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 26, offset: 45030},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1288, col: 26, offset: 45030},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 31, offset: 45035},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1288, col: 41, offset: 45045},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1288, col: 72, offset: 45076},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1292, col: 1, offset: 45222},
			expr: &seqExpr{
				pos: position{line: 1292, col: 34, offset: 45255},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1292, col: 34, offset: 45255},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1292, col: 63, offset: 45284},
						expr: &seqExpr{
							pos: position{line: 1292, col: 64, offset: 45285},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1292, col: 64, offset: 45285},
									expr: &litMatcher{
										pos:        position{line: 1292, col: 66, offset: 45287},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1292, col: 73, offset: 45294},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1292, col: 73, offset: 45294},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1292, col: 81, offset: 45302},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1294, col: 1, offset: 45369},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 33, offset: 45401},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 33, offset: 45401},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1295, col: 7, offset: 45412},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1295, col: 7, offset: 45412},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1295, col: 15, offset: 45420},
								expr: &ruleRefExpr{
									pos:  position{line: 1295, col: 16, offset: 45421},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 7, offset: 45435},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 7, offset: 45463},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 7, offset: 45486},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 7, offset: 45504},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 7, offset: 45523},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 7, offset: 45554},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 7, offset: 45579},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1304, col: 1, offset: 45619},
			expr: &actionExpr{
				pos: position{line: 1305, col: 5, offset: 45651},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1305, col: 5, offset: 45651},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1305, col: 5, offset: 45651},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1305, col: 16, offset: 45662},
								expr: &ruleRefExpr{
									pos:  position{line: 1305, col: 17, offset: 45663},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 5, offset: 45689},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1306, col: 11, offset: 45695},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1306, col: 11, offset: 45695},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1307, col: 11, offset: 45714},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1308, col: 11, offset: 45735},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 11, offset: 45759},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1310, col: 11, offset: 45791},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1311, col: 11, offset: 45815},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1315, col: 1, offset: 45917},
			expr: &choiceExpr{
				pos: position{line: 1316, col: 5, offset: 45963},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1316, col: 5, offset: 45963},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1317, col: 7, offset: 46062},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1317, col: 7, offset: 46062},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1317, col: 7, offset: 46062},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1317, col: 12, offset: 46067},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1321, col: 1, offset: 46240},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 26, offset: 46265},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1321, col: 26, offset: 46265},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1321, col: 26, offset: 46265},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1321, col: 27, offset: 46266},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1321, col: 27, offset: 46266},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1321, col: 31, offset: 46270},
											expr: &litMatcher{
												pos:        position{line: 1321, col: 32, offset: 46271},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1321, col: 37, offset: 46276},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1321, col: 47, offset: 46286},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 78, offset: 46317},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1323, col: 9, offset: 46519},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1323, col: 9, offset: 46519},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1323, col: 9, offset: 46519},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1323, col: 13, offset: 46523},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1323, col: 23, offset: 46533},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1323, col: 23, offset: 46533},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1323, col: 27, offset: 46537},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1323, col: 58, offset: 46568},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1327, col: 1, offset: 46789},
			expr: &seqExpr{
				pos: position{line: 1327, col: 34, offset: 46822},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1327, col: 34, offset: 46822},
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 35, offset: 46823},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1327, col: 41, offset: 46829},
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 41, offset: 46829},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1329, col: 1, offset: 46860},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 33, offset: 46892},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1329, col: 33, offset: 46892},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1330, col: 7, offset: 46903},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1330, col: 7, offset: 46903},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1330, col: 15, offset: 46911},
								expr: &ruleRefExpr{
									pos:  position{line: 1330, col: 16, offset: 46912},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 7, offset: 46926},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 7, offset: 46954},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 7, offset: 46977},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 7, offset: 46995},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1335, col: 7, offset: 47014},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1335, col: 7, offset: 47014},
								expr: &ruleRefExpr{
									pos:  position{line: 1335, col: 7, offset: 47014},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1335, col: 14, offset: 47021},
								expr: &seqExpr{
									pos: position{line: 1335, col: 15, offset: 47022},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1335, col: 15, offset: 47022},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1335, col: 19, offset: 47026},
											expr: &litMatcher{
												pos:        position{line: 1335, col: 20, offset: 47027},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 7, offset: 47039},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 7, offset: 47070},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 7, offset: 47095},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1340, col: 1, offset: 47135},
			expr: &actionExpr{
				pos: position{line: 1341, col: 5, offset: 47167},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1341, col: 5, offset: 47167},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1341, col: 5, offset: 47167},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1341, col: 16, offset: 47178},
								expr: &ruleRefExpr{
									pos:  position{line: 1341, col: 17, offset: 47179},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1342, col: 5, offset: 47205},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1342, col: 11, offset: 47211},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1342, col: 11, offset: 47211},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1343, col: 11, offset: 47243},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1344, col: 11, offset: 47262},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 11, offset: 47283},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1346, col: 11, offset: 47307},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1347, col: 11, offset: 47331},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1350, col: 1, offset: 47432},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 5, offset: 47478},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1351, col: 5, offset: 47478},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1352, col: 7, offset: 47575},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1352, col: 7, offset: 47575},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1352, col: 7, offset: 47575},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1352, col: 11, offset: 47579},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1356, col: 1, offset: 47750},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 5, offset: 47775},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1357, col: 5, offset: 47775},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1357, col: 5, offset: 47775},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1357, col: 5, offset: 47775},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 18, offset: 47788},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 40, offset: 47810},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 45, offset: 47815},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 55, offset: 47825},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 86, offset: 47856},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1359, col: 9, offset: 48013},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1359, col: 9, offset: 48013},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1359, col: 9, offset: 48013},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1359, col: 22, offset: 48026},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1359, col: 44, offset: 48048},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1359, col: 49, offset: 48053},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1359, col: 59, offset: 48063},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1359, col: 90, offset: 48094},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1362, col: 9, offset: 48294},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1362, col: 9, offset: 48294},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1362, col: 9, offset: 48294},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1362, col: 22, offset: 48307},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1362, col: 44, offset: 48329},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1362, col: 48, offset: 48333},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1362, col: 58, offset: 48343},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1362, col: 89, offset: 48374},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1369, col: 1, offset: 48602},
			expr: &actionExpr{
				pos: position{line: 1369, col: 18, offset: 48619},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 18, offset: 48619},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1369, col: 18, offset: 48619},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1369, col: 22, offset: 48623},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1369, col: 31, offset: 48632},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1369, col: 53, offset: 48654},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1373, col: 1, offset: 48762},
			expr: &choiceExpr{
				pos: position{line: 1373, col: 25, offset: 48786},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1373, col: 25, offset: 48786},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 38, offset: 48799},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1375, col: 1, offset: 48818},
			expr: &actionExpr{
				pos: position{line: 1375, col: 21, offset: 48838},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1375, col: 21, offset: 48838},
					expr: &charClassMatcher{
						pos:        position{line: 1375, col: 21, offset: 48838},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1379, col: 1, offset: 48923},
			expr: &actionExpr{
				pos: position{line: 1379, col: 25, offset: 48947},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 25, offset: 48947},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1379, col: 25, offset: 48947},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1379, col: 38, offset: 48960},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1379, col: 60, offset: 48982},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1379, col: 64, offset: 48986},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1379, col: 73, offset: 48995},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1379, col: 95, offset: 49017},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1386, col: 1, offset: 49235},
			expr: &actionExpr{
				pos: position{line: 1386, col: 20, offset: 49254},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 20, offset: 49254},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1386, col: 20, offset: 49254},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1386, col: 24, offset: 49258},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 33, offset: 49267},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 57, offset: 49291},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1390, col: 1, offset: 49401},
			expr: &choiceExpr{
				pos: position{line: 1390, col: 27, offset: 49427},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1390, col: 27, offset: 49427},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1390, col: 40, offset: 49440},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1392, col: 1, offset: 49461},
			expr: &actionExpr{
				pos: position{line: 1392, col: 23, offset: 49483},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1392, col: 23, offset: 49483},
					expr: &charClassMatcher{
						pos:        position{line: 1392, col: 23, offset: 49483},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1396, col: 1, offset: 49568},
			expr: &actionExpr{
				pos: position{line: 1396, col: 27, offset: 49594},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1396, col: 27, offset: 49594},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1396, col: 27, offset: 49594},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1396, col: 40, offset: 49607},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1396, col: 62, offset: 49629},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1396, col: 66, offset: 49633},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1396, col: 75, offset: 49642},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1396, col: 99, offset: 49666},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1404, col: 1, offset: 49978},
			expr: &choiceExpr{
				pos: position{line: 1404, col: 17, offset: 49994},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1404, col: 17, offset: 49994},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 38, offset: 50015},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1406, col: 1, offset: 50035},
			expr: &actionExpr{
				pos: position{line: 1406, col: 23, offset: 50057},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1406, col: 23, offset: 50057},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1406, col: 23, offset: 50057},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1406, col: 46, offset: 50080},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1406, col: 55, offset: 50089},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1406, col: 82, offset: 50116},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1410, col: 1, offset: 50228},
			expr: &actionExpr{
				pos: position{line: 1410, col: 31, offset: 50258},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1410, col: 31, offset: 50258},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1410, col: 41, offset: 50268},
						expr: &ruleRefExpr{
							pos:  position{line: 1410, col: 41, offset: 50268},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1414, col: 1, offset: 50354},
			expr: &seqExpr{
				pos: position{line: 1414, col: 27, offset: 50380},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1414, col: 27, offset: 50380},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1414, col: 32, offset: 50385},
						expr: &charClassMatcher{
							pos:        position{line: 1414, col: 33, offset: 50386},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1416, col: 1, offset: 50397},
			expr: &litMatcher{
				pos:        position{line: 1416, col: 25, offset: 50421},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1419, col: 1, offset: 50509},
			expr: &actionExpr{
				pos: position{line: 1420, col: 5, offset: 50543},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1420, col: 5, offset: 50543},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1421, col: 9, offset: 50561},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1421, col: 9, offset: 50561},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1421, col: 9, offset: 50561},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1421, col: 19, offset: 50571},
										expr: &ruleRefExpr{
											pos:  position{line: 1421, col: 20, offset: 50572},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1422, col: 11, offset: 50628},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1422, col: 11, offset: 50628},
										expr: &ruleRefExpr{
											pos:  position{line: 1422, col: 11, offset: 50628},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1422, col: 18, offset: 50635},
										expr: &ruleRefExpr{
											pos:  position{line: 1422, col: 19, offset: 50636},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1423, col: 12, offset: 50668},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1423, col: 12, offset: 50668},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1423, col: 12, offset: 50668},
											expr: &litMatcher{
												pos:        position{line: 1423, col: 13, offset: 50669},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1423, col: 17, offset: 50673},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1423, col: 26, offset: 50682},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1424, col: 11, offset: 50754},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1425, col: 11, offset: 50795},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1426, col: 11, offset: 50824},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1431, col: 1, offset: 50903},
			expr: &actionExpr{
				pos: position{line: 1432, col: 5, offset: 50941},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1432, col: 5, offset: 50941},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1432, col: 5, offset: 50941},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1432, col: 16, offset: 50952},
								expr: &ruleRefExpr{
									pos:  position{line: 1432, col: 17, offset: 50953},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 5, offset: 50979},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1433, col: 11, offset: 50985},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1433, col: 11, offset: 50985},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1434, col: 11, offset: 51004},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1435, col: 12, offset: 51026},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1435, col: 12, offset: 51026},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1435, col: 12, offset: 51026},
													expr: &litMatcher{
														pos:        position{line: 1435, col: 13, offset: 51027},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1435, col: 18, offset: 51032},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1435, col: 27, offset: 51041},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1436, col: 11, offset: 51090},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1437, col: 11, offset: 51114},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1438, col: 11, offset: 51140},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1442, col: 1, offset: 51237},
			expr: &choiceExpr{
				pos: position{line: 1442, col: 41, offset: 51277},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1442, col: 41, offset: 51277},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1442, col: 55, offset: 51291},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1442, col: 55, offset: 51291},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1442, col: 55, offset: 51291},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1442, col: 59, offset: 51295},
									expr: &litMatcher{
										pos:        position{line: 1442, col: 60, offset: 51296},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1446, col: 1, offset: 51368},
			expr: &actionExpr{
				pos: position{line: 1446, col: 23, offset: 51390},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 23, offset: 51390},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1446, col: 23, offset: 51390},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 46, offset: 51413},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 55, offset: 51422},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1446, col: 82, offset: 51449},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1450, col: 1, offset: 51561},
			expr: &actionExpr{
				pos: position{line: 1450, col: 31, offset: 51591},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1450, col: 31, offset: 51591},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1450, col: 41, offset: 51601},
						expr: &ruleRefExpr{
							pos:  position{line: 1450, col: 41, offset: 51601},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1455, col: 1, offset: 51769},
			expr: &actionExpr{
				pos: position{line: 1455, col: 30, offset: 51798},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1455, col: 30, offset: 51798},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1456, col: 5, offset: 51812},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1456, col: 5, offset: 51812},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1456, col: 5, offset: 51812},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1456, col: 15, offset: 51822},
										expr: &ruleRefExpr{
											pos:  position{line: 1456, col: 16, offset: 51823},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1457, col: 7, offset: 51875},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1457, col: 7, offset: 51875},
										expr: &ruleRefExpr{
											pos:  position{line: 1457, col: 7, offset: 51875},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1457, col: 14, offset: 51882},
										expr: &ruleRefExpr{
											pos:  position{line: 1457, col: 15, offset: 51883},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1458, col: 7, offset: 51910},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1459, col: 7, offset: 51947},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1460, col: 7, offset: 51972},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1464, col: 1, offset: 52046},
			expr: &actionExpr{
				pos: position{line: 1465, col: 5, offset: 52084},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1465, col: 5, offset: 52084},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1465, col: 5, offset: 52084},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1465, col: 16, offset: 52095},
								expr: &ruleRefExpr{
									pos:  position{line: 1465, col: 17, offset: 52096},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1466, col: 5, offset: 52122},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1466, col: 11, offset: 52128},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1466, col: 11, offset: 52128},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1467, col: 11, offset: 52147},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1468, col: 12, offset: 52169},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1468, col: 12, offset: 52169},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1468, col: 12, offset: 52169},
													expr: &litMatcher{
														pos:        position{line: 1468, col: 13, offset: 52170},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1468, col: 19, offset: 52176},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1468, col: 28, offset: 52185},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1469, col: 11, offset: 52234},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1470, col: 11, offset: 52258},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1471, col: 11, offset: 52284},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1475, col: 1, offset: 52381},
			expr: &seqExpr{
				pos: position{line: 1475, col: 27, offset: 52407},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1475, col: 27, offset: 52407},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1475, col: 33, offset: 52413},
						expr: &charClassMatcher{
							pos:        position{line: 1475, col: 34, offset: 52414},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1477, col: 1, offset: 52425},
			expr: &litMatcher{
				pos:        position{line: 1477, col: 25, offset: 52449},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1479, col: 1, offset: 52456},
			expr: &actionExpr{
				pos: position{line: 1479, col: 41, offset: 52496},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1479, col: 42, offset: 52497},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1479, col: 42, offset: 52497},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1479, col: 56, offset: 52511},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1479, col: 56, offset: 52511},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1479, col: 60, offset: 52515},
									expr: &litMatcher{
										pos:        position{line: 1479, col: 61, offset: 52516},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1488, col: 1, offset: 52782},
			expr: &actionExpr{
				pos: position{line: 1489, col: 5, offset: 52798},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 5, offset: 52798},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1489, col: 5, offset: 52798},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1489, col: 12, offset: 52805},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1489, col: 12, offset: 52805},
									expr: &litMatcher{
										pos:        position{line: 1489, col: 13, offset: 52806},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1493, col: 5, offset: 52914},
							run: (*parser).callonSection7,
						},
						&stateCodeExpr{
							pos: position{line: 1497, col: 5, offset: 53066},
							run: (*parser).callonSection8,
						},
						&oneOrMoreExpr{
							pos: position{line: 1501, col: 5, offset: 53195},
							expr: &ruleRefExpr{
								pos:  position{line: 1501, col: 5, offset: 53195},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1501, col: 12, offset: 53202},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1501, col: 19, offset: 53209},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 1501, col: 41, offset: 53231},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1501, col: 45, offset: 53235},
								expr: &ruleRefExpr{
									pos:  position{line: 1501, col: 45, offset: 53235},
									name: "InlineElementID",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElements",
			pos:  position{line: 1506, col: 1, offset: 53393},
			expr: &actionExpr{
				pos: position{line: 1506, col: 25, offset: 53417},
				run: (*parser).callonSectionTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 1506, col: 25, offset: 53417},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1506, col: 34, offset: 53426},
						expr: &seqExpr{
							pos: position{line: 1506, col: 35, offset: 53427},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1506, col: 35, offset: 53427},
									expr: &ruleRefExpr{
										pos:  position{line: 1506, col: 36, offset: 53428},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1506, col: 44, offset: 53436},
									expr: &ruleRefExpr{
										pos:  position{line: 1506, col: 45, offset: 53437},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1506, col: 61, offset: 53453},
									name: "SectionTitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElement",
			pos:  position{line: 1510, col: 1, offset: 53589},
			expr: &ruleRefExpr{
				pos:  position{line: 1510, col: 24, offset: 53612},
				name: "NormalGroup",
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1536, col: 1, offset: 54598},
			expr: &actionExpr{
				pos: position{line: 1536, col: 16, offset: 54613},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 16, offset: 54613},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1536, col: 16, offset: 54613},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1536, col: 25, offset: 54622},
								expr: &ruleRefExpr{
									pos:  position{line: 1536, col: 26, offset: 54623},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1536, col: 47, offset: 54644},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1540, col: 1, offset: 54700},
			expr: &actionExpr{
				pos: position{line: 1540, col: 23, offset: 54722},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 23, offset: 54722},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1540, col: 23, offset: 54722},
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 24, offset: 54723},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1541, col: 5, offset: 54731},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1542, col: 9, offset: 54749},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1542, col: 9, offset: 54749},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1543, col: 11, offset: 54770},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1544, col: 11, offset: 54786},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 1545, col: 11, offset: 54804},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1546, col: 11, offset: 54832},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1547, col: 11, offset: 54859},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1548, col: 11, offset: 54875},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1549, col: 11, offset: 54907},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1550, col: 11, offset: 54929},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1551, col: 11, offset: 54951},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1552, col: 11, offset: 54977},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1553, col: 11, offset: 55094},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1558, col: 1, offset: 55192},
			expr: &actionExpr{
				pos: position{line: 1558, col: 16, offset: 55207},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1558, col: 16, offset: 55207},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1558, col: 16, offset: 55207},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1558, col: 25, offset: 55216},
								expr: &choiceExpr{
									pos: position{line: 1559, col: 5, offset: 55222},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1559, col: 5, offset: 55222},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1560, col: 7, offset: 55239},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1561, col: 7, offset: 55263},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1562, col: 7, offset: 55286},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1563, col: 7, offset: 55298},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1564, col: 7, offset: 55326},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1565, col: 7, offset: 55439},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1566, col: 7, offset: 55457},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1566, col: 17, offset: 55467},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1571, col: 1, offset: 55590},
			expr: &actionExpr{
				pos: position{line: 1571, col: 20, offset: 55609},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1571, col: 20, offset: 55609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1571, col: 20, offset: 55609},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1571, col: 29, offset: 55618},
								expr: &choiceExpr{
									pos: position{line: 1572, col: 5, offset: 55624},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1572, col: 5, offset: 55624},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1573, col: 7, offset: 55641},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1574, col: 7, offset: 55665},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1575, col: 7, offset: 55693},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1576, col: 7, offset: 55806},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1577, col: 7, offset: 55820},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1577, col: 17, offset: 55830},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1582, col: 1, offset: 55926},
			expr: &actionExpr{
				pos: position{line: 1582, col: 16, offset: 55941},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1582, col: 16, offset: 55941},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1582, col: 16, offset: 55941},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1582, col: 25, offset: 55950},
								expr: &choiceExpr{
									pos: position{line: 1583, col: 5, offset: 55956},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1583, col: 5, offset: 55956},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1584, col: 7, offset: 55973},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1585, col: 7, offset: 55991},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1586, col: 7, offset: 56104},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1587, col: 7, offset: 56118},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1587, col: 17, offset: 56128},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1592, col: 1, offset: 56224},
			expr: &actionExpr{
				pos: position{line: 1592, col: 16, offset: 56239},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1592, col: 16, offset: 56239},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1592, col: 16, offset: 56239},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1592, col: 25, offset: 56248},
								expr: &choiceExpr{
									pos: position{line: 1593, col: 5, offset: 56254},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1593, col: 5, offset: 56254},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1594, col: 7, offset: 56271},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1595, col: 7, offset: 56283},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1596, col: 7, offset: 56396},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1597, col: 7, offset: 56410},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1597, col: 17, offset: 56420},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1602, col: 1, offset: 56507},
			expr: &actionExpr{
				pos: position{line: 1602, col: 14, offset: 56520},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1602, col: 14, offset: 56520},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1602, col: 14, offset: 56520},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1602, col: 22, offset: 56528},
								expr: &anyMatcher{
									line: 1602, col: 23, offset: 56529,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1602, col: 27, offset: 56533},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1608, col: 1, offset: 56684},
			expr: &actionExpr{
				pos: position{line: 1608, col: 22, offset: 56705},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1608, col: 22, offset: 56705},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1608, col: 22, offset: 56705},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1608, col: 31, offset: 56714},
								expr: &choiceExpr{
									pos: position{line: 1609, col: 5, offset: 56720},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1609, col: 5, offset: 56720},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1610, col: 7, offset: 56737},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1611, col: 7, offset: 56755},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1612, col: 7, offset: 56868},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1613, col: 7, offset: 56882},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1613, col: 17, offset: 56892},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1618, col: 1, offset: 57019},
			expr: &actionExpr{
				pos: position{line: 1618, col: 27, offset: 57045},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1618, col: 27, offset: 57045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1618, col: 27, offset: 57045},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1618, col: 36, offset: 57054},
								expr: &choiceExpr{
									pos: position{line: 1619, col: 5, offset: 57060},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1619, col: 5, offset: 57060},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1620, col: 7, offset: 57077},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1621, col: 7, offset: 57100},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1622, col: 7, offset: 57213},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1623, col: 7, offset: 57227},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1623, col: 17, offset: 57237},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1627, col: 1, offset: 57293},
			expr: &actionExpr{
				pos: position{line: 1629, col: 5, offset: 57375},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1629, col: 5, offset: 57375},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1629, col: 5, offset: 57375},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1632, col: 5, offset: 57435},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1633, col: 9, offset: 57453},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1633, col: 9, offset: 57453},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1634, col: 11, offset: 57474},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1635, col: 11, offset: 57497},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1636, col: 11, offset: 57513},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1637, col: 11, offset: 57542},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1638, col: 11, offset: 57568},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1639, col: 11, offset: 57594},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1640, col: 11, offset: 57621},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1641, col: 11, offset: 57647},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1642, col: 11, offset: 57676},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1646, col: 1, offset: 57732},
			expr: &actionExpr{
				pos: position{line: 1648, col: 5, offset: 57820},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1648, col: 5, offset: 57820},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1648, col: 5, offset: 57820},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 5, offset: 57892},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1652, col: 9, offset: 57910},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1652, col: 9, offset: 57910},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1652, col: 33, offset: 57934},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1652, col: 57, offset: 57958},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1657, col: 1, offset: 58018},
			expr: &actionExpr{
				pos: position{line: 1659, col: 5, offset: 58104},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1659, col: 5, offset: 58104},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1659, col: 5, offset: 58104},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 5, offset: 58174},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1663, col: 9, offset: 58192},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1668, col: 1, offset: 58245},
			expr: &actionExpr{
				pos: position{line: 1670, col: 5, offset: 58321},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1670, col: 5, offset: 58321},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1670, col: 5, offset: 58321},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1673, col: 5, offset: 58381},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1674, col: 9, offset: 58399},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1674, col: 9, offset: 58399},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1675, col: 11, offset: 58421},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1679, col: 1, offset: 58480},
			expr: &actionExpr{
				pos: position{line: 1681, col: 5, offset: 58562},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1681, col: 5, offset: 58562},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1681, col: 5, offset: 58562},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1684, col: 5, offset: 58628},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1685, col: 9, offset: 58646},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1690, col: 1, offset: 58696},
			expr: &actionExpr{
				pos: position{line: 1692, col: 5, offset: 58783},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1692, col: 5, offset: 58783},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1692, col: 5, offset: 58783},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1695, col: 5, offset: 58854},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1697, col: 9, offset: 58952},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1697, col: 9, offset: 58952},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1697, col: 9, offset: 58952},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1700, col: 11, offset: 59056},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1700, col: 12, offset: 59057},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1700, col: 12, offset: 59057},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1700, col: 18, offset: 59063},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1700, col: 24, offset: 59069},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1710, col: 1, offset: 59298},
			expr: &choiceExpr{
				pos: position{line: 1710, col: 11, offset: 59308},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1710, col: 11, offset: 59308},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 24, offset: 59321},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 36, offset: 59333},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 48, offset: 59345},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 61, offset: 59358},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 72, offset: 59369},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1712, col: 1, offset: 59388},
			expr: &actionExpr{
				pos: position{line: 1712, col: 15, offset: 59402},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1712, col: 15, offset: 59402},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1716, col: 1, offset: 59464},
			expr: &litMatcher{
				pos:        position{line: 1716, col: 18, offset: 59481},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1718, col: 1, offset: 59504},
			expr: &actionExpr{
				pos: position{line: 1718, col: 14, offset: 59517},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1718, col: 14, offset: 59517},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1722, col: 1, offset: 59580},
			expr: &actionExpr{
				pos: position{line: 1722, col: 14, offset: 59593},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1722, col: 14, offset: 59593},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1726, col: 1, offset: 59657},
			expr: &actionExpr{
				pos: position{line: 1726, col: 15, offset: 59671},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1726, col: 15, offset: 59671},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1730, col: 1, offset: 59734},
			expr: &actionExpr{
				pos: position{line: 1730, col: 13, offset: 59746},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1730, col: 13, offset: 59746},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1738, col: 1, offset: 60031},
			expr: &actionExpr{
				pos: position{line: 1738, col: 22, offset: 60052},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1738, col: 22, offset: 60052},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1738, col: 22, offset: 60052},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1738, col: 31, offset: 60061},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1738, col: 35, offset: 60065},
							expr: &charClassMatcher{
								pos:        position{line: 1738, col: 36, offset: 60066},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1745, col: 1, offset: 60344},
			expr: &actionExpr{
				pos: position{line: 1745, col: 18, offset: 60361},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1745, col: 18, offset: 60361},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1745, col: 19, offset: 60362},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1745, col: 19, offset: 60362},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1745, col: 27, offset: 60370},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1745, col: 37, offset: 60380},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1745, col: 45, offset: 60388},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1745, col: 55, offset: 60398},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1745, col: 63, offset: 60406},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1745, col: 72, offset: 60415},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1752, col: 1, offset: 60574},
			expr: &actionExpr{
				pos: position{line: 1753, col: 5, offset: 60597},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1753, col: 5, offset: 60597},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1753, col: 5, offset: 60597},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1753, col: 11, offset: 60603},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1754, col: 5, offset: 60623},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1758, col: 5, offset: 60763},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1759, col: 5, offset: 60773},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1759, col: 12, offset: 60780},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1760, col: 5, offset: 60801},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1760, col: 23, offset: 60819},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1764, col: 1, offset: 60950},
			expr: &actionExpr{
				pos: position{line: 1765, col: 5, offset: 60974},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1765, col: 5, offset: 60974},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1765, col: 5, offset: 60974},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1765, col: 11, offset: 60980},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1766, col: 5, offset: 61000},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1770, col: 5, offset: 61140},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1771, col: 5, offset: 61149},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1771, col: 12, offset: 61156},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1772, col: 5, offset: 61177},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1772, col: 23, offset: 61195},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1776, col: 1, offset: 61327},
			expr: &actionExpr{
				pos: position{line: 1776, col: 18, offset: 61344},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1776, col: 19, offset: 61345},
					expr: &charClassMatcher{
						pos:        position{line: 1776, col: 19, offset: 61345},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1780, col: 1, offset: 61402},
			expr: &actionExpr{
				pos: position{line: 1780, col: 19, offset: 61420},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1780, col: 19, offset: 61420},
					expr: &charClassMatcher{
						pos:        position{line: 1780, col: 19, offset: 61420},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1787, col: 1, offset: 61582},
			expr: &charClassMatcher{
				pos:        position{line: 1787, col: 13, offset: 61594},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1789, col: 1, offset: 61604},
			expr: &choiceExpr{
				pos: position{line: 1789, col: 16, offset: 61619},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1789, col: 16, offset: 61619},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1789, col: 22, offset: 61625},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1789, col: 28, offset: 61631},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1789, col: 34, offset: 61637},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1789, col: 40, offset: 61643},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1789, col: 46, offset: 61649},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1791, col: 1, offset: 61655},
			expr: &actionExpr{
				pos: position{line: 1791, col: 14, offset: 61668},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1791, col: 14, offset: 61668},
					expr: &charClassMatcher{
						pos:        position{line: 1791, col: 14, offset: 61668},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1795, col: 1, offset: 61722},
			expr: &choiceExpr{
				pos: position{line: 1799, col: 5, offset: 62049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1799, col: 5, offset: 62049},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1799, col: 5, offset: 62049},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1799, col: 5, offset: 62049},
									expr: &charClassMatcher{
										pos:        position{line: 1799, col: 5, offset: 62049},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1799, col: 15, offset: 62059},
									expr: &choiceExpr{
										pos: position{line: 1799, col: 17, offset: 62061},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1799, col: 17, offset: 62061},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1799, col: 30, offset: 62074},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1801, col: 9, offset: 62143},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1801, col: 9, offset: 62143},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1801, col: 9, offset: 62143},
									expr: &charClassMatcher{
										pos:        position{line: 1801, col: 9, offset: 62143},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1801, col: 19, offset: 62153},
									expr: &seqExpr{
										pos: position{line: 1801, col: 20, offset: 62154},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1801, col: 20, offset: 62154},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1801, col: 27, offset: 62161},
												expr: &charClassMatcher{
													pos:        position{line: 1801, col: 27, offset: 62161},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1806, col: 1, offset: 62253},
			expr: &choiceExpr{
				pos: position{line: 1810, col: 5, offset: 62446},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1810, col: 5, offset: 62446},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1810, col: 5, offset: 62446},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1810, col: 5, offset: 62446},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 1810, col: 14, offset: 62455},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 1810, col: 14, offset: 62455},
											expr: &charClassMatcher{
												pos:        position{line: 1810, col: 14, offset: 62455},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1813, col: 5, offset: 62536},
									expr: &choiceExpr{
										pos: position{line: 1813, col: 7, offset: 62538},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1813, col: 7, offset: 62538},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1813, col: 17, offset: 62548},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 1813, col: 47, offset: 62578},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1815, col: 9, offset: 62621},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1818, col: 1, offset: 62721},
			expr: &actionExpr{
				pos: position{line: 1818, col: 12, offset: 62732},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1818, col: 12, offset: 62732},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1822, col: 1, offset: 62805},
			expr: &actionExpr{
				pos: position{line: 1822, col: 17, offset: 62821},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1822, col: 17, offset: 62821},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1822, col: 22, offset: 62826},
						expr: &choiceExpr{
							pos: position{line: 1822, col: 23, offset: 62827},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1822, col: 23, offset: 62827},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 1822, col: 34, offset: 62838},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1826, col: 1, offset: 62927},
			expr: &actionExpr{
				pos: position{line: 1826, col: 13, offset: 62939},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1826, col: 13, offset: 62939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1826, col: 13, offset: 62939},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1826, col: 20, offset: 62946},
								expr: &ruleRefExpr{
									pos:  position{line: 1826, col: 21, offset: 62947},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1826, col: 30, offset: 62956},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1826, col: 35, offset: 62961},
								expr: &choiceExpr{
									pos: position{line: 1826, col: 36, offset: 62962},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1826, col: 36, offset: 62962},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1826, col: 47, offset: 62973},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1830, col: 1, offset: 63066},
			expr: &actionExpr{
				pos: position{line: 1830, col: 23, offset: 63088},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1830, col: 23, offset: 63088},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1830, col: 23, offset: 63088},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1830, col: 31, offset: 63096},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1830, col: 39, offset: 63104},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1830, col: 44, offset: 63109},
								expr: &choiceExpr{
									pos: position{line: 1830, col: 45, offset: 63110},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1830, col: 45, offset: 63110},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1830, col: 56, offset: 63121},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 1834, col: 1, offset: 63214},
			expr: &actionExpr{
				pos: position{line: 1834, col: 13, offset: 63226},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 1834, col: 13, offset: 63226},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1834, col: 22, offset: 63235},
						expr: &choiceExpr{
							pos: position{line: 1835, col: 5, offset: 63241},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1835, col: 5, offset: 63241},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 1835, col: 5, offset: 63241},
										expr: &charClassMatcher{
											pos:        position{line: 1835, col: 6, offset: 63242},
											val:        "[^\\r\\n[\\]\\uFFFD{ ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1838, col: 7, offset: 63378},
									name: "AttributeSubstitution",
								},
								&actionExpr{
									pos: position{line: 1839, col: 7, offset: 63407},
									run: (*parser).callonFilename9,
									expr: &litMatcher{
										pos:        position{line: 1839, col: 7, offset: 63407},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 1845, col: 1, offset: 63545},
			expr: &choiceExpr{
				pos: position{line: 1845, col: 11, offset: 63555},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1845, col: 11, offset: 63555},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1845, col: 23, offset: 63567},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1845, col: 36, offset: 63580},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1845, col: 47, offset: 63591},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1845, col: 58, offset: 63602},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 1847, col: 1, offset: 63613},
			expr: &actionExpr{
				pos: position{line: 1847, col: 7, offset: 63619},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1847, col: 7, offset: 63619},
					expr: &charClassMatcher{
						pos:        position{line: 1847, col: 7, offset: 63619},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 1851, col: 1, offset: 63752},
			expr: &actionExpr{
				pos: position{line: 1851, col: 10, offset: 63761},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 1851, col: 10, offset: 63761},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1855, col: 1, offset: 63811},
			expr: &actionExpr{
				pos: position{line: 1855, col: 11, offset: 63821},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 1855, col: 11, offset: 63821},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1855, col: 11, offset: 63821},
							expr: &litMatcher{
								pos:        position{line: 1855, col: 11, offset: 63821},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1855, col: 16, offset: 63826},
							expr: &ruleRefExpr{
								pos:  position{line: 1855, col: 16, offset: 63826},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1859, col: 1, offset: 63886},
			expr: &choiceExpr{
				pos: position{line: 1859, col: 10, offset: 63895},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1859, col: 10, offset: 63895},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1859, col: 16, offset: 63901},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1859, col: 16, offset: 63901},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1863, col: 1, offset: 63950},
			expr: &choiceExpr{
				pos: position{line: 1863, col: 12, offset: 63961},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1863, col: 12, offset: 63961},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1863, col: 19, offset: 63968},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 1863, col: 28, offset: 63977},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 1863, col: 28, offset: 63977},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1867, col: 1, offset: 64061},
			expr: &notExpr{
				pos: position{line: 1867, col: 8, offset: 64068},
				expr: &anyMatcher{
					line: 1867, col: 9, offset: 64069,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1869, col: 1, offset: 64072},
			expr: &choiceExpr{
				pos: position{line: 1869, col: 8, offset: 64079},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1869, col: 8, offset: 64079},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 1869, col: 14, offset: 64085},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onAttributeDeclaration3() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonAttributeDeclaration3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration3()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes13(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue14()
}

func (c *current) onSingleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue17()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue14()
}

func (c *current) onDoubleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue17()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue10()
}

func (c *current) onUnquotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue15()
}

func (c *current) onUnquotedAttributeValue17(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue17(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onItalicWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonItalicWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicWord1()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection8(level interface{}) error {
	// for section, we always enable the 'normal' substitutions
	return c.setSubstitutionPhase("normal")

}

func (p *parser) callonSection8() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection8(stack["level"])
}

func (c *current) onSection1(level, title, id interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"], stack["id"])
}

func (c *current) onSectionTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonSectionTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElements1(stack["elements"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(content interface{}) (interface{}, error) {
	s, _ := types.NewStringElement(string(c.text))
	return []interface{}{s}, nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["content"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename9()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

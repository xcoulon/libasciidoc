// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DefaultDocumentFragmentElement",
			pos:  position{line: 22, col: 1, offset: 391},
			expr: &choiceExpr{
				pos: position{line: 23, col: 5, offset: 430},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 23, col: 5, offset: 430},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 446},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 460},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 477},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 499},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 520},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 7, offset: 542},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 7, offset: 599},
						name: "ListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 31, col: 7, offset: 617},
						name: "ListElementContinuation",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 7, offset: 647},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 33, col: 7, offset: 671},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 34, col: 7, offset: 698},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 35, col: 7, offset: 719},
						name: "Admonition",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinParagraph",
			pos:  position{line: 39, col: 1, offset: 922},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 969},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 40, col: 5, offset: 969},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 41, col: 7, offset: 985},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinVerbatimBlock",
			pos:  position{line: 45, col: 1, offset: 1204},
			expr: &actionExpr{
				pos: position{line: 46, col: 5, offset: 1255},
				run: (*parser).callonDocumentFragmentElementWithinVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 46, col: 5, offset: 1255},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 46, col: 5, offset: 1255},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 16, offset: 1266},
								name: "BlockDelimiter",
							},
						},
						&andCodeExpr{
							pos: position{line: 47, col: 5, offset: 1286},
							run: (*parser).callonDocumentFragmentElementWithinVerbatimBlock5,
						},
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinNormalBlock",
			pos:  position{line: 56, col: 1, offset: 1690},
			expr: &choiceExpr{
				pos: position{line: 57, col: 5, offset: 1739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 57, col: 6, offset: 1740},
						run: (*parser).callonDocumentFragmentElementWithinNormalBlock2,
						expr: &seqExpr{
							pos: position{line: 57, col: 6, offset: 1740},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 57, col: 6, offset: 1740},
									label: "delimiter",
									expr: &ruleRefExpr{
										pos:  position{line: 57, col: 16, offset: 1750},
										name: "BlockDelimiter",
									},
								},
								&andCodeExpr{
									pos: position{line: 58, col: 5, offset: 1769},
									run: (*parser).callonDocumentFragmentElementWithinNormalBlock6,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 7, offset: 1972},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 7, offset: 1988},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 7, offset: 2005},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 7, offset: 2027},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 7, offset: 2049},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 7, offset: 2070},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 70, col: 7, offset: 2127},
						name: "ListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 7, offset: 2145},
						name: "ListElementContinuation",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 7, offset: 2175},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 7, offset: 2199},
						name: "Admonition",
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 79, col: 1, offset: 2405},
			expr: &choiceExpr{
				pos: position{line: 79, col: 19, offset: 2423},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 79, col: 19, offset: 2423},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 79, col: 19, offset: 2423},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2461},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 81, col: 5, offset: 2461},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2501},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 83, col: 5, offset: 2501},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2551},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 85, col: 5, offset: 2551},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 87, col: 5, offset: 2597},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 87, col: 5, offset: 2597},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 91, col: 1, offset: 2642},
			expr: &actionExpr{
				pos: position{line: 91, col: 16, offset: 2657},
				run: (*parser).callonAdmonition1,
				expr: &seqExpr{
					pos: position{line: 91, col: 16, offset: 2657},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 91, col: 16, offset: 2657},
							label: "kind",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 22, offset: 2663},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 91, col: 38, offset: 2679},
							val:        ": ",
							ignoreCase: false,
							want:       "\": \"",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 43, offset: 2684},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 91, col: 52, offset: 2693},
								run: (*parser).callonAdmonition7,
								expr: &zeroOrMoreExpr{
									pos: position{line: 91, col: 52, offset: 2693},
									expr: &charClassMatcher{
										pos:        position{line: 91, col: 52, offset: 2693},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 100, col: 1, offset: 2957},
			expr: &actionExpr{
				pos: position{line: 101, col: 5, offset: 2986},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 101, col: 5, offset: 2986},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 101, col: 5, offset: 2986},
							run: (*parser).callonAttributeDeclaration3,
						},
						&litMatcher{
							pos:        position{line: 105, col: 5, offset: 3132},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 9, offset: 3136},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 15, offset: 3142},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 105, col: 30, offset: 3157},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 5, offset: 3166},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 11, offset: 3172},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 12, offset: 3173},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 5, offset: 3206},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 116, col: 1, offset: 3559},
			expr: &actionExpr{
				pos: position{line: 116, col: 18, offset: 3576},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 116, col: 18, offset: 3576},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 116, col: 18, offset: 3576},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 116, col: 28, offset: 3586},
							expr: &charClassMatcher{
								pos:        position{line: 116, col: 29, offset: 3587},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 120, col: 1, offset: 3643},
			expr: &actionExpr{
				pos: position{line: 120, col: 30, offset: 3672},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 120, col: 30, offset: 3672},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 120, col: 30, offset: 3672},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 30, offset: 3672},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 37, offset: 3679},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 120, col: 46, offset: 3688},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 47, offset: 3689},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 124, col: 1, offset: 3811},
			expr: &actionExpr{
				pos: position{line: 124, col: 37, offset: 3847},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 124, col: 37, offset: 3847},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 124, col: 37, offset: 3847},
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 38, offset: 3848},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 5, offset: 3857},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 126, col: 9, offset: 3875},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 126, col: 10, offset: 3876},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 126, col: 10, offset: 3876},
											expr: &charClassMatcher{
												pos:        position{line: 126, col: 10, offset: 3876},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 129, col: 11, offset: 3971},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 130, col: 12, offset: 4004},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 130, col: 12, offset: 4004},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 137, col: 1, offset: 4141},
			expr: &choiceExpr{
				pos: position{line: 137, col: 19, offset: 4159},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 137, col: 19, offset: 4159},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 137, col: 19, offset: 4159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 137, col: 19, offset: 4159},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 137, col: 24, offset: 4164},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 30, offset: 4170},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 137, col: 45, offset: 4185},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 137, col: 49, offset: 4189},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 49, offset: 4189},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 56, offset: 4196},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 5, offset: 4256},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 139, col: 5, offset: 4256},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 139, col: 5, offset: 4256},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 139, col: 9, offset: 4260},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 15, offset: 4266},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 139, col: 30, offset: 4281},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 139, col: 35, offset: 4286},
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 35, offset: 4286},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 42, offset: 4293},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 146, col: 1, offset: 4475},
			expr: &actionExpr{
				pos: position{line: 147, col: 5, offset: 4499},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 147, col: 5, offset: 4499},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 147, col: 5, offset: 4499},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 151, col: 5, offset: 4639},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 151, col: 16, offset: 4650},
								expr: &choiceExpr{
									pos: position{line: 153, col: 9, offset: 4717},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 153, col: 10, offset: 4718},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 153, col: 10, offset: 4718},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 153, col: 10, offset: 4718},
														label: "anchor",
														expr: &ruleRefExpr{
															pos:  position{line: 153, col: 18, offset: 4726},
															name: "ShortHandAnchor",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 153, col: 35, offset: 4743},
														expr: &ruleRefExpr{
															pos:  position{line: 153, col: 35, offset: 4743},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 157, col: 12, offset: 4860},
											run: (*parser).callonBlockAttributes13,
											expr: &seqExpr{
												pos: position{line: 157, col: 12, offset: 4860},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 157, col: 12, offset: 4860},
														label: "title",
														expr: &ruleRefExpr{
															pos:  position{line: 157, col: 19, offset: 4867},
															name: "ShortHandTitle",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 157, col: 35, offset: 4883},
														expr: &ruleRefExpr{
															pos:  position{line: 157, col: 35, offset: 4883},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 161, col: 12, offset: 4970},
											run: (*parser).callonBlockAttributes19,
											expr: &seqExpr{
												pos: position{line: 161, col: 12, offset: 4970},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 161, col: 12, offset: 4970},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 161, col: 24, offset: 4982},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 161, col: 44, offset: 5002},
														expr: &ruleRefExpr{
															pos:  position{line: 161, col: 44, offset: 5002},
															name: "Space",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 169, col: 1, offset: 5178},
			expr: &actionExpr{
				pos: position{line: 170, col: 5, offset: 5202},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 170, col: 5, offset: 5202},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 170, col: 5, offset: 5202},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 5, offset: 5210},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 171, col: 16, offset: 5221},
								expr: &actionExpr{
									pos: position{line: 172, col: 9, offset: 5231},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 173, col: 13, offset: 5245},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 173, col: 13, offset: 5245},
												expr: &litMatcher{
													pos:        position{line: 173, col: 14, offset: 5246},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 174, col: 13, offset: 5278},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 174, col: 24, offset: 5289},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 174, col: 24, offset: 5289},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 174, col: 46, offset: 5311},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 179, col: 5, offset: 5394},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 184, col: 1, offset: 5522},
			expr: &actionExpr{
				pos: position{line: 185, col: 4, offset: 5544},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 185, col: 4, offset: 5544},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 4, offset: 5544},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 186, col: 5, offset: 5554},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 187, col: 9, offset: 5567},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 187, col: 9, offset: 5567},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 187, col: 18, offset: 5576},
										expr: &choiceExpr{
											pos: position{line: 188, col: 13, offset: 5590},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 188, col: 14, offset: 5591},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 188, col: 14, offset: 5591},
														expr: &charClassMatcher{
															pos:        position{line: 188, col: 14, offset: 5591},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 191, col: 15, offset: 5757},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 192, col: 15, offset: 5790},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 193, col: 16, offset: 5827},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 193, col: 16, offset: 5827},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 199, col: 5, offset: 6013},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 204, col: 1, offset: 6114},
			expr: &actionExpr{
				pos: position{line: 204, col: 19, offset: 6132},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 204, col: 19, offset: 6132},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 204, col: 19, offset: 6132},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 204, col: 23, offset: 6136},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 205, col: 5, offset: 6148},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 205, col: 5, offset: 6148},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 205, col: 5, offset: 6148},
											expr: &charClassMatcher{
												pos:        position{line: 205, col: 6, offset: 6149},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 206, col: 5, offset: 6261},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 206, col: 14, offset: 6270},
												expr: &choiceExpr{
													pos: position{line: 207, col: 9, offset: 6280},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 207, col: 10, offset: 6281},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 207, col: 10, offset: 6281},
																expr: &charClassMatcher{
																	pos:        position{line: 207, col: 10, offset: 6281},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 210, col: 11, offset: 6378},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 211, col: 11, offset: 6407},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 212, col: 12, offset: 6440},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 212, col: 12, offset: 6440},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 223, col: 1, offset: 6840},
			expr: &actionExpr{
				pos: position{line: 224, col: 5, offset: 6866},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 224, col: 5, offset: 6866},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 5, offset: 6866},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 224, col: 9, offset: 6870},
							expr: &litMatcher{
								pos:        position{line: 224, col: 10, offset: 6871},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 7041},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 226, col: 31, offset: 7067},
								expr: &ruleRefExpr{
									pos:  position{line: 226, col: 32, offset: 7068},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 7100},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 227, col: 21, offset: 7116},
								expr: &choiceExpr{
									pos: position{line: 227, col: 22, offset: 7117},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 227, col: 22, offset: 7117},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 227, col: 44, offset: 7139},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 228, col: 5, offset: 7160},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 241, col: 1, offset: 7688},
			expr: &actionExpr{
				pos: position{line: 242, col: 5, offset: 7722},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 242, col: 5, offset: 7722},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 242, col: 5, offset: 7722},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 242, col: 10, offset: 7727},
								expr: &ruleRefExpr{
									pos:  position{line: 243, col: 9, offset: 7737},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 5, offset: 7767},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 245, col: 12, offset: 7774},
								expr: &choiceExpr{
									pos: position{line: 246, col: 9, offset: 7785},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 246, col: 9, offset: 7785},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 247, col: 11, offset: 7817},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 248, col: 11, offset: 7852},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 249, col: 8, offset: 7885},
							expr: &seqExpr{
								pos: position{line: 249, col: 9, offset: 7886},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 249, col: 9, offset: 7886},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 249, col: 13, offset: 7890},
										expr: &ruleRefExpr{
											pos:  position{line: 249, col: 13, offset: 7890},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 250, col: 5, offset: 7904},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 266, col: 1, offset: 8320},
			expr: &actionExpr{
				pos: position{line: 266, col: 25, offset: 8344},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 266, col: 25, offset: 8344},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 25, offset: 8344},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 29, offset: 8348},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 33, offset: 8352},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 270, col: 1, offset: 8426},
			expr: &actionExpr{
				pos: position{line: 270, col: 23, offset: 8448},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 270, col: 23, offset: 8448},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 270, col: 30, offset: 8455},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 275, col: 1, offset: 8581},
			expr: &actionExpr{
				pos: position{line: 275, col: 30, offset: 8610},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 275, col: 30, offset: 8610},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 30, offset: 8610},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 34, offset: 8614},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 40, offset: 8620},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 280, col: 1, offset: 8742},
			expr: &actionExpr{
				pos: position{line: 280, col: 29, offset: 8770},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 280, col: 29, offset: 8770},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 29, offset: 8770},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 280, col: 33, offset: 8774},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 41, offset: 8782},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 285, col: 1, offset: 8895},
			expr: &choiceExpr{
				pos: position{line: 286, col: 5, offset: 8927},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 8927},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 7, offset: 8961},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 288, col: 7, offset: 8995},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 288, col: 7, offset: 8995},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 288, col: 7, offset: 8995},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 288, col: 16, offset: 9004},
										expr: &choiceExpr{
											pos: position{line: 291, col: 5, offset: 9174},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 291, col: 6, offset: 9175},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 291, col: 6, offset: 9175},
														expr: &charClassMatcher{
															pos:        position{line: 291, col: 6, offset: 9175},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 294, col: 5, offset: 9269},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 295, col: 5, offset: 9294},
													name: "Quote",
												},
												&ruleRefExpr{
													pos:  position{line: 296, col: 5, offset: 9306},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 297, col: 6, offset: 9335},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 297, col: 6, offset: 9335},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 299, col: 10, offset: 9405},
									expr: &charClassMatcher{
										pos:        position{line: 299, col: 11, offset: 9406},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 303, col: 1, offset: 9482},
			expr: &choiceExpr{
				pos: position{line: 303, col: 24, offset: 9505},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 304, col: 5, offset: 9511},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 304, col: 5, offset: 9511},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 304, col: 5, offset: 9511},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 304, col: 12, offset: 9518},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 304, col: 29, offset: 9535},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 304, col: 29, offset: 9535},
											expr: &seqExpr{
												pos: position{line: 304, col: 30, offset: 9536},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 304, col: 30, offset: 9536},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 304, col: 34, offset: 9540},
														expr: &ruleRefExpr{
															pos:  position{line: 304, col: 34, offset: 9540},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 304, col: 45, offset: 9551},
											expr: &litMatcher{
												pos:        position{line: 304, col: 46, offset: 9552},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 309, col: 6, offset: 9789},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 309, col: 6, offset: 9789},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 309, col: 6, offset: 9789},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 309, col: 13, offset: 9796},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 309, col: 13, offset: 9796},
												expr: &ruleRefExpr{
													pos:  position{line: 309, col: 13, offset: 9796},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 309, col: 21, offset: 9804},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 309, col: 22, offset: 9805},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 309, col: 22, offset: 9805},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 309, col: 26, offset: 9809},
																expr: &ruleRefExpr{
																	pos:  position{line: 309, col: 26, offset: 9809},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 309, col: 36, offset: 9819},
														expr: &litMatcher{
															pos:        position{line: 309, col: 37, offset: 9820},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 310, col: 5, offset: 9830},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 320, col: 1, offset: 10145},
			expr: &actionExpr{
				pos: position{line: 320, col: 19, offset: 10163},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 320, col: 19, offset: 10163},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 320, col: 19, offset: 10163},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 24, offset: 10168},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 320, col: 43, offset: 10187},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 320, col: 47, offset: 10191},
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 47, offset: 10191},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 54, offset: 10198},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 61, offset: 10205},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 320, col: 77, offset: 10221},
							expr: &seqExpr{
								pos: position{line: 320, col: 78, offset: 10222},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 320, col: 78, offset: 10222},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 320, col: 82, offset: 10226},
										expr: &ruleRefExpr{
											pos:  position{line: 320, col: 82, offset: 10226},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 325, col: 1, offset: 10450},
			expr: &actionExpr{
				pos: position{line: 325, col: 22, offset: 10471},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 325, col: 22, offset: 10471},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 325, col: 22, offset: 10471},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 23, offset: 10472},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 325, col: 29, offset: 10478},
							expr: &charClassMatcher{
								pos:        position{line: 325, col: 29, offset: 10478},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 42, offset: 10491},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 42, offset: 10491},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 329, col: 1, offset: 10561},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 10584},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 10584},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 330, col: 5, offset: 10584},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 331, col: 9, offset: 10600},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 331, col: 9, offset: 10600},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 332, col: 11, offset: 10638},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 333, col: 11, offset: 10676},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 335, col: 5, offset: 10710},
							expr: &notExpr{
								pos: position{line: 335, col: 7, offset: 10712},
								expr: &seqExpr{
									pos: position{line: 335, col: 9, offset: 10714},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 335, col: 9, offset: 10714},
											expr: &ruleRefExpr{
												pos:  position{line: 335, col: 9, offset: 10714},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 335, col: 16, offset: 10721},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 339, col: 1, offset: 10762},
			expr: &actionExpr{
				pos: position{line: 340, col: 5, offset: 10797},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 340, col: 5, offset: 10797},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 340, col: 5, offset: 10797},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 5, offset: 10806},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 14, offset: 10815},
								expr: &choiceExpr{
									pos: position{line: 343, col: 9, offset: 10905},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 343, col: 9, offset: 10905},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 344, col: 12, offset: 10922},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 344, col: 12, offset: 10922},
												expr: &charClassMatcher{
													pos:        position{line: 344, col: 12, offset: 10922},
													val:        "[^\\r\\n\\uFFFD\\\\{&<>']",
													chars:      []rune{'\r', '\n', '�', '\\', '{', '&', '<', '>', '\''},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 347, col: 11, offset: 11071},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 348, col: 11, offset: 11103},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 349, col: 11, offset: 11130},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 350, col: 12, offset: 11160},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 350, col: 12, offset: 11160},
													run: (*parser).callonSingleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 350, col: 12, offset: 11160},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 353, col: 11, offset: 11252},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 353, col: 17, offset: 11258},
													run: (*parser).callonSingleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 353, col: 17, offset: 11258},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 5, offset: 11347},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 361, col: 1, offset: 11403},
			expr: &actionExpr{
				pos: position{line: 362, col: 5, offset: 11438},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 362, col: 5, offset: 11438},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 362, col: 5, offset: 11438},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 5, offset: 11448},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 363, col: 14, offset: 11457},
								expr: &choiceExpr{
									pos: position{line: 364, col: 9, offset: 11467},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 364, col: 9, offset: 11467},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 365, col: 12, offset: 11484},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 365, col: 12, offset: 11484},
												expr: &charClassMatcher{
													pos:        position{line: 365, col: 12, offset: 11484},
													val:        "[^\\r\\n\\uFFFD&<>\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '&', '<', '>', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 368, col: 11, offset: 11633},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 369, col: 11, offset: 11665},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 370, col: 11, offset: 11692},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 371, col: 12, offset: 11722},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 371, col: 12, offset: 11722},
													run: (*parser).callonDoubleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 371, col: 12, offset: 11722},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 374, col: 11, offset: 11814},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 374, col: 17, offset: 11820},
													run: (*parser).callonDoubleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 374, col: 17, offset: 11820},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 11909},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 383, col: 1, offset: 12044},
			expr: &actionExpr{
				pos: position{line: 384, col: 5, offset: 12075},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 384, col: 5, offset: 12075},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 384, col: 5, offset: 12075},
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 6, offset: 12076},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 385, col: 5, offset: 12086},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 385, col: 14, offset: 12095},
								expr: &actionExpr{
									pos: position{line: 386, col: 9, offset: 12105},
									run: (*parser).callonUnquotedAttributeValue7,
									expr: &seqExpr{
										pos: position{line: 386, col: 9, offset: 12105},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 386, col: 9, offset: 12105},
												expr: &litMatcher{
													pos:        position{line: 386, col: 10, offset: 12106},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 387, col: 9, offset: 12134},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 388, col: 13, offset: 12156},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 388, col: 13, offset: 12156},
															name: "Quote",
														},
														&actionExpr{
															pos: position{line: 389, col: 16, offset: 12177},
															run: (*parser).callonUnquotedAttributeValue14,
															expr: &oneOrMoreExpr{
																pos: position{line: 389, col: 16, offset: 12177},
																expr: &charClassMatcher{
																	pos:        position{line: 389, col: 16, offset: 12177},
																	val:        "[^,=\\r\\n\\uFFFD&<>{\\] ]",
																	chars:      []rune{',', '=', '\r', '\n', '�', '&', '<', '>', '{', ']', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 392, col: 15, offset: 12295},
															name: "Space",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 15, offset: 12315},
															name: "AttributeSubstitution",
														},
														&ruleRefExpr{
															pos:  position{line: 394, col: 15, offset: 12351},
															name: "SpecialCharacter",
														},
														&ruleRefExpr{
															pos:  position{line: 395, col: 15, offset: 12382},
															name: "ElementPlaceHolder",
														},
														&actionExpr{
															pos: position{line: 396, col: 16, offset: 12416},
															run: (*parser).callonUnquotedAttributeValue21,
															expr: &litMatcher{
																pos:        position{line: 396, col: 16, offset: 12416},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 403, col: 5, offset: 12566},
							run: (*parser).callonUnquotedAttributeValue23,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 414, col: 1, offset: 12918},
			expr: &actionExpr{
				pos: position{line: 416, col: 5, offset: 13009},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 416, col: 5, offset: 13009},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 416, col: 5, offset: 13009},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 419, col: 5, offset: 13073},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 419, col: 14, offset: 13082},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 419, col: 14, offset: 13082},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 419, col: 36, offset: 13104},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 426, col: 1, offset: 13269},
			expr: &actionExpr{
				pos: position{line: 426, col: 31, offset: 13299},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 426, col: 31, offset: 13299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 426, col: 31, offset: 13299},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 35, offset: 13303},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 40, offset: 13308},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 426, col: 54, offset: 13322},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 431, col: 1, offset: 13438},
			expr: &choiceExpr{
				pos: position{line: 431, col: 24, offset: 13461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 431, col: 24, offset: 13461},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 431, col: 47, offset: 13484},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 433, col: 1, offset: 13620},
			expr: &actionExpr{
				pos: position{line: 433, col: 25, offset: 13644},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 433, col: 25, offset: 13644},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 433, col: 25, offset: 13644},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 433, col: 37, offset: 13656},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 42, offset: 13661},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 433, col: 56, offset: 13675},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 433, col: 62, offset: 13681},
								expr: &ruleRefExpr{
									pos:  position{line: 433, col: 63, offset: 13682},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 433, col: 78, offset: 13697},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 437, col: 1, offset: 13775},
			expr: &actionExpr{
				pos: position{line: 437, col: 25, offset: 13799},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 437, col: 25, offset: 13799},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 437, col: 25, offset: 13799},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 38, offset: 13812},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 43, offset: 13817},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 437, col: 57, offset: 13831},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 437, col: 63, offset: 13837},
								expr: &ruleRefExpr{
									pos:  position{line: 437, col: 64, offset: 13838},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 437, col: 79, offset: 13853},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 441, col: 1, offset: 13928},
			expr: &actionExpr{
				pos: position{line: 441, col: 17, offset: 13944},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 441, col: 17, offset: 13944},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 441, col: 17, offset: 13944},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 21, offset: 13948},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 441, col: 28, offset: 13955},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 441, col: 28, offset: 13955},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 441, col: 28, offset: 13955},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 443, col: 9, offset: 14009},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 443, col: 9, offset: 14009},
											expr: &charClassMatcher{
												pos:        position{line: 443, col: 9, offset: 14009},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 452, col: 1, offset: 14211},
			expr: &actionExpr{
				pos: position{line: 452, col: 14, offset: 14224},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 452, col: 14, offset: 14224},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 452, col: 14, offset: 14224},
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 14, offset: 14224},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 21, offset: 14231},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 460, col: 1, offset: 14471},
			expr: &seqExpr{
				pos: position{line: 460, col: 31, offset: 14501},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 460, col: 31, offset: 14501},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 460, col: 38, offset: 14508},
						expr: &ruleRefExpr{
							pos:  position{line: 460, col: 38, offset: 14508},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 45, offset: 14515},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 462, col: 1, offset: 14520},
			expr: &choiceExpr{
				pos: position{line: 462, col: 29, offset: 14548},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 462, col: 30, offset: 14549},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 462, col: 30, offset: 14549},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 462, col: 37, offset: 14556},
								expr: &ruleRefExpr{
									pos:  position{line: 462, col: 37, offset: 14556},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 462, col: 44, offset: 14563},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 462, col: 51, offset: 14570},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 479, col: 1, offset: 15060},
			expr: &actionExpr{
				pos: position{line: 484, col: 5, offset: 15219},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 484, col: 5, offset: 15219},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 484, col: 14, offset: 15228},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 488, col: 1, offset: 15274},
			expr: &actionExpr{
				pos: position{line: 488, col: 12, offset: 15285},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 488, col: 12, offset: 15285},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 488, col: 12, offset: 15285},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 488, col: 20, offset: 15293},
								expr: &anyMatcher{
									line: 488, col: 21, offset: 15294,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 25, offset: 15298},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 492, col: 1, offset: 15351},
			expr: &actionExpr{
				pos: position{line: 492, col: 22, offset: 15372},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 492, col: 22, offset: 15372},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 492, col: 22, offset: 15372},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 23, offset: 15373},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 492, col: 45, offset: 15395},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 45, offset: 15395},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 492, col: 52, offset: 15402},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 492, col: 57, offset: 15407},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 66, offset: 15416},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 92, offset: 15442},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 496, col: 1, offset: 15515},
			expr: &actionExpr{
				pos: position{line: 496, col: 29, offset: 15543},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 496, col: 29, offset: 15543},
					expr: &charClassMatcher{
						pos:        position{line: 496, col: 29, offset: 15543},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 503, col: 1, offset: 15708},
			expr: &choiceExpr{
				pos: position{line: 503, col: 19, offset: 15726},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 503, col: 19, offset: 15726},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 44, offset: 15751},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 505, col: 1, offset: 15776},
			expr: &choiceExpr{
				pos: position{line: 505, col: 27, offset: 15802},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 505, col: 27, offset: 15802},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 505, col: 27, offset: 15802},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 505, col: 27, offset: 15802},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 505, col: 32, offset: 15807},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 36, offset: 15811},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 505, col: 40, offset: 15815},
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 40, offset: 15815},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 505, col: 47, offset: 15822},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 505, col: 51, offset: 15826},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 58, offset: 15833},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 505, col: 79, offset: 15854},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 507, col: 9, offset: 15927},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 507, col: 9, offset: 15927},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 507, col: 9, offset: 15927},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 507, col: 14, offset: 15932},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 507, col: 18, offset: 15936},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 507, col: 22, offset: 15940},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 511, col: 1, offset: 16011},
			expr: &actionExpr{
				pos: position{line: 511, col: 27, offset: 16037},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 511, col: 27, offset: 16037},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 511, col: 27, offset: 16037},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 511, col: 35, offset: 16045},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 40, offset: 16050},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 511, col: 54, offset: 16064},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 72, offset: 16082},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 515, col: 1, offset: 16216},
			expr: &oneOrMoreExpr{
				pos: position{line: 515, col: 24, offset: 16239},
				expr: &choiceExpr{
					pos: position{line: 516, col: 5, offset: 16245},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 516, col: 6, offset: 16246},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 516, col: 6, offset: 16246},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 516, col: 6, offset: 16246},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 516, col: 14, offset: 16254},
										expr: &charClassMatcher{
											pos:        position{line: 516, col: 14, offset: 16254},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 7, offset: 16449},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 520, col: 8, offset: 16478},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 520, col: 8, offset: 16478},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 529, col: 1, offset: 16753},
			expr: &actionExpr{
				pos: position{line: 529, col: 19, offset: 16771},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 529, col: 19, offset: 16771},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 529, col: 19, offset: 16771},
							expr: &ruleRefExpr{
								pos:  position{line: 529, col: 21, offset: 16773},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 5, offset: 16803},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 530, col: 16, offset: 16814},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 530, col: 16, offset: 16814},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 7, offset: 16873},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 7, offset: 16901},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 7, offset: 16930},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 534, col: 7, offset: 16959},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 535, col: 7, offset: 16988},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 536, col: 7, offset: 17014},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 7, offset: 17042},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 541, col: 1, offset: 17108},
			expr: &actionExpr{
				pos: position{line: 541, col: 26, offset: 17133},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 541, col: 26, offset: 17133},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 26, offset: 17133},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 541, col: 33, offset: 17140},
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 33, offset: 17140},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 40, offset: 17147},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 545, col: 1, offset: 17206},
			expr: &actionExpr{
				pos: position{line: 545, col: 25, offset: 17230},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 545, col: 25, offset: 17230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 25, offset: 17230},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 545, col: 31, offset: 17236},
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 31, offset: 17236},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 38, offset: 17243},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 549, col: 1, offset: 17301},
			expr: &actionExpr{
				pos: position{line: 549, col: 26, offset: 17326},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 549, col: 26, offset: 17326},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 549, col: 26, offset: 17326},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 549, col: 33, offset: 17333},
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 33, offset: 17333},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 553, col: 1, offset: 17395},
			expr: &ruleRefExpr{
				pos:  position{line: 553, col: 25, offset: 17419},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 555, col: 1, offset: 17442},
			expr: &actionExpr{
				pos: position{line: 555, col: 26, offset: 17467},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 555, col: 26, offset: 17467},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 555, col: 26, offset: 17467},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 555, col: 33, offset: 17474},
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 33, offset: 17474},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 555, col: 40, offset: 17481},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 559, col: 1, offset: 17540},
			expr: &actionExpr{
				pos: position{line: 559, col: 26, offset: 17565},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 559, col: 26, offset: 17565},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 559, col: 26, offset: 17565},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 559, col: 33, offset: 17572},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 33, offset: 17572},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 40, offset: 17579},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 563, col: 1, offset: 17638},
			expr: &actionExpr{
				pos: position{line: 563, col: 24, offset: 17661},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 563, col: 24, offset: 17661},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 563, col: 24, offset: 17661},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 563, col: 31, offset: 17668},
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 31, offset: 17668},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 563, col: 38, offset: 17675},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 567, col: 1, offset: 17732},
			expr: &actionExpr{
				pos: position{line: 567, col: 26, offset: 17757},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 567, col: 26, offset: 17757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 567, col: 26, offset: 17757},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 567, col: 33, offset: 17764},
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 33, offset: 17764},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 567, col: 40, offset: 17771},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 571, col: 1, offset: 17830},
			expr: &actionExpr{
				pos: position{line: 571, col: 30, offset: 17859},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 571, col: 30, offset: 17859},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 30, offset: 17859},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 571, col: 37, offset: 17866},
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 37, offset: 17866},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 44, offset: 17873},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 638, col: 1, offset: 19994},
			expr: &actionExpr{
				pos: position{line: 639, col: 9, offset: 20020},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 639, col: 9, offset: 20020},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 639, col: 9, offset: 20020},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 639, col: 13, offset: 20024},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 13, offset: 20024},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 639, col: 20, offset: 20031},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 27, offset: 20038},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 639, col: 49, offset: 20060},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 639, col: 53, offset: 20064},
								expr: &ruleRefExpr{
									pos:  position{line: 639, col: 53, offset: 20064},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 71, offset: 20082},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 643, col: 1, offset: 20197},
			expr: &choiceExpr{
				pos: position{line: 644, col: 9, offset: 20233},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 644, col: 9, offset: 20233},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 645, col: 11, offset: 20261},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 646, col: 11, offset: 20293},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 647, col: 11, offset: 20323},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 649, col: 1, offset: 20340},
			expr: &choiceExpr{
				pos: position{line: 650, col: 9, offset: 20377},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 650, col: 9, offset: 20377},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 651, col: 11, offset: 20405},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 652, col: 11, offset: 20437},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 653, col: 11, offset: 20467},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 655, col: 1, offset: 20485},
			expr: &choiceExpr{
				pos: position{line: 655, col: 20, offset: 20504},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 655, col: 20, offset: 20504},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 655, col: 48, offset: 20532},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 657, col: 1, offset: 20562},
			expr: &actionExpr{
				pos: position{line: 657, col: 30, offset: 20591},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 657, col: 30, offset: 20591},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 657, col: 30, offset: 20591},
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 30, offset: 20591},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 657, col: 37, offset: 20598},
							expr: &litMatcher{
								pos:        position{line: 657, col: 38, offset: 20599},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 42, offset: 20603},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 657, col: 51, offset: 20612},
								expr: &ruleRefExpr{
									pos:  position{line: 657, col: 51, offset: 20612},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 657, col: 68, offset: 20629},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 661, col: 1, offset: 20699},
			expr: &actionExpr{
				pos: position{line: 661, col: 33, offset: 20731},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 661, col: 33, offset: 20731},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 661, col: 33, offset: 20731},
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 33, offset: 20731},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 661, col: 40, offset: 20738},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 661, col: 51, offset: 20749},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 59, offset: 20757},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 661, col: 75, offset: 20773},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 665, col: 1, offset: 20852},
			expr: &actionExpr{
				pos: position{line: 665, col: 19, offset: 20870},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 665, col: 19, offset: 20870},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 665, col: 19, offset: 20870},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 19, offset: 20870},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 665, col: 26, offset: 20877},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 36, offset: 20887},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 665, col: 56, offset: 20907},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 665, col: 62, offset: 20913},
								expr: &ruleRefExpr{
									pos:  position{line: 665, col: 63, offset: 20914},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 665, col: 85, offset: 20936},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 85, offset: 20936},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 665, col: 92, offset: 20943},
							expr: &litMatcher{
								pos:        position{line: 665, col: 92, offset: 20943},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 665, col: 97, offset: 20948},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 97, offset: 20948},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 670, col: 1, offset: 21093},
			expr: &actionExpr{
				pos: position{line: 670, col: 23, offset: 21115},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 670, col: 23, offset: 21115},
					expr: &charClassMatcher{
						pos:        position{line: 670, col: 23, offset: 21115},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 674, col: 1, offset: 21162},
			expr: &actionExpr{
				pos: position{line: 674, col: 24, offset: 21185},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 674, col: 24, offset: 21185},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 674, col: 24, offset: 21185},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 674, col: 28, offset: 21189},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 674, col: 35, offset: 21196},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 674, col: 36, offset: 21197},
									expr: &charClassMatcher{
										pos:        position{line: 674, col: 36, offset: 21197},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 676, col: 4, offset: 21244},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 682, col: 1, offset: 21405},
			expr: &actionExpr{
				pos: position{line: 682, col: 21, offset: 21425},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 682, col: 21, offset: 21425},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 682, col: 21, offset: 21425},
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 21, offset: 21425},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 682, col: 28, offset: 21432},
							expr: &litMatcher{
								pos:        position{line: 682, col: 29, offset: 21433},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 682, col: 33, offset: 21437},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 683, col: 9, offset: 21456},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 683, col: 10, offset: 21457},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 683, col: 10, offset: 21457},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 683, col: 10, offset: 21457},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 683, col: 21, offset: 21468},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 683, col: 45, offset: 21492},
													expr: &litMatcher{
														pos:        position{line: 683, col: 45, offset: 21492},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 683, col: 50, offset: 21497},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 683, col: 58, offset: 21505},
														expr: &ruleRefExpr{
															pos:  position{line: 683, col: 59, offset: 21506},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 683, col: 82, offset: 21529},
													expr: &litMatcher{
														pos:        position{line: 683, col: 82, offset: 21529},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 683, col: 87, offset: 21534},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 683, col: 97, offset: 21544},
														expr: &ruleRefExpr{
															pos:  position{line: 683, col: 98, offset: 21545},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 685, col: 15, offset: 21662},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 685, col: 15, offset: 21662},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 685, col: 15, offset: 21662},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 685, col: 24, offset: 21671},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 685, col: 46, offset: 21693},
													expr: &litMatcher{
														pos:        position{line: 685, col: 46, offset: 21693},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 685, col: 51, offset: 21698},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 685, col: 61, offset: 21708},
														expr: &ruleRefExpr{
															pos:  position{line: 685, col: 62, offset: 21709},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 13, offset: 21818},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 692, col: 1, offset: 21948},
			expr: &choiceExpr{
				pos: position{line: 692, col: 27, offset: 21974},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 692, col: 27, offset: 21974},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 692, col: 27, offset: 21974},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 692, col: 27, offset: 21974},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 692, col: 32, offset: 21979},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 692, col: 39, offset: 21986},
									expr: &charClassMatcher{
										pos:        position{line: 692, col: 39, offset: 21986},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 694, col: 5, offset: 22034},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 694, col: 5, offset: 22034},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 694, col: 5, offset: 22034},
									expr: &litMatcher{
										pos:        position{line: 694, col: 5, offset: 22034},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 694, col: 11, offset: 22040},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 694, col: 18, offset: 22047},
									expr: &charClassMatcher{
										pos:        position{line: 694, col: 18, offset: 22047},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 694, col: 29, offset: 22058},
									expr: &ruleRefExpr{
										pos:  position{line: 694, col: 29, offset: 22058},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 694, col: 36, offset: 22065},
									expr: &litMatcher{
										pos:        position{line: 694, col: 37, offset: 22066},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 698, col: 1, offset: 22106},
			expr: &actionExpr{
				pos: position{line: 698, col: 25, offset: 22130},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 698, col: 25, offset: 22130},
					expr: &charClassMatcher{
						pos:        position{line: 698, col: 25, offset: 22130},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 702, col: 1, offset: 22176},
			expr: &actionExpr{
				pos: position{line: 702, col: 27, offset: 22202},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 702, col: 27, offset: 22202},
					expr: &charClassMatcher{
						pos:        position{line: 702, col: 27, offset: 22202},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 709, col: 1, offset: 22377},
			expr: &litMatcher{
				pos:        position{line: 709, col: 32, offset: 22408},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 710, col: 1, offset: 22417},
			expr: &actionExpr{
				pos: position{line: 710, col: 23, offset: 22439},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 710, col: 23, offset: 22439},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 710, col: 23, offset: 22439},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 710, col: 51, offset: 22467},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 710, col: 56, offset: 22472},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 710, col: 56, offset: 22472},
									expr: &charClassMatcher{
										pos:        position{line: 710, col: 56, offset: 22472},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 710, col: 95, offset: 22511},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 717, col: 1, offset: 22781},
			expr: &actionExpr{
				pos: position{line: 717, col: 14, offset: 22794},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 717, col: 14, offset: 22794},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 717, col: 14, offset: 22794},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 717, col: 20, offset: 22800},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 717, col: 24, offset: 22804},
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 24, offset: 22804},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 717, col: 31, offset: 22811},
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 32, offset: 22812},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 724, col: 1, offset: 22976},
			expr: &actionExpr{
				pos: position{line: 725, col: 5, offset: 22998},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 725, col: 5, offset: 22998},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 5, offset: 22998},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 726, col: 9, offset: 23013},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 726, col: 9, offset: 23013},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 726, col: 9, offset: 23013},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 727, col: 9, offset: 23034},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 727, col: 15, offset: 23040},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 728, col: 9, offset: 23063},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 728, col: 27, offset: 23081},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 732, col: 5, offset: 23242},
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 5, offset: 23242},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 12, offset: 23249},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 736, col: 1, offset: 23309},
			expr: &ruleRefExpr{
				pos:  position{line: 736, col: 26, offset: 23334},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 739, col: 1, offset: 23374},
			expr: &actionExpr{
				pos: position{line: 739, col: 15, offset: 23388},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 739, col: 15, offset: 23388},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 739, col: 15, offset: 23388},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 739, col: 22, offset: 23395},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 739, col: 22, offset: 23395},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 740, col: 7, offset: 23421},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 741, col: 7, offset: 23443},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 7, offset: 23466},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 746, col: 1, offset: 23556},
			expr: &actionExpr{
				pos: position{line: 746, col: 23, offset: 23578},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 746, col: 23, offset: 23578},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 746, col: 23, offset: 23578},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 746, col: 30, offset: 23585},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 746, col: 30, offset: 23585},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 746, col: 47, offset: 23602},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 747, col: 5, offset: 23624},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 747, col: 12, offset: 23631},
								expr: &actionExpr{
									pos: position{line: 748, col: 9, offset: 23641},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 748, col: 9, offset: 23641},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 748, col: 10, offset: 23642},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 748, col: 10, offset: 23642},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 748, col: 16, offset: 23648},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 749, col: 9, offset: 23759},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 749, col: 16, offset: 23766},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 749, col: 16, offset: 23766},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 749, col: 33, offset: 23783},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 755, col: 1, offset: 23925},
			expr: &actionExpr{
				pos: position{line: 755, col: 19, offset: 23943},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 755, col: 19, offset: 23943},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 755, col: 19, offset: 23943},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 26, offset: 23950},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 755, col: 34, offset: 23958},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 39, offset: 23963},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 44, offset: 23968},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 759, col: 1, offset: 24064},
			expr: &actionExpr{
				pos: position{line: 759, col: 20, offset: 24083},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 759, col: 20, offset: 24083},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 759, col: 32, offset: 24095},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 764, col: 1, offset: 24218},
			expr: &actionExpr{
				pos: position{line: 764, col: 14, offset: 24231},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 764, col: 14, offset: 24231},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 764, col: 14, offset: 24231},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 21, offset: 24238},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 764, col: 40, offset: 24257},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 768, col: 1, offset: 24347},
			expr: &actionExpr{
				pos: position{line: 768, col: 22, offset: 24368},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 768, col: 22, offset: 24368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 768, col: 22, offset: 24368},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 29, offset: 24375},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 5, offset: 24389},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 769, col: 12, offset: 24396},
								expr: &actionExpr{
									pos: position{line: 770, col: 9, offset: 24406},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 770, col: 9, offset: 24406},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 770, col: 10, offset: 24407},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 770, col: 10, offset: 24407},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 770, col: 16, offset: 24413},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 771, col: 9, offset: 24524},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 771, col: 16, offset: 24531},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 777, col: 1, offset: 24666},
			expr: &choiceExpr{
				pos: position{line: 777, col: 13, offset: 24678},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 777, col: 13, offset: 24678},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 777, col: 13, offset: 24678},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 777, col: 18, offset: 24683},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 777, col: 18, offset: 24683},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 30, offset: 24695},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 779, col: 9, offset: 24771},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 779, col: 9, offset: 24771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 779, col: 9, offset: 24771},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 779, col: 13, offset: 24775},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 779, col: 18, offset: 24780},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 779, col: 18, offset: 24780},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 779, col: 30, offset: 24792},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 783, col: 1, offset: 24868},
			expr: &actionExpr{
				pos: position{line: 783, col: 16, offset: 24883},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 783, col: 16, offset: 24883},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 783, col: 16, offset: 24883},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 783, col: 23, offset: 24890},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 783, col: 23, offset: 24890},
									expr: &litMatcher{
										pos:        position{line: 783, col: 24, offset: 24891},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 786, col: 5, offset: 24945},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 793, col: 1, offset: 25112},
			expr: &actionExpr{
				pos: position{line: 793, col: 21, offset: 25132},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 793, col: 21, offset: 25132},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 793, col: 21, offset: 25132},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 793, col: 29, offset: 25140},
								expr: &choiceExpr{
									pos: position{line: 793, col: 30, offset: 25141},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 793, col: 30, offset: 25141},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 793, col: 53, offset: 25164},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 793, col: 74, offset: 25185},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 793, col: 74, offset: 25185,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 793, col: 107, offset: 25218},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 797, col: 1, offset: 25297},
			expr: &actionExpr{
				pos: position{line: 797, col: 25, offset: 25321},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 797, col: 25, offset: 25321},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 797, col: 25, offset: 25321},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 797, col: 33, offset: 25329},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 797, col: 38, offset: 25334},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 797, col: 38, offset: 25334},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 797, col: 78, offset: 25374},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 801, col: 1, offset: 25447},
			expr: &actionExpr{
				pos: position{line: 801, col: 23, offset: 25469},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 801, col: 23, offset: 25469},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 801, col: 23, offset: 25469},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 801, col: 31, offset: 25477},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 801, col: 36, offset: 25482},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 36, offset: 25482},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 801, col: 76, offset: 25522},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 820, col: 1, offset: 26067},
			expr: &choiceExpr{
				pos: position{line: 820, col: 24, offset: 26090},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 820, col: 24, offset: 26090},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 820, col: 47, offset: 26113},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 820, col: 59, offset: 26125},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 822, col: 1, offset: 26142},
			expr: &actionExpr{
				pos: position{line: 822, col: 26, offset: 26167},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 822, col: 26, offset: 26167},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 822, col: 26, offset: 26167},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 822, col: 32, offset: 26173},
							expr: &ruleRefExpr{
								pos:  position{line: 822, col: 32, offset: 26173},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 822, col: 39, offset: 26180},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 826, col: 1, offset: 26243},
			expr: &actionExpr{
				pos: position{line: 826, col: 20, offset: 26262},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 826, col: 20, offset: 26262},
					expr: &anyMatcher{
						line: 826, col: 21, offset: 26263,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 833, col: 1, offset: 26433},
			expr: &actionExpr{
				pos: position{line: 834, col: 5, offset: 26456},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 834, col: 5, offset: 26456},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 834, col: 15, offset: 26466},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 834, col: 15, offset: 26466},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 834, col: 15, offset: 26466},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 24, offset: 26475},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 836, col: 9, offset: 26567},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 836, col: 9, offset: 26567},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 836, col: 9, offset: 26567},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 836, col: 18, offset: 26576},
												expr: &ruleRefExpr{
													pos:  position{line: 836, col: 19, offset: 26577},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 836, col: 35, offset: 26593},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 852, col: 1, offset: 26910},
			expr: &actionExpr{
				pos: position{line: 853, col: 5, offset: 26933},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 853, col: 5, offset: 26933},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 853, col: 14, offset: 26942},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 853, col: 14, offset: 26942},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 854, col: 11, offset: 27003},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 855, col: 11, offset: 27048},
								expr: &ruleRefExpr{
									pos:  position{line: 855, col: 11, offset: 27048},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 856, col: 11, offset: 27066},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 856, col: 11, offset: 27066},
										expr: &ruleRefExpr{
											pos:  position{line: 856, col: 12, offset: 27067},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 857, col: 13, offset: 27085},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 857, col: 13, offset: 27085},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 858, col: 15, offset: 27116},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 859, col: 15, offset: 27136},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 860, col: 15, offset: 27173},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 861, col: 15, offset: 27199},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 862, col: 15, offset: 27225},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 863, col: 15, offset: 27255},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 865, col: 15, offset: 27355},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 897, col: 1, offset: 28371},
			expr: &actionExpr{
				pos: position{line: 897, col: 20, offset: 28390},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 897, col: 20, offset: 28390},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 897, col: 20, offset: 28390},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 897, col: 25, offset: 28395},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 29, offset: 28399},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 897, col: 33, offset: 28403},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 897, col: 38, offset: 28408},
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 38, offset: 28408},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 904, col: 1, offset: 28654},
			expr: &actionExpr{
				pos: position{line: 904, col: 14, offset: 28667},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 904, col: 14, offset: 28667},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 904, col: 14, offset: 28667},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 904, col: 19, offset: 28672},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 25, offset: 28678},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 904, col: 43, offset: 28696},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 908, col: 1, offset: 28768},
			expr: &actionExpr{
				pos: position{line: 908, col: 21, offset: 28788},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 908, col: 21, offset: 28788},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 908, col: 30, offset: 28797},
						expr: &choiceExpr{
							pos: position{line: 908, col: 31, offset: 28798},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 908, col: 31, offset: 28798},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 38, offset: 28805},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 53, offset: 28820},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 66, offset: 28833},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 74, offset: 28841},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 93, offset: 28860},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 908, col: 114, offset: 28881},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 908, col: 115, offset: 28882},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 908, col: 115, offset: 28882},
												expr: &litMatcher{
													pos:        position{line: 908, col: 116, offset: 28883},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 908, col: 121, offset: 28888,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 914, col: 1, offset: 28994},
			expr: &actionExpr{
				pos: position{line: 914, col: 23, offset: 29016},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 914, col: 23, offset: 29016},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 914, col: 23, offset: 29016},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 914, col: 29, offset: 29022},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 36, offset: 29029},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 5, offset: 29061},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 915, col: 11, offset: 29067},
								expr: &actionExpr{
									pos: position{line: 915, col: 12, offset: 29068},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 915, col: 12, offset: 29068},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 915, col: 12, offset: 29068},
												expr: &ruleRefExpr{
													pos:  position{line: 915, col: 12, offset: 29068},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 915, col: 19, offset: 29075},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 915, col: 23, offset: 29079},
												expr: &ruleRefExpr{
													pos:  position{line: 915, col: 23, offset: 29079},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 915, col: 30, offset: 29086},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 915, col: 39, offset: 29095},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 916, col: 5, offset: 29153},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 916, col: 11, offset: 29159},
								expr: &actionExpr{
									pos: position{line: 916, col: 12, offset: 29160},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 916, col: 12, offset: 29160},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 916, col: 12, offset: 29160},
												expr: &ruleRefExpr{
													pos:  position{line: 916, col: 12, offset: 29160},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 916, col: 19, offset: 29167},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 916, col: 23, offset: 29171},
												expr: &ruleRefExpr{
													pos:  position{line: 916, col: 23, offset: 29171},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 916, col: 30, offset: 29178},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 916, col: 39, offset: 29187},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 917, col: 5, offset: 29245},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 921, col: 1, offset: 29324},
			expr: &actionExpr{
				pos: position{line: 921, col: 30, offset: 29353},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 921, col: 30, offset: 29353},
					expr: &choiceExpr{
						pos: position{line: 921, col: 31, offset: 29354},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 921, col: 31, offset: 29354},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 921, col: 42, offset: 29365},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 928, col: 1, offset: 29511},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 29694},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 29694},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 933, col: 5, offset: 29694},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 937, col: 5, offset: 29824},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 937, col: 15, offset: 29834},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 21, offset: 29840},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 937, col: 31, offset: 29850},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 49, offset: 29868},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 937, col: 67, offset: 29886},
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 67, offset: 29886},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 943, col: 1, offset: 30173},
			expr: &actionExpr{
				pos: position{line: 943, col: 16, offset: 30188},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 943, col: 16, offset: 30188},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 943, col: 16, offset: 30188},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 943, col: 25, offset: 30197},
							expr: &litMatcher{
								pos:        position{line: 943, col: 26, offset: 30198},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 943, col: 30, offset: 30202},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 943, col: 36, offset: 30208},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 943, col: 46, offset: 30218},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 943, col: 64, offset: 30236},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 950, col: 1, offset: 30580},
			expr: &actionExpr{
				pos: position{line: 950, col: 15, offset: 30594},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 950, col: 15, offset: 30594},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 950, col: 15, offset: 30594},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 950, col: 23, offset: 30602},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 950, col: 29, offset: 30608},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 950, col: 29, offset: 30608},
									expr: &charClassMatcher{
										pos:        position{line: 950, col: 29, offset: 30608},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 950, col: 73, offset: 30652},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 85, offset: 30664},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 957, col: 1, offset: 30944},
			expr: &choiceExpr{
				pos: position{line: 957, col: 19, offset: 30962},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 957, col: 19, offset: 30962},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 957, col: 19, offset: 30962},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 957, col: 19, offset: 30962},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 957, col: 32, offset: 30975},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 957, col: 41, offset: 30984},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 957, col: 58, offset: 31001},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 9, offset: 31077},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 959, col: 9, offset: 31077},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 959, col: 9, offset: 31077},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 959, col: 21, offset: 31089},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 26, offset: 31094},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 959, col: 39, offset: 31107},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 959, col: 43, offset: 31111},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 959, col: 51, offset: 31119},
										expr: &ruleRefExpr{
											pos:  position{line: 959, col: 52, offset: 31120},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 959, col: 70, offset: 31138},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 963, col: 1, offset: 31207},
			expr: &ruleRefExpr{
				pos:  position{line: 963, col: 16, offset: 31222},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 965, col: 1, offset: 31233},
			expr: &actionExpr{
				pos: position{line: 965, col: 20, offset: 31252},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 965, col: 20, offset: 31252},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 965, col: 29, offset: 31261},
						expr: &seqExpr{
							pos: position{line: 965, col: 30, offset: 31262},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 965, col: 30, offset: 31262},
									expr: &litMatcher{
										pos:        position{line: 965, col: 31, offset: 31263},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 965, col: 35, offset: 31267},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 973, col: 1, offset: 31510},
			expr: &litMatcher{
				pos:        position{line: 973, col: 32, offset: 31541},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 975, col: 1, offset: 31546},
			expr: &actionExpr{
				pos: position{line: 975, col: 26, offset: 31571},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 975, col: 26, offset: 31571},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 975, col: 26, offset: 31571},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 975, col: 54, offset: 31599},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 63, offset: 31608},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 975, col: 93, offset: 31638},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 975, col: 121, offset: 31666},
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 122, offset: 31667},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 979, col: 1, offset: 31780},
			expr: &choiceExpr{
				pos: position{line: 979, col: 33, offset: 31812},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 979, col: 34, offset: 31813},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 979, col: 34, offset: 31813},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 979, col: 35, offset: 31814},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 979, col: 35, offset: 31814},
											expr: &ruleRefExpr{
												pos:  position{line: 979, col: 36, offset: 31815},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 979, col: 64, offset: 31843},
											expr: &ruleRefExpr{
												pos:  position{line: 979, col: 65, offset: 31844},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 979, col: 71, offset: 31850},
											expr: &ruleRefExpr{
												pos:  position{line: 979, col: 72, offset: 31851},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 979, col: 80, offset: 31859,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 979, col: 83, offset: 31862},
									expr: &seqExpr{
										pos: position{line: 979, col: 84, offset: 31863},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 979, col: 84, offset: 31863},
												expr: &seqExpr{
													pos: position{line: 979, col: 86, offset: 31865},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 979, col: 86, offset: 31865},
															expr: &ruleRefExpr{
																pos:  position{line: 979, col: 86, offset: 31865},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 979, col: 93, offset: 31872},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 979, col: 122, offset: 31901},
												expr: &ruleRefExpr{
													pos:  position{line: 979, col: 123, offset: 31902},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 979, col: 151, offset: 31930},
												expr: &ruleRefExpr{
													pos:  position{line: 979, col: 152, offset: 31931},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 979, col: 160, offset: 31939,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 11, offset: 32089},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 981, col: 12, offset: 32090},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 981, col: 12, offset: 32090},
									expr: &ruleRefExpr{
										pos:  position{line: 981, col: 13, offset: 32091},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 981, col: 19, offset: 32097},
									expr: &ruleRefExpr{
										pos:  position{line: 981, col: 20, offset: 32098},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 981, col: 28, offset: 32106},
									expr: &ruleRefExpr{
										pos:  position{line: 981, col: 29, offset: 32107},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 981, col: 57, offset: 32135,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 985, col: 1, offset: 32225},
			expr: &litMatcher{
				pos:        position{line: 985, col: 32, offset: 32256},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 987, col: 1, offset: 32263},
			expr: &actionExpr{
				pos: position{line: 987, col: 26, offset: 32288},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 987, col: 26, offset: 32288},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 987, col: 26, offset: 32288},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 987, col: 54, offset: 32316},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 63, offset: 32325},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 987, col: 93, offset: 32355},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 987, col: 121, offset: 32383},
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 122, offset: 32384},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 991, col: 1, offset: 32497},
			expr: &choiceExpr{
				pos: position{line: 991, col: 33, offset: 32529},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 991, col: 34, offset: 32530},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 991, col: 34, offset: 32530},
							expr: &seqExpr{
								pos: position{line: 991, col: 35, offset: 32531},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 991, col: 35, offset: 32531},
										expr: &ruleRefExpr{
											pos:  position{line: 991, col: 36, offset: 32532},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 991, col: 64, offset: 32560,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 993, col: 11, offset: 32733},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 993, col: 11, offset: 32733},
							expr: &seqExpr{
								pos: position{line: 993, col: 12, offset: 32734},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 993, col: 12, offset: 32734},
										expr: &ruleRefExpr{
											pos:  position{line: 993, col: 13, offset: 32735},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 993, col: 19, offset: 32741},
										expr: &ruleRefExpr{
											pos:  position{line: 993, col: 20, offset: 32742},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 993, col: 28, offset: 32750},
										expr: &ruleRefExpr{
											pos:  position{line: 993, col: 29, offset: 32751},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 993, col: 57, offset: 32779,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 997, col: 1, offset: 32870},
			expr: &choiceExpr{
				pos: position{line: 997, col: 21, offset: 32890},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 997, col: 21, offset: 32890},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 997, col: 21, offset: 32890},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 997, col: 21, offset: 32890},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 997, col: 30, offset: 32899},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 997, col: 38, offset: 32907},
										expr: &ruleRefExpr{
											pos:  position{line: 997, col: 39, offset: 32908},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 997, col: 67, offset: 32936},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 999, col: 9, offset: 33040},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 999, col: 9, offset: 33040},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 999, col: 9, offset: 33040},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 999, col: 19, offset: 33050},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 999, col: 27, offset: 33058},
										expr: &choiceExpr{
											pos: position{line: 999, col: 28, offset: 33059},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 999, col: 28, offset: 33059},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 999, col: 41, offset: 33072},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 999, col: 69, offset: 33100},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1003, col: 1, offset: 33204},
			expr: &actionExpr{
				pos: position{line: 1003, col: 30, offset: 33233},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1003, col: 30, offset: 33233},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1010, col: 1, offset: 33403},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 9, offset: 33411},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1010, col: 9, offset: 33411},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 24, offset: 33426},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1013, col: 1, offset: 33507},
			expr: &actionExpr{
				pos: position{line: 1013, col: 17, offset: 33523},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1013, col: 17, offset: 33523},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1013, col: 17, offset: 33523},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1013, col: 25, offset: 33531},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 30, offset: 33536},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1013, col: 40, offset: 33546},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 58, offset: 33564},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1017, col: 1, offset: 33686},
			expr: &actionExpr{
				pos: position{line: 1017, col: 17, offset: 33702},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1017, col: 17, offset: 33702},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1017, col: 17, offset: 33702},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1017, col: 22, offset: 33707},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 42, offset: 33727},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1017, col: 59, offset: 33744},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 60, offset: 33745},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElement",
			pos:  position{line: 1025, col: 1, offset: 34027},
			expr: &choiceExpr{
				pos: position{line: 1026, col: 9, offset: 34050},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1026, col: 9, offset: 34050},
						name: "OrderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 11, offset: 34080},
						name: "UnorderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 11, offset: 34111},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 11, offset: 34193},
						name: "CalloutListElement",
					},
				},
			},
		},
		{
			name: "OrderedListElement",
			pos:  position{line: 1033, col: 1, offset: 34239},
			expr: &actionExpr{
				pos: position{line: 1033, col: 23, offset: 34261},
				run: (*parser).callonOrderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1033, col: 23, offset: 34261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1033, col: 23, offset: 34261},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1033, col: 31, offset: 34269},
								name: "OrderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1033, col: 57, offset: 34295},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1033, col: 66, offset: 34304},
								name: "OrderedListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementPrefix",
			pos:  position{line: 1037, col: 1, offset: 34441},
			expr: &actionExpr{
				pos: position{line: 1038, col: 5, offset: 34474},
				run: (*parser).callonOrderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1038, col: 5, offset: 34474},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1038, col: 5, offset: 34474},
							expr: &ruleRefExpr{
								pos:  position{line: 1038, col: 5, offset: 34474},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1038, col: 12, offset: 34481},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1040, col: 9, offset: 34544},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1040, col: 9, offset: 34544},
										run: (*parser).callonOrderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1040, col: 9, offset: 34544},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1040, col: 9, offset: 34544},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1040, col: 16, offset: 34551},
														run: (*parser).callonOrderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1040, col: 16, offset: 34551},
															expr: &litMatcher{
																pos:        position{line: 1040, col: 17, offset: 34552},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1044, col: 9, offset: 34652},
													run: (*parser).callonOrderedListElementPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1063, col: 11, offset: 35369},
										run: (*parser).callonOrderedListElementPrefix14,
										expr: &seqExpr{
											pos: position{line: 1063, col: 11, offset: 35369},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1063, col: 11, offset: 35369},
													expr: &charClassMatcher{
														pos:        position{line: 1063, col: 12, offset: 35370},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1063, col: 20, offset: 35378},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1065, col: 13, offset: 35489},
										run: (*parser).callonOrderedListElementPrefix19,
										expr: &seqExpr{
											pos: position{line: 1065, col: 13, offset: 35489},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1065, col: 14, offset: 35490},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1065, col: 21, offset: 35497},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1067, col: 13, offset: 35611},
										run: (*parser).callonOrderedListElementPrefix23,
										expr: &seqExpr{
											pos: position{line: 1067, col: 13, offset: 35611},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1067, col: 14, offset: 35612},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1067, col: 21, offset: 35619},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1069, col: 13, offset: 35733},
										run: (*parser).callonOrderedListElementPrefix27,
										expr: &seqExpr{
											pos: position{line: 1069, col: 13, offset: 35733},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1069, col: 13, offset: 35733},
													expr: &charClassMatcher{
														pos:        position{line: 1069, col: 14, offset: 35734},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1069, col: 26, offset: 35746},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1071, col: 13, offset: 35860},
										run: (*parser).callonOrderedListElementPrefix32,
										expr: &seqExpr{
											pos: position{line: 1071, col: 13, offset: 35860},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1071, col: 13, offset: 35860},
													expr: &charClassMatcher{
														pos:        position{line: 1071, col: 14, offset: 35861},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1071, col: 26, offset: 35873},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1073, col: 12, offset: 35986},
							expr: &ruleRefExpr{
								pos:  position{line: 1073, col: 12, offset: 35986},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementContent",
			pos:  position{line: 1077, col: 1, offset: 36021},
			expr: &actionExpr{
				pos: position{line: 1077, col: 30, offset: 36050},
				run: (*parser).callonOrderedListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1077, col: 30, offset: 36050},
					expr: &charClassMatcher{
						pos:        position{line: 1077, col: 30, offset: 36050},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UnorderedListElement",
			pos:  position{line: 1088, col: 1, offset: 36266},
			expr: &actionExpr{
				pos: position{line: 1089, col: 5, offset: 36295},
				run: (*parser).callonUnorderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1089, col: 5, offset: 36295},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1089, col: 5, offset: 36295},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 13, offset: 36303},
								name: "UnorderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1090, col: 5, offset: 36336},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 1090, col: 16, offset: 36347},
								expr: &ruleRefExpr{
									pos:  position{line: 1090, col: 17, offset: 36348},
									name: "UnorderedListElementCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1091, col: 5, offset: 36386},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1091, col: 14, offset: 36395},
								name: "UnorderedListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementPrefix",
			pos:  position{line: 1095, col: 1, offset: 36558},
			expr: &actionExpr{
				pos: position{line: 1096, col: 5, offset: 36593},
				run: (*parser).callonUnorderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1096, col: 5, offset: 36593},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1096, col: 5, offset: 36593},
							expr: &ruleRefExpr{
								pos:  position{line: 1096, col: 5, offset: 36593},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1096, col: 12, offset: 36600},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1096, col: 20, offset: 36608},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1098, col: 9, offset: 36665},
										run: (*parser).callonUnorderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1098, col: 9, offset: 36665},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1098, col: 9, offset: 36665},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1098, col: 16, offset: 36672},
														run: (*parser).callonUnorderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1098, col: 16, offset: 36672},
															expr: &litMatcher{
																pos:        position{line: 1098, col: 17, offset: 36673},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1102, col: 9, offset: 36773},
													run: (*parser).callonUnorderedListElementPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1119, col: 14, offset: 37480},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 1119, col: 21, offset: 37487},
											run: (*parser).callonUnorderedListElementPrefix15,
											expr: &litMatcher{
												pos:        position{line: 1119, col: 22, offset: 37488},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1121, col: 13, offset: 37574},
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 13, offset: 37574},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementCheckStyle",
			pos:  position{line: 1125, col: 1, offset: 37610},
			expr: &actionExpr{
				pos: position{line: 1125, col: 35, offset: 37644},
				run: (*parser).callonUnorderedListElementCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 1125, col: 35, offset: 37644},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1125, col: 35, offset: 37644},
							expr: &litMatcher{
								pos:        position{line: 1125, col: 36, offset: 37645},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1125, col: 40, offset: 37649},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 1126, col: 7, offset: 37663},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1126, col: 7, offset: 37663},
										run: (*parser).callonUnorderedListElementCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 1126, col: 7, offset: 37663},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1127, col: 7, offset: 37708},
										run: (*parser).callonUnorderedListElementCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 1127, col: 7, offset: 37708},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1128, col: 7, offset: 37751},
										run: (*parser).callonUnorderedListElementCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 1128, col: 7, offset: 37751},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1129, col: 7, offset: 37793},
							expr: &ruleRefExpr{
								pos:  position{line: 1129, col: 7, offset: 37793},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementContent",
			pos:  position{line: 1137, col: 1, offset: 38087},
			expr: &actionExpr{
				pos: position{line: 1137, col: 32, offset: 38118},
				run: (*parser).callonUnorderedListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1137, col: 32, offset: 38118},
					expr: &charClassMatcher{
						pos:        position{line: 1137, col: 32, offset: 38118},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 1147, col: 1, offset: 38307},
			expr: &actionExpr{
				pos: position{line: 1147, col: 20, offset: 38326},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 1147, col: 20, offset: 38326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1147, col: 20, offset: 38326},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1147, col: 26, offset: 38332},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 1147, col: 47, offset: 38353},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 1147, col: 58, offset: 38364},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1147, col: 84, offset: 38390},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 1147, col: 96, offset: 38402},
								expr: &ruleRefExpr{
									pos:  position{line: 1147, col: 97, offset: 38403},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 1151, col: 1, offset: 38533},
			expr: &actionExpr{
				pos: position{line: 1151, col: 24, offset: 38556},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1151, col: 24, offset: 38556},
					expr: &seqExpr{
						pos: position{line: 1151, col: 25, offset: 38557},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1151, col: 25, offset: 38557},
								expr: &ruleRefExpr{
									pos:  position{line: 1151, col: 26, offset: 38558},
									name: "LabeledListItemSeparator",
								},
							},
							&anyMatcher{
								line: 1151, col: 51, offset: 38583,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 1155, col: 1, offset: 38623},
			expr: &actionExpr{
				pos: position{line: 1156, col: 5, offset: 38656},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 5, offset: 38656},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1156, col: 5, offset: 38656},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 1156, col: 16, offset: 38667},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1156, col: 16, offset: 38667},
									expr: &litMatcher{
										pos:        position{line: 1156, col: 17, offset: 38668},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1159, col: 5, offset: 38726},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 1163, col: 6, offset: 38902},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1163, col: 6, offset: 38902},
									expr: &choiceExpr{
										pos: position{line: 1163, col: 7, offset: 38903},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1163, col: 7, offset: 38903},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 1163, col: 15, offset: 38911},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1163, col: 27, offset: 38923},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 1167, col: 1, offset: 38959},
			expr: &actionExpr{
				pos: position{line: 1167, col: 31, offset: 38989},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1167, col: 31, offset: 38989},
					expr: &charClassMatcher{
						pos:        position{line: 1167, col: 31, offset: 38989},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1171, col: 1, offset: 39035},
			expr: &actionExpr{
				pos: position{line: 1173, col: 5, offset: 39113},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1173, col: 5, offset: 39113},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1173, col: 5, offset: 39113},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1176, col: 5, offset: 39175},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1176, col: 9, offset: 39179},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1176, col: 14, offset: 39184},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1176, col: 14, offset: 39184},
									expr: &charClassMatcher{
										pos:        position{line: 1176, col: 14, offset: 39184},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1176, col: 62, offset: 39232},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1176, col: 66, offset: 39236},
							expr: &ruleRefExpr{
								pos:  position{line: 1176, col: 66, offset: 39236},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1176, col: 73, offset: 39243},
							expr: &choiceExpr{
								pos: position{line: 1176, col: 75, offset: 39245},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1176, col: 75, offset: 39245},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 81, offset: 39251},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElement",
			pos:  position{line: 1180, col: 1, offset: 39312},
			expr: &actionExpr{
				pos: position{line: 1180, col: 23, offset: 39334},
				run: (*parser).callonCalloutListElement1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 23, offset: 39334},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1180, col: 23, offset: 39334},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 28, offset: 39339},
								name: "CalloutListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 54, offset: 39365},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 67, offset: 39378},
								name: "CalloutListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElementPrefix",
			pos:  position{line: 1184, col: 1, offset: 39497},
			expr: &actionExpr{
				pos: position{line: 1184, col: 29, offset: 39525},
				run: (*parser).callonCalloutListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1184, col: 29, offset: 39525},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1184, col: 29, offset: 39525},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1184, col: 33, offset: 39529},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1184, col: 38, offset: 39534},
								run: (*parser).callonCalloutListElementPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1184, col: 38, offset: 39534},
									expr: &charClassMatcher{
										pos:        position{line: 1184, col: 38, offset: 39534},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1184, col: 86, offset: 39582},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1184, col: 90, offset: 39586},
							expr: &ruleRefExpr{
								pos:  position{line: 1184, col: 90, offset: 39586},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElementContent",
			pos:  position{line: 1188, col: 1, offset: 39626},
			expr: &actionExpr{
				pos: position{line: 1188, col: 30, offset: 39655},
				run: (*parser).callonCalloutListElementContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1188, col: 30, offset: 39655},
					expr: &charClassMatcher{
						pos:        position{line: 1188, col: 30, offset: 39655},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1198, col: 1, offset: 39844},
			expr: &actionExpr{
				pos: position{line: 1198, col: 28, offset: 39871},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 28, offset: 39871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1198, col: 28, offset: 39871},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1198, col: 32, offset: 39875},
							expr: &ruleRefExpr{
								pos:  position{line: 1198, col: 32, offset: 39875},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1205, col: 1, offset: 40174},
			expr: &choiceExpr{
				pos: position{line: 1206, col: 5, offset: 40193},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1207, col: 9, offset: 40203},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1207, col: 9, offset: 40203},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1207, col: 9, offset: 40203},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1207, col: 20, offset: 40214},
										expr: &ruleRefExpr{
											pos:  position{line: 1207, col: 21, offset: 40215},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1208, col: 9, offset: 40341},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1208, col: 15, offset: 40347},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1208, col: 15, offset: 40347},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1208, col: 41, offset: 40373},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 7, offset: 40492},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1214, col: 1, offset: 40511},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 32, offset: 40542},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1214, col: 32, offset: 40542},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1214, col: 32, offset: 40542},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1214, col: 36, offset: 40546},
								expr: &litMatcher{
									pos:        position{line: 1214, col: 37, offset: 40547},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1214, col: 43, offset: 40553},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1214, col: 43, offset: 40553},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1214, col: 47, offset: 40557},
								expr: &litMatcher{
									pos:        position{line: 1214, col: 48, offset: 40558},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1214, col: 54, offset: 40564},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1214, col: 54, offset: 40564},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1214, col: 58, offset: 40568},
								expr: &litMatcher{
									pos:        position{line: 1214, col: 59, offset: 40569},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1214, col: 65, offset: 40575},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1214, col: 65, offset: 40575},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1214, col: 69, offset: 40579},
								expr: &litMatcher{
									pos:        position{line: 1214, col: 70, offset: 40580},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1216, col: 1, offset: 40585},
			expr: &choiceExpr{
				pos: position{line: 1216, col: 34, offset: 40618},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1216, col: 34, offset: 40618},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1216, col: 41, offset: 40625},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1216, col: 48, offset: 40632},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1216, col: 55, offset: 40639},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1216, col: 62, offset: 40646},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1216, col: 68, offset: 40652},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1218, col: 1, offset: 40657},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 5, offset: 40687},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1219, col: 5, offset: 40687},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 7, offset: 40714},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 7, offset: 40742},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 7, offset: 40770},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 7, offset: 40802},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 7, offset: 40823},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1226, col: 1, offset: 40841},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 5, offset: 40873},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1227, col: 5, offset: 40873},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 7, offset: 40899},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 7, offset: 40927},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 7, offset: 40955},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1232, col: 1, offset: 40981},
			expr: &actionExpr{
				pos: position{line: 1233, col: 5, offset: 41062},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 5, offset: 41062},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1233, col: 5, offset: 41062},
							expr: &litMatcher{
								pos:        position{line: 1233, col: 7, offset: 41064},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 5, offset: 41073},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1235, col: 9, offset: 41091},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1235, col: 9, offset: 41091},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1236, col: 11, offset: 41118},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1237, col: 11, offset: 41146},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1238, col: 11, offset: 41174},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1239, col: 11, offset: 41206},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1240, col: 11, offset: 41238},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1246, col: 1, offset: 41305},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 33, offset: 41337},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1246, col: 33, offset: 41337},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1246, col: 39, offset: 41343},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1246, col: 39, offset: 41343},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1250, col: 1, offset: 41485},
			expr: &actionExpr{
				pos: position{line: 1250, col: 25, offset: 41509},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1250, col: 25, offset: 41509},
					expr: &litMatcher{
						pos:        position{line: 1250, col: 25, offset: 41509},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1254, col: 1, offset: 41558},
			expr: &actionExpr{
				pos: position{line: 1254, col: 25, offset: 41582},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1254, col: 25, offset: 41582},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1254, col: 25, offset: 41582},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1254, col: 30, offset: 41587},
							expr: &litMatcher{
								pos:        position{line: 1254, col: 30, offset: 41587},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1261, col: 1, offset: 41698},
			expr: &choiceExpr{
				pos: position{line: 1261, col: 13, offset: 41710},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1261, col: 13, offset: 41710},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 35, offset: 41732},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1263, col: 1, offset: 41799},
			expr: &actionExpr{
				pos: position{line: 1263, col: 24, offset: 41822},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 24, offset: 41822},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1263, col: 24, offset: 41822},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 29, offset: 41827},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 39, offset: 41837},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1263, col: 68, offset: 41866},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1267, col: 1, offset: 41965},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1267, col: 32, offset: 41996},
				expr: &ruleRefExpr{
					pos:  position{line: 1267, col: 32, offset: 41996},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1269, col: 1, offset: 42027},
			expr: &actionExpr{
				pos: position{line: 1269, col: 31, offset: 42057},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 31, offset: 42057},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1269, col: 31, offset: 42057},
							expr: &litMatcher{
								pos:        position{line: 1269, col: 33, offset: 42059},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 39, offset: 42065},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1269, col: 48, offset: 42074},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1269, col: 48, offset: 42074},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1270, col: 7, offset: 42085},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1271, col: 7, offset: 42130},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1271, col: 7, offset: 42130},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1271, col: 15, offset: 42138},
												expr: &ruleRefExpr{
													pos:  position{line: 1271, col: 16, offset: 42139},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1272, col: 7, offset: 42153},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1273, col: 7, offset: 42181},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 7, offset: 42204},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1275, col: 7, offset: 42222},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1276, col: 7, offset: 42241},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 7, offset: 42279},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 7, offset: 42304},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1282, col: 1, offset: 42379},
			expr: &actionExpr{
				pos: position{line: 1283, col: 5, offset: 42419},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1283, col: 5, offset: 42419},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1283, col: 5, offset: 42419},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1283, col: 16, offset: 42430},
								expr: &ruleRefExpr{
									pos:  position{line: 1283, col: 17, offset: 42431},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 5, offset: 42457},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1284, col: 11, offset: 42463},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1284, col: 11, offset: 42463},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 11, offset: 42493},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1286, col: 11, offset: 42514},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1287, col: 11, offset: 42535},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 11, offset: 42559},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1289, col: 11, offset: 42583},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1293, col: 1, offset: 42684},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 5, offset: 42728},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1294, col: 5, offset: 42728},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1295, col: 7, offset: 42825},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1295, col: 7, offset: 42825},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1295, col: 7, offset: 42825},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1295, col: 12, offset: 42830},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1299, col: 1, offset: 43001},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 5, offset: 43029},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 43029},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1300, col: 5, offset: 43029},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1300, col: 6, offset: 43030},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1300, col: 6, offset: 43030},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1300, col: 10, offset: 43034},
											expr: &litMatcher{
												pos:        position{line: 1300, col: 11, offset: 43035},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1300, col: 16, offset: 43040},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1300, col: 26, offset: 43050},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1300, col: 55, offset: 43079},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1300, col: 59, offset: 43083},
									expr: &notExpr{
										pos: position{line: 1300, col: 61, offset: 43085},
										expr: &ruleRefExpr{
											pos:  position{line: 1300, col: 62, offset: 43086},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1302, col: 9, offset: 43292},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1302, col: 9, offset: 43292},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1302, col: 9, offset: 43292},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1302, col: 13, offset: 43296},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1302, col: 23, offset: 43306},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1302, col: 23, offset: 43306},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1302, col: 27, offset: 43310},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 56, offset: 43339},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1306, col: 1, offset: 43557},
			expr: &seqExpr{
				pos: position{line: 1306, col: 32, offset: 43588},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1306, col: 32, offset: 43588},
						expr: &ruleRefExpr{
							pos:  position{line: 1306, col: 33, offset: 43589},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1306, col: 39, offset: 43595},
						expr: &ruleRefExpr{
							pos:  position{line: 1306, col: 39, offset: 43595},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1308, col: 1, offset: 43624},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 5, offset: 43659},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1309, col: 5, offset: 43659},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1310, col: 7, offset: 43670},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1310, col: 7, offset: 43670},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1310, col: 15, offset: 43678},
								expr: &ruleRefExpr{
									pos:  position{line: 1310, col: 16, offset: 43679},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 7, offset: 43693},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 7, offset: 43721},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 7, offset: 43744},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1314, col: 7, offset: 43762},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1315, col: 7, offset: 43781},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1315, col: 7, offset: 43781},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 7, offset: 43781},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1315, col: 14, offset: 43788},
								expr: &seqExpr{
									pos: position{line: 1315, col: 15, offset: 43789},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1315, col: 15, offset: 43789},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1315, col: 19, offset: 43793},
											expr: &litMatcher{
												pos:        position{line: 1315, col: 20, offset: 43794},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 7, offset: 43806},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 7, offset: 43844},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 7, offset: 43869},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1320, col: 1, offset: 43907},
			expr: &actionExpr{
				pos: position{line: 1321, col: 5, offset: 43947},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1321, col: 5, offset: 43947},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1321, col: 5, offset: 43947},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1321, col: 16, offset: 43958},
								expr: &ruleRefExpr{
									pos:  position{line: 1321, col: 17, offset: 43959},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 5, offset: 43985},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1322, col: 11, offset: 43991},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1322, col: 11, offset: 43991},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1323, col: 11, offset: 44021},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1324, col: 11, offset: 44042},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 11, offset: 44063},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1326, col: 11, offset: 44087},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1327, col: 11, offset: 44111},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1330, col: 1, offset: 44211},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 5, offset: 44255},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1331, col: 5, offset: 44255},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1332, col: 7, offset: 44352},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1332, col: 7, offset: 44352},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1332, col: 7, offset: 44352},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1332, col: 11, offset: 44356},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1336, col: 1, offset: 44527},
			expr: &choiceExpr{
				pos: position{line: 1337, col: 5, offset: 44551},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1337, col: 5, offset: 44551},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1337, col: 5, offset: 44551},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1337, col: 5, offset: 44551},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1337, col: 18, offset: 44564},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 40, offset: 44586},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1337, col: 45, offset: 44591},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1337, col: 55, offset: 44601},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 84, offset: 44630},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1339, col: 9, offset: 44787},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1339, col: 9, offset: 44787},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1339, col: 9, offset: 44787},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1339, col: 22, offset: 44800},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1339, col: 44, offset: 44822},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1339, col: 49, offset: 44827},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1339, col: 59, offset: 44837},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1339, col: 88, offset: 44866},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1342, col: 9, offset: 45066},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1342, col: 9, offset: 45066},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1342, col: 9, offset: 45066},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1342, col: 22, offset: 45079},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1342, col: 44, offset: 45101},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1342, col: 48, offset: 45105},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1342, col: 58, offset: 45115},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1342, col: 87, offset: 45144},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1349, col: 1, offset: 45365},
			expr: &choiceExpr{
				pos: position{line: 1349, col: 15, offset: 45379},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1349, col: 15, offset: 45379},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 39, offset: 45403},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1351, col: 1, offset: 45426},
			expr: &actionExpr{
				pos: position{line: 1351, col: 26, offset: 45451},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1351, col: 26, offset: 45451},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1351, col: 26, offset: 45451},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1351, col: 31, offset: 45456},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1351, col: 41, offset: 45466},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1351, col: 72, offset: 45497},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1355, col: 1, offset: 45643},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1355, col: 34, offset: 45676},
				expr: &ruleRefExpr{
					pos:  position{line: 1355, col: 34, offset: 45676},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1357, col: 1, offset: 45708},
			expr: &actionExpr{
				pos: position{line: 1358, col: 5, offset: 45745},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1358, col: 5, offset: 45745},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1358, col: 5, offset: 45745},
							expr: &litMatcher{
								pos:        position{line: 1358, col: 7, offset: 45747},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1358, col: 13, offset: 45753},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1358, col: 22, offset: 45762},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1358, col: 22, offset: 45762},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1359, col: 7, offset: 45773},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1360, col: 7, offset: 45818},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1360, col: 7, offset: 45818},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1360, col: 15, offset: 45826},
												expr: &ruleRefExpr{
													pos:  position{line: 1360, col: 16, offset: 45827},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1361, col: 7, offset: 45841},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1362, col: 7, offset: 45869},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1363, col: 7, offset: 45892},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1364, col: 7, offset: 45910},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1365, col: 7, offset: 45929},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1366, col: 7, offset: 45969},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1367, col: 7, offset: 45994},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1371, col: 1, offset: 46071},
			expr: &actionExpr{
				pos: position{line: 1372, col: 5, offset: 46113},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1372, col: 5, offset: 46113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1372, col: 5, offset: 46113},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1372, col: 16, offset: 46124},
								expr: &ruleRefExpr{
									pos:  position{line: 1372, col: 17, offset: 46125},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1373, col: 5, offset: 46151},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1373, col: 11, offset: 46157},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1373, col: 11, offset: 46157},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1374, col: 11, offset: 46189},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1375, col: 11, offset: 46208},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1376, col: 11, offset: 46229},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1377, col: 11, offset: 46253},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1378, col: 11, offset: 46277},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1382, col: 1, offset: 46378},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 5, offset: 46424},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1383, col: 5, offset: 46424},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1384, col: 7, offset: 46523},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1384, col: 7, offset: 46523},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1384, col: 7, offset: 46523},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1384, col: 12, offset: 46528},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1388, col: 1, offset: 46701},
			expr: &choiceExpr{
				pos: position{line: 1389, col: 5, offset: 46731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1389, col: 5, offset: 46731},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1389, col: 5, offset: 46731},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1389, col: 6, offset: 46732},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1389, col: 6, offset: 46732},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1389, col: 10, offset: 46736},
											expr: &litMatcher{
												pos:        position{line: 1389, col: 11, offset: 46737},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1389, col: 16, offset: 46742},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1389, col: 26, offset: 46752},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1389, col: 57, offset: 46783},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1391, col: 9, offset: 46985},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1391, col: 9, offset: 46985},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1391, col: 9, offset: 46985},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1391, col: 13, offset: 46989},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1391, col: 23, offset: 46999},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1391, col: 23, offset: 46999},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1391, col: 27, offset: 47003},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1391, col: 58, offset: 47034},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1395, col: 1, offset: 47256},
			expr: &actionExpr{
				pos: position{line: 1395, col: 34, offset: 47289},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1395, col: 34, offset: 47289},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1395, col: 34, offset: 47289},
							expr: &ruleRefExpr{
								pos:  position{line: 1395, col: 35, offset: 47290},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1395, col: 41, offset: 47296},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1395, col: 51, offset: 47306},
								expr: &ruleRefExpr{
									pos:  position{line: 1395, col: 51, offset: 47306},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1399, col: 1, offset: 47367},
			expr: &choiceExpr{
				pos: position{line: 1400, col: 5, offset: 47404},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1400, col: 5, offset: 47404},
						name: "ItalicWord",
					},
					&seqExpr{
						pos: position{line: 1401, col: 7, offset: 47421},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1401, col: 7, offset: 47421},
								expr: &ruleRefExpr{
									pos:  position{line: 1401, col: 7, offset: 47421},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1401, col: 14, offset: 47428},
								expr: &seqExpr{
									pos: position{line: 1401, col: 15, offset: 47429},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1401, col: 15, offset: 47429},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1401, col: 19, offset: 47433},
											expr: &litMatcher{
												pos:        position{line: 1401, col: 20, offset: 47434},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1402, col: 7, offset: 47446},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1402, col: 7, offset: 47446},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1402, col: 15, offset: 47454},
								expr: &ruleRefExpr{
									pos:  position{line: 1402, col: 16, offset: 47455},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 7, offset: 47469},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 7, offset: 47497},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 7, offset: 47520},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 7, offset: 47538},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 7, offset: 47557},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 7, offset: 47597},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 7, offset: 47622},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "ItalicWord",
			pos:  position{line: 1412, col: 1, offset: 47717},
			expr: &actionExpr{
				pos: position{line: 1412, col: 15, offset: 47731},
				run: (*parser).callonItalicWord1,
				expr: &seqExpr{
					pos: position{line: 1412, col: 15, offset: 47731},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1412, col: 15, offset: 47731},
							expr: &charClassMatcher{
								pos:        position{line: 1412, col: 15, offset: 47731},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1412, col: 25, offset: 47741},
							expr: &choiceExpr{
								pos: position{line: 1412, col: 27, offset: 47743},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1412, col: 27, offset: 47743},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&litMatcher{
										pos:        position{line: 1412, col: 33, offset: 47749},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1416, col: 1, offset: 47809},
			expr: &actionExpr{
				pos: position{line: 1417, col: 5, offset: 47850},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 5, offset: 47850},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1417, col: 5, offset: 47850},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1417, col: 16, offset: 47861},
								expr: &ruleRefExpr{
									pos:  position{line: 1417, col: 17, offset: 47862},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1418, col: 5, offset: 47888},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1418, col: 11, offset: 47894},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1418, col: 11, offset: 47894},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1419, col: 11, offset: 47913},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1420, col: 11, offset: 47945},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1421, col: 11, offset: 47966},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1422, col: 11, offset: 47990},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1423, col: 11, offset: 48014},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1427, col: 1, offset: 48115},
			expr: &choiceExpr{
				pos: position{line: 1428, col: 5, offset: 48161},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1428, col: 5, offset: 48161},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1429, col: 7, offset: 48260},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1429, col: 7, offset: 48260},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1429, col: 7, offset: 48260},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1429, col: 11, offset: 48264},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1433, col: 1, offset: 48438},
			expr: &choiceExpr{
				pos: position{line: 1434, col: 5, offset: 48464},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1434, col: 5, offset: 48464},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1434, col: 5, offset: 48464},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1434, col: 5, offset: 48464},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 18, offset: 48477},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1434, col: 40, offset: 48499},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1434, col: 45, offset: 48504},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 55, offset: 48514},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1434, col: 86, offset: 48545},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1436, col: 9, offset: 48702},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1436, col: 9, offset: 48702},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1436, col: 9, offset: 48702},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 22, offset: 48715},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1436, col: 44, offset: 48737},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1436, col: 49, offset: 48742},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 59, offset: 48752},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1436, col: 90, offset: 48783},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1439, col: 9, offset: 48983},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1439, col: 9, offset: 48983},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1439, col: 9, offset: 48983},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 22, offset: 48996},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1439, col: 44, offset: 49018},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1439, col: 48, offset: 49022},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 58, offset: 49032},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1439, col: 89, offset: 49063},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1446, col: 1, offset: 49290},
			expr: &choiceExpr{
				pos: position{line: 1446, col: 18, offset: 49307},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1446, col: 18, offset: 49307},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 45, offset: 49334},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1448, col: 1, offset: 49360},
			expr: &actionExpr{
				pos: position{line: 1448, col: 29, offset: 49388},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1448, col: 29, offset: 49388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1448, col: 29, offset: 49388},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 34, offset: 49393},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 44, offset: 49403},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1448, col: 78, offset: 49437},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1452, col: 1, offset: 49586},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1452, col: 37, offset: 49622},
				expr: &ruleRefExpr{
					pos:  position{line: 1452, col: 37, offset: 49622},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1454, col: 1, offset: 49689},
			expr: &actionExpr{
				pos: position{line: 1455, col: 5, offset: 49729},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 5, offset: 49729},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1455, col: 5, offset: 49729},
							expr: &litMatcher{
								pos:        position{line: 1455, col: 7, offset: 49731},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 13, offset: 49737},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1455, col: 22, offset: 49746},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1455, col: 22, offset: 49746},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1456, col: 7, offset: 49757},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1457, col: 7, offset: 49802},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1457, col: 7, offset: 49802},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1457, col: 15, offset: 49810},
												expr: &ruleRefExpr{
													pos:  position{line: 1457, col: 16, offset: 49811},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1458, col: 7, offset: 49825},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1459, col: 7, offset: 49853},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1460, col: 7, offset: 49876},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1461, col: 7, offset: 49894},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1462, col: 7, offset: 49913},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1463, col: 7, offset: 49976},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1464, col: 7, offset: 50019},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1465, col: 7, offset: 50044},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1469, col: 1, offset: 50124},
			expr: &actionExpr{
				pos: position{line: 1470, col: 5, offset: 50168},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 5, offset: 50168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1470, col: 5, offset: 50168},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1470, col: 16, offset: 50179},
								expr: &ruleRefExpr{
									pos:  position{line: 1470, col: 17, offset: 50180},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 5, offset: 50206},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1471, col: 11, offset: 50212},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1471, col: 11, offset: 50212},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1472, col: 11, offset: 50247},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1473, col: 11, offset: 50266},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1474, col: 11, offset: 50287},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1475, col: 11, offset: 50308},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1476, col: 11, offset: 50332},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1480, col: 1, offset: 50434},
			expr: &choiceExpr{
				pos: position{line: 1481, col: 5, offset: 50483},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1481, col: 5, offset: 50483},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1482, col: 7, offset: 50585},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1482, col: 7, offset: 50585},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1482, col: 7, offset: 50585},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1482, col: 12, offset: 50590},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1486, col: 1, offset: 50768},
			expr: &choiceExpr{
				pos: position{line: 1487, col: 5, offset: 50801},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1487, col: 5, offset: 50801},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1487, col: 5, offset: 50801},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1487, col: 6, offset: 50802},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1487, col: 6, offset: 50802},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1487, col: 10, offset: 50806},
											expr: &litMatcher{
												pos:        position{line: 1487, col: 11, offset: 50807},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1487, col: 16, offset: 50812},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1487, col: 26, offset: 50822},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1487, col: 60, offset: 50856},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1489, col: 9, offset: 51061},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1489, col: 9, offset: 51061},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1489, col: 9, offset: 51061},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1489, col: 13, offset: 51065},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1489, col: 23, offset: 51075},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1489, col: 23, offset: 51075},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1489, col: 27, offset: 51079},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1489, col: 61, offset: 51113},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1493, col: 1, offset: 51339},
			expr: &seqExpr{
				pos: position{line: 1493, col: 37, offset: 51375},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1493, col: 37, offset: 51375},
						expr: &ruleRefExpr{
							pos:  position{line: 1493, col: 38, offset: 51376},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1493, col: 44, offset: 51382},
						expr: &ruleRefExpr{
							pos:  position{line: 1493, col: 44, offset: 51382},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1495, col: 1, offset: 51416},
			expr: &choiceExpr{
				pos: position{line: 1496, col: 5, offset: 51457},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1496, col: 5, offset: 51457},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1497, col: 7, offset: 51468},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1497, col: 7, offset: 51468},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1497, col: 15, offset: 51476},
								expr: &ruleRefExpr{
									pos:  position{line: 1497, col: 16, offset: 51477},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1498, col: 7, offset: 51491},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1499, col: 7, offset: 51519},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1500, col: 7, offset: 51542},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1501, col: 7, offset: 51560},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1502, col: 7, offset: 51579},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1502, col: 7, offset: 51579},
								expr: &ruleRefExpr{
									pos:  position{line: 1502, col: 7, offset: 51579},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1502, col: 14, offset: 51586},
								expr: &seqExpr{
									pos: position{line: 1502, col: 15, offset: 51587},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1502, col: 15, offset: 51587},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1502, col: 19, offset: 51591},
											expr: &litMatcher{
												pos:        position{line: 1502, col: 20, offset: 51592},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1503, col: 7, offset: 51716},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1504, col: 7, offset: 51759},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1505, col: 7, offset: 51779},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1506, col: 7, offset: 51804},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1508, col: 1, offset: 51847},
			expr: &actionExpr{
				pos: position{line: 1509, col: 5, offset: 51891},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1509, col: 5, offset: 51891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1509, col: 5, offset: 51891},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1509, col: 16, offset: 51902},
								expr: &ruleRefExpr{
									pos:  position{line: 1509, col: 17, offset: 51903},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 5, offset: 51929},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1510, col: 11, offset: 51935},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1510, col: 11, offset: 51935},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1511, col: 11, offset: 51970},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1512, col: 11, offset: 51989},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1513, col: 11, offset: 52010},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1514, col: 11, offset: 52031},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1515, col: 11, offset: 52055},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1519, col: 1, offset: 52157},
			expr: &actionExpr{
				pos: position{line: 1520, col: 5, offset: 52206},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1520, col: 6, offset: 52207},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1520, col: 6, offset: 52207},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1521, col: 7, offset: 52311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1521, col: 7, offset: 52311},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1521, col: 11, offset: 52315},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1525, col: 1, offset: 52493},
			expr: &choiceExpr{
				pos: position{line: 1526, col: 5, offset: 52522},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1526, col: 5, offset: 52522},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1526, col: 5, offset: 52522},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1526, col: 5, offset: 52522},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1526, col: 18, offset: 52535},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1526, col: 40, offset: 52557},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1526, col: 45, offset: 52562},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1526, col: 55, offset: 52572},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1526, col: 89, offset: 52606},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1528, col: 9, offset: 52763},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1528, col: 9, offset: 52763},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1528, col: 9, offset: 52763},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1528, col: 22, offset: 52776},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1528, col: 44, offset: 52798},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1528, col: 49, offset: 52803},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1528, col: 59, offset: 52813},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1528, col: 93, offset: 52847},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1531, col: 9, offset: 53047},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1531, col: 9, offset: 53047},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1531, col: 9, offset: 53047},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1531, col: 22, offset: 53060},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1531, col: 44, offset: 53082},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1531, col: 48, offset: 53086},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1531, col: 58, offset: 53096},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1531, col: 92, offset: 53130},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1538, col: 1, offset: 53351},
			expr: &choiceExpr{
				pos: position{line: 1538, col: 15, offset: 53365},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1538, col: 15, offset: 53365},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1538, col: 39, offset: 53389},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1540, col: 1, offset: 53412},
			expr: &actionExpr{
				pos: position{line: 1540, col: 26, offset: 53437},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 26, offset: 53437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1540, col: 26, offset: 53437},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 31, offset: 53442},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 41, offset: 53452},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1540, col: 72, offset: 53483},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1544, col: 1, offset: 53629},
			expr: &seqExpr{
				pos: position{line: 1544, col: 34, offset: 53662},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1544, col: 34, offset: 53662},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1544, col: 63, offset: 53691},
						expr: &seqExpr{
							pos: position{line: 1544, col: 64, offset: 53692},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1544, col: 64, offset: 53692},
									expr: &litMatcher{
										pos:        position{line: 1544, col: 66, offset: 53694},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1544, col: 73, offset: 53701},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1544, col: 73, offset: 53701},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1544, col: 81, offset: 53709},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1546, col: 1, offset: 53776},
			expr: &choiceExpr{
				pos: position{line: 1546, col: 33, offset: 53808},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1546, col: 33, offset: 53808},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1547, col: 7, offset: 53819},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1547, col: 7, offset: 53819},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1547, col: 15, offset: 53827},
								expr: &ruleRefExpr{
									pos:  position{line: 1547, col: 16, offset: 53828},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1548, col: 7, offset: 53842},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1549, col: 7, offset: 53870},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1550, col: 7, offset: 53893},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1551, col: 7, offset: 53911},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1552, col: 7, offset: 53930},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1553, col: 7, offset: 53961},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1554, col: 7, offset: 53986},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1556, col: 1, offset: 54026},
			expr: &actionExpr{
				pos: position{line: 1557, col: 5, offset: 54058},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 5, offset: 54058},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1557, col: 5, offset: 54058},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1557, col: 16, offset: 54069},
								expr: &ruleRefExpr{
									pos:  position{line: 1557, col: 17, offset: 54070},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 5, offset: 54096},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1558, col: 11, offset: 54102},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1558, col: 11, offset: 54102},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1559, col: 11, offset: 54121},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1560, col: 11, offset: 54142},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1561, col: 11, offset: 54166},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1562, col: 11, offset: 54198},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1563, col: 11, offset: 54222},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1567, col: 1, offset: 54324},
			expr: &choiceExpr{
				pos: position{line: 1568, col: 5, offset: 54370},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1568, col: 5, offset: 54370},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1569, col: 7, offset: 54469},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1569, col: 7, offset: 54469},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1569, col: 7, offset: 54469},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1569, col: 12, offset: 54474},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1573, col: 1, offset: 54647},
			expr: &choiceExpr{
				pos: position{line: 1573, col: 26, offset: 54672},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1573, col: 26, offset: 54672},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1573, col: 26, offset: 54672},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1573, col: 27, offset: 54673},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1573, col: 27, offset: 54673},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1573, col: 31, offset: 54677},
											expr: &litMatcher{
												pos:        position{line: 1573, col: 32, offset: 54678},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1573, col: 37, offset: 54683},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1573, col: 47, offset: 54693},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1573, col: 78, offset: 54724},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1575, col: 9, offset: 54926},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1575, col: 9, offset: 54926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1575, col: 9, offset: 54926},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1575, col: 13, offset: 54930},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1575, col: 23, offset: 54940},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1575, col: 23, offset: 54940},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1575, col: 27, offset: 54944},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1575, col: 58, offset: 54975},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1579, col: 1, offset: 55196},
			expr: &seqExpr{
				pos: position{line: 1579, col: 34, offset: 55229},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1579, col: 34, offset: 55229},
						expr: &ruleRefExpr{
							pos:  position{line: 1579, col: 35, offset: 55230},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1579, col: 41, offset: 55236},
						expr: &ruleRefExpr{
							pos:  position{line: 1579, col: 41, offset: 55236},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1581, col: 1, offset: 55267},
			expr: &choiceExpr{
				pos: position{line: 1581, col: 33, offset: 55299},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1581, col: 33, offset: 55299},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1582, col: 7, offset: 55310},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1582, col: 7, offset: 55310},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1582, col: 15, offset: 55318},
								expr: &ruleRefExpr{
									pos:  position{line: 1582, col: 16, offset: 55319},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1583, col: 7, offset: 55333},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1584, col: 7, offset: 55361},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1585, col: 7, offset: 55384},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1586, col: 7, offset: 55402},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1587, col: 7, offset: 55421},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1587, col: 7, offset: 55421},
								expr: &ruleRefExpr{
									pos:  position{line: 1587, col: 7, offset: 55421},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1587, col: 14, offset: 55428},
								expr: &seqExpr{
									pos: position{line: 1587, col: 15, offset: 55429},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1587, col: 15, offset: 55429},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1587, col: 19, offset: 55433},
											expr: &litMatcher{
												pos:        position{line: 1587, col: 20, offset: 55434},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1588, col: 7, offset: 55446},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1589, col: 7, offset: 55477},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1590, col: 7, offset: 55502},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1592, col: 1, offset: 55542},
			expr: &actionExpr{
				pos: position{line: 1593, col: 5, offset: 55574},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 5, offset: 55574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1593, col: 5, offset: 55574},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1593, col: 16, offset: 55585},
								expr: &ruleRefExpr{
									pos:  position{line: 1593, col: 17, offset: 55586},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 5, offset: 55612},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1594, col: 11, offset: 55618},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1594, col: 11, offset: 55618},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1595, col: 11, offset: 55650},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1596, col: 11, offset: 55669},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1597, col: 11, offset: 55690},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1598, col: 11, offset: 55714},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1599, col: 11, offset: 55738},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1602, col: 1, offset: 55839},
			expr: &choiceExpr{
				pos: position{line: 1603, col: 5, offset: 55885},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1603, col: 5, offset: 55885},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1604, col: 7, offset: 55982},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1604, col: 7, offset: 55982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1604, col: 7, offset: 55982},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1604, col: 11, offset: 55986},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1608, col: 1, offset: 56157},
			expr: &choiceExpr{
				pos: position{line: 1609, col: 5, offset: 56182},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1609, col: 5, offset: 56182},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1609, col: 5, offset: 56182},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1609, col: 5, offset: 56182},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1609, col: 18, offset: 56195},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1609, col: 40, offset: 56217},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1609, col: 45, offset: 56222},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1609, col: 55, offset: 56232},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1609, col: 86, offset: 56263},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1611, col: 9, offset: 56420},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1611, col: 9, offset: 56420},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1611, col: 9, offset: 56420},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1611, col: 22, offset: 56433},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1611, col: 44, offset: 56455},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1611, col: 49, offset: 56460},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1611, col: 59, offset: 56470},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1611, col: 90, offset: 56501},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1614, col: 9, offset: 56701},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1614, col: 9, offset: 56701},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1614, col: 9, offset: 56701},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1614, col: 22, offset: 56714},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1614, col: 44, offset: 56736},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1614, col: 48, offset: 56740},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1614, col: 58, offset: 56750},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1614, col: 89, offset: 56781},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1621, col: 1, offset: 57009},
			expr: &actionExpr{
				pos: position{line: 1621, col: 18, offset: 57026},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1621, col: 18, offset: 57026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1621, col: 18, offset: 57026},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1621, col: 22, offset: 57030},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 31, offset: 57039},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1621, col: 53, offset: 57061},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1625, col: 1, offset: 57169},
			expr: &choiceExpr{
				pos: position{line: 1625, col: 25, offset: 57193},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1625, col: 25, offset: 57193},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1625, col: 38, offset: 57206},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1627, col: 1, offset: 57225},
			expr: &actionExpr{
				pos: position{line: 1627, col: 21, offset: 57245},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1627, col: 21, offset: 57245},
					expr: &charClassMatcher{
						pos:        position{line: 1627, col: 21, offset: 57245},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1631, col: 1, offset: 57330},
			expr: &actionExpr{
				pos: position{line: 1631, col: 25, offset: 57354},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1631, col: 25, offset: 57354},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1631, col: 25, offset: 57354},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 38, offset: 57367},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 60, offset: 57389},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 64, offset: 57393},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 73, offset: 57402},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 95, offset: 57424},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1638, col: 1, offset: 57642},
			expr: &actionExpr{
				pos: position{line: 1638, col: 20, offset: 57661},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1638, col: 20, offset: 57661},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1638, col: 20, offset: 57661},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1638, col: 24, offset: 57665},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1638, col: 33, offset: 57674},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1638, col: 57, offset: 57698},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1642, col: 1, offset: 57808},
			expr: &choiceExpr{
				pos: position{line: 1642, col: 27, offset: 57834},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1642, col: 27, offset: 57834},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1642, col: 40, offset: 57847},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1644, col: 1, offset: 57868},
			expr: &actionExpr{
				pos: position{line: 1644, col: 23, offset: 57890},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1644, col: 23, offset: 57890},
					expr: &charClassMatcher{
						pos:        position{line: 1644, col: 23, offset: 57890},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1648, col: 1, offset: 57975},
			expr: &actionExpr{
				pos: position{line: 1648, col: 27, offset: 58001},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1648, col: 27, offset: 58001},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1648, col: 27, offset: 58001},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1648, col: 40, offset: 58014},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1648, col: 62, offset: 58036},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1648, col: 66, offset: 58040},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1648, col: 75, offset: 58049},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1648, col: 99, offset: 58073},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1656, col: 1, offset: 58385},
			expr: &choiceExpr{
				pos: position{line: 1656, col: 17, offset: 58401},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1656, col: 17, offset: 58401},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1656, col: 38, offset: 58422},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1658, col: 1, offset: 58442},
			expr: &actionExpr{
				pos: position{line: 1658, col: 23, offset: 58464},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1658, col: 23, offset: 58464},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1658, col: 23, offset: 58464},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 46, offset: 58487},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 55, offset: 58496},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1658, col: 82, offset: 58523},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1662, col: 1, offset: 58635},
			expr: &actionExpr{
				pos: position{line: 1662, col: 31, offset: 58665},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1662, col: 31, offset: 58665},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1662, col: 41, offset: 58675},
						expr: &ruleRefExpr{
							pos:  position{line: 1662, col: 41, offset: 58675},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1666, col: 1, offset: 58761},
			expr: &seqExpr{
				pos: position{line: 1666, col: 27, offset: 58787},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1666, col: 27, offset: 58787},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1666, col: 32, offset: 58792},
						expr: &charClassMatcher{
							pos:        position{line: 1666, col: 33, offset: 58793},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1668, col: 1, offset: 58804},
			expr: &litMatcher{
				pos:        position{line: 1668, col: 25, offset: 58828},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1671, col: 1, offset: 58916},
			expr: &actionExpr{
				pos: position{line: 1672, col: 5, offset: 58950},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1672, col: 5, offset: 58950},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1673, col: 9, offset: 58968},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1673, col: 9, offset: 58968},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1673, col: 9, offset: 58968},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1673, col: 19, offset: 58978},
										expr: &ruleRefExpr{
											pos:  position{line: 1673, col: 20, offset: 58979},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1674, col: 11, offset: 59035},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1674, col: 11, offset: 59035},
										expr: &ruleRefExpr{
											pos:  position{line: 1674, col: 11, offset: 59035},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1674, col: 18, offset: 59042},
										expr: &ruleRefExpr{
											pos:  position{line: 1674, col: 19, offset: 59043},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1675, col: 12, offset: 59075},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1675, col: 12, offset: 59075},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1675, col: 12, offset: 59075},
											expr: &litMatcher{
												pos:        position{line: 1675, col: 13, offset: 59076},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1675, col: 17, offset: 59080},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1675, col: 26, offset: 59089},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1676, col: 11, offset: 59161},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1677, col: 11, offset: 59202},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1678, col: 11, offset: 59231},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1683, col: 1, offset: 59310},
			expr: &actionExpr{
				pos: position{line: 1684, col: 5, offset: 59348},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1684, col: 5, offset: 59348},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1684, col: 5, offset: 59348},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1684, col: 16, offset: 59359},
								expr: &ruleRefExpr{
									pos:  position{line: 1684, col: 17, offset: 59360},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1685, col: 5, offset: 59386},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1685, col: 11, offset: 59392},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1685, col: 11, offset: 59392},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1686, col: 11, offset: 59411},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1687, col: 12, offset: 59433},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1687, col: 12, offset: 59433},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1687, col: 12, offset: 59433},
													expr: &litMatcher{
														pos:        position{line: 1687, col: 13, offset: 59434},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1687, col: 18, offset: 59439},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1687, col: 27, offset: 59448},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1688, col: 11, offset: 59497},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1689, col: 11, offset: 59521},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1690, col: 11, offset: 59547},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1694, col: 1, offset: 59644},
			expr: &choiceExpr{
				pos: position{line: 1694, col: 41, offset: 59684},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1694, col: 41, offset: 59684},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1694, col: 55, offset: 59698},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1694, col: 55, offset: 59698},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1694, col: 55, offset: 59698},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1694, col: 59, offset: 59702},
									expr: &litMatcher{
										pos:        position{line: 1694, col: 60, offset: 59703},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1698, col: 1, offset: 59775},
			expr: &actionExpr{
				pos: position{line: 1698, col: 23, offset: 59797},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1698, col: 23, offset: 59797},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1698, col: 23, offset: 59797},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1698, col: 46, offset: 59820},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1698, col: 55, offset: 59829},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1698, col: 82, offset: 59856},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1702, col: 1, offset: 59968},
			expr: &actionExpr{
				pos: position{line: 1702, col: 31, offset: 59998},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1702, col: 31, offset: 59998},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1702, col: 41, offset: 60008},
						expr: &ruleRefExpr{
							pos:  position{line: 1702, col: 41, offset: 60008},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1707, col: 1, offset: 60176},
			expr: &actionExpr{
				pos: position{line: 1707, col: 30, offset: 60205},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1707, col: 30, offset: 60205},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1708, col: 5, offset: 60219},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1708, col: 5, offset: 60219},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1708, col: 5, offset: 60219},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1708, col: 15, offset: 60229},
										expr: &ruleRefExpr{
											pos:  position{line: 1708, col: 16, offset: 60230},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1709, col: 7, offset: 60282},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1709, col: 7, offset: 60282},
										expr: &ruleRefExpr{
											pos:  position{line: 1709, col: 7, offset: 60282},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1709, col: 14, offset: 60289},
										expr: &ruleRefExpr{
											pos:  position{line: 1709, col: 15, offset: 60290},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1710, col: 7, offset: 60317},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1711, col: 7, offset: 60354},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1712, col: 7, offset: 60379},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1716, col: 1, offset: 60453},
			expr: &actionExpr{
				pos: position{line: 1717, col: 5, offset: 60491},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1717, col: 5, offset: 60491},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1717, col: 5, offset: 60491},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1717, col: 16, offset: 60502},
								expr: &ruleRefExpr{
									pos:  position{line: 1717, col: 17, offset: 60503},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1718, col: 5, offset: 60529},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1718, col: 11, offset: 60535},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1718, col: 11, offset: 60535},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1719, col: 11, offset: 60554},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1720, col: 12, offset: 60576},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1720, col: 12, offset: 60576},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1720, col: 12, offset: 60576},
													expr: &litMatcher{
														pos:        position{line: 1720, col: 13, offset: 60577},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1720, col: 19, offset: 60583},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1720, col: 28, offset: 60592},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1721, col: 11, offset: 60641},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1722, col: 11, offset: 60665},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1723, col: 11, offset: 60691},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1727, col: 1, offset: 60788},
			expr: &seqExpr{
				pos: position{line: 1727, col: 27, offset: 60814},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1727, col: 27, offset: 60814},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1727, col: 33, offset: 60820},
						expr: &charClassMatcher{
							pos:        position{line: 1727, col: 34, offset: 60821},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1729, col: 1, offset: 60832},
			expr: &litMatcher{
				pos:        position{line: 1729, col: 25, offset: 60856},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1731, col: 1, offset: 60863},
			expr: &actionExpr{
				pos: position{line: 1731, col: 41, offset: 60903},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1731, col: 42, offset: 60904},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1731, col: 42, offset: 60904},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1731, col: 56, offset: 60918},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1731, col: 56, offset: 60918},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1731, col: 60, offset: 60922},
									expr: &litMatcher{
										pos:        position{line: 1731, col: 61, offset: 60923},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1740, col: 1, offset: 61189},
			expr: &actionExpr{
				pos: position{line: 1741, col: 5, offset: 61205},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1741, col: 5, offset: 61205},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1741, col: 5, offset: 61205},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1741, col: 12, offset: 61212},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1741, col: 12, offset: 61212},
									expr: &litMatcher{
										pos:        position{line: 1741, col: 13, offset: 61213},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1745, col: 5, offset: 61321},
							run: (*parser).callonSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 1757, col: 5, offset: 61831},
							expr: &ruleRefExpr{
								pos:  position{line: 1757, col: 5, offset: 61831},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1757, col: 12, offset: 61838},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1757, col: 19, offset: 61845},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1757, col: 36, offset: 61862},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 1781, col: 1, offset: 62693},
			expr: &actionExpr{
				pos: position{line: 1781, col: 20, offset: 62712},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1781, col: 20, offset: 62712},
					expr: &charClassMatcher{
						pos:        position{line: 1781, col: 20, offset: 62712},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1792, col: 1, offset: 63036},
			expr: &actionExpr{
				pos: position{line: 1792, col: 20, offset: 63055},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1792, col: 20, offset: 63055},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1792, col: 20, offset: 63055},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1792, col: 29, offset: 63064},
								expr: &choiceExpr{
									pos: position{line: 1793, col: 5, offset: 63070},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1793, col: 5, offset: 63070},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1794, col: 7, offset: 63087},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1795, col: 7, offset: 63111},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1796, col: 7, offset: 63139},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1797, col: 7, offset: 63252},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1797, col: 17, offset: 63262},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 1802, col: 1, offset: 63359},
			expr: &actionExpr{
				pos: position{line: 1802, col: 27, offset: 63385},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1802, col: 27, offset: 63385},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1802, col: 27, offset: 63385},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1802, col: 36, offset: 63394},
								expr: &choiceExpr{
									pos: position{line: 1803, col: 5, offset: 63400},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1803, col: 5, offset: 63400},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1804, col: 7, offset: 63417},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1805, col: 7, offset: 63445},
											name: "Quotes",
										},
										&ruleRefExpr{
											pos:  position{line: 1806, col: 7, offset: 63458},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1807, col: 7, offset: 63571},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1807, col: 17, offset: 63581},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1812, col: 1, offset: 63681},
			expr: &actionExpr{
				pos: position{line: 1812, col: 16, offset: 63696},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1812, col: 16, offset: 63696},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1812, col: 16, offset: 63696},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1812, col: 25, offset: 63705},
								expr: &choiceExpr{
									pos: position{line: 1813, col: 5, offset: 63711},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1813, col: 5, offset: 63711},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1814, col: 7, offset: 63728},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1815, col: 7, offset: 63752},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1816, col: 7, offset: 63775},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1817, col: 7, offset: 63787},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1818, col: 7, offset: 63815},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1819, col: 7, offset: 63928},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1820, col: 7, offset: 63946},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1820, col: 17, offset: 63956},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1825, col: 1, offset: 64052},
			expr: &actionExpr{
				pos: position{line: 1825, col: 16, offset: 64067},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1825, col: 16, offset: 64067},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1825, col: 16, offset: 64067},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1825, col: 25, offset: 64076},
								expr: &choiceExpr{
									pos: position{line: 1826, col: 5, offset: 64082},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1826, col: 5, offset: 64082},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1827, col: 7, offset: 64099},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1828, col: 7, offset: 64117},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1829, col: 7, offset: 64230},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1829, col: 17, offset: 64240},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1835, col: 1, offset: 64400},
			expr: &actionExpr{
				pos: position{line: 1835, col: 14, offset: 64413},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1835, col: 14, offset: 64413},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1835, col: 14, offset: 64413},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1835, col: 23, offset: 64422},
								expr: &ruleRefExpr{
									pos:  position{line: 1835, col: 24, offset: 64423},
									name: "NoneGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1835, col: 43, offset: 64442},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroupElement",
			pos:  position{line: 1839, col: 1, offset: 64498},
			expr: &actionExpr{
				pos: position{line: 1839, col: 21, offset: 64518},
				run: (*parser).callonNoneGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1839, col: 21, offset: 64518},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1839, col: 21, offset: 64518},
							expr: &ruleRefExpr{
								pos:  position{line: 1839, col: 22, offset: 64519},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1840, col: 5, offset: 64527},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1840, col: 13, offset: 64535},
								expr: &choiceExpr{
									pos: position{line: 1841, col: 9, offset: 64545},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1841, col: 9, offset: 64545},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1842, col: 11, offset: 64566},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1843, col: 11, offset: 64683},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1843, col: 21, offset: 64693},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1849, col: 1, offset: 64943},
			expr: &actionExpr{
				pos: position{line: 1849, col: 16, offset: 64958},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1849, col: 16, offset: 64958},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1849, col: 16, offset: 64958},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1849, col: 25, offset: 64967},
								expr: &ruleRefExpr{
									pos:  position{line: 1849, col: 26, offset: 64968},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1849, col: 47, offset: 64989},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1853, col: 1, offset: 65045},
			expr: &actionExpr{
				pos: position{line: 1853, col: 23, offset: 65067},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1853, col: 23, offset: 65067},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1853, col: 23, offset: 65067},
							expr: &ruleRefExpr{
								pos:  position{line: 1853, col: 24, offset: 65068},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1854, col: 5, offset: 65076},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1855, col: 9, offset: 65094},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1855, col: 9, offset: 65094},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1856, col: 11, offset: 65115},
										name: "LineBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1857, col: 11, offset: 65166},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1858, col: 11, offset: 65182},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 1859, col: 11, offset: 65200},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1860, col: 11, offset: 65228},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1861, col: 11, offset: 65255},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1862, col: 11, offset: 65271},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1863, col: 11, offset: 65303},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1864, col: 11, offset: 65325},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1865, col: 11, offset: 65347},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1866, col: 11, offset: 65373},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1867, col: 11, offset: 65490},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacementsGroup",
			pos:  position{line: 1870, col: 1, offset: 65543},
			expr: &actionExpr{
				pos: position{line: 1870, col: 27, offset: 65569},
				run: (*parser).callonPostReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1870, col: 27, offset: 65569},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1870, col: 27, offset: 65569},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1870, col: 36, offset: 65578},
								expr: &choiceExpr{
									pos: position{line: 1871, col: 5, offset: 65584},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1871, col: 5, offset: 65584},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1872, col: 7, offset: 65601},
											name: "LineBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1873, col: 7, offset: 65648},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1874, col: 7, offset: 65660},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1875, col: 7, offset: 65674},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1876, col: 7, offset: 65787},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1876, col: 17, offset: 65797},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1881, col: 1, offset: 65892},
			expr: &actionExpr{
				pos: position{line: 1881, col: 16, offset: 65907},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1881, col: 16, offset: 65907},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1881, col: 16, offset: 65907},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1881, col: 25, offset: 65916},
								expr: &choiceExpr{
									pos: position{line: 1882, col: 5, offset: 65922},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1882, col: 5, offset: 65922},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1883, col: 7, offset: 65939},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1884, col: 7, offset: 65951},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1885, col: 7, offset: 66064},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1885, col: 17, offset: 66074},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1890, col: 1, offset: 66176},
			expr: &actionExpr{
				pos: position{line: 1890, col: 22, offset: 66197},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1890, col: 22, offset: 66197},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1890, col: 22, offset: 66197},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1890, col: 31, offset: 66206},
								expr: &choiceExpr{
									pos: position{line: 1891, col: 5, offset: 66212},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1891, col: 5, offset: 66212},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1892, col: 7, offset: 66229},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1893, col: 7, offset: 66247},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1894, col: 7, offset: 66360},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1894, col: 17, offset: 66370},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1899, col: 1, offset: 66497},
			expr: &actionExpr{
				pos: position{line: 1899, col: 27, offset: 66523},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1899, col: 27, offset: 66523},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1899, col: 27, offset: 66523},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1899, col: 36, offset: 66532},
								expr: &choiceExpr{
									pos: position{line: 1900, col: 5, offset: 66538},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1900, col: 5, offset: 66538},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1901, col: 7, offset: 66555},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1902, col: 7, offset: 66578},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1903, col: 7, offset: 66691},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1903, col: 17, offset: 66701},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 1907, col: 1, offset: 66757},
			expr: &actionExpr{
				pos: position{line: 1907, col: 18, offset: 66774},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 1907, col: 18, offset: 66774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1907, col: 18, offset: 66774},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1907, col: 27, offset: 66783},
								expr: &choiceExpr{
									pos: position{line: 1908, col: 5, offset: 66789},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1908, col: 5, offset: 66789},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1909, col: 7, offset: 66806},
											name: "Callout",
										},
										&ruleRefExpr{
											pos:  position{line: 1910, col: 7, offset: 66862},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1911, col: 7, offset: 66885},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1912, col: 7, offset: 66998},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1912, col: 17, offset: 67008},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1916, col: 1, offset: 67068},
			expr: &actionExpr{
				pos: position{line: 1918, col: 5, offset: 67150},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1918, col: 5, offset: 67150},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1918, col: 5, offset: 67150},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1921, col: 5, offset: 67210},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1922, col: 9, offset: 67228},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1922, col: 9, offset: 67228},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1923, col: 11, offset: 67249},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1924, col: 11, offset: 67272},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1925, col: 11, offset: 67288},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1926, col: 11, offset: 67317},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1927, col: 11, offset: 67343},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1928, col: 11, offset: 67369},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1929, col: 11, offset: 67396},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1930, col: 11, offset: 67422},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1931, col: 11, offset: 67451},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1935, col: 1, offset: 67507},
			expr: &actionExpr{
				pos: position{line: 1937, col: 5, offset: 67595},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1937, col: 5, offset: 67595},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1937, col: 5, offset: 67595},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1940, col: 5, offset: 67667},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1941, col: 9, offset: 67685},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1941, col: 9, offset: 67685},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1941, col: 33, offset: 67709},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1941, col: 57, offset: 67733},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1946, col: 1, offset: 67793},
			expr: &actionExpr{
				pos: position{line: 1948, col: 5, offset: 67879},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1948, col: 5, offset: 67879},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1948, col: 5, offset: 67879},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1951, col: 5, offset: 67949},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1952, col: 9, offset: 67967},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1957, col: 1, offset: 68020},
			expr: &actionExpr{
				pos: position{line: 1959, col: 5, offset: 68096},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1959, col: 5, offset: 68096},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1959, col: 5, offset: 68096},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1962, col: 5, offset: 68156},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1963, col: 9, offset: 68174},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1963, col: 9, offset: 68174},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1964, col: 11, offset: 68196},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1968, col: 1, offset: 68255},
			expr: &actionExpr{
				pos: position{line: 1970, col: 5, offset: 68337},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1970, col: 5, offset: 68337},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1970, col: 5, offset: 68337},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1973, col: 5, offset: 68403},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1974, col: 9, offset: 68421},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1979, col: 1, offset: 68471},
			expr: &actionExpr{
				pos: position{line: 1981, col: 5, offset: 68558},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1981, col: 5, offset: 68558},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1981, col: 5, offset: 68558},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1984, col: 5, offset: 68629},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1986, col: 9, offset: 68727},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1986, col: 9, offset: 68727},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1986, col: 9, offset: 68727},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1989, col: 11, offset: 68831},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1989, col: 12, offset: 68832},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1989, col: 12, offset: 68832},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1989, col: 18, offset: 68838},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1989, col: 24, offset: 68844},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1999, col: 1, offset: 69073},
			expr: &choiceExpr{
				pos: position{line: 1999, col: 11, offset: 69083},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1999, col: 11, offset: 69083},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 24, offset: 69096},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 36, offset: 69108},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 48, offset: 69120},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 61, offset: 69133},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 72, offset: 69144},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2001, col: 1, offset: 69163},
			expr: &actionExpr{
				pos: position{line: 2001, col: 15, offset: 69177},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2001, col: 15, offset: 69177},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 2005, col: 1, offset: 69239},
			expr: &litMatcher{
				pos:        position{line: 2005, col: 18, offset: 69256},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2007, col: 1, offset: 69279},
			expr: &actionExpr{
				pos: position{line: 2007, col: 14, offset: 69292},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2007, col: 14, offset: 69292},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2011, col: 1, offset: 69355},
			expr: &actionExpr{
				pos: position{line: 2011, col: 14, offset: 69368},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2011, col: 14, offset: 69368},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2015, col: 1, offset: 69432},
			expr: &actionExpr{
				pos: position{line: 2015, col: 15, offset: 69446},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2015, col: 15, offset: 69446},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2019, col: 1, offset: 69509},
			expr: &actionExpr{
				pos: position{line: 2019, col: 13, offset: 69521},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2019, col: 13, offset: 69521},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2027, col: 1, offset: 69806},
			expr: &actionExpr{
				pos: position{line: 2027, col: 22, offset: 69827},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2027, col: 22, offset: 69827},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2027, col: 22, offset: 69827},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2027, col: 31, offset: 69836},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2027, col: 35, offset: 69840},
							expr: &charClassMatcher{
								pos:        position{line: 2027, col: 36, offset: 69841},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 2034, col: 1, offset: 70119},
			expr: &actionExpr{
				pos: position{line: 2034, col: 18, offset: 70136},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 2034, col: 18, offset: 70136},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 2034, col: 19, offset: 70137},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2034, col: 19, offset: 70137},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 2034, col: 27, offset: 70145},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 2034, col: 37, offset: 70155},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 2034, col: 45, offset: 70163},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 2034, col: 55, offset: 70173},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 2034, col: 63, offset: 70181},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2034, col: 72, offset: 70190},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2041, col: 1, offset: 70376},
			expr: &actionExpr{
				pos: position{line: 2042, col: 5, offset: 70399},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2042, col: 5, offset: 70399},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2042, col: 5, offset: 70399},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 2042, col: 11, offset: 70405},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 2043, col: 5, offset: 70425},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 2047, col: 5, offset: 70565},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2048, col: 5, offset: 70575},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2048, col: 12, offset: 70582},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 2049, col: 5, offset: 70603},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2049, col: 23, offset: 70621},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2053, col: 1, offset: 70752},
			expr: &actionExpr{
				pos: position{line: 2054, col: 5, offset: 70776},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2054, col: 5, offset: 70776},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2054, col: 5, offset: 70776},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 2054, col: 11, offset: 70782},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 2055, col: 5, offset: 70802},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 2059, col: 5, offset: 70942},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2060, col: 5, offset: 70951},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2060, col: 12, offset: 70958},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 2061, col: 5, offset: 70979},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2061, col: 23, offset: 70997},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 2065, col: 1, offset: 71129},
			expr: &actionExpr{
				pos: position{line: 2065, col: 18, offset: 71146},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2065, col: 19, offset: 71147},
					expr: &charClassMatcher{
						pos:        position{line: 2065, col: 19, offset: 71147},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 2069, col: 1, offset: 71204},
			expr: &actionExpr{
				pos: position{line: 2069, col: 19, offset: 71222},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2069, col: 19, offset: 71222},
					expr: &charClassMatcher{
						pos:        position{line: 2069, col: 19, offset: 71222},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2076, col: 1, offset: 71384},
			expr: &charClassMatcher{
				pos:        position{line: 2076, col: 13, offset: 71396},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2078, col: 1, offset: 71406},
			expr: &choiceExpr{
				pos: position{line: 2078, col: 16, offset: 71421},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2078, col: 16, offset: 71421},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2078, col: 22, offset: 71427},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2078, col: 28, offset: 71433},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2078, col: 34, offset: 71439},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2078, col: 40, offset: 71445},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2078, col: 46, offset: 71451},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2080, col: 1, offset: 71457},
			expr: &actionExpr{
				pos: position{line: 2080, col: 14, offset: 71470},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2080, col: 14, offset: 71470},
					expr: &charClassMatcher{
						pos:        position{line: 2080, col: 14, offset: 71470},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2084, col: 1, offset: 71524},
			expr: &choiceExpr{
				pos: position{line: 2088, col: 5, offset: 71851},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2088, col: 5, offset: 71851},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2088, col: 5, offset: 71851},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2088, col: 5, offset: 71851},
									expr: &charClassMatcher{
										pos:        position{line: 2088, col: 5, offset: 71851},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2088, col: 15, offset: 71861},
									expr: &choiceExpr{
										pos: position{line: 2088, col: 17, offset: 71863},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2088, col: 17, offset: 71863},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2088, col: 30, offset: 71876},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2090, col: 9, offset: 71945},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2090, col: 9, offset: 71945},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2090, col: 9, offset: 71945},
									expr: &charClassMatcher{
										pos:        position{line: 2090, col: 9, offset: 71945},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2090, col: 19, offset: 71955},
									expr: &seqExpr{
										pos: position{line: 2090, col: 20, offset: 71956},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2090, col: 20, offset: 71956},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2090, col: 27, offset: 71963},
												expr: &charClassMatcher{
													pos:        position{line: 2090, col: 27, offset: 71963},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2095, col: 1, offset: 72055},
			expr: &choiceExpr{
				pos: position{line: 2099, col: 5, offset: 72248},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2099, col: 5, offset: 72248},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2099, col: 5, offset: 72248},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2099, col: 5, offset: 72248},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 2099, col: 14, offset: 72257},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 2099, col: 14, offset: 72257},
											expr: &charClassMatcher{
												pos:        position{line: 2099, col: 14, offset: 72257},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2102, col: 5, offset: 72338},
									expr: &choiceExpr{
										pos: position{line: 2102, col: 7, offset: 72340},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2102, col: 7, offset: 72340},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 2102, col: 15, offset: 72348},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 2102, col: 45, offset: 72378},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2104, col: 9, offset: 72421},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2108, col: 1, offset: 72546},
			expr: &actionExpr{
				pos: position{line: 2108, col: 12, offset: 72557},
				run: (*parser).callonAnyChar1,
				expr: &anyMatcher{
					line: 2108, col: 12, offset: 72557,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2112, col: 1, offset: 72624},
			expr: &actionExpr{
				pos: position{line: 2112, col: 17, offset: 72640},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2112, col: 17, offset: 72640},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2112, col: 22, offset: 72645},
						expr: &choiceExpr{
							pos: position{line: 2112, col: 23, offset: 72646},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2112, col: 23, offset: 72646},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2112, col: 34, offset: 72657},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2116, col: 1, offset: 72746},
			expr: &actionExpr{
				pos: position{line: 2116, col: 13, offset: 72758},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2116, col: 13, offset: 72758},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2116, col: 13, offset: 72758},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2116, col: 20, offset: 72765},
								expr: &ruleRefExpr{
									pos:  position{line: 2116, col: 21, offset: 72766},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2116, col: 30, offset: 72775},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2116, col: 35, offset: 72780},
								expr: &choiceExpr{
									pos: position{line: 2116, col: 36, offset: 72781},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2116, col: 36, offset: 72781},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2116, col: 47, offset: 72792},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2120, col: 1, offset: 72885},
			expr: &actionExpr{
				pos: position{line: 2120, col: 23, offset: 72907},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2120, col: 23, offset: 72907},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2120, col: 23, offset: 72907},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2120, col: 31, offset: 72915},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2120, col: 39, offset: 72923},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2120, col: 44, offset: 72928},
								expr: &choiceExpr{
									pos: position{line: 2120, col: 45, offset: 72929},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2120, col: 45, offset: 72929},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2120, col: 56, offset: 72940},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2124, col: 1, offset: 73033},
			expr: &actionExpr{
				pos: position{line: 2124, col: 13, offset: 73045},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 2124, col: 13, offset: 73045},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2124, col: 22, offset: 73054},
						expr: &choiceExpr{
							pos: position{line: 2126, col: 5, offset: 73093},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2126, col: 5, offset: 73093},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2126, col: 5, offset: 73093},
										expr: &charClassMatcher{
											pos:        position{line: 2126, col: 6, offset: 73094},
											val:        "[^\\r\\n[\\]\\uFFFD{&<> ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2130, col: 7, offset: 73265},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 2131, col: 7, offset: 73288},
									run: (*parser).callonFilename9,
									expr: &litMatcher{
										pos:        position{line: 2131, col: 7, offset: 73288},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2137, col: 1, offset: 73426},
			expr: &choiceExpr{
				pos: position{line: 2137, col: 11, offset: 73436},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2137, col: 11, offset: 73436},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2137, col: 23, offset: 73448},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2137, col: 36, offset: 73461},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2137, col: 47, offset: 73472},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2137, col: 58, offset: 73483},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2139, col: 1, offset: 73494},
			expr: &actionExpr{
				pos: position{line: 2139, col: 7, offset: 73500},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2139, col: 7, offset: 73500},
					expr: &charClassMatcher{
						pos:        position{line: 2139, col: 7, offset: 73500},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2143, col: 1, offset: 73633},
			expr: &actionExpr{
				pos: position{line: 2143, col: 10, offset: 73642},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2143, col: 10, offset: 73642},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2147, col: 1, offset: 73692},
			expr: &actionExpr{
				pos: position{line: 2147, col: 11, offset: 73702},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2147, col: 11, offset: 73702},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2147, col: 11, offset: 73702},
							expr: &litMatcher{
								pos:        position{line: 2147, col: 11, offset: 73702},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2147, col: 16, offset: 73707},
							expr: &ruleRefExpr{
								pos:  position{line: 2147, col: 16, offset: 73707},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2151, col: 1, offset: 73767},
			expr: &choiceExpr{
				pos: position{line: 2151, col: 10, offset: 73776},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2151, col: 10, offset: 73776},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2151, col: 16, offset: 73782},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2151, col: 16, offset: 73782},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2155, col: 1, offset: 73831},
			expr: &choiceExpr{
				pos: position{line: 2155, col: 12, offset: 73842},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2155, col: 12, offset: 73842},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2155, col: 19, offset: 73849},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 2155, col: 28, offset: 73858},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 2155, col: 28, offset: 73858},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2159, col: 1, offset: 73942},
			expr: &notExpr{
				pos: position{line: 2159, col: 8, offset: 73949},
				expr: &anyMatcher{
					line: 2159, col: 9, offset: 73950,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2161, col: 1, offset: 73953},
			expr: &choiceExpr{
				pos: position{line: 2161, col: 8, offset: 73960},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2161, col: 8, offset: 73960},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 2161, col: 14, offset: 73966},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragmentElementWithinVerbatimBlock5(delimiter interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block
	return c.isValidBlockDelimiter(delimiter.(*types.BlockDelimiter))

}

func (p *parser) callonDocumentFragmentElementWithinVerbatimBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinVerbatimBlock5(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinVerbatimBlock1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentFragmentElementWithinVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinVerbatimBlock1(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinNormalBlock6(delimiter interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block
	return c.isValidBlockDelimiter(delimiter.(*types.BlockDelimiter))

}

func (p *parser) callonDocumentFragmentElementWithinNormalBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinNormalBlock6(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinNormalBlock2(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentFragmentElementWithinNormalBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinNormalBlock2(stack["delimiter"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onAdmonition7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAdmonition7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition7()
}

func (c *current) onAdmonition1(kind, content interface{}) (interface{}, error) {

	return types.NewAdmonitionLine(kind.(string), content.(string))

}

func (p *parser) callonAdmonition1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition1(stack["kind"], stack["content"])
}

func (c *current) onAttributeDeclaration3() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setCurrentSubstitution("header")

}

func (p *parser) callonAttributeDeclaration3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration3()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setCurrentSubstitution("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes13(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetCurrentSubstitution()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue15()
}

func (c *current) onSingleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue18()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue15()
}

func (c *current) onDoubleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue18()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue21() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue7(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue7(stack["element"])
}

func (c *current) onUnquotedAttributeValue23(elements interface{}) (bool, error) {
	// post-parsing condition to verify that the value is not an empty string
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue23(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.(types.InlineElements))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() error {
	// for images, we always enable the 'normal' substitutions
	return c.setCurrentSubstitution("normal")

}

func (p *parser) callonImageBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	c.unsetCurrentSubstitution()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onOrderedListElement1(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content.([]interface{}))
}

func (p *parser) callonOrderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElement1(stack["prefix"], stack["content"])
}

func (c *current) onOrderedListElementPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix10()
}

func (c *current) onOrderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix13(stack["depth"])
}

func (c *current) onOrderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOrderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix7(stack["depth"])
}

func (c *current) onOrderedListElementPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOrderedListElementPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix14()
}

func (c *current) onOrderedListElementPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOrderedListElementPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix19()
}

func (c *current) onOrderedListElementPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOrderedListElementPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix23()
}

func (c *current) onOrderedListElementPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOrderedListElementPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix27()
}

func (c *current) onOrderedListElementPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOrderedListElementPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix32()
}

func (c *current) onOrderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix1(stack["prefix"])
}

func (c *current) onOrderedListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonOrderedListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementContent1()
}

func (c *current) onUnorderedListElement1(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content.([]interface{}))

}

func (p *parser) callonUnorderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElement1(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListElementPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix10()
}

func (c *current) onUnorderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix13(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonUnorderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix7(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix15() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonUnorderedListElementPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix15()
}

func (c *current) onUnorderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListElementCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle7()
}

func (c *current) onUnorderedListElementCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle9()
}

func (c *current) onUnorderedListElementCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle11()
}

func (c *current) onUnorderedListElementCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListElementCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonUnorderedListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementContent1()
}

func (c *current) onLabeledListItem1(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term.(string), description)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1()
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListElement1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.([]interface{}))

}

func (p *parser) callonCalloutListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElement1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListElementPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListElementPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix5()
}

func (c *current) onCalloutListElementPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix1(stack["ref"])
}

func (c *current) onCalloutListElementContent1() (interface{}, error) {

	return []interface{}{
		&types.Paragraph{
			Elements: []interface{}{
				types.RawLine(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonCalloutListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementContent1()
}

func (c *current) onListElementContinuation1() (interface{}, error) {
	return types.NewListElementContinuation()
}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1()
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onItalicWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonItalicWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicWord1()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return []interface{}{
		types.RawLine(c.text),
	}, nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["elements"])
}

func (c *current) onNoneGroupElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNoneGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroupElement1(stack["element"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onPostReplacementsGroup1(elements interface{}) (interface{}, error) {
	return types.Merge(elements), nil

}

func (p *parser) callonPostReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup1(stack["elements"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	// TODO: Space* before EOF
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename9()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

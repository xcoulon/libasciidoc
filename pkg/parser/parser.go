// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 413},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 7, offset: 429},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 443},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 470},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 492},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 513},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 535},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 34, col: 1, offset: 768},
			expr: &actionExpr{
				pos: position{line: 35, col: 5, offset: 797},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 35, col: 5, offset: 797},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 35, col: 5, offset: 797},
							run: (*parser).callonAttributeDeclaration3,
						},
						&litMatcher{
							pos:        position{line: 39, col: 5, offset: 941},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 9, offset: 945},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 15, offset: 951},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 39, col: 30, offset: 966},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 40, col: 5, offset: 975},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 11, offset: 981},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 12, offset: 982},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 5, offset: 1015},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 50, col: 1, offset: 1368},
			expr: &actionExpr{
				pos: position{line: 50, col: 18, offset: 1385},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 50, col: 18, offset: 1385},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 50, col: 18, offset: 1385},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 28, offset: 1395},
							expr: &charClassMatcher{
								pos:        position{line: 50, col: 29, offset: 1396},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 54, col: 1, offset: 1452},
			expr: &actionExpr{
				pos: position{line: 54, col: 30, offset: 1481},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 54, col: 30, offset: 1481},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 54, col: 30, offset: 1481},
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 30, offset: 1481},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 54, col: 37, offset: 1488},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 54, col: 46, offset: 1497},
								expr: &ruleRefExpr{
									pos:  position{line: 54, col: 47, offset: 1498},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 58, col: 1, offset: 1620},
			expr: &actionExpr{
				pos: position{line: 58, col: 37, offset: 1656},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 58, col: 37, offset: 1656},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 58, col: 37, offset: 1656},
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 38, offset: 1657},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 59, col: 5, offset: 1666},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 60, col: 9, offset: 1684},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 60, col: 10, offset: 1685},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 60, col: 10, offset: 1685},
											expr: &charClassMatcher{
												pos:        position{line: 60, col: 10, offset: 1685},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1780},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 64, col: 12, offset: 1813},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 64, col: 12, offset: 1813},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 71, col: 1, offset: 1950},
			expr: &choiceExpr{
				pos: position{line: 71, col: 19, offset: 1968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 71, col: 19, offset: 1968},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 71, col: 19, offset: 1968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 71, col: 19, offset: 1968},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 71, col: 24, offset: 1973},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 30, offset: 1979},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 71, col: 45, offset: 1994},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 71, col: 49, offset: 1998},
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 49, offset: 1998},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 56, offset: 2005},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2065},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 2065},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 73, col: 5, offset: 2065},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 73, col: 9, offset: 2069},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 15, offset: 2075},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 73, col: 30, offset: 2090},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 73, col: 35, offset: 2095},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 35, offset: 2095},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 42, offset: 2102},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 80, col: 1, offset: 2284},
			expr: &actionExpr{
				pos: position{line: 81, col: 5, offset: 2308},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 81, col: 5, offset: 2308},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 81, col: 5, offset: 2308},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 85, col: 5, offset: 2446},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 85, col: 16, offset: 2457},
								expr: &choiceExpr{
									pos: position{line: 87, col: 9, offset: 2524},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 87, col: 10, offset: 2525},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 87, col: 10, offset: 2525},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 87, col: 10, offset: 2525},
														label: "anchor",
														expr: &ruleRefExpr{
															pos:  position{line: 87, col: 18, offset: 2533},
															name: "ShortHandAnchor",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 87, col: 35, offset: 2550},
														expr: &ruleRefExpr{
															pos:  position{line: 87, col: 35, offset: 2550},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 91, col: 12, offset: 2667},
											run: (*parser).callonBlockAttributes13,
											expr: &seqExpr{
												pos: position{line: 91, col: 12, offset: 2667},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 91, col: 12, offset: 2667},
														label: "title",
														expr: &ruleRefExpr{
															pos:  position{line: 91, col: 19, offset: 2674},
															name: "ShortHandTitle",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 91, col: 35, offset: 2690},
														expr: &ruleRefExpr{
															pos:  position{line: 91, col: 35, offset: 2690},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 95, col: 12, offset: 2777},
											run: (*parser).callonBlockAttributes19,
											expr: &seqExpr{
												pos: position{line: 95, col: 12, offset: 2777},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 95, col: 12, offset: 2777},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 95, col: 24, offset: 2789},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 95, col: 44, offset: 2809},
														expr: &ruleRefExpr{
															pos:  position{line: 95, col: 44, offset: 2809},
															name: "Space",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 103, col: 1, offset: 2983},
			expr: &actionExpr{
				pos: position{line: 104, col: 5, offset: 3007},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 104, col: 5, offset: 3007},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 104, col: 5, offset: 3007},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3015},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 16, offset: 3026},
								expr: &choiceExpr{
									pos: position{line: 105, col: 17, offset: 3027},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 105, col: 17, offset: 3027},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 105, col: 39, offset: 3049},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 106, col: 5, offset: 3070},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 111, col: 1, offset: 3198},
			expr: &actionExpr{
				pos: position{line: 112, col: 4, offset: 3220},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 112, col: 4, offset: 3220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 112, col: 4, offset: 3220},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 113, col: 5, offset: 3230},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 114, col: 9, offset: 3243},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 114, col: 9, offset: 3243},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 114, col: 18, offset: 3252},
										expr: &choiceExpr{
											pos: position{line: 115, col: 13, offset: 3266},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 115, col: 14, offset: 3267},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 115, col: 14, offset: 3267},
														expr: &charClassMatcher{
															pos:        position{line: 115, col: 14, offset: 3267},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 118, col: 15, offset: 3433},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 15, offset: 3466},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 120, col: 16, offset: 3503},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 120, col: 16, offset: 3503},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 126, col: 5, offset: 3689},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 131, col: 1, offset: 3790},
			expr: &actionExpr{
				pos: position{line: 131, col: 19, offset: 3808},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 131, col: 19, offset: 3808},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 131, col: 19, offset: 3808},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 131, col: 23, offset: 3812},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 132, col: 5, offset: 3824},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 132, col: 5, offset: 3824},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 132, col: 5, offset: 3824},
											expr: &charClassMatcher{
												pos:        position{line: 132, col: 6, offset: 3825},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 133, col: 5, offset: 3937},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 133, col: 14, offset: 3946},
												expr: &choiceExpr{
													pos: position{line: 134, col: 9, offset: 3956},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 134, col: 10, offset: 3957},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 134, col: 10, offset: 3957},
																expr: &charClassMatcher{
																	pos:        position{line: 134, col: 10, offset: 3957},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 137, col: 11, offset: 4054},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 138, col: 11, offset: 4083},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 139, col: 12, offset: 4116},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 139, col: 12, offset: 4116},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 150, col: 1, offset: 4516},
			expr: &actionExpr{
				pos: position{line: 151, col: 5, offset: 4542},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 151, col: 5, offset: 4542},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 151, col: 5, offset: 4542},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 151, col: 9, offset: 4546},
							expr: &litMatcher{
								pos:        position{line: 151, col: 10, offset: 4547},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 153, col: 5, offset: 4717},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 153, col: 31, offset: 4743},
								expr: &ruleRefExpr{
									pos:  position{line: 153, col: 32, offset: 4744},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 5, offset: 4776},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 154, col: 21, offset: 4792},
								expr: &choiceExpr{
									pos: position{line: 154, col: 22, offset: 4793},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 154, col: 22, offset: 4793},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 154, col: 44, offset: 4815},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 155, col: 5, offset: 4836},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 168, col: 1, offset: 5364},
			expr: &actionExpr{
				pos: position{line: 169, col: 5, offset: 5398},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 169, col: 5, offset: 5398},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 169, col: 5, offset: 5398},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 169, col: 10, offset: 5403},
								expr: &ruleRefExpr{
									pos:  position{line: 170, col: 9, offset: 5413},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 172, col: 5, offset: 5443},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 172, col: 12, offset: 5450},
								expr: &choiceExpr{
									pos: position{line: 173, col: 9, offset: 5461},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 173, col: 9, offset: 5461},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 174, col: 11, offset: 5493},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 175, col: 11, offset: 5528},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 176, col: 8, offset: 5561},
							expr: &seqExpr{
								pos: position{line: 176, col: 9, offset: 5562},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 176, col: 9, offset: 5562},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 176, col: 13, offset: 5566},
										expr: &ruleRefExpr{
											pos:  position{line: 176, col: 13, offset: 5566},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 177, col: 5, offset: 5580},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 193, col: 1, offset: 5996},
			expr: &actionExpr{
				pos: position{line: 193, col: 25, offset: 6020},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 193, col: 25, offset: 6020},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 193, col: 25, offset: 6020},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 29, offset: 6024},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 33, offset: 6028},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 197, col: 1, offset: 6102},
			expr: &actionExpr{
				pos: position{line: 197, col: 23, offset: 6124},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 197, col: 23, offset: 6124},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 197, col: 30, offset: 6131},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 202, col: 1, offset: 6257},
			expr: &actionExpr{
				pos: position{line: 202, col: 30, offset: 6286},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 202, col: 30, offset: 6286},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 202, col: 30, offset: 6286},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 34, offset: 6290},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 40, offset: 6296},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 207, col: 1, offset: 6418},
			expr: &actionExpr{
				pos: position{line: 207, col: 29, offset: 6446},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 207, col: 29, offset: 6446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 29, offset: 6446},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 33, offset: 6450},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 41, offset: 6458},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 212, col: 1, offset: 6571},
			expr: &choiceExpr{
				pos: position{line: 213, col: 5, offset: 6603},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6603},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 7, offset: 6637},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 215, col: 7, offset: 6671},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 215, col: 7, offset: 6671},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 215, col: 7, offset: 6671},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 215, col: 16, offset: 6680},
										expr: &choiceExpr{
											pos: position{line: 218, col: 5, offset: 6850},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 218, col: 6, offset: 6851},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 218, col: 6, offset: 6851},
														expr: &charClassMatcher{
															pos:        position{line: 218, col: 6, offset: 6851},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 221, col: 5, offset: 6945},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 222, col: 5, offset: 6970},
													name: "Quote",
												},
												&ruleRefExpr{
													pos:  position{line: 223, col: 5, offset: 6982},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 224, col: 6, offset: 7011},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 224, col: 6, offset: 7011},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 226, col: 10, offset: 7081},
									expr: &charClassMatcher{
										pos:        position{line: 226, col: 11, offset: 7082},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 230, col: 1, offset: 7158},
			expr: &choiceExpr{
				pos: position{line: 230, col: 24, offset: 7181},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 7187},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 231, col: 5, offset: 7187},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 231, col: 5, offset: 7187},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 231, col: 12, offset: 7194},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 231, col: 29, offset: 7211},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 231, col: 29, offset: 7211},
											expr: &seqExpr{
												pos: position{line: 231, col: 30, offset: 7212},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 231, col: 30, offset: 7212},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 231, col: 34, offset: 7216},
														expr: &ruleRefExpr{
															pos:  position{line: 231, col: 34, offset: 7216},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 231, col: 45, offset: 7227},
											expr: &litMatcher{
												pos:        position{line: 231, col: 46, offset: 7228},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 236, col: 6, offset: 7465},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 236, col: 6, offset: 7465},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 236, col: 6, offset: 7465},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 236, col: 13, offset: 7472},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 236, col: 13, offset: 7472},
												expr: &ruleRefExpr{
													pos:  position{line: 236, col: 13, offset: 7472},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 236, col: 21, offset: 7480},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 236, col: 22, offset: 7481},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 236, col: 22, offset: 7481},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 236, col: 26, offset: 7485},
																expr: &ruleRefExpr{
																	pos:  position{line: 236, col: 26, offset: 7485},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 236, col: 36, offset: 7495},
														expr: &litMatcher{
															pos:        position{line: 236, col: 37, offset: 7496},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 237, col: 5, offset: 7506},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 247, col: 1, offset: 7821},
			expr: &actionExpr{
				pos: position{line: 247, col: 19, offset: 7839},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 247, col: 19, offset: 7839},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 247, col: 19, offset: 7839},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 24, offset: 7844},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 43, offset: 7863},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 47, offset: 7867},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 47, offset: 7867},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 54, offset: 7874},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 61, offset: 7881},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 247, col: 77, offset: 7897},
							expr: &seqExpr{
								pos: position{line: 247, col: 78, offset: 7898},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 247, col: 78, offset: 7898},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 247, col: 82, offset: 7902},
										expr: &ruleRefExpr{
											pos:  position{line: 247, col: 82, offset: 7902},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 252, col: 1, offset: 8126},
			expr: &actionExpr{
				pos: position{line: 252, col: 22, offset: 8147},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 252, col: 22, offset: 8147},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 252, col: 22, offset: 8147},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 23, offset: 8148},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 252, col: 29, offset: 8154},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 29, offset: 8154},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 42, offset: 8167},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 42, offset: 8167},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 256, col: 1, offset: 8237},
			expr: &actionExpr{
				pos: position{line: 257, col: 5, offset: 8260},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 257, col: 5, offset: 8260},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 257, col: 5, offset: 8260},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 258, col: 9, offset: 8276},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 258, col: 9, offset: 8276},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 259, col: 11, offset: 8314},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 260, col: 11, offset: 8352},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 262, col: 5, offset: 8386},
							expr: &notExpr{
								pos: position{line: 262, col: 7, offset: 8388},
								expr: &seqExpr{
									pos: position{line: 262, col: 9, offset: 8390},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 262, col: 9, offset: 8390},
											expr: &ruleRefExpr{
												pos:  position{line: 262, col: 9, offset: 8390},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 262, col: 16, offset: 8397},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 266, col: 1, offset: 8438},
			expr: &actionExpr{
				pos: position{line: 267, col: 5, offset: 8473},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 267, col: 5, offset: 8473},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 5, offset: 8473},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 5, offset: 8482},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 268, col: 14, offset: 8491},
								expr: &choiceExpr{
									pos: position{line: 269, col: 9, offset: 8501},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 9, offset: 8501},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 270, col: 12, offset: 8518},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 270, col: 12, offset: 8518},
												expr: &charClassMatcher{
													pos:        position{line: 270, col: 12, offset: 8518},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 273, col: 11, offset: 8664},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 274, col: 11, offset: 8693},
											name: "AttributeSubstitution",
										},
										&choiceExpr{
											pos: position{line: 275, col: 12, offset: 8726},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 275, col: 12, offset: 8726},
													run: (*parser).callonSingleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 275, col: 12, offset: 8726},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 278, col: 11, offset: 8818},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 278, col: 17, offset: 8824},
													run: (*parser).callonSingleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 278, col: 17, offset: 8824},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 282, col: 5, offset: 8913},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 286, col: 1, offset: 8969},
			expr: &actionExpr{
				pos: position{line: 287, col: 5, offset: 9004},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 287, col: 5, offset: 9004},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 287, col: 5, offset: 9004},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 5, offset: 9014},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 288, col: 14, offset: 9023},
								expr: &choiceExpr{
									pos: position{line: 289, col: 9, offset: 9033},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 289, col: 9, offset: 9033},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 290, col: 12, offset: 9050},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 290, col: 12, offset: 9050},
												expr: &charClassMatcher{
													pos:        position{line: 290, col: 12, offset: 9050},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 293, col: 11, offset: 9196},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 294, col: 11, offset: 9225},
											name: "AttributeSubstitution",
										},
										&choiceExpr{
											pos: position{line: 295, col: 12, offset: 9258},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 295, col: 12, offset: 9258},
													run: (*parser).callonDoubleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 295, col: 12, offset: 9258},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 298, col: 11, offset: 9350},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 298, col: 17, offset: 9356},
													run: (*parser).callonDoubleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 298, col: 17, offset: 9356},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 5, offset: 9445},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 307, col: 1, offset: 9580},
			expr: &actionExpr{
				pos: position{line: 308, col: 5, offset: 9611},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 308, col: 5, offset: 9611},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 308, col: 5, offset: 9611},
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 6, offset: 9612},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 5, offset: 9622},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 309, col: 14, offset: 9631},
								expr: &choiceExpr{
									pos: position{line: 310, col: 9, offset: 9641},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 310, col: 9, offset: 9641},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 311, col: 12, offset: 9658},
											run: (*parser).callonUnquotedAttributeValue9,
											expr: &oneOrMoreExpr{
												pos: position{line: 311, col: 12, offset: 9658},
												expr: &charClassMatcher{
													pos:        position{line: 311, col: 12, offset: 9658},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 314, col: 11, offset: 9760},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 315, col: 11, offset: 9789},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 316, col: 12, offset: 9822},
											run: (*parser).callonUnquotedAttributeValue14,
											expr: &litMatcher{
												pos:        position{line: 316, col: 12, offset: 9822},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 320, col: 5, offset: 9910},
							run: (*parser).callonUnquotedAttributeValue16,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 331, col: 1, offset: 10225},
			expr: &actionExpr{
				pos: position{line: 333, col: 5, offset: 10316},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 333, col: 5, offset: 10316},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 333, col: 5, offset: 10316},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 336, col: 5, offset: 10380},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 336, col: 14, offset: 10389},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 336, col: 14, offset: 10389},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 336, col: 36, offset: 10411},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 343, col: 1, offset: 10576},
			expr: &actionExpr{
				pos: position{line: 343, col: 31, offset: 10606},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 343, col: 31, offset: 10606},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 343, col: 31, offset: 10606},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 343, col: 35, offset: 10610},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 40, offset: 10615},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 343, col: 54, offset: 10629},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 348, col: 1, offset: 10745},
			expr: &choiceExpr{
				pos: position{line: 348, col: 24, offset: 10768},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 348, col: 24, offset: 10768},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 47, offset: 10791},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 350, col: 1, offset: 10927},
			expr: &actionExpr{
				pos: position{line: 350, col: 25, offset: 10951},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 350, col: 25, offset: 10951},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 25, offset: 10951},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 37, offset: 10963},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 42, offset: 10968},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 56, offset: 10982},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 62, offset: 10988},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 63, offset: 10989},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 350, col: 78, offset: 11004},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 354, col: 1, offset: 11082},
			expr: &actionExpr{
				pos: position{line: 354, col: 25, offset: 11106},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 354, col: 25, offset: 11106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 25, offset: 11106},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 354, col: 38, offset: 11119},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 43, offset: 11124},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 57, offset: 11138},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 63, offset: 11144},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 64, offset: 11145},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 79, offset: 11160},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 358, col: 1, offset: 11235},
			expr: &actionExpr{
				pos: position{line: 358, col: 17, offset: 11251},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 358, col: 17, offset: 11251},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 17, offset: 11251},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 21, offset: 11255},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 358, col: 28, offset: 11262},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 358, col: 28, offset: 11262},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 358, col: 28, offset: 11262},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 360, col: 9, offset: 11316},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 360, col: 9, offset: 11316},
											expr: &charClassMatcher{
												pos:        position{line: 360, col: 9, offset: 11316},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 369, col: 1, offset: 11518},
			expr: &actionExpr{
				pos: position{line: 369, col: 14, offset: 11531},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 369, col: 14, offset: 11531},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 369, col: 14, offset: 11531},
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 14, offset: 11531},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 369, col: 21, offset: 11538},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 376, col: 1, offset: 11775},
			expr: &actionExpr{
				pos: position{line: 376, col: 12, offset: 11786},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 376, col: 12, offset: 11786},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 376, col: 12, offset: 11786},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 376, col: 16, offset: 11790},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 376, col: 21, offset: 11795},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 376, col: 21, offset: 11795},
									expr: &charClassMatcher{
										pos:        position{line: 376, col: 21, offset: 11795},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 376, col: 69, offset: 11843},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 376, col: 73, offset: 11847},
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 73, offset: 11847},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 376, col: 80, offset: 11854},
							expr: &choiceExpr{
								pos: position{line: 376, col: 82, offset: 11856},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 376, col: 82, offset: 11856},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 376, col: 88, offset: 11862},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 380, col: 1, offset: 11923},
			expr: &actionExpr{
				pos: position{line: 380, col: 20, offset: 11942},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 380, col: 20, offset: 11942},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 380, col: 20, offset: 11942},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 25, offset: 11947},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 380, col: 48, offset: 11970},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 61, offset: 11983},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 384, col: 1, offset: 12095},
			expr: &actionExpr{
				pos: position{line: 384, col: 26, offset: 12120},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 384, col: 26, offset: 12120},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 384, col: 26, offset: 12120},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 30, offset: 12124},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 384, col: 35, offset: 12129},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 384, col: 35, offset: 12129},
									expr: &charClassMatcher{
										pos:        position{line: 384, col: 35, offset: 12129},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 83, offset: 12177},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 384, col: 87, offset: 12181},
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 87, offset: 12181},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 392, col: 1, offset: 12412},
			expr: &seqExpr{
				pos: position{line: 392, col: 31, offset: 12442},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 392, col: 31, offset: 12442},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 392, col: 38, offset: 12449},
						expr: &ruleRefExpr{
							pos:  position{line: 392, col: 38, offset: 12449},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 45, offset: 12456},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 394, col: 1, offset: 12461},
			expr: &choiceExpr{
				pos: position{line: 394, col: 29, offset: 12489},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 394, col: 30, offset: 12490},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 394, col: 30, offset: 12490},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 394, col: 37, offset: 12497},
								expr: &ruleRefExpr{
									pos:  position{line: 394, col: 37, offset: 12497},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 394, col: 44, offset: 12504},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 51, offset: 12511},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 411, col: 1, offset: 13001},
			expr: &actionExpr{
				pos: position{line: 416, col: 5, offset: 13160},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 416, col: 5, offset: 13160},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 416, col: 14, offset: 13169},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 420, col: 1, offset: 13215},
			expr: &actionExpr{
				pos: position{line: 420, col: 12, offset: 13226},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 420, col: 12, offset: 13226},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 420, col: 12, offset: 13226},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 420, col: 20, offset: 13234},
								expr: &anyMatcher{
									line: 420, col: 21, offset: 13235,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 420, col: 25, offset: 13239},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 424, col: 1, offset: 13292},
			expr: &actionExpr{
				pos: position{line: 424, col: 22, offset: 13313},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 424, col: 22, offset: 13313},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 424, col: 22, offset: 13313},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 23, offset: 13314},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 424, col: 45, offset: 13336},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 45, offset: 13336},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 424, col: 52, offset: 13343},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 57, offset: 13348},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 66, offset: 13357},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 424, col: 92, offset: 13383},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 428, col: 1, offset: 13456},
			expr: &actionExpr{
				pos: position{line: 428, col: 29, offset: 13484},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 428, col: 29, offset: 13484},
					expr: &charClassMatcher{
						pos:        position{line: 428, col: 29, offset: 13484},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 435, col: 1, offset: 13649},
			expr: &choiceExpr{
				pos: position{line: 435, col: 19, offset: 13667},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 435, col: 19, offset: 13667},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 435, col: 44, offset: 13692},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 437, col: 1, offset: 13717},
			expr: &choiceExpr{
				pos: position{line: 437, col: 27, offset: 13743},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 437, col: 27, offset: 13743},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 437, col: 27, offset: 13743},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 437, col: 27, offset: 13743},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 437, col: 32, offset: 13748},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 437, col: 36, offset: 13752},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 437, col: 40, offset: 13756},
									expr: &ruleRefExpr{
										pos:  position{line: 437, col: 40, offset: 13756},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 437, col: 47, offset: 13763},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 437, col: 51, offset: 13767},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 437, col: 58, offset: 13774},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 437, col: 79, offset: 13795},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 9, offset: 13868},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 439, col: 9, offset: 13868},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 9, offset: 13868},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 439, col: 14, offset: 13873},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 439, col: 18, offset: 13877},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 439, col: 22, offset: 13881},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 443, col: 1, offset: 13952},
			expr: &actionExpr{
				pos: position{line: 443, col: 27, offset: 13978},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 443, col: 27, offset: 13978},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 443, col: 27, offset: 13978},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 443, col: 35, offset: 13986},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 40, offset: 13991},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 54, offset: 14005},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 72, offset: 14023},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 447, col: 1, offset: 14156},
			expr: &oneOrMoreExpr{
				pos: position{line: 447, col: 24, offset: 14179},
				expr: &choiceExpr{
					pos: position{line: 448, col: 5, offset: 14185},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 448, col: 6, offset: 14186},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 448, col: 6, offset: 14186},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 448, col: 6, offset: 14186},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 448, col: 14, offset: 14194},
										expr: &charClassMatcher{
											pos:        position{line: 448, col: 14, offset: 14194},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 451, col: 7, offset: 14389},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 452, col: 8, offset: 14418},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 452, col: 8, offset: 14418},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 461, col: 1, offset: 14693},
			expr: &actionExpr{
				pos: position{line: 461, col: 19, offset: 14711},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 461, col: 19, offset: 14711},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 461, col: 19, offset: 14711},
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 21, offset: 14713},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 462, col: 5, offset: 14743},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 462, col: 16, offset: 14754},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 462, col: 16, offset: 14754},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 463, col: 7, offset: 14813},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 464, col: 7, offset: 14841},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 465, col: 7, offset: 14870},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 466, col: 7, offset: 14899},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 467, col: 7, offset: 14928},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 468, col: 7, offset: 14954},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 469, col: 7, offset: 14982},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 473, col: 1, offset: 15048},
			expr: &actionExpr{
				pos: position{line: 473, col: 26, offset: 15073},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 473, col: 26, offset: 15073},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 473, col: 26, offset: 15073},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 473, col: 33, offset: 15080},
							expr: &ruleRefExpr{
								pos:  position{line: 473, col: 33, offset: 15080},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 473, col: 40, offset: 15087},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 477, col: 1, offset: 15146},
			expr: &actionExpr{
				pos: position{line: 477, col: 25, offset: 15170},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 477, col: 25, offset: 15170},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 477, col: 25, offset: 15170},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 477, col: 31, offset: 15176},
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 31, offset: 15176},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 477, col: 38, offset: 15183},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 481, col: 1, offset: 15241},
			expr: &actionExpr{
				pos: position{line: 481, col: 26, offset: 15266},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 481, col: 26, offset: 15266},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 481, col: 26, offset: 15266},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 481, col: 33, offset: 15273},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 33, offset: 15273},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 481, col: 40, offset: 15280},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 485, col: 1, offset: 15339},
			expr: &ruleRefExpr{
				pos:  position{line: 485, col: 25, offset: 15363},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 487, col: 1, offset: 15386},
			expr: &actionExpr{
				pos: position{line: 487, col: 26, offset: 15411},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 487, col: 26, offset: 15411},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 487, col: 26, offset: 15411},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 487, col: 33, offset: 15418},
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 33, offset: 15418},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 487, col: 40, offset: 15425},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 491, col: 1, offset: 15484},
			expr: &actionExpr{
				pos: position{line: 491, col: 26, offset: 15509},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 491, col: 26, offset: 15509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 491, col: 26, offset: 15509},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 491, col: 33, offset: 15516},
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 33, offset: 15516},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 491, col: 40, offset: 15523},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 495, col: 1, offset: 15582},
			expr: &actionExpr{
				pos: position{line: 495, col: 24, offset: 15605},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 495, col: 24, offset: 15605},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 495, col: 24, offset: 15605},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 495, col: 31, offset: 15612},
							expr: &ruleRefExpr{
								pos:  position{line: 495, col: 31, offset: 15612},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 495, col: 38, offset: 15619},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 499, col: 1, offset: 15676},
			expr: &actionExpr{
				pos: position{line: 499, col: 26, offset: 15701},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 499, col: 26, offset: 15701},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 499, col: 26, offset: 15701},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 499, col: 33, offset: 15708},
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 33, offset: 15708},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 499, col: 40, offset: 15715},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 503, col: 1, offset: 15774},
			expr: &actionExpr{
				pos: position{line: 503, col: 30, offset: 15803},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 503, col: 30, offset: 15803},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 503, col: 30, offset: 15803},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 503, col: 37, offset: 15810},
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 37, offset: 15810},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 503, col: 44, offset: 15817},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 570, col: 1, offset: 17935},
			expr: &actionExpr{
				pos: position{line: 571, col: 9, offset: 17961},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 571, col: 9, offset: 17961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 9, offset: 17961},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 571, col: 13, offset: 17965},
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 13, offset: 17965},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 20, offset: 17972},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 27, offset: 17979},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 49, offset: 18001},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 571, col: 53, offset: 18005},
								expr: &ruleRefExpr{
									pos:  position{line: 571, col: 53, offset: 18005},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 71, offset: 18023},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 575, col: 1, offset: 18138},
			expr: &choiceExpr{
				pos: position{line: 576, col: 9, offset: 18174},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 576, col: 9, offset: 18174},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 577, col: 11, offset: 18202},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 11, offset: 18234},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 579, col: 11, offset: 18264},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 581, col: 1, offset: 18281},
			expr: &choiceExpr{
				pos: position{line: 582, col: 9, offset: 18318},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 582, col: 9, offset: 18318},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 583, col: 11, offset: 18346},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 584, col: 11, offset: 18378},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 585, col: 11, offset: 18408},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 587, col: 1, offset: 18426},
			expr: &choiceExpr{
				pos: position{line: 587, col: 20, offset: 18445},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 587, col: 20, offset: 18445},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 587, col: 48, offset: 18473},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 589, col: 1, offset: 18503},
			expr: &actionExpr{
				pos: position{line: 589, col: 30, offset: 18532},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 589, col: 30, offset: 18532},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 589, col: 30, offset: 18532},
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 30, offset: 18532},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 589, col: 37, offset: 18539},
							expr: &litMatcher{
								pos:        position{line: 589, col: 38, offset: 18540},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 589, col: 42, offset: 18544},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 589, col: 51, offset: 18553},
								expr: &ruleRefExpr{
									pos:  position{line: 589, col: 51, offset: 18553},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 68, offset: 18570},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 593, col: 1, offset: 18640},
			expr: &actionExpr{
				pos: position{line: 593, col: 33, offset: 18672},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 593, col: 33, offset: 18672},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 593, col: 33, offset: 18672},
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 33, offset: 18672},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 593, col: 40, offset: 18679},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 51, offset: 18690},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 59, offset: 18698},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 75, offset: 18714},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 597, col: 1, offset: 18793},
			expr: &actionExpr{
				pos: position{line: 597, col: 19, offset: 18811},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 597, col: 19, offset: 18811},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 597, col: 19, offset: 18811},
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 19, offset: 18811},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 597, col: 26, offset: 18818},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 36, offset: 18828},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 597, col: 56, offset: 18848},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 597, col: 62, offset: 18854},
								expr: &ruleRefExpr{
									pos:  position{line: 597, col: 63, offset: 18855},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 597, col: 85, offset: 18877},
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 85, offset: 18877},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 597, col: 92, offset: 18884},
							expr: &litMatcher{
								pos:        position{line: 597, col: 92, offset: 18884},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 597, col: 97, offset: 18889},
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 97, offset: 18889},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 602, col: 1, offset: 19034},
			expr: &actionExpr{
				pos: position{line: 602, col: 23, offset: 19056},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 602, col: 23, offset: 19056},
					expr: &charClassMatcher{
						pos:        position{line: 602, col: 23, offset: 19056},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 606, col: 1, offset: 19103},
			expr: &actionExpr{
				pos: position{line: 606, col: 24, offset: 19126},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 606, col: 24, offset: 19126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 606, col: 24, offset: 19126},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 606, col: 28, offset: 19130},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 606, col: 35, offset: 19137},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 606, col: 36, offset: 19138},
									expr: &charClassMatcher{
										pos:        position{line: 606, col: 36, offset: 19138},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 608, col: 4, offset: 19185},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 614, col: 1, offset: 19346},
			expr: &actionExpr{
				pos: position{line: 614, col: 21, offset: 19366},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 614, col: 21, offset: 19366},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 614, col: 21, offset: 19366},
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 21, offset: 19366},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 614, col: 28, offset: 19373},
							expr: &litMatcher{
								pos:        position{line: 614, col: 29, offset: 19374},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 614, col: 33, offset: 19378},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 615, col: 9, offset: 19397},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 615, col: 10, offset: 19398},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 615, col: 10, offset: 19398},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 615, col: 10, offset: 19398},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 615, col: 21, offset: 19409},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 615, col: 45, offset: 19433},
													expr: &litMatcher{
														pos:        position{line: 615, col: 45, offset: 19433},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 615, col: 50, offset: 19438},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 615, col: 58, offset: 19446},
														expr: &ruleRefExpr{
															pos:  position{line: 615, col: 59, offset: 19447},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 615, col: 82, offset: 19470},
													expr: &litMatcher{
														pos:        position{line: 615, col: 82, offset: 19470},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 615, col: 87, offset: 19475},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 615, col: 97, offset: 19485},
														expr: &ruleRefExpr{
															pos:  position{line: 615, col: 98, offset: 19486},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 617, col: 15, offset: 19603},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 617, col: 15, offset: 19603},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 617, col: 15, offset: 19603},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 617, col: 24, offset: 19612},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 617, col: 46, offset: 19634},
													expr: &litMatcher{
														pos:        position{line: 617, col: 46, offset: 19634},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 617, col: 51, offset: 19639},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 617, col: 61, offset: 19649},
														expr: &ruleRefExpr{
															pos:  position{line: 617, col: 62, offset: 19650},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 13, offset: 19759},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 624, col: 1, offset: 19889},
			expr: &choiceExpr{
				pos: position{line: 624, col: 27, offset: 19915},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 624, col: 27, offset: 19915},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 624, col: 27, offset: 19915},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 624, col: 27, offset: 19915},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 624, col: 32, offset: 19920},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 624, col: 39, offset: 19927},
									expr: &charClassMatcher{
										pos:        position{line: 624, col: 39, offset: 19927},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 5, offset: 19975},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 626, col: 5, offset: 19975},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 626, col: 5, offset: 19975},
									expr: &litMatcher{
										pos:        position{line: 626, col: 5, offset: 19975},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 626, col: 11, offset: 19981},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 626, col: 18, offset: 19988},
									expr: &charClassMatcher{
										pos:        position{line: 626, col: 18, offset: 19988},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 626, col: 29, offset: 19999},
									expr: &ruleRefExpr{
										pos:  position{line: 626, col: 29, offset: 19999},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 626, col: 36, offset: 20006},
									expr: &litMatcher{
										pos:        position{line: 626, col: 37, offset: 20007},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 630, col: 1, offset: 20047},
			expr: &actionExpr{
				pos: position{line: 630, col: 25, offset: 20071},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 630, col: 25, offset: 20071},
					expr: &charClassMatcher{
						pos:        position{line: 630, col: 25, offset: 20071},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 634, col: 1, offset: 20117},
			expr: &actionExpr{
				pos: position{line: 634, col: 27, offset: 20143},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 634, col: 27, offset: 20143},
					expr: &charClassMatcher{
						pos:        position{line: 634, col: 27, offset: 20143},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 641, col: 1, offset: 20318},
			expr: &litMatcher{
				pos:        position{line: 641, col: 32, offset: 20349},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 642, col: 1, offset: 20358},
			expr: &actionExpr{
				pos: position{line: 642, col: 23, offset: 20380},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 642, col: 23, offset: 20380},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 642, col: 23, offset: 20380},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 642, col: 51, offset: 20408},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 642, col: 56, offset: 20413},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 642, col: 56, offset: 20413},
									expr: &charClassMatcher{
										pos:        position{line: 642, col: 56, offset: 20413},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 95, offset: 20452},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 649, col: 1, offset: 20722},
			expr: &actionExpr{
				pos: position{line: 649, col: 14, offset: 20735},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 649, col: 14, offset: 20735},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 649, col: 14, offset: 20735},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 649, col: 20, offset: 20741},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 649, col: 24, offset: 20745},
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 24, offset: 20745},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 649, col: 31, offset: 20752},
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 32, offset: 20753},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 656, col: 1, offset: 20917},
			expr: &actionExpr{
				pos: position{line: 657, col: 5, offset: 20939},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 657, col: 5, offset: 20939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 20939},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 658, col: 9, offset: 20954},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 658, col: 9, offset: 20954},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 658, col: 9, offset: 20954},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 659, col: 9, offset: 20975},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 659, col: 15, offset: 20981},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 660, col: 9, offset: 21004},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 660, col: 27, offset: 21022},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 664, col: 5, offset: 21182},
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 5, offset: 21182},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 664, col: 12, offset: 21189},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 668, col: 1, offset: 21249},
			expr: &ruleRefExpr{
				pos:  position{line: 668, col: 26, offset: 21274},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 671, col: 1, offset: 21314},
			expr: &actionExpr{
				pos: position{line: 671, col: 15, offset: 21328},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 671, col: 15, offset: 21328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 671, col: 15, offset: 21328},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 671, col: 22, offset: 21335},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 671, col: 22, offset: 21335},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 7, offset: 21361},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 7, offset: 21383},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 674, col: 7, offset: 21406},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 678, col: 1, offset: 21496},
			expr: &actionExpr{
				pos: position{line: 678, col: 23, offset: 21518},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 678, col: 23, offset: 21518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 678, col: 23, offset: 21518},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 678, col: 30, offset: 21525},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 678, col: 30, offset: 21525},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 47, offset: 21542},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 5, offset: 21564},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 679, col: 12, offset: 21571},
								expr: &actionExpr{
									pos: position{line: 680, col: 9, offset: 21581},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 680, col: 9, offset: 21581},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 680, col: 10, offset: 21582},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 680, col: 10, offset: 21582},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 680, col: 16, offset: 21588},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 681, col: 9, offset: 21699},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 681, col: 16, offset: 21706},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 681, col: 16, offset: 21706},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 681, col: 33, offset: 21723},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 687, col: 1, offset: 21865},
			expr: &actionExpr{
				pos: position{line: 687, col: 19, offset: 21883},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 687, col: 19, offset: 21883},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 687, col: 19, offset: 21883},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 26, offset: 21890},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 687, col: 34, offset: 21898},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 687, col: 39, offset: 21903},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 44, offset: 21908},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 691, col: 1, offset: 22004},
			expr: &actionExpr{
				pos: position{line: 691, col: 20, offset: 22023},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 691, col: 20, offset: 22023},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 691, col: 32, offset: 22035},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 696, col: 1, offset: 22158},
			expr: &actionExpr{
				pos: position{line: 696, col: 14, offset: 22171},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 696, col: 14, offset: 22171},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 696, col: 14, offset: 22171},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 21, offset: 22178},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 696, col: 40, offset: 22197},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 700, col: 1, offset: 22287},
			expr: &actionExpr{
				pos: position{line: 700, col: 22, offset: 22308},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 700, col: 22, offset: 22308},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 700, col: 22, offset: 22308},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 29, offset: 22315},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 5, offset: 22329},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 701, col: 12, offset: 22336},
								expr: &actionExpr{
									pos: position{line: 702, col: 9, offset: 22346},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 702, col: 9, offset: 22346},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 702, col: 10, offset: 22347},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 702, col: 10, offset: 22347},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 702, col: 16, offset: 22353},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 703, col: 9, offset: 22464},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 703, col: 16, offset: 22471},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 709, col: 1, offset: 22606},
			expr: &choiceExpr{
				pos: position{line: 709, col: 13, offset: 22618},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 709, col: 13, offset: 22618},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 709, col: 13, offset: 22618},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 709, col: 18, offset: 22623},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 709, col: 18, offset: 22623},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 709, col: 30, offset: 22635},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 711, col: 9, offset: 22711},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 711, col: 9, offset: 22711},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 711, col: 9, offset: 22711},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 711, col: 13, offset: 22715},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 711, col: 18, offset: 22720},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 711, col: 18, offset: 22720},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 711, col: 30, offset: 22732},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 715, col: 1, offset: 22808},
			expr: &actionExpr{
				pos: position{line: 715, col: 16, offset: 22823},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 715, col: 16, offset: 22823},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 715, col: 16, offset: 22823},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 715, col: 23, offset: 22830},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 715, col: 23, offset: 22830},
									expr: &litMatcher{
										pos:        position{line: 715, col: 24, offset: 22831},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 718, col: 5, offset: 22885},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 725, col: 1, offset: 23052},
			expr: &actionExpr{
				pos: position{line: 725, col: 21, offset: 23072},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 725, col: 21, offset: 23072},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 21, offset: 23072},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 725, col: 29, offset: 23080},
								expr: &choiceExpr{
									pos: position{line: 725, col: 30, offset: 23081},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 725, col: 30, offset: 23081},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 725, col: 53, offset: 23104},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 725, col: 74, offset: 23125},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 725, col: 74, offset: 23125,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 107, offset: 23158},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 729, col: 1, offset: 23237},
			expr: &actionExpr{
				pos: position{line: 729, col: 25, offset: 23261},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 729, col: 25, offset: 23261},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 729, col: 25, offset: 23261},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 33, offset: 23269},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 729, col: 38, offset: 23274},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 729, col: 38, offset: 23274},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 729, col: 78, offset: 23314},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 733, col: 1, offset: 23387},
			expr: &actionExpr{
				pos: position{line: 733, col: 23, offset: 23409},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 733, col: 23, offset: 23409},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 733, col: 23, offset: 23409},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 31, offset: 23417},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 733, col: 36, offset: 23422},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 36, offset: 23422},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 733, col: 76, offset: 23462},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 752, col: 1, offset: 24007},
			expr: &choiceExpr{
				pos: position{line: 752, col: 24, offset: 24030},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 752, col: 24, offset: 24030},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 752, col: 47, offset: 24053},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 752, col: 59, offset: 24065},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 754, col: 1, offset: 24082},
			expr: &actionExpr{
				pos: position{line: 754, col: 26, offset: 24107},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 754, col: 26, offset: 24107},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 754, col: 26, offset: 24107},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 754, col: 32, offset: 24113},
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 32, offset: 24113},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 754, col: 39, offset: 24120},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 758, col: 1, offset: 24183},
			expr: &actionExpr{
				pos: position{line: 758, col: 20, offset: 24202},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 758, col: 20, offset: 24202},
					expr: &anyMatcher{
						line: 758, col: 21, offset: 24203,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 765, col: 1, offset: 24373},
			expr: &actionExpr{
				pos: position{line: 766, col: 5, offset: 24396},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 766, col: 5, offset: 24396},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 766, col: 15, offset: 24406},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 766, col: 15, offset: 24406},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 766, col: 15, offset: 24406},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 24, offset: 24415},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 768, col: 9, offset: 24507},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 768, col: 9, offset: 24507},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 768, col: 9, offset: 24507},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 768, col: 18, offset: 24516},
												expr: &ruleRefExpr{
													pos:  position{line: 768, col: 19, offset: 24517},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 768, col: 35, offset: 24533},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 784, col: 1, offset: 24850},
			expr: &actionExpr{
				pos: position{line: 785, col: 5, offset: 24873},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 785, col: 5, offset: 24873},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 785, col: 14, offset: 24882},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 785, col: 14, offset: 24882},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 786, col: 11, offset: 24943},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 787, col: 11, offset: 24988},
								expr: &ruleRefExpr{
									pos:  position{line: 787, col: 11, offset: 24988},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 788, col: 11, offset: 25006},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 788, col: 11, offset: 25006},
										expr: &ruleRefExpr{
											pos:  position{line: 788, col: 12, offset: 25007},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 789, col: 13, offset: 25025},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 789, col: 13, offset: 25025},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 790, col: 15, offset: 25056},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 791, col: 15, offset: 25076},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 792, col: 15, offset: 25113},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 793, col: 15, offset: 25139},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 794, col: 15, offset: 25165},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 795, col: 15, offset: 25195},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 797, col: 15, offset: 25295},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 829, col: 1, offset: 26311},
			expr: &actionExpr{
				pos: position{line: 829, col: 20, offset: 26330},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 829, col: 20, offset: 26330},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 829, col: 20, offset: 26330},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 829, col: 25, offset: 26335},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 829, col: 29, offset: 26339},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 829, col: 33, offset: 26343},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 829, col: 38, offset: 26348},
							expr: &ruleRefExpr{
								pos:  position{line: 829, col: 38, offset: 26348},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 836, col: 1, offset: 26594},
			expr: &actionExpr{
				pos: position{line: 836, col: 14, offset: 26607},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 836, col: 14, offset: 26607},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 836, col: 14, offset: 26607},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 836, col: 19, offset: 26612},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 25, offset: 26618},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 836, col: 43, offset: 26636},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 840, col: 1, offset: 26701},
			expr: &actionExpr{
				pos: position{line: 840, col: 21, offset: 26721},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 840, col: 21, offset: 26721},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 840, col: 30, offset: 26730},
						expr: &choiceExpr{
							pos: position{line: 840, col: 31, offset: 26731},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 840, col: 31, offset: 26731},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 38, offset: 26738},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 53, offset: 26753},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 66, offset: 26766},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 74, offset: 26774},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 93, offset: 26793},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 840, col: 114, offset: 26814},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 840, col: 115, offset: 26815},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 840, col: 115, offset: 26815},
												expr: &litMatcher{
													pos:        position{line: 840, col: 116, offset: 26816},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 840, col: 121, offset: 26821,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 846, col: 1, offset: 26927},
			expr: &actionExpr{
				pos: position{line: 846, col: 23, offset: 26949},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 846, col: 23, offset: 26949},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 846, col: 23, offset: 26949},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 846, col: 29, offset: 26955},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 36, offset: 26962},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 5, offset: 26994},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 847, col: 11, offset: 27000},
								expr: &actionExpr{
									pos: position{line: 847, col: 12, offset: 27001},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 847, col: 12, offset: 27001},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 847, col: 12, offset: 27001},
												expr: &ruleRefExpr{
													pos:  position{line: 847, col: 12, offset: 27001},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 847, col: 19, offset: 27008},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 847, col: 23, offset: 27012},
												expr: &ruleRefExpr{
													pos:  position{line: 847, col: 23, offset: 27012},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 847, col: 30, offset: 27019},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 847, col: 39, offset: 27028},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 5, offset: 27086},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 848, col: 11, offset: 27092},
								expr: &actionExpr{
									pos: position{line: 848, col: 12, offset: 27093},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 848, col: 12, offset: 27093},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 848, col: 12, offset: 27093},
												expr: &ruleRefExpr{
													pos:  position{line: 848, col: 12, offset: 27093},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 848, col: 19, offset: 27100},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 848, col: 23, offset: 27104},
												expr: &ruleRefExpr{
													pos:  position{line: 848, col: 23, offset: 27104},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 848, col: 30, offset: 27111},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 848, col: 39, offset: 27120},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 849, col: 5, offset: 27178},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 853, col: 1, offset: 27257},
			expr: &actionExpr{
				pos: position{line: 853, col: 30, offset: 27286},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 853, col: 30, offset: 27286},
					expr: &choiceExpr{
						pos: position{line: 853, col: 31, offset: 27287},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 853, col: 31, offset: 27287},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 853, col: 42, offset: 27298},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 860, col: 1, offset: 27444},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 27463},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 27463},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 861, col: 5, offset: 27463},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 865, col: 5, offset: 27615},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 865, col: 15, offset: 27625},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 21, offset: 27631},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 31, offset: 27641},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 49, offset: 27659},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 865, col: 67, offset: 27677},
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 67, offset: 27677},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 865, col: 74, offset: 27684},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 870, col: 1, offset: 27930},
			expr: &actionExpr{
				pos: position{line: 870, col: 16, offset: 27945},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 870, col: 16, offset: 27945},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 870, col: 16, offset: 27945},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 870, col: 25, offset: 27954},
							expr: &litMatcher{
								pos:        position{line: 870, col: 26, offset: 27955},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 870, col: 30, offset: 27959},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 36, offset: 27965},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 870, col: 46, offset: 27975},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 64, offset: 27993},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 877, col: 1, offset: 28336},
			expr: &actionExpr{
				pos: position{line: 877, col: 15, offset: 28350},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 877, col: 15, offset: 28350},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 877, col: 15, offset: 28350},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 877, col: 23, offset: 28358},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 877, col: 29, offset: 28364},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 877, col: 29, offset: 28364},
									expr: &charClassMatcher{
										pos:        position{line: 877, col: 29, offset: 28364},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 877, col: 73, offset: 28408},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 85, offset: 28420},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 884, col: 1, offset: 28700},
			expr: &choiceExpr{
				pos: position{line: 884, col: 19, offset: 28718},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 884, col: 19, offset: 28718},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 884, col: 19, offset: 28718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 884, col: 19, offset: 28718},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 884, col: 32, offset: 28731},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 884, col: 41, offset: 28740},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 884, col: 58, offset: 28757},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 886, col: 9, offset: 28833},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 886, col: 9, offset: 28833},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 886, col: 9, offset: 28833},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 886, col: 21, offset: 28845},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 886, col: 26, offset: 28850},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 886, col: 39, offset: 28863},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 886, col: 43, offset: 28867},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 886, col: 51, offset: 28875},
										expr: &ruleRefExpr{
											pos:  position{line: 886, col: 52, offset: 28876},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 886, col: 70, offset: 28894},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 890, col: 1, offset: 28963},
			expr: &ruleRefExpr{
				pos:  position{line: 890, col: 16, offset: 28978},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 892, col: 1, offset: 28989},
			expr: &actionExpr{
				pos: position{line: 892, col: 20, offset: 29008},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 892, col: 20, offset: 29008},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 892, col: 29, offset: 29017},
						expr: &seqExpr{
							pos: position{line: 892, col: 30, offset: 29018},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 892, col: 30, offset: 29018},
									expr: &litMatcher{
										pos:        position{line: 892, col: 31, offset: 29019},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 892, col: 35, offset: 29023},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 900, col: 1, offset: 29266},
			expr: &litMatcher{
				pos:        position{line: 900, col: 32, offset: 29297},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 902, col: 1, offset: 29302},
			expr: &actionExpr{
				pos: position{line: 902, col: 26, offset: 29327},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 902, col: 26, offset: 29327},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 902, col: 26, offset: 29327},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 902, col: 54, offset: 29355},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 63, offset: 29364},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 902, col: 93, offset: 29394},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 902, col: 121, offset: 29422},
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 122, offset: 29423},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 906, col: 1, offset: 29536},
			expr: &choiceExpr{
				pos: position{line: 906, col: 33, offset: 29568},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 906, col: 34, offset: 29569},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 906, col: 34, offset: 29569},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 906, col: 35, offset: 29570},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 906, col: 35, offset: 29570},
											expr: &ruleRefExpr{
												pos:  position{line: 906, col: 36, offset: 29571},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 906, col: 64, offset: 29599},
											expr: &ruleRefExpr{
												pos:  position{line: 906, col: 65, offset: 29600},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 906, col: 71, offset: 29606},
											expr: &ruleRefExpr{
												pos:  position{line: 906, col: 72, offset: 29607},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 906, col: 80, offset: 29615,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 906, col: 83, offset: 29618},
									expr: &seqExpr{
										pos: position{line: 906, col: 84, offset: 29619},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 906, col: 84, offset: 29619},
												expr: &seqExpr{
													pos: position{line: 906, col: 86, offset: 29621},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 906, col: 86, offset: 29621},
															expr: &ruleRefExpr{
																pos:  position{line: 906, col: 86, offset: 29621},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 906, col: 93, offset: 29628},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 906, col: 122, offset: 29657},
												expr: &ruleRefExpr{
													pos:  position{line: 906, col: 123, offset: 29658},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 906, col: 151, offset: 29686},
												expr: &ruleRefExpr{
													pos:  position{line: 906, col: 152, offset: 29687},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 906, col: 160, offset: 29695,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 908, col: 11, offset: 29845},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 908, col: 12, offset: 29846},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 908, col: 12, offset: 29846},
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 13, offset: 29847},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 908, col: 19, offset: 29853},
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 20, offset: 29854},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 908, col: 28, offset: 29862},
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 29, offset: 29863},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 908, col: 57, offset: 29891,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 912, col: 1, offset: 29981},
			expr: &litMatcher{
				pos:        position{line: 912, col: 32, offset: 30012},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 914, col: 1, offset: 30019},
			expr: &actionExpr{
				pos: position{line: 914, col: 26, offset: 30044},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 914, col: 26, offset: 30044},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 914, col: 26, offset: 30044},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 914, col: 54, offset: 30072},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 63, offset: 30081},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 93, offset: 30111},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 914, col: 121, offset: 30139},
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 122, offset: 30140},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 918, col: 1, offset: 30253},
			expr: &choiceExpr{
				pos: position{line: 918, col: 33, offset: 30285},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 918, col: 34, offset: 30286},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 918, col: 34, offset: 30286},
							expr: &seqExpr{
								pos: position{line: 918, col: 35, offset: 30287},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 918, col: 35, offset: 30287},
										expr: &ruleRefExpr{
											pos:  position{line: 918, col: 36, offset: 30288},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 918, col: 64, offset: 30316,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 920, col: 11, offset: 30489},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 920, col: 11, offset: 30489},
							expr: &seqExpr{
								pos: position{line: 920, col: 12, offset: 30490},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 920, col: 12, offset: 30490},
										expr: &ruleRefExpr{
											pos:  position{line: 920, col: 13, offset: 30491},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 920, col: 19, offset: 30497},
										expr: &ruleRefExpr{
											pos:  position{line: 920, col: 20, offset: 30498},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 920, col: 28, offset: 30506},
										expr: &ruleRefExpr{
											pos:  position{line: 920, col: 29, offset: 30507},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 920, col: 57, offset: 30535,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 924, col: 1, offset: 30626},
			expr: &choiceExpr{
				pos: position{line: 924, col: 21, offset: 30646},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 924, col: 21, offset: 30646},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 924, col: 21, offset: 30646},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 924, col: 21, offset: 30646},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 924, col: 30, offset: 30655},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 924, col: 38, offset: 30663},
										expr: &ruleRefExpr{
											pos:  position{line: 924, col: 39, offset: 30664},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 924, col: 67, offset: 30692},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 926, col: 9, offset: 30796},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 926, col: 9, offset: 30796},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 926, col: 9, offset: 30796},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 926, col: 19, offset: 30806},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 926, col: 27, offset: 30814},
										expr: &choiceExpr{
											pos: position{line: 926, col: 28, offset: 30815},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 926, col: 28, offset: 30815},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 926, col: 41, offset: 30828},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 926, col: 69, offset: 30856},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 930, col: 1, offset: 30960},
			expr: &actionExpr{
				pos: position{line: 930, col: 30, offset: 30989},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 930, col: 30, offset: 30989},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 937, col: 1, offset: 31159},
			expr: &choiceExpr{
				pos: position{line: 937, col: 9, offset: 31167},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 937, col: 9, offset: 31167},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 937, col: 24, offset: 31182},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 940, col: 1, offset: 31263},
			expr: &actionExpr{
				pos: position{line: 940, col: 17, offset: 31279},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 940, col: 17, offset: 31279},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 940, col: 17, offset: 31279},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 940, col: 25, offset: 31287},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 30, offset: 31292},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 940, col: 40, offset: 31302},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 58, offset: 31320},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 944, col: 1, offset: 31441},
			expr: &actionExpr{
				pos: position{line: 944, col: 17, offset: 31457},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 944, col: 17, offset: 31457},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 17, offset: 31457},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 22, offset: 31462},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 944, col: 42, offset: 31482},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 944, col: 59, offset: 31499},
								expr: &ruleRefExpr{
									pos:  position{line: 944, col: 60, offset: 31500},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 952, col: 1, offset: 31841},
			expr: &choiceExpr{
				pos: position{line: 953, col: 5, offset: 31860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 954, col: 9, offset: 31870},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 954, col: 9, offset: 31870},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 954, col: 9, offset: 31870},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 954, col: 20, offset: 31881},
										expr: &ruleRefExpr{
											pos:  position{line: 954, col: 21, offset: 31882},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 955, col: 9, offset: 31912},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 955, col: 15, offset: 31918},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 955, col: 15, offset: 31918},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 955, col: 41, offset: 31944},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 959, col: 7, offset: 32062},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 961, col: 1, offset: 32081},
			expr: &choiceExpr{
				pos: position{line: 961, col: 32, offset: 32112},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 961, col: 32, offset: 32112},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 961, col: 32, offset: 32112},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 961, col: 36, offset: 32116},
								expr: &litMatcher{
									pos:        position{line: 961, col: 37, offset: 32117},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 961, col: 43, offset: 32123},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 961, col: 43, offset: 32123},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 961, col: 47, offset: 32127},
								expr: &litMatcher{
									pos:        position{line: 961, col: 48, offset: 32128},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 961, col: 54, offset: 32134},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 961, col: 54, offset: 32134},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 961, col: 58, offset: 32138},
								expr: &litMatcher{
									pos:        position{line: 961, col: 59, offset: 32139},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 961, col: 65, offset: 32145},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 961, col: 65, offset: 32145},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 961, col: 69, offset: 32149},
								expr: &litMatcher{
									pos:        position{line: 961, col: 70, offset: 32150},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 963, col: 1, offset: 32155},
			expr: &choiceExpr{
				pos: position{line: 963, col: 34, offset: 32188},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 963, col: 34, offset: 32188},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 963, col: 41, offset: 32195},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 963, col: 48, offset: 32202},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 963, col: 55, offset: 32209},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 963, col: 62, offset: 32216},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 963, col: 68, offset: 32222},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 965, col: 1, offset: 32227},
			expr: &choiceExpr{
				pos: position{line: 966, col: 5, offset: 32257},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 966, col: 5, offset: 32257},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 967, col: 7, offset: 32284},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 7, offset: 32312},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 7, offset: 32340},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 7, offset: 32372},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 7, offset: 32393},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 973, col: 1, offset: 32411},
			expr: &choiceExpr{
				pos: position{line: 974, col: 5, offset: 32443},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 974, col: 5, offset: 32443},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 7, offset: 32469},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 976, col: 7, offset: 32497},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 7, offset: 32525},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 979, col: 1, offset: 32551},
			expr: &actionExpr{
				pos: position{line: 980, col: 5, offset: 32632},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 980, col: 5, offset: 32632},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 980, col: 5, offset: 32632},
							expr: &litMatcher{
								pos:        position{line: 980, col: 7, offset: 32634},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 981, col: 5, offset: 32643},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 982, col: 9, offset: 32661},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 982, col: 9, offset: 32661},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 983, col: 11, offset: 32688},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 984, col: 11, offset: 32716},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 985, col: 11, offset: 32744},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 986, col: 11, offset: 32776},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 987, col: 11, offset: 32808},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 993, col: 1, offset: 32875},
			expr: &choiceExpr{
				pos: position{line: 993, col: 33, offset: 32907},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 993, col: 33, offset: 32907},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 993, col: 39, offset: 32913},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 993, col: 39, offset: 32913},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 997, col: 1, offset: 33055},
			expr: &actionExpr{
				pos: position{line: 997, col: 25, offset: 33079},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 997, col: 25, offset: 33079},
					expr: &litMatcher{
						pos:        position{line: 997, col: 25, offset: 33079},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1001, col: 1, offset: 33128},
			expr: &actionExpr{
				pos: position{line: 1001, col: 25, offset: 33152},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1001, col: 25, offset: 33152},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1001, col: 25, offset: 33152},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1001, col: 30, offset: 33157},
							expr: &litMatcher{
								pos:        position{line: 1001, col: 30, offset: 33157},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1008, col: 1, offset: 33268},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 13, offset: 33280},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1008, col: 13, offset: 33280},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 35, offset: 33302},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1010, col: 1, offset: 33369},
			expr: &actionExpr{
				pos: position{line: 1010, col: 24, offset: 33392},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1010, col: 24, offset: 33392},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1010, col: 24, offset: 33392},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1010, col: 29, offset: 33397},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1010, col: 39, offset: 33407},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1010, col: 68, offset: 33436},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1014, col: 1, offset: 33535},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1014, col: 32, offset: 33566},
				expr: &ruleRefExpr{
					pos:  position{line: 1014, col: 32, offset: 33566},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1016, col: 1, offset: 33597},
			expr: &actionExpr{
				pos: position{line: 1016, col: 31, offset: 33627},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 31, offset: 33627},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1016, col: 31, offset: 33627},
							expr: &litMatcher{
								pos:        position{line: 1016, col: 33, offset: 33629},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1016, col: 39, offset: 33635},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1016, col: 48, offset: 33644},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1016, col: 48, offset: 33644},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1017, col: 7, offset: 33655},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1018, col: 7, offset: 33700},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1018, col: 7, offset: 33700},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1018, col: 15, offset: 33708},
												expr: &ruleRefExpr{
													pos:  position{line: 1018, col: 16, offset: 33709},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1019, col: 7, offset: 33723},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1020, col: 7, offset: 33751},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1021, col: 7, offset: 33774},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1022, col: 7, offset: 33792},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1023, col: 7, offset: 33811},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1024, col: 7, offset: 33849},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1025, col: 7, offset: 33874},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1029, col: 1, offset: 33949},
			expr: &actionExpr{
				pos: position{line: 1030, col: 5, offset: 33989},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1030, col: 5, offset: 33989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1030, col: 5, offset: 33989},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1030, col: 16, offset: 34000},
								expr: &ruleRefExpr{
									pos:  position{line: 1030, col: 17, offset: 34001},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1031, col: 5, offset: 34027},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1031, col: 11, offset: 34033},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1031, col: 11, offset: 34033},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1032, col: 11, offset: 34063},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1033, col: 11, offset: 34084},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1034, col: 11, offset: 34105},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1035, col: 11, offset: 34129},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1036, col: 11, offset: 34153},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1040, col: 1, offset: 34253},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 34297},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1041, col: 5, offset: 34297},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1042, col: 7, offset: 34394},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1042, col: 7, offset: 34394},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1042, col: 7, offset: 34394},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1042, col: 12, offset: 34399},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1046, col: 1, offset: 34570},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 5, offset: 34598},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1047, col: 5, offset: 34598},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1047, col: 5, offset: 34598},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1047, col: 6, offset: 34599},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1047, col: 6, offset: 34599},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1047, col: 10, offset: 34603},
											expr: &litMatcher{
												pos:        position{line: 1047, col: 11, offset: 34604},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1047, col: 16, offset: 34609},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1047, col: 26, offset: 34619},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1047, col: 55, offset: 34648},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1047, col: 59, offset: 34652},
									expr: &notExpr{
										pos: position{line: 1047, col: 61, offset: 34654},
										expr: &ruleRefExpr{
											pos:  position{line: 1047, col: 62, offset: 34655},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1049, col: 9, offset: 34861},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1049, col: 9, offset: 34861},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1049, col: 9, offset: 34861},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1049, col: 13, offset: 34865},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1049, col: 23, offset: 34875},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1049, col: 23, offset: 34875},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1049, col: 27, offset: 34879},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1049, col: 56, offset: 34908},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1053, col: 1, offset: 35126},
			expr: &seqExpr{
				pos: position{line: 1053, col: 32, offset: 35157},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1053, col: 32, offset: 35157},
						expr: &ruleRefExpr{
							pos:  position{line: 1053, col: 33, offset: 35158},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1053, col: 39, offset: 35164},
						expr: &ruleRefExpr{
							pos:  position{line: 1053, col: 39, offset: 35164},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1055, col: 1, offset: 35193},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 5, offset: 35228},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1056, col: 5, offset: 35228},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1057, col: 7, offset: 35239},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1057, col: 7, offset: 35239},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1057, col: 15, offset: 35247},
								expr: &ruleRefExpr{
									pos:  position{line: 1057, col: 16, offset: 35248},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 7, offset: 35262},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 7, offset: 35290},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 7, offset: 35313},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 7, offset: 35331},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1062, col: 7, offset: 35350},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1062, col: 7, offset: 35350},
								expr: &ruleRefExpr{
									pos:  position{line: 1062, col: 7, offset: 35350},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1062, col: 14, offset: 35357},
								expr: &seqExpr{
									pos: position{line: 1062, col: 15, offset: 35358},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1062, col: 15, offset: 35358},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1062, col: 19, offset: 35362},
											expr: &litMatcher{
												pos:        position{line: 1062, col: 20, offset: 35363},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 7, offset: 35375},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 7, offset: 35413},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 7, offset: 35438},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1067, col: 1, offset: 35476},
			expr: &actionExpr{
				pos: position{line: 1068, col: 5, offset: 35516},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1068, col: 5, offset: 35516},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1068, col: 5, offset: 35516},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1068, col: 16, offset: 35527},
								expr: &ruleRefExpr{
									pos:  position{line: 1068, col: 17, offset: 35528},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 5, offset: 35554},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1069, col: 11, offset: 35560},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1069, col: 11, offset: 35560},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1070, col: 11, offset: 35590},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1071, col: 11, offset: 35611},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1072, col: 11, offset: 35632},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1073, col: 11, offset: 35656},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1074, col: 11, offset: 35680},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1077, col: 1, offset: 35779},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 5, offset: 35823},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1078, col: 5, offset: 35823},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1079, col: 7, offset: 35920},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1079, col: 7, offset: 35920},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 7, offset: 35920},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1079, col: 11, offset: 35924},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1083, col: 1, offset: 36095},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 5, offset: 36119},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1084, col: 5, offset: 36119},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1084, col: 5, offset: 36119},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1084, col: 5, offset: 36119},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 18, offset: 36132},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1084, col: 40, offset: 36154},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1084, col: 45, offset: 36159},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 55, offset: 36169},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1084, col: 84, offset: 36198},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1086, col: 9, offset: 36355},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1086, col: 9, offset: 36355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1086, col: 9, offset: 36355},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 22, offset: 36368},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1086, col: 44, offset: 36390},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 49, offset: 36395},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 59, offset: 36405},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1086, col: 88, offset: 36434},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1089, col: 9, offset: 36634},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1089, col: 9, offset: 36634},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1089, col: 9, offset: 36634},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 22, offset: 36647},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1089, col: 44, offset: 36669},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1089, col: 48, offset: 36673},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 58, offset: 36683},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1089, col: 87, offset: 36712},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1096, col: 1, offset: 36933},
			expr: &choiceExpr{
				pos: position{line: 1096, col: 15, offset: 36947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1096, col: 15, offset: 36947},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 39, offset: 36971},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1098, col: 1, offset: 36994},
			expr: &actionExpr{
				pos: position{line: 1098, col: 26, offset: 37019},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 26, offset: 37019},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1098, col: 26, offset: 37019},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 31, offset: 37024},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 41, offset: 37034},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1098, col: 72, offset: 37065},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1102, col: 1, offset: 37211},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1102, col: 34, offset: 37244},
				expr: &ruleRefExpr{
					pos:  position{line: 1102, col: 34, offset: 37244},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1104, col: 1, offset: 37276},
			expr: &actionExpr{
				pos: position{line: 1105, col: 5, offset: 37313},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 5, offset: 37313},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1105, col: 5, offset: 37313},
							expr: &litMatcher{
								pos:        position{line: 1105, col: 7, offset: 37315},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1105, col: 13, offset: 37321},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1105, col: 22, offset: 37330},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1105, col: 22, offset: 37330},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1106, col: 7, offset: 37341},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1107, col: 7, offset: 37386},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1107, col: 7, offset: 37386},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1107, col: 15, offset: 37394},
												expr: &ruleRefExpr{
													pos:  position{line: 1107, col: 16, offset: 37395},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1108, col: 7, offset: 37409},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1109, col: 7, offset: 37437},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1110, col: 7, offset: 37460},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1111, col: 7, offset: 37478},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1112, col: 7, offset: 37497},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1113, col: 7, offset: 37537},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1114, col: 7, offset: 37562},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1118, col: 1, offset: 37639},
			expr: &actionExpr{
				pos: position{line: 1119, col: 5, offset: 37681},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 5, offset: 37681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1119, col: 5, offset: 37681},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1119, col: 16, offset: 37692},
								expr: &ruleRefExpr{
									pos:  position{line: 1119, col: 17, offset: 37693},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1120, col: 5, offset: 37719},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1120, col: 11, offset: 37725},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1120, col: 11, offset: 37725},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1121, col: 11, offset: 37757},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1122, col: 11, offset: 37776},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1123, col: 11, offset: 37797},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1124, col: 11, offset: 37821},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1125, col: 11, offset: 37845},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1129, col: 1, offset: 37945},
			expr: &choiceExpr{
				pos: position{line: 1130, col: 5, offset: 37991},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1130, col: 5, offset: 37991},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1131, col: 7, offset: 38090},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1131, col: 7, offset: 38090},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1131, col: 7, offset: 38090},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 12, offset: 38095},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1135, col: 1, offset: 38268},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 5, offset: 38298},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1136, col: 5, offset: 38298},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1136, col: 5, offset: 38298},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1136, col: 6, offset: 38299},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1136, col: 6, offset: 38299},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1136, col: 10, offset: 38303},
											expr: &litMatcher{
												pos:        position{line: 1136, col: 11, offset: 38304},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 16, offset: 38309},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 26, offset: 38319},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 57, offset: 38350},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 9, offset: 38552},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1138, col: 9, offset: 38552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1138, col: 9, offset: 38552},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 13, offset: 38556},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1138, col: 23, offset: 38566},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1138, col: 23, offset: 38566},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1138, col: 27, offset: 38570},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1138, col: 58, offset: 38601},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1142, col: 1, offset: 38823},
			expr: &actionExpr{
				pos: position{line: 1142, col: 34, offset: 38856},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 34, offset: 38856},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1142, col: 34, offset: 38856},
							expr: &ruleRefExpr{
								pos:  position{line: 1142, col: 35, offset: 38857},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1142, col: 41, offset: 38863},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1142, col: 51, offset: 38873},
								expr: &ruleRefExpr{
									pos:  position{line: 1142, col: 51, offset: 38873},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1146, col: 1, offset: 38934},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 5, offset: 38971},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1147, col: 5, offset: 38971},
						name: "ItalicWord",
					},
					&seqExpr{
						pos: position{line: 1148, col: 7, offset: 38988},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1148, col: 7, offset: 38988},
								expr: &ruleRefExpr{
									pos:  position{line: 1148, col: 7, offset: 38988},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1148, col: 14, offset: 38995},
								expr: &seqExpr{
									pos: position{line: 1148, col: 15, offset: 38996},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1148, col: 15, offset: 38996},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1148, col: 19, offset: 39000},
											expr: &litMatcher{
												pos:        position{line: 1148, col: 20, offset: 39001},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1149, col: 7, offset: 39013},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1149, col: 7, offset: 39013},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1149, col: 15, offset: 39021},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 16, offset: 39022},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 7, offset: 39036},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 7, offset: 39064},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 7, offset: 39087},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 7, offset: 39105},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 7, offset: 39124},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 7, offset: 39164},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 7, offset: 39189},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "ItalicWord",
			pos:  position{line: 1159, col: 1, offset: 39284},
			expr: &actionExpr{
				pos: position{line: 1159, col: 15, offset: 39298},
				run: (*parser).callonItalicWord1,
				expr: &seqExpr{
					pos: position{line: 1159, col: 15, offset: 39298},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1159, col: 15, offset: 39298},
							expr: &charClassMatcher{
								pos:        position{line: 1159, col: 15, offset: 39298},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1159, col: 25, offset: 39308},
							expr: &choiceExpr{
								pos: position{line: 1159, col: 27, offset: 39310},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1159, col: 27, offset: 39310},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&litMatcher{
										pos:        position{line: 1159, col: 33, offset: 39316},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1163, col: 1, offset: 39376},
			expr: &actionExpr{
				pos: position{line: 1164, col: 5, offset: 39417},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 5, offset: 39417},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1164, col: 5, offset: 39417},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1164, col: 16, offset: 39428},
								expr: &ruleRefExpr{
									pos:  position{line: 1164, col: 17, offset: 39429},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 5, offset: 39455},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1165, col: 11, offset: 39461},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1165, col: 11, offset: 39461},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1166, col: 11, offset: 39480},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1167, col: 11, offset: 39512},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1168, col: 11, offset: 39533},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 39557},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1170, col: 11, offset: 39581},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1174, col: 1, offset: 39681},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 39727},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1175, col: 5, offset: 39727},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1176, col: 7, offset: 39826},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1176, col: 7, offset: 39826},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1176, col: 7, offset: 39826},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1176, col: 11, offset: 39830},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1180, col: 1, offset: 40004},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 40030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1181, col: 5, offset: 40030},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1181, col: 5, offset: 40030},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1181, col: 5, offset: 40030},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 18, offset: 40043},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1181, col: 40, offset: 40065},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 45, offset: 40070},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 55, offset: 40080},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1181, col: 86, offset: 40111},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1183, col: 9, offset: 40268},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1183, col: 9, offset: 40268},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1183, col: 9, offset: 40268},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1183, col: 22, offset: 40281},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1183, col: 44, offset: 40303},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1183, col: 49, offset: 40308},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1183, col: 59, offset: 40318},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1183, col: 90, offset: 40349},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1186, col: 9, offset: 40549},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1186, col: 9, offset: 40549},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1186, col: 9, offset: 40549},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 22, offset: 40562},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1186, col: 44, offset: 40584},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1186, col: 48, offset: 40588},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 58, offset: 40598},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1186, col: 89, offset: 40629},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1193, col: 1, offset: 40856},
			expr: &choiceExpr{
				pos: position{line: 1193, col: 18, offset: 40873},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1193, col: 18, offset: 40873},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 45, offset: 40900},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1195, col: 1, offset: 40926},
			expr: &actionExpr{
				pos: position{line: 1195, col: 29, offset: 40954},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 29, offset: 40954},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1195, col: 29, offset: 40954},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 34, offset: 40959},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 44, offset: 40969},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1195, col: 78, offset: 41003},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1199, col: 1, offset: 41152},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1199, col: 37, offset: 41188},
				expr: &ruleRefExpr{
					pos:  position{line: 1199, col: 37, offset: 41188},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1201, col: 1, offset: 41255},
			expr: &actionExpr{
				pos: position{line: 1202, col: 5, offset: 41295},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1202, col: 5, offset: 41295},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1202, col: 5, offset: 41295},
							expr: &litMatcher{
								pos:        position{line: 1202, col: 7, offset: 41297},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 13, offset: 41303},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1202, col: 22, offset: 41312},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1202, col: 22, offset: 41312},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 7, offset: 41323},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1204, col: 7, offset: 41368},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1204, col: 7, offset: 41368},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1204, col: 15, offset: 41376},
												expr: &ruleRefExpr{
													pos:  position{line: 1204, col: 16, offset: 41377},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1205, col: 7, offset: 41391},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1206, col: 7, offset: 41419},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1207, col: 7, offset: 41442},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 7, offset: 41460},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 7, offset: 41479},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1210, col: 7, offset: 41542},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1211, col: 7, offset: 41585},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1212, col: 7, offset: 41610},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1216, col: 1, offset: 41690},
			expr: &actionExpr{
				pos: position{line: 1217, col: 5, offset: 41734},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1217, col: 5, offset: 41734},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1217, col: 5, offset: 41734},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1217, col: 16, offset: 41745},
								expr: &ruleRefExpr{
									pos:  position{line: 1217, col: 17, offset: 41746},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 5, offset: 41772},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1218, col: 11, offset: 41778},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1218, col: 11, offset: 41778},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1219, col: 11, offset: 41813},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1220, col: 11, offset: 41832},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1221, col: 11, offset: 41853},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1222, col: 11, offset: 41874},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1223, col: 11, offset: 41898},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1227, col: 1, offset: 41999},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 5, offset: 42048},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1228, col: 5, offset: 42048},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1229, col: 7, offset: 42150},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1229, col: 7, offset: 42150},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1229, col: 7, offset: 42150},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1229, col: 12, offset: 42155},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1233, col: 1, offset: 42333},
			expr: &choiceExpr{
				pos: position{line: 1234, col: 5, offset: 42366},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1234, col: 5, offset: 42366},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1234, col: 5, offset: 42366},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1234, col: 6, offset: 42367},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1234, col: 6, offset: 42367},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1234, col: 10, offset: 42371},
											expr: &litMatcher{
												pos:        position{line: 1234, col: 11, offset: 42372},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1234, col: 16, offset: 42377},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 26, offset: 42387},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 60, offset: 42421},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1236, col: 9, offset: 42626},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1236, col: 9, offset: 42626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1236, col: 9, offset: 42626},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1236, col: 13, offset: 42630},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1236, col: 23, offset: 42640},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1236, col: 23, offset: 42640},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1236, col: 27, offset: 42644},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1236, col: 61, offset: 42678},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1240, col: 1, offset: 42904},
			expr: &seqExpr{
				pos: position{line: 1240, col: 37, offset: 42940},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1240, col: 37, offset: 42940},
						expr: &ruleRefExpr{
							pos:  position{line: 1240, col: 38, offset: 42941},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1240, col: 44, offset: 42947},
						expr: &ruleRefExpr{
							pos:  position{line: 1240, col: 44, offset: 42947},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1242, col: 1, offset: 42981},
			expr: &choiceExpr{
				pos: position{line: 1243, col: 5, offset: 43022},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1243, col: 5, offset: 43022},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1244, col: 7, offset: 43033},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1244, col: 7, offset: 43033},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1244, col: 15, offset: 43041},
								expr: &ruleRefExpr{
									pos:  position{line: 1244, col: 16, offset: 43042},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 7, offset: 43056},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 7, offset: 43084},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 7, offset: 43107},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 7, offset: 43125},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1249, col: 7, offset: 43144},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1249, col: 7, offset: 43144},
								expr: &ruleRefExpr{
									pos:  position{line: 1249, col: 7, offset: 43144},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1249, col: 14, offset: 43151},
								expr: &seqExpr{
									pos: position{line: 1249, col: 15, offset: 43152},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1249, col: 15, offset: 43152},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1249, col: 19, offset: 43156},
											expr: &litMatcher{
												pos:        position{line: 1249, col: 20, offset: 43157},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 7, offset: 43281},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 7, offset: 43324},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 7, offset: 43344},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 7, offset: 43369},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1255, col: 1, offset: 43412},
			expr: &actionExpr{
				pos: position{line: 1256, col: 5, offset: 43456},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 5, offset: 43456},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1256, col: 5, offset: 43456},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1256, col: 16, offset: 43467},
								expr: &ruleRefExpr{
									pos:  position{line: 1256, col: 17, offset: 43468},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1257, col: 5, offset: 43494},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1257, col: 11, offset: 43500},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1257, col: 11, offset: 43500},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1258, col: 11, offset: 43535},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1259, col: 11, offset: 43554},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 11, offset: 43575},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1261, col: 11, offset: 43596},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1262, col: 11, offset: 43620},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1266, col: 1, offset: 43721},
			expr: &actionExpr{
				pos: position{line: 1267, col: 5, offset: 43770},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1267, col: 6, offset: 43771},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1267, col: 6, offset: 43771},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1268, col: 7, offset: 43875},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1268, col: 7, offset: 43875},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1268, col: 11, offset: 43879},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1272, col: 1, offset: 44057},
			expr: &choiceExpr{
				pos: position{line: 1273, col: 5, offset: 44086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1273, col: 5, offset: 44086},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1273, col: 5, offset: 44086},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1273, col: 5, offset: 44086},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 18, offset: 44099},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 40, offset: 44121},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1273, col: 45, offset: 44126},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 55, offset: 44136},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 89, offset: 44170},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1275, col: 9, offset: 44327},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1275, col: 9, offset: 44327},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1275, col: 9, offset: 44327},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1275, col: 22, offset: 44340},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1275, col: 44, offset: 44362},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1275, col: 49, offset: 44367},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1275, col: 59, offset: 44377},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1275, col: 93, offset: 44411},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1278, col: 9, offset: 44611},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1278, col: 9, offset: 44611},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1278, col: 9, offset: 44611},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1278, col: 22, offset: 44624},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1278, col: 44, offset: 44646},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 48, offset: 44650},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1278, col: 58, offset: 44660},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1278, col: 92, offset: 44694},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1285, col: 1, offset: 44915},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 15, offset: 44929},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1285, col: 15, offset: 44929},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1285, col: 39, offset: 44953},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1287, col: 1, offset: 44976},
			expr: &actionExpr{
				pos: position{line: 1287, col: 26, offset: 45001},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1287, col: 26, offset: 45001},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1287, col: 26, offset: 45001},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 31, offset: 45006},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 41, offset: 45016},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1287, col: 72, offset: 45047},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1291, col: 1, offset: 45193},
			expr: &seqExpr{
				pos: position{line: 1291, col: 34, offset: 45226},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1291, col: 34, offset: 45226},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1291, col: 63, offset: 45255},
						expr: &seqExpr{
							pos: position{line: 1291, col: 64, offset: 45256},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1291, col: 64, offset: 45256},
									expr: &litMatcher{
										pos:        position{line: 1291, col: 66, offset: 45258},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1291, col: 73, offset: 45265},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1291, col: 73, offset: 45265},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1291, col: 81, offset: 45273},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1293, col: 1, offset: 45340},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 33, offset: 45372},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1293, col: 33, offset: 45372},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1294, col: 7, offset: 45383},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1294, col: 7, offset: 45383},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1294, col: 15, offset: 45391},
								expr: &ruleRefExpr{
									pos:  position{line: 1294, col: 16, offset: 45392},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 7, offset: 45406},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 7, offset: 45434},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 7, offset: 45457},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 7, offset: 45475},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 7, offset: 45494},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 7, offset: 45525},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 7, offset: 45550},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1303, col: 1, offset: 45590},
			expr: &actionExpr{
				pos: position{line: 1304, col: 5, offset: 45622},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 5, offset: 45622},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1304, col: 5, offset: 45622},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1304, col: 16, offset: 45633},
								expr: &ruleRefExpr{
									pos:  position{line: 1304, col: 17, offset: 45634},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1305, col: 5, offset: 45660},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1305, col: 11, offset: 45666},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1305, col: 11, offset: 45666},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1306, col: 11, offset: 45685},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1307, col: 11, offset: 45706},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1308, col: 11, offset: 45730},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 11, offset: 45762},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1310, col: 11, offset: 45786},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1314, col: 1, offset: 45887},
			expr: &choiceExpr{
				pos: position{line: 1315, col: 5, offset: 45933},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1315, col: 5, offset: 45933},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1316, col: 7, offset: 46032},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1316, col: 7, offset: 46032},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1316, col: 7, offset: 46032},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1316, col: 12, offset: 46037},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1320, col: 1, offset: 46210},
			expr: &choiceExpr{
				pos: position{line: 1320, col: 26, offset: 46235},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1320, col: 26, offset: 46235},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1320, col: 26, offset: 46235},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1320, col: 27, offset: 46236},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1320, col: 27, offset: 46236},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1320, col: 31, offset: 46240},
											expr: &litMatcher{
												pos:        position{line: 1320, col: 32, offset: 46241},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 37, offset: 46246},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1320, col: 47, offset: 46256},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 78, offset: 46287},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1322, col: 9, offset: 46489},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1322, col: 9, offset: 46489},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1322, col: 9, offset: 46489},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1322, col: 13, offset: 46493},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1322, col: 23, offset: 46503},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1322, col: 23, offset: 46503},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1322, col: 27, offset: 46507},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1322, col: 58, offset: 46538},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1326, col: 1, offset: 46759},
			expr: &seqExpr{
				pos: position{line: 1326, col: 34, offset: 46792},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1326, col: 34, offset: 46792},
						expr: &ruleRefExpr{
							pos:  position{line: 1326, col: 35, offset: 46793},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1326, col: 41, offset: 46799},
						expr: &ruleRefExpr{
							pos:  position{line: 1326, col: 41, offset: 46799},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1328, col: 1, offset: 46830},
			expr: &choiceExpr{
				pos: position{line: 1328, col: 33, offset: 46862},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1328, col: 33, offset: 46862},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1329, col: 7, offset: 46873},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1329, col: 7, offset: 46873},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1329, col: 15, offset: 46881},
								expr: &ruleRefExpr{
									pos:  position{line: 1329, col: 16, offset: 46882},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 7, offset: 46896},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 7, offset: 46924},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 7, offset: 46947},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 7, offset: 46965},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1334, col: 7, offset: 46984},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1334, col: 7, offset: 46984},
								expr: &ruleRefExpr{
									pos:  position{line: 1334, col: 7, offset: 46984},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1334, col: 14, offset: 46991},
								expr: &seqExpr{
									pos: position{line: 1334, col: 15, offset: 46992},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1334, col: 15, offset: 46992},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1334, col: 19, offset: 46996},
											expr: &litMatcher{
												pos:        position{line: 1334, col: 20, offset: 46997},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 7, offset: 47009},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 7, offset: 47040},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 7, offset: 47065},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1339, col: 1, offset: 47105},
			expr: &actionExpr{
				pos: position{line: 1340, col: 5, offset: 47137},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1340, col: 5, offset: 47137},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1340, col: 5, offset: 47137},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1340, col: 16, offset: 47148},
								expr: &ruleRefExpr{
									pos:  position{line: 1340, col: 17, offset: 47149},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 5, offset: 47175},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1341, col: 11, offset: 47181},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1341, col: 11, offset: 47181},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1342, col: 11, offset: 47213},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1343, col: 11, offset: 47232},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1344, col: 11, offset: 47253},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 11, offset: 47277},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1346, col: 11, offset: 47301},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1349, col: 1, offset: 47401},
			expr: &choiceExpr{
				pos: position{line: 1350, col: 5, offset: 47447},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1350, col: 5, offset: 47447},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1351, col: 7, offset: 47544},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1351, col: 7, offset: 47544},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1351, col: 7, offset: 47544},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1351, col: 11, offset: 47548},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1355, col: 1, offset: 47719},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 5, offset: 47744},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1356, col: 5, offset: 47744},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1356, col: 5, offset: 47744},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1356, col: 5, offset: 47744},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1356, col: 18, offset: 47757},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1356, col: 40, offset: 47779},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 45, offset: 47784},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1356, col: 55, offset: 47794},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1356, col: 86, offset: 47825},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1358, col: 9, offset: 47982},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1358, col: 9, offset: 47982},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1358, col: 9, offset: 47982},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1358, col: 22, offset: 47995},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1358, col: 44, offset: 48017},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1358, col: 49, offset: 48022},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1358, col: 59, offset: 48032},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1358, col: 90, offset: 48063},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1361, col: 9, offset: 48263},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1361, col: 9, offset: 48263},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1361, col: 9, offset: 48263},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1361, col: 22, offset: 48276},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1361, col: 44, offset: 48298},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1361, col: 48, offset: 48302},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1361, col: 58, offset: 48312},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1361, col: 89, offset: 48343},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1368, col: 1, offset: 48571},
			expr: &actionExpr{
				pos: position{line: 1368, col: 18, offset: 48588},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1368, col: 18, offset: 48588},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1368, col: 18, offset: 48588},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1368, col: 22, offset: 48592},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1368, col: 31, offset: 48601},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1368, col: 53, offset: 48623},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1372, col: 1, offset: 48731},
			expr: &choiceExpr{
				pos: position{line: 1372, col: 25, offset: 48755},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1372, col: 25, offset: 48755},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 38, offset: 48768},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1374, col: 1, offset: 48787},
			expr: &actionExpr{
				pos: position{line: 1374, col: 21, offset: 48807},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1374, col: 21, offset: 48807},
					expr: &charClassMatcher{
						pos:        position{line: 1374, col: 21, offset: 48807},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1378, col: 1, offset: 48892},
			expr: &actionExpr{
				pos: position{line: 1378, col: 25, offset: 48916},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1378, col: 25, offset: 48916},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1378, col: 25, offset: 48916},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 38, offset: 48929},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1378, col: 60, offset: 48951},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 64, offset: 48955},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 73, offset: 48964},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1378, col: 95, offset: 48986},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1385, col: 1, offset: 49204},
			expr: &actionExpr{
				pos: position{line: 1385, col: 20, offset: 49223},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1385, col: 20, offset: 49223},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1385, col: 20, offset: 49223},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1385, col: 24, offset: 49227},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1385, col: 33, offset: 49236},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1385, col: 57, offset: 49260},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1389, col: 1, offset: 49370},
			expr: &choiceExpr{
				pos: position{line: 1389, col: 27, offset: 49396},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1389, col: 27, offset: 49396},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 40, offset: 49409},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1391, col: 1, offset: 49430},
			expr: &actionExpr{
				pos: position{line: 1391, col: 23, offset: 49452},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1391, col: 23, offset: 49452},
					expr: &charClassMatcher{
						pos:        position{line: 1391, col: 23, offset: 49452},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1395, col: 1, offset: 49537},
			expr: &actionExpr{
				pos: position{line: 1395, col: 27, offset: 49563},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1395, col: 27, offset: 49563},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1395, col: 27, offset: 49563},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1395, col: 40, offset: 49576},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1395, col: 62, offset: 49598},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1395, col: 66, offset: 49602},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1395, col: 75, offset: 49611},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1395, col: 99, offset: 49635},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1403, col: 1, offset: 49947},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 17, offset: 49963},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1403, col: 17, offset: 49963},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 38, offset: 49984},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1405, col: 1, offset: 50004},
			expr: &actionExpr{
				pos: position{line: 1405, col: 23, offset: 50026},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1405, col: 23, offset: 50026},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1405, col: 23, offset: 50026},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1405, col: 46, offset: 50049},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1405, col: 55, offset: 50058},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1405, col: 82, offset: 50085},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1409, col: 1, offset: 50197},
			expr: &actionExpr{
				pos: position{line: 1409, col: 31, offset: 50227},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1409, col: 31, offset: 50227},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1409, col: 41, offset: 50237},
						expr: &ruleRefExpr{
							pos:  position{line: 1409, col: 41, offset: 50237},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1413, col: 1, offset: 50323},
			expr: &seqExpr{
				pos: position{line: 1413, col: 27, offset: 50349},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1413, col: 27, offset: 50349},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1413, col: 32, offset: 50354},
						expr: &charClassMatcher{
							pos:        position{line: 1413, col: 33, offset: 50355},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1415, col: 1, offset: 50366},
			expr: &litMatcher{
				pos:        position{line: 1415, col: 25, offset: 50390},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1418, col: 1, offset: 50478},
			expr: &actionExpr{
				pos: position{line: 1419, col: 5, offset: 50512},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1419, col: 5, offset: 50512},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1420, col: 9, offset: 50530},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1420, col: 9, offset: 50530},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1420, col: 9, offset: 50530},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1420, col: 19, offset: 50540},
										expr: &ruleRefExpr{
											pos:  position{line: 1420, col: 20, offset: 50541},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1421, col: 11, offset: 50597},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1421, col: 11, offset: 50597},
										expr: &ruleRefExpr{
											pos:  position{line: 1421, col: 11, offset: 50597},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1421, col: 18, offset: 50604},
										expr: &ruleRefExpr{
											pos:  position{line: 1421, col: 19, offset: 50605},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1422, col: 12, offset: 50637},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1422, col: 12, offset: 50637},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1422, col: 12, offset: 50637},
											expr: &litMatcher{
												pos:        position{line: 1422, col: 13, offset: 50638},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1422, col: 17, offset: 50642},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1422, col: 26, offset: 50651},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1423, col: 11, offset: 50723},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1424, col: 11, offset: 50764},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1425, col: 11, offset: 50793},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1430, col: 1, offset: 50872},
			expr: &actionExpr{
				pos: position{line: 1431, col: 5, offset: 50910},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1431, col: 5, offset: 50910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1431, col: 5, offset: 50910},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1431, col: 16, offset: 50921},
								expr: &ruleRefExpr{
									pos:  position{line: 1431, col: 17, offset: 50922},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1432, col: 5, offset: 50948},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1432, col: 11, offset: 50954},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1432, col: 11, offset: 50954},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1433, col: 11, offset: 50973},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1434, col: 12, offset: 50995},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1434, col: 12, offset: 50995},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1434, col: 12, offset: 50995},
													expr: &litMatcher{
														pos:        position{line: 1434, col: 13, offset: 50996},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1434, col: 18, offset: 51001},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1434, col: 27, offset: 51010},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1435, col: 11, offset: 51059},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1436, col: 11, offset: 51083},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1437, col: 11, offset: 51109},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1441, col: 1, offset: 51205},
			expr: &choiceExpr{
				pos: position{line: 1441, col: 41, offset: 51245},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1441, col: 41, offset: 51245},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1441, col: 55, offset: 51259},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1441, col: 55, offset: 51259},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1441, col: 55, offset: 51259},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1441, col: 59, offset: 51263},
									expr: &litMatcher{
										pos:        position{line: 1441, col: 60, offset: 51264},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1445, col: 1, offset: 51336},
			expr: &actionExpr{
				pos: position{line: 1445, col: 23, offset: 51358},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1445, col: 23, offset: 51358},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1445, col: 23, offset: 51358},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1445, col: 46, offset: 51381},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 55, offset: 51390},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1445, col: 82, offset: 51417},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1449, col: 1, offset: 51529},
			expr: &actionExpr{
				pos: position{line: 1449, col: 31, offset: 51559},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1449, col: 31, offset: 51559},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1449, col: 41, offset: 51569},
						expr: &ruleRefExpr{
							pos:  position{line: 1449, col: 41, offset: 51569},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1454, col: 1, offset: 51737},
			expr: &actionExpr{
				pos: position{line: 1454, col: 30, offset: 51766},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1454, col: 30, offset: 51766},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1455, col: 5, offset: 51780},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1455, col: 5, offset: 51780},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1455, col: 5, offset: 51780},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1455, col: 15, offset: 51790},
										expr: &ruleRefExpr{
											pos:  position{line: 1455, col: 16, offset: 51791},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1456, col: 7, offset: 51843},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1456, col: 7, offset: 51843},
										expr: &ruleRefExpr{
											pos:  position{line: 1456, col: 7, offset: 51843},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1456, col: 14, offset: 51850},
										expr: &ruleRefExpr{
											pos:  position{line: 1456, col: 15, offset: 51851},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1457, col: 7, offset: 51878},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1458, col: 7, offset: 51915},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1459, col: 7, offset: 51940},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1463, col: 1, offset: 52014},
			expr: &actionExpr{
				pos: position{line: 1464, col: 5, offset: 52052},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1464, col: 5, offset: 52052},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1464, col: 5, offset: 52052},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1464, col: 16, offset: 52063},
								expr: &ruleRefExpr{
									pos:  position{line: 1464, col: 17, offset: 52064},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1465, col: 5, offset: 52090},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1465, col: 11, offset: 52096},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1465, col: 11, offset: 52096},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1466, col: 11, offset: 52115},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1467, col: 12, offset: 52137},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1467, col: 12, offset: 52137},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1467, col: 12, offset: 52137},
													expr: &litMatcher{
														pos:        position{line: 1467, col: 13, offset: 52138},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1467, col: 19, offset: 52144},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1467, col: 28, offset: 52153},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1468, col: 11, offset: 52202},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1469, col: 11, offset: 52226},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1470, col: 11, offset: 52252},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1474, col: 1, offset: 52348},
			expr: &seqExpr{
				pos: position{line: 1474, col: 27, offset: 52374},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1474, col: 27, offset: 52374},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1474, col: 33, offset: 52380},
						expr: &charClassMatcher{
							pos:        position{line: 1474, col: 34, offset: 52381},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1476, col: 1, offset: 52392},
			expr: &litMatcher{
				pos:        position{line: 1476, col: 25, offset: 52416},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1478, col: 1, offset: 52423},
			expr: &actionExpr{
				pos: position{line: 1478, col: 41, offset: 52463},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1478, col: 42, offset: 52464},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1478, col: 42, offset: 52464},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1478, col: 56, offset: 52478},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1478, col: 56, offset: 52478},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1478, col: 60, offset: 52482},
									expr: &litMatcher{
										pos:        position{line: 1478, col: 61, offset: 52483},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1487, col: 1, offset: 52749},
			expr: &actionExpr{
				pos: position{line: 1488, col: 5, offset: 52765},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1488, col: 5, offset: 52765},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1488, col: 5, offset: 52765},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1488, col: 12, offset: 52772},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1488, col: 12, offset: 52772},
									expr: &litMatcher{
										pos:        position{line: 1488, col: 13, offset: 52773},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1492, col: 5, offset: 52881},
							run: (*parser).callonSection7,
						},
						&stateCodeExpr{
							pos: position{line: 1496, col: 5, offset: 53033},
							run: (*parser).callonSection8,
						},
						&oneOrMoreExpr{
							pos: position{line: 1500, col: 5, offset: 53162},
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 5, offset: 53162},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 12, offset: 53169},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 19, offset: 53176},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 41, offset: 53198},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1500, col: 45, offset: 53202},
								expr: &ruleRefExpr{
									pos:  position{line: 1500, col: 45, offset: 53202},
									name: "InlineElementID",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElements",
			pos:  position{line: 1505, col: 1, offset: 53360},
			expr: &actionExpr{
				pos: position{line: 1505, col: 25, offset: 53384},
				run: (*parser).callonSectionTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 1505, col: 25, offset: 53384},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1505, col: 34, offset: 53393},
						expr: &seqExpr{
							pos: position{line: 1505, col: 35, offset: 53394},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1505, col: 35, offset: 53394},
									expr: &ruleRefExpr{
										pos:  position{line: 1505, col: 36, offset: 53395},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1505, col: 44, offset: 53403},
									expr: &ruleRefExpr{
										pos:  position{line: 1505, col: 45, offset: 53404},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1505, col: 61, offset: 53420},
									name: "SectionTitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElement",
			pos:  position{line: 1509, col: 1, offset: 53556},
			expr: &ruleRefExpr{
				pos:  position{line: 1509, col: 24, offset: 53579},
				name: "NormalGroup",
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1535, col: 1, offset: 54565},
			expr: &actionExpr{
				pos: position{line: 1535, col: 16, offset: 54580},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 16, offset: 54580},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1535, col: 16, offset: 54580},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1535, col: 25, offset: 54589},
								expr: &ruleRefExpr{
									pos:  position{line: 1535, col: 26, offset: 54590},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1535, col: 47, offset: 54611},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1539, col: 1, offset: 54667},
			expr: &actionExpr{
				pos: position{line: 1539, col: 23, offset: 54689},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1539, col: 23, offset: 54689},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1539, col: 23, offset: 54689},
							expr: &ruleRefExpr{
								pos:  position{line: 1539, col: 24, offset: 54690},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 5, offset: 54698},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1541, col: 9, offset: 54716},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1541, col: 9, offset: 54716},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1542, col: 11, offset: 54737},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1543, col: 11, offset: 54753},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 1544, col: 11, offset: 54771},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1545, col: 11, offset: 54799},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1546, col: 11, offset: 54826},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1547, col: 11, offset: 54842},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1548, col: 11, offset: 54874},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1549, col: 11, offset: 54896},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1550, col: 11, offset: 54918},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1551, col: 11, offset: 54944},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1552, col: 11, offset: 55061},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1557, col: 1, offset: 55159},
			expr: &actionExpr{
				pos: position{line: 1557, col: 16, offset: 55174},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 16, offset: 55174},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1557, col: 16, offset: 55174},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1557, col: 25, offset: 55183},
								expr: &choiceExpr{
									pos: position{line: 1558, col: 5, offset: 55189},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1558, col: 5, offset: 55189},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1559, col: 7, offset: 55206},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1560, col: 7, offset: 55230},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1561, col: 7, offset: 55253},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1562, col: 7, offset: 55265},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1563, col: 7, offset: 55293},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1564, col: 7, offset: 55406},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1565, col: 7, offset: 55424},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1565, col: 17, offset: 55434},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1570, col: 1, offset: 55557},
			expr: &actionExpr{
				pos: position{line: 1570, col: 20, offset: 55576},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1570, col: 20, offset: 55576},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1570, col: 20, offset: 55576},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1570, col: 29, offset: 55585},
								expr: &choiceExpr{
									pos: position{line: 1571, col: 5, offset: 55591},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1571, col: 5, offset: 55591},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1572, col: 7, offset: 55608},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1573, col: 7, offset: 55632},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1574, col: 7, offset: 55660},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1575, col: 7, offset: 55773},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1576, col: 7, offset: 55787},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1576, col: 17, offset: 55797},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1581, col: 1, offset: 55893},
			expr: &actionExpr{
				pos: position{line: 1581, col: 16, offset: 55908},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1581, col: 16, offset: 55908},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1581, col: 16, offset: 55908},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1581, col: 25, offset: 55917},
								expr: &choiceExpr{
									pos: position{line: 1582, col: 5, offset: 55923},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1582, col: 5, offset: 55923},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1583, col: 7, offset: 55940},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1584, col: 7, offset: 55958},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1585, col: 7, offset: 56071},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1586, col: 7, offset: 56085},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1586, col: 17, offset: 56095},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1591, col: 1, offset: 56191},
			expr: &actionExpr{
				pos: position{line: 1591, col: 16, offset: 56206},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1591, col: 16, offset: 56206},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1591, col: 16, offset: 56206},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1591, col: 25, offset: 56215},
								expr: &choiceExpr{
									pos: position{line: 1592, col: 5, offset: 56221},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1592, col: 5, offset: 56221},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1593, col: 7, offset: 56238},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1594, col: 7, offset: 56250},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1595, col: 7, offset: 56363},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1596, col: 7, offset: 56377},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1596, col: 17, offset: 56387},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1601, col: 1, offset: 56474},
			expr: &actionExpr{
				pos: position{line: 1601, col: 14, offset: 56487},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 14, offset: 56487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1601, col: 14, offset: 56487},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1601, col: 22, offset: 56495},
								expr: &anyMatcher{
									line: 1601, col: 23, offset: 56496,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1601, col: 27, offset: 56500},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1607, col: 1, offset: 56651},
			expr: &actionExpr{
				pos: position{line: 1607, col: 22, offset: 56672},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1607, col: 22, offset: 56672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1607, col: 22, offset: 56672},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1607, col: 31, offset: 56681},
								expr: &choiceExpr{
									pos: position{line: 1608, col: 5, offset: 56687},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1608, col: 5, offset: 56687},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1609, col: 7, offset: 56704},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1610, col: 7, offset: 56722},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1611, col: 7, offset: 56835},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1612, col: 7, offset: 56849},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1612, col: 17, offset: 56859},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1617, col: 1, offset: 56986},
			expr: &actionExpr{
				pos: position{line: 1617, col: 27, offset: 57012},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1617, col: 27, offset: 57012},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1617, col: 27, offset: 57012},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1617, col: 36, offset: 57021},
								expr: &choiceExpr{
									pos: position{line: 1618, col: 5, offset: 57027},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1618, col: 5, offset: 57027},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1619, col: 7, offset: 57044},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1620, col: 7, offset: 57067},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1621, col: 7, offset: 57180},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1622, col: 7, offset: 57194},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1622, col: 17, offset: 57204},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1626, col: 1, offset: 57260},
			expr: &actionExpr{
				pos: position{line: 1628, col: 5, offset: 57342},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1628, col: 5, offset: 57342},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1628, col: 5, offset: 57342},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 5, offset: 57402},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1632, col: 9, offset: 57420},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1632, col: 9, offset: 57420},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1633, col: 11, offset: 57441},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1634, col: 11, offset: 57464},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1635, col: 11, offset: 57480},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1636, col: 11, offset: 57509},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1637, col: 11, offset: 57535},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1638, col: 11, offset: 57561},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1639, col: 11, offset: 57588},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1640, col: 11, offset: 57614},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1641, col: 11, offset: 57643},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1645, col: 1, offset: 57699},
			expr: &actionExpr{
				pos: position{line: 1647, col: 5, offset: 57787},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 5, offset: 57787},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1647, col: 5, offset: 57787},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1650, col: 5, offset: 57859},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1651, col: 9, offset: 57877},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1651, col: 9, offset: 57877},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1651, col: 33, offset: 57901},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1651, col: 57, offset: 57925},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1656, col: 1, offset: 57985},
			expr: &actionExpr{
				pos: position{line: 1658, col: 5, offset: 58071},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1658, col: 5, offset: 58071},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1658, col: 5, offset: 58071},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1661, col: 5, offset: 58141},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 9, offset: 58159},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1667, col: 1, offset: 58212},
			expr: &actionExpr{
				pos: position{line: 1669, col: 5, offset: 58288},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1669, col: 5, offset: 58288},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1669, col: 5, offset: 58288},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1672, col: 5, offset: 58348},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1673, col: 9, offset: 58366},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1673, col: 9, offset: 58366},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1674, col: 11, offset: 58388},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1678, col: 1, offset: 58447},
			expr: &actionExpr{
				pos: position{line: 1680, col: 5, offset: 58529},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1680, col: 5, offset: 58529},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1680, col: 5, offset: 58529},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1683, col: 5, offset: 58595},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1684, col: 9, offset: 58613},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1689, col: 1, offset: 58663},
			expr: &actionExpr{
				pos: position{line: 1691, col: 5, offset: 58750},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1691, col: 5, offset: 58750},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1691, col: 5, offset: 58750},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1694, col: 5, offset: 58821},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1696, col: 9, offset: 58919},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1696, col: 9, offset: 58919},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1696, col: 9, offset: 58919},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1699, col: 11, offset: 59023},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1699, col: 12, offset: 59024},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1699, col: 12, offset: 59024},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1699, col: 18, offset: 59030},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1699, col: 24, offset: 59036},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1709, col: 1, offset: 59265},
			expr: &choiceExpr{
				pos: position{line: 1709, col: 11, offset: 59275},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1709, col: 11, offset: 59275},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1709, col: 24, offset: 59288},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1709, col: 36, offset: 59300},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1709, col: 48, offset: 59312},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1709, col: 61, offset: 59325},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1709, col: 72, offset: 59336},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1711, col: 1, offset: 59355},
			expr: &actionExpr{
				pos: position{line: 1711, col: 15, offset: 59369},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1711, col: 15, offset: 59369},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1715, col: 1, offset: 59431},
			expr: &litMatcher{
				pos:        position{line: 1715, col: 18, offset: 59448},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1717, col: 1, offset: 59471},
			expr: &actionExpr{
				pos: position{line: 1717, col: 14, offset: 59484},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1717, col: 14, offset: 59484},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1721, col: 1, offset: 59547},
			expr: &actionExpr{
				pos: position{line: 1721, col: 14, offset: 59560},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1721, col: 14, offset: 59560},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1725, col: 1, offset: 59624},
			expr: &actionExpr{
				pos: position{line: 1725, col: 15, offset: 59638},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1725, col: 15, offset: 59638},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1729, col: 1, offset: 59701},
			expr: &actionExpr{
				pos: position{line: 1729, col: 13, offset: 59713},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1729, col: 13, offset: 59713},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1737, col: 1, offset: 59998},
			expr: &actionExpr{
				pos: position{line: 1737, col: 22, offset: 60019},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1737, col: 22, offset: 60019},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1737, col: 22, offset: 60019},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1737, col: 31, offset: 60028},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1737, col: 35, offset: 60032},
							expr: &charClassMatcher{
								pos:        position{line: 1737, col: 36, offset: 60033},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1744, col: 1, offset: 60311},
			expr: &actionExpr{
				pos: position{line: 1744, col: 18, offset: 60328},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1744, col: 18, offset: 60328},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1744, col: 19, offset: 60329},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1744, col: 19, offset: 60329},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1744, col: 27, offset: 60337},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1744, col: 37, offset: 60347},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1744, col: 45, offset: 60355},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1744, col: 55, offset: 60365},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1744, col: 63, offset: 60373},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1744, col: 72, offset: 60382},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1751, col: 1, offset: 60541},
			expr: &actionExpr{
				pos: position{line: 1752, col: 5, offset: 60564},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1752, col: 5, offset: 60564},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1752, col: 5, offset: 60564},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1752, col: 11, offset: 60570},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1753, col: 5, offset: 60590},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1757, col: 5, offset: 60730},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1758, col: 5, offset: 60740},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1758, col: 12, offset: 60747},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1759, col: 5, offset: 60768},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1759, col: 23, offset: 60786},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1763, col: 1, offset: 60917},
			expr: &actionExpr{
				pos: position{line: 1764, col: 5, offset: 60941},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1764, col: 5, offset: 60941},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1764, col: 5, offset: 60941},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 11, offset: 60947},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1765, col: 5, offset: 60967},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1769, col: 5, offset: 61107},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1770, col: 5, offset: 61116},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1770, col: 12, offset: 61123},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1771, col: 5, offset: 61144},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1771, col: 23, offset: 61162},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1775, col: 1, offset: 61294},
			expr: &actionExpr{
				pos: position{line: 1775, col: 18, offset: 61311},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1775, col: 19, offset: 61312},
					expr: &charClassMatcher{
						pos:        position{line: 1775, col: 19, offset: 61312},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1779, col: 1, offset: 61369},
			expr: &actionExpr{
				pos: position{line: 1779, col: 19, offset: 61387},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1779, col: 19, offset: 61387},
					expr: &charClassMatcher{
						pos:        position{line: 1779, col: 19, offset: 61387},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1786, col: 1, offset: 61549},
			expr: &charClassMatcher{
				pos:        position{line: 1786, col: 13, offset: 61561},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1788, col: 1, offset: 61571},
			expr: &choiceExpr{
				pos: position{line: 1788, col: 16, offset: 61586},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1788, col: 16, offset: 61586},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1788, col: 22, offset: 61592},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1788, col: 28, offset: 61598},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1788, col: 34, offset: 61604},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1788, col: 40, offset: 61610},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1788, col: 46, offset: 61616},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1790, col: 1, offset: 61622},
			expr: &actionExpr{
				pos: position{line: 1790, col: 14, offset: 61635},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1790, col: 14, offset: 61635},
					expr: &charClassMatcher{
						pos:        position{line: 1790, col: 14, offset: 61635},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1794, col: 1, offset: 61689},
			expr: &choiceExpr{
				pos: position{line: 1798, col: 5, offset: 62016},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1798, col: 5, offset: 62016},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1798, col: 5, offset: 62016},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1798, col: 5, offset: 62016},
									expr: &charClassMatcher{
										pos:        position{line: 1798, col: 5, offset: 62016},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1798, col: 15, offset: 62026},
									expr: &choiceExpr{
										pos: position{line: 1798, col: 17, offset: 62028},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1798, col: 17, offset: 62028},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1798, col: 30, offset: 62041},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1800, col: 9, offset: 62110},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1800, col: 9, offset: 62110},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1800, col: 9, offset: 62110},
									expr: &charClassMatcher{
										pos:        position{line: 1800, col: 9, offset: 62110},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1800, col: 19, offset: 62120},
									expr: &seqExpr{
										pos: position{line: 1800, col: 20, offset: 62121},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1800, col: 20, offset: 62121},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1800, col: 27, offset: 62128},
												expr: &charClassMatcher{
													pos:        position{line: 1800, col: 27, offset: 62128},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1805, col: 1, offset: 62220},
			expr: &choiceExpr{
				pos: position{line: 1809, col: 5, offset: 62413},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1809, col: 5, offset: 62413},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1809, col: 5, offset: 62413},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1809, col: 5, offset: 62413},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 1809, col: 14, offset: 62422},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 1809, col: 14, offset: 62422},
											expr: &charClassMatcher{
												pos:        position{line: 1809, col: 14, offset: 62422},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1812, col: 5, offset: 62503},
									expr: &choiceExpr{
										pos: position{line: 1812, col: 7, offset: 62505},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1812, col: 7, offset: 62505},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1812, col: 17, offset: 62515},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 1812, col: 47, offset: 62545},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 9, offset: 62588},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1817, col: 1, offset: 62688},
			expr: &actionExpr{
				pos: position{line: 1817, col: 12, offset: 62699},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1817, col: 12, offset: 62699},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1821, col: 1, offset: 62772},
			expr: &actionExpr{
				pos: position{line: 1821, col: 17, offset: 62788},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1821, col: 17, offset: 62788},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1821, col: 22, offset: 62793},
						expr: &choiceExpr{
							pos: position{line: 1821, col: 23, offset: 62794},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1821, col: 23, offset: 62794},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 1821, col: 34, offset: 62805},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1825, col: 1, offset: 62894},
			expr: &actionExpr{
				pos: position{line: 1825, col: 13, offset: 62906},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1825, col: 13, offset: 62906},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1825, col: 13, offset: 62906},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1825, col: 20, offset: 62913},
								expr: &ruleRefExpr{
									pos:  position{line: 1825, col: 21, offset: 62914},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1825, col: 30, offset: 62923},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1825, col: 35, offset: 62928},
								expr: &choiceExpr{
									pos: position{line: 1825, col: 36, offset: 62929},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1825, col: 36, offset: 62929},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1825, col: 47, offset: 62940},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1829, col: 1, offset: 63033},
			expr: &actionExpr{
				pos: position{line: 1829, col: 23, offset: 63055},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1829, col: 23, offset: 63055},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1829, col: 23, offset: 63055},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1829, col: 31, offset: 63063},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1829, col: 39, offset: 63071},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1829, col: 44, offset: 63076},
								expr: &choiceExpr{
									pos: position{line: 1829, col: 45, offset: 63077},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1829, col: 45, offset: 63077},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1829, col: 56, offset: 63088},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 1833, col: 1, offset: 63181},
			expr: &actionExpr{
				pos: position{line: 1833, col: 13, offset: 63193},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 1833, col: 13, offset: 63193},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1833, col: 22, offset: 63202},
						expr: &choiceExpr{
							pos: position{line: 1834, col: 5, offset: 63208},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1834, col: 5, offset: 63208},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 1834, col: 5, offset: 63208},
										expr: &charClassMatcher{
											pos:        position{line: 1834, col: 6, offset: 63209},
											val:        "[^\\r\\n[\\]\\uFFFD{ ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1837, col: 7, offset: 63345},
									name: "AttributeSubstitution",
								},
								&actionExpr{
									pos: position{line: 1838, col: 7, offset: 63374},
									run: (*parser).callonFilename9,
									expr: &litMatcher{
										pos:        position{line: 1838, col: 7, offset: 63374},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 1844, col: 1, offset: 63512},
			expr: &choiceExpr{
				pos: position{line: 1844, col: 11, offset: 63522},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1844, col: 11, offset: 63522},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1844, col: 23, offset: 63534},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1844, col: 36, offset: 63547},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1844, col: 47, offset: 63558},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1844, col: 58, offset: 63569},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 1846, col: 1, offset: 63580},
			expr: &actionExpr{
				pos: position{line: 1846, col: 7, offset: 63586},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1846, col: 7, offset: 63586},
					expr: &charClassMatcher{
						pos:        position{line: 1846, col: 7, offset: 63586},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 1850, col: 1, offset: 63719},
			expr: &actionExpr{
				pos: position{line: 1850, col: 10, offset: 63728},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 1850, col: 10, offset: 63728},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1854, col: 1, offset: 63778},
			expr: &actionExpr{
				pos: position{line: 1854, col: 11, offset: 63788},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 1854, col: 11, offset: 63788},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1854, col: 11, offset: 63788},
							expr: &litMatcher{
								pos:        position{line: 1854, col: 11, offset: 63788},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1854, col: 16, offset: 63793},
							expr: &ruleRefExpr{
								pos:  position{line: 1854, col: 16, offset: 63793},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1858, col: 1, offset: 63853},
			expr: &choiceExpr{
				pos: position{line: 1858, col: 10, offset: 63862},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1858, col: 10, offset: 63862},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1858, col: 16, offset: 63868},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1858, col: 16, offset: 63868},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1862, col: 1, offset: 63917},
			expr: &choiceExpr{
				pos: position{line: 1862, col: 12, offset: 63928},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1862, col: 12, offset: 63928},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1862, col: 19, offset: 63935},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 1862, col: 28, offset: 63944},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 1862, col: 28, offset: 63944},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1866, col: 1, offset: 64028},
			expr: &notExpr{
				pos: position{line: 1866, col: 8, offset: 64035},
				expr: &anyMatcher{
					line: 1866, col: 9, offset: 64036,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1868, col: 1, offset: 64039},
			expr: &choiceExpr{
				pos: position{line: 1868, col: 8, offset: 64046},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1868, col: 8, offset: 64046},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 1868, col: 14, offset: 64052},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onAttributeDeclaration3() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonAttributeDeclaration3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration3()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes13(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue14()
}

func (c *current) onSingleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue17()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue14()
}

func (c *current) onDoubleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue17()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue9()
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue16(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue16(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onItalicWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonItalicWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicWord1()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection8(level interface{}) error {
	// for section, we always enable the 'normal' substitutions
	return c.setSubstitutionPhase("normal")

}

func (p *parser) callonSection8() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection8(stack["level"])
}

func (c *current) onSection1(level, title, id interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"], stack["id"])
}

func (c *current) onSectionTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonSectionTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElements1(stack["elements"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(content interface{}) (interface{}, error) {
	s, _ := types.NewStringElement(string(c.text))
	return []interface{}{s}, nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["content"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename9()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

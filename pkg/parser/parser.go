// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 413},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 7, offset: 429},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 443},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 470},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 492},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 513},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 535},
						name: "SingleLineComment",
					},
					&actionExpr{
						pos: position{line: 29, col: 7, offset: 559},
						run: (*parser).callonDocumentFragmentElement9,
						expr: &zeroOrMoreExpr{
							pos: position{line: 29, col: 7, offset: 559},
							expr: &anyMatcher{
								line: 29, col: 8, offset: 560,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 36, col: 1, offset: 750},
			expr: &actionExpr{
				pos: position{line: 36, col: 25, offset: 774},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 36, col: 25, offset: 774},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 36, col: 25, offset: 774},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 36, col: 29, offset: 778},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 36, col: 35, offset: 784},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 36, col: 50, offset: 799},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 37, col: 9, offset: 812},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 37, col: 15, offset: 818},
								expr: &ruleRefExpr{
									pos:  position{line: 37, col: 16, offset: 819},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 37, col: 44, offset: 847},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 46, col: 1, offset: 1184},
			expr: &actionExpr{
				pos: position{line: 46, col: 18, offset: 1201},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 46, col: 18, offset: 1201},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 46, col: 18, offset: 1201},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 46, col: 28, offset: 1211},
							expr: &charClassMatcher{
								pos:        position{line: 46, col: 29, offset: 1212},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 50, col: 1, offset: 1260},
			expr: &actionExpr{
				pos: position{line: 50, col: 30, offset: 1289},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 50, col: 30, offset: 1289},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 50, col: 30, offset: 1289},
							expr: &ruleRefExpr{
								pos:  position{line: 50, col: 30, offset: 1289},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 50, col: 37, offset: 1296},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 50, col: 46, offset: 1305},
								expr: &choiceExpr{
									pos: position{line: 51, col: 5, offset: 1311},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 51, col: 6, offset: 1312},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 51, col: 6, offset: 1312},
												expr: &charClassMatcher{
													pos:        position{line: 51, col: 6, offset: 1312},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 54, col: 5, offset: 1391},
											name: "InlineAttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 55, col: 6, offset: 1426},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 55, col: 6, offset: 1426},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 62, col: 1, offset: 1593},
			expr: &choiceExpr{
				pos: position{line: 62, col: 19, offset: 1611},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 62, col: 19, offset: 1611},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 62, col: 19, offset: 1611},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 19, offset: 1611},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 62, col: 24, offset: 1616},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 30, offset: 1622},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 62, col: 45, offset: 1637},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 62, col: 49, offset: 1641},
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 49, offset: 1641},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 56, offset: 1648},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 1708},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 1708},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 64, col: 5, offset: 1708},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 64, col: 9, offset: 1712},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 15, offset: 1718},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 64, col: 30, offset: 1733},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 64, col: 35, offset: 1738},
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 35, offset: 1738},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 64, col: 42, offset: 1745},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 71, col: 1, offset: 1927},
			expr: &actionExpr{
				pos: position{line: 72, col: 5, offset: 1951},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 72, col: 5, offset: 1951},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 72, col: 16, offset: 1962},
						expr: &choiceExpr{
							pos: position{line: 74, col: 9, offset: 2029},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 74, col: 10, offset: 2030},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 74, col: 10, offset: 2030},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 74, col: 10, offset: 2030},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 74, col: 18, offset: 2038},
													name: "ShortHandAnchor",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 74, col: 35, offset: 2055},
												expr: &ruleRefExpr{
													pos:  position{line: 74, col: 35, offset: 2055},
													name: "Space",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 78, col: 12, offset: 2172},
									run: (*parser).callonBlockAttributes11,
									expr: &seqExpr{
										pos: position{line: 78, col: 12, offset: 2172},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 78, col: 12, offset: 2172},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 78, col: 19, offset: 2179},
													name: "ShortHandTitle",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 78, col: 35, offset: 2195},
												expr: &ruleRefExpr{
													pos:  position{line: 78, col: 35, offset: 2195},
													name: "Space",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 82, col: 12, offset: 2282},
									run: (*parser).callonBlockAttributes17,
									expr: &seqExpr{
										pos: position{line: 82, col: 12, offset: 2282},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 82, col: 12, offset: 2282},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 82, col: 24, offset: 2294},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 82, col: 44, offset: 2314},
												expr: &ruleRefExpr{
													pos:  position{line: 82, col: 44, offset: 2314},
													name: "Space",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 89, col: 1, offset: 2453},
			expr: &actionExpr{
				pos: position{line: 90, col: 5, offset: 2477},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 90, col: 5, offset: 2477},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 90, col: 5, offset: 2477},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 5, offset: 2485},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 91, col: 16, offset: 2496},
								expr: &choiceExpr{
									pos: position{line: 91, col: 17, offset: 2497},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 91, col: 17, offset: 2497},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 91, col: 37, offset: 2517},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 92, col: 5, offset: 2538},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 97, col: 1, offset: 2666},
			expr: &actionExpr{
				pos: position{line: 98, col: 4, offset: 2688},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 98, col: 4, offset: 2688},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 98, col: 4, offset: 2688},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2698},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 100, col: 9, offset: 2711},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 100, col: 9, offset: 2711},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 100, col: 18, offset: 2720},
										expr: &choiceExpr{
											pos: position{line: 101, col: 13, offset: 2734},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 101, col: 14, offset: 2735},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 101, col: 14, offset: 2735},
														expr: &charClassMatcher{
															pos:        position{line: 101, col: 14, offset: 2735},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 104, col: 13, offset: 2902},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 105, col: 13, offset: 2935},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 106, col: 14, offset: 2958},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 106, col: 14, offset: 2958},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 112, col: 5, offset: 3144},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 117, col: 1, offset: 3245},
			expr: &actionExpr{
				pos: position{line: 117, col: 19, offset: 3263},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 117, col: 19, offset: 3263},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 19, offset: 3263},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 117, col: 23, offset: 3267},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 118, col: 5, offset: 3279},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 118, col: 5, offset: 3279},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 118, col: 5, offset: 3279},
											expr: &charClassMatcher{
												pos:        position{line: 118, col: 6, offset: 3280},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 119, col: 5, offset: 3392},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 119, col: 14, offset: 3401},
												expr: &choiceExpr{
													pos: position{line: 120, col: 9, offset: 3411},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 120, col: 10, offset: 3412},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 120, col: 10, offset: 3412},
																expr: &charClassMatcher{
																	pos:        position{line: 120, col: 10, offset: 3412},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 123, col: 9, offset: 3510},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 124, col: 9, offset: 3539},
															name: "AttrSub",
														},
														&actionExpr{
															pos: position{line: 125, col: 10, offset: 3558},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 125, col: 10, offset: 3558},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 136, col: 1, offset: 3958},
			expr: &actionExpr{
				pos: position{line: 137, col: 5, offset: 3984},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 137, col: 5, offset: 3984},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 137, col: 5, offset: 3984},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 137, col: 9, offset: 3988},
							expr: &litMatcher{
								pos:        position{line: 137, col: 10, offset: 3989},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 139, col: 5, offset: 4159},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 139, col: 31, offset: 4185},
								expr: &ruleRefExpr{
									pos:  position{line: 139, col: 32, offset: 4186},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 140, col: 5, offset: 4218},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 140, col: 21, offset: 4234},
								expr: &choiceExpr{
									pos: position{line: 140, col: 22, offset: 4235},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 140, col: 22, offset: 4235},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 140, col: 44, offset: 4257},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 141, col: 5, offset: 4278},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 152, col: 1, offset: 4738},
			expr: &actionExpr{
				pos: position{line: 153, col: 5, offset: 4772},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 153, col: 5, offset: 4772},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 153, col: 5, offset: 4772},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 153, col: 10, offset: 4777},
								expr: &ruleRefExpr{
									pos:  position{line: 154, col: 9, offset: 4787},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 156, col: 5, offset: 4817},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 156, col: 12, offset: 4824},
								expr: &choiceExpr{
									pos: position{line: 157, col: 9, offset: 4835},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 157, col: 9, offset: 4835},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 158, col: 11, offset: 4867},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 159, col: 11, offset: 4902},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 160, col: 8, offset: 4935},
							expr: &seqExpr{
								pos: position{line: 160, col: 9, offset: 4936},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 160, col: 9, offset: 4936},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 160, col: 13, offset: 4940},
										expr: &ruleRefExpr{
											pos:  position{line: 160, col: 13, offset: 4940},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 161, col: 5, offset: 4954},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 175, col: 1, offset: 5311},
			expr: &actionExpr{
				pos: position{line: 175, col: 25, offset: 5335},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 175, col: 25, offset: 5335},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 175, col: 25, offset: 5335},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 29, offset: 5339},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 33, offset: 5343},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 179, col: 1, offset: 5417},
			expr: &actionExpr{
				pos: position{line: 179, col: 23, offset: 5439},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 179, col: 23, offset: 5439},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 179, col: 30, offset: 5446},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 184, col: 1, offset: 5572},
			expr: &actionExpr{
				pos: position{line: 184, col: 30, offset: 5601},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 184, col: 30, offset: 5601},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 184, col: 30, offset: 5601},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 184, col: 34, offset: 5605},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 40, offset: 5611},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 189, col: 1, offset: 5733},
			expr: &actionExpr{
				pos: position{line: 189, col: 29, offset: 5761},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 189, col: 29, offset: 5761},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 189, col: 29, offset: 5761},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 189, col: 33, offset: 5765},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 41, offset: 5773},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 194, col: 1, offset: 5886},
			expr: &choiceExpr{
				pos: position{line: 195, col: 5, offset: 5918},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 195, col: 5, offset: 5918},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 7, offset: 5952},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 197, col: 7, offset: 5986},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 197, col: 7, offset: 5986},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 197, col: 7, offset: 5986},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 197, col: 16, offset: 5995},
										expr: &choiceExpr{
											pos: position{line: 200, col: 5, offset: 6165},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 200, col: 6, offset: 6166},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 200, col: 6, offset: 6166},
														expr: &charClassMatcher{
															pos:        position{line: 200, col: 6, offset: 6166},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 203, col: 5, offset: 6260},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 204, col: 5, offset: 6277},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 205, col: 5, offset: 6302},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 206, col: 6, offset: 6317},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 206, col: 6, offset: 6317},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 208, col: 10, offset: 6387},
									expr: &charClassMatcher{
										pos:        position{line: 208, col: 11, offset: 6388},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 212, col: 1, offset: 6464},
			expr: &choiceExpr{
				pos: position{line: 212, col: 24, offset: 6487},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 5, offset: 6493},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 213, col: 5, offset: 6493},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 213, col: 5, offset: 6493},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 12, offset: 6500},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 213, col: 29, offset: 6517},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 213, col: 29, offset: 6517},
											expr: &seqExpr{
												pos: position{line: 213, col: 30, offset: 6518},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 213, col: 30, offset: 6518},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 213, col: 34, offset: 6522},
														expr: &ruleRefExpr{
															pos:  position{line: 213, col: 34, offset: 6522},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 213, col: 45, offset: 6533},
											expr: &litMatcher{
												pos:        position{line: 213, col: 46, offset: 6534},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 218, col: 6, offset: 6771},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 218, col: 6, offset: 6771},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 218, col: 6, offset: 6771},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 218, col: 13, offset: 6778},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 218, col: 13, offset: 6778},
												expr: &ruleRefExpr{
													pos:  position{line: 218, col: 13, offset: 6778},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 218, col: 21, offset: 6786},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 218, col: 22, offset: 6787},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 218, col: 22, offset: 6787},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 218, col: 26, offset: 6791},
																expr: &ruleRefExpr{
																	pos:  position{line: 218, col: 26, offset: 6791},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 218, col: 36, offset: 6801},
														expr: &litMatcher{
															pos:        position{line: 218, col: 37, offset: 6802},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 219, col: 5, offset: 6812},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 230, col: 1, offset: 7125},
			expr: &actionExpr{
				pos: position{line: 230, col: 19, offset: 7143},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 230, col: 19, offset: 7143},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 230, col: 19, offset: 7143},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 24, offset: 7148},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 230, col: 43, offset: 7167},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 230, col: 47, offset: 7171},
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 47, offset: 7171},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 230, col: 54, offset: 7178},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 61, offset: 7185},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 230, col: 77, offset: 7201},
							expr: &seqExpr{
								pos: position{line: 230, col: 78, offset: 7202},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 230, col: 78, offset: 7202},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 230, col: 82, offset: 7206},
										expr: &ruleRefExpr{
											pos:  position{line: 230, col: 82, offset: 7206},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 235, col: 1, offset: 7430},
			expr: &actionExpr{
				pos: position{line: 235, col: 22, offset: 7451},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 235, col: 22, offset: 7451},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 235, col: 22, offset: 7451},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 23, offset: 7452},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 235, col: 29, offset: 7458},
							expr: &charClassMatcher{
								pos:        position{line: 235, col: 29, offset: 7458},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 235, col: 42, offset: 7471},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 42, offset: 7471},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 239, col: 1, offset: 7541},
			expr: &actionExpr{
				pos: position{line: 240, col: 5, offset: 7564},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 240, col: 5, offset: 7564},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 240, col: 5, offset: 7564},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 241, col: 9, offset: 7580},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 241, col: 9, offset: 7580},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 242, col: 11, offset: 7618},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 11, offset: 7656},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 245, col: 5, offset: 7690},
							expr: &notExpr{
								pos: position{line: 245, col: 7, offset: 7692},
								expr: &seqExpr{
									pos: position{line: 245, col: 9, offset: 7694},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 245, col: 9, offset: 7694},
											expr: &ruleRefExpr{
												pos:  position{line: 245, col: 9, offset: 7694},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 245, col: 16, offset: 7701},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 249, col: 1, offset: 7742},
			expr: &actionExpr{
				pos: position{line: 250, col: 5, offset: 7777},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 250, col: 5, offset: 7777},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 250, col: 5, offset: 7777},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 5, offset: 7786},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 251, col: 14, offset: 7795},
								expr: &choiceExpr{
									pos: position{line: 252, col: 9, offset: 7805},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 252, col: 9, offset: 7805},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 253, col: 12, offset: 7828},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 253, col: 12, offset: 7828},
												expr: &charClassMatcher{
													pos:        position{line: 253, col: 12, offset: 7828},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 256, col: 11, offset: 7974},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 257, col: 11, offset: 8003},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 258, col: 12, offset: 8022},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 258, col: 12, offset: 8022},
													run: (*parser).callonSingleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 258, col: 12, offset: 8022},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 261, col: 11, offset: 8114},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 261, col: 17, offset: 8120},
													run: (*parser).callonSingleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 261, col: 17, offset: 8120},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 265, col: 5, offset: 8209},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 269, col: 1, offset: 8265},
			expr: &actionExpr{
				pos: position{line: 270, col: 5, offset: 8300},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 270, col: 5, offset: 8300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 5, offset: 8300},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 271, col: 5, offset: 8310},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 271, col: 14, offset: 8319},
								expr: &choiceExpr{
									pos: position{line: 272, col: 9, offset: 8329},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 272, col: 9, offset: 8329},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 273, col: 12, offset: 8352},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 273, col: 12, offset: 8352},
												expr: &charClassMatcher{
													pos:        position{line: 273, col: 12, offset: 8352},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 276, col: 11, offset: 8498},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 277, col: 11, offset: 8527},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 278, col: 12, offset: 8546},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 278, col: 12, offset: 8546},
													run: (*parser).callonDoubleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 278, col: 12, offset: 8546},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 281, col: 11, offset: 8638},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 281, col: 17, offset: 8644},
													run: (*parser).callonDoubleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 281, col: 17, offset: 8644},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 285, col: 5, offset: 8733},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 290, col: 1, offset: 8868},
			expr: &actionExpr{
				pos: position{line: 291, col: 5, offset: 8899},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 291, col: 5, offset: 8899},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 291, col: 5, offset: 8899},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 6, offset: 8900},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 292, col: 5, offset: 8910},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 292, col: 14, offset: 8919},
								expr: &choiceExpr{
									pos: position{line: 293, col: 9, offset: 8929},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 293, col: 9, offset: 8929},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 294, col: 12, offset: 8951},
											run: (*parser).callonUnquotedAttributeValue9,
											expr: &oneOrMoreExpr{
												pos: position{line: 294, col: 12, offset: 8951},
												expr: &charClassMatcher{
													pos:        position{line: 294, col: 12, offset: 8951},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 297, col: 11, offset: 9053},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 298, col: 11, offset: 9082},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 299, col: 12, offset: 9101},
											run: (*parser).callonUnquotedAttributeValue14,
											expr: &litMatcher{
												pos:        position{line: 299, col: 12, offset: 9101},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 303, col: 5, offset: 9189},
							run: (*parser).callonUnquotedAttributeValue16,
						},
					},
				},
			},
		},
		{
			name: "InlineAttributeSubstitution",
			pos:  position{line: 314, col: 1, offset: 9504},
			expr: &choiceExpr{
				pos: position{line: 314, col: 32, offset: 9535},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 314, col: 32, offset: 9535},
						name: "CounterSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 314, col: 54, offset: 9557},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 316, col: 1, offset: 9566},
			expr: &actionExpr{
				pos: position{line: 316, col: 12, offset: 9577},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 316, col: 12, offset: 9577},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 316, col: 12, offset: 9577},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 316, col: 16, offset: 9581},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 316, col: 21, offset: 9586},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 316, col: 35, offset: 9600},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 321, col: 1, offset: 9715},
			expr: &choiceExpr{
				pos: position{line: 321, col: 24, offset: 9738},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 321, col: 24, offset: 9738},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 47, offset: 9761},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 323, col: 1, offset: 9897},
			expr: &actionExpr{
				pos: position{line: 323, col: 25, offset: 9921},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 323, col: 25, offset: 9921},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 323, col: 25, offset: 9921},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 37, offset: 9933},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 42, offset: 9938},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 56, offset: 9952},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 323, col: 62, offset: 9958},
								expr: &ruleRefExpr{
									pos:  position{line: 323, col: 63, offset: 9959},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 78, offset: 9974},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 327, col: 1, offset: 10052},
			expr: &actionExpr{
				pos: position{line: 327, col: 25, offset: 10076},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 327, col: 25, offset: 10076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 25, offset: 10076},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 327, col: 38, offset: 10089},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 43, offset: 10094},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 57, offset: 10108},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 327, col: 63, offset: 10114},
								expr: &ruleRefExpr{
									pos:  position{line: 327, col: 64, offset: 10115},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 327, col: 79, offset: 10130},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 331, col: 1, offset: 10205},
			expr: &actionExpr{
				pos: position{line: 331, col: 17, offset: 10221},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 331, col: 17, offset: 10221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 17, offset: 10221},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 21, offset: 10225},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 331, col: 28, offset: 10232},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 331, col: 28, offset: 10232},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 331, col: 28, offset: 10232},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 333, col: 9, offset: 10286},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 333, col: 9, offset: 10286},
											expr: &charClassMatcher{
												pos:        position{line: 333, col: 9, offset: 10286},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 342, col: 1, offset: 10488},
			expr: &actionExpr{
				pos: position{line: 342, col: 14, offset: 10501},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 342, col: 14, offset: 10501},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 14, offset: 10501},
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 14, offset: 10501},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 21, offset: 10508},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 349, col: 1, offset: 10745},
			expr: &actionExpr{
				pos: position{line: 349, col: 12, offset: 10756},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 349, col: 12, offset: 10756},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 349, col: 12, offset: 10756},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 349, col: 16, offset: 10760},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 349, col: 21, offset: 10765},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 349, col: 21, offset: 10765},
									expr: &charClassMatcher{
										pos:        position{line: 349, col: 21, offset: 10765},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 349, col: 69, offset: 10813},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 349, col: 73, offset: 10817},
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 73, offset: 10817},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 349, col: 80, offset: 10824},
							expr: &choiceExpr{
								pos: position{line: 349, col: 82, offset: 10826},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 349, col: 82, offset: 10826},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 349, col: 88, offset: 10832},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 353, col: 1, offset: 10893},
			expr: &actionExpr{
				pos: position{line: 353, col: 20, offset: 10912},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 353, col: 20, offset: 10912},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 353, col: 20, offset: 10912},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 25, offset: 10917},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 48, offset: 10940},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 61, offset: 10953},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 357, col: 1, offset: 11065},
			expr: &actionExpr{
				pos: position{line: 357, col: 26, offset: 11090},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 357, col: 26, offset: 11090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 26, offset: 11090},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 30, offset: 11094},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 357, col: 35, offset: 11099},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 357, col: 35, offset: 11099},
									expr: &charClassMatcher{
										pos:        position{line: 357, col: 35, offset: 11099},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 83, offset: 11147},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 357, col: 87, offset: 11151},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 87, offset: 11151},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 365, col: 1, offset: 11382},
			expr: &seqExpr{
				pos: position{line: 365, col: 31, offset: 11412},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 365, col: 31, offset: 11412},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 365, col: 38, offset: 11419},
						expr: &ruleRefExpr{
							pos:  position{line: 365, col: 38, offset: 11419},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 45, offset: 11426},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 367, col: 1, offset: 11431},
			expr: &choiceExpr{
				pos: position{line: 367, col: 29, offset: 11459},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 367, col: 30, offset: 11460},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 367, col: 30, offset: 11460},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 367, col: 37, offset: 11467},
								expr: &ruleRefExpr{
									pos:  position{line: 367, col: 37, offset: 11467},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 367, col: 44, offset: 11474},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 367, col: 51, offset: 11481},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 384, col: 1, offset: 11971},
			expr: &actionExpr{
				pos: position{line: 389, col: 5, offset: 12130},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 389, col: 5, offset: 12130},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 389, col: 14, offset: 12139},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 393, col: 1, offset: 12185},
			expr: &actionExpr{
				pos: position{line: 393, col: 12, offset: 12196},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 393, col: 12, offset: 12196},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 393, col: 12, offset: 12196},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 393, col: 20, offset: 12204},
								expr: &anyMatcher{
									line: 393, col: 21, offset: 12205,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 393, col: 25, offset: 12209},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 397, col: 1, offset: 12262},
			expr: &actionExpr{
				pos: position{line: 397, col: 22, offset: 12283},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 397, col: 22, offset: 12283},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 397, col: 22, offset: 12283},
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 23, offset: 12284},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 397, col: 45, offset: 12306},
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 45, offset: 12306},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 397, col: 52, offset: 12313},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 397, col: 57, offset: 12318},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 66, offset: 12327},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 397, col: 92, offset: 12353},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 401, col: 1, offset: 12426},
			expr: &actionExpr{
				pos: position{line: 401, col: 29, offset: 12454},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 401, col: 29, offset: 12454},
					expr: &charClassMatcher{
						pos:        position{line: 401, col: 29, offset: 12454},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 408, col: 1, offset: 12619},
			expr: &choiceExpr{
				pos: position{line: 408, col: 19, offset: 12637},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 408, col: 19, offset: 12637},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 408, col: 44, offset: 12662},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 410, col: 1, offset: 12687},
			expr: &choiceExpr{
				pos: position{line: 410, col: 27, offset: 12713},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 410, col: 27, offset: 12713},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 410, col: 27, offset: 12713},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 410, col: 27, offset: 12713},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 410, col: 32, offset: 12718},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 410, col: 36, offset: 12722},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 410, col: 40, offset: 12726},
									expr: &ruleRefExpr{
										pos:  position{line: 410, col: 40, offset: 12726},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 410, col: 47, offset: 12733},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 410, col: 51, offset: 12737},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 410, col: 58, offset: 12744},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 410, col: 79, offset: 12765},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 412, col: 9, offset: 12838},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 412, col: 9, offset: 12838},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 412, col: 9, offset: 12838},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 412, col: 14, offset: 12843},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 412, col: 18, offset: 12847},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 412, col: 22, offset: 12851},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 416, col: 1, offset: 12922},
			expr: &actionExpr{
				pos: position{line: 416, col: 27, offset: 12948},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 416, col: 27, offset: 12948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 416, col: 27, offset: 12948},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 416, col: 35, offset: 12956},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 40, offset: 12961},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 416, col: 54, offset: 12975},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 72, offset: 12993},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 420, col: 1, offset: 13126},
			expr: &oneOrMoreExpr{
				pos: position{line: 420, col: 24, offset: 13149},
				expr: &choiceExpr{
					pos: position{line: 421, col: 5, offset: 13155},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 421, col: 6, offset: 13156},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 421, col: 6, offset: 13156},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 421, col: 6, offset: 13156},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 421, col: 14, offset: 13164},
										expr: &charClassMatcher{
											pos:        position{line: 421, col: 14, offset: 13164},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 424, col: 5, offset: 13359},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 425, col: 6, offset: 13374},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 425, col: 6, offset: 13374},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 434, col: 1, offset: 13649},
			expr: &actionExpr{
				pos: position{line: 434, col: 19, offset: 13667},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 434, col: 19, offset: 13667},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 434, col: 19, offset: 13667},
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 21, offset: 13669},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 5, offset: 13699},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 435, col: 16, offset: 13710},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 435, col: 16, offset: 13710},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 436, col: 7, offset: 13769},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 437, col: 7, offset: 13797},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 438, col: 7, offset: 13826},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 439, col: 7, offset: 13855},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 440, col: 7, offset: 13884},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 441, col: 7, offset: 13910},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 442, col: 7, offset: 13938},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 446, col: 1, offset: 14004},
			expr: &actionExpr{
				pos: position{line: 446, col: 26, offset: 14029},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 446, col: 26, offset: 14029},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 446, col: 26, offset: 14029},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 446, col: 33, offset: 14036},
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 33, offset: 14036},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 446, col: 40, offset: 14043},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 450, col: 1, offset: 14102},
			expr: &actionExpr{
				pos: position{line: 450, col: 25, offset: 14126},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 450, col: 25, offset: 14126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 450, col: 25, offset: 14126},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 450, col: 31, offset: 14132},
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 31, offset: 14132},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 450, col: 38, offset: 14139},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 454, col: 1, offset: 14197},
			expr: &actionExpr{
				pos: position{line: 454, col: 26, offset: 14222},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 454, col: 26, offset: 14222},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 454, col: 26, offset: 14222},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 454, col: 33, offset: 14229},
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 33, offset: 14229},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 454, col: 40, offset: 14236},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 458, col: 1, offset: 14295},
			expr: &ruleRefExpr{
				pos:  position{line: 458, col: 25, offset: 14319},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 460, col: 1, offset: 14342},
			expr: &actionExpr{
				pos: position{line: 460, col: 26, offset: 14367},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 460, col: 26, offset: 14367},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 460, col: 26, offset: 14367},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 460, col: 33, offset: 14374},
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 33, offset: 14374},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 40, offset: 14381},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 464, col: 1, offset: 14440},
			expr: &actionExpr{
				pos: position{line: 464, col: 26, offset: 14465},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 464, col: 26, offset: 14465},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 464, col: 26, offset: 14465},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 464, col: 33, offset: 14472},
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 33, offset: 14472},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 40, offset: 14479},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 468, col: 1, offset: 14538},
			expr: &actionExpr{
				pos: position{line: 468, col: 24, offset: 14561},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 468, col: 24, offset: 14561},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 468, col: 24, offset: 14561},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 31, offset: 14568},
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 31, offset: 14568},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 38, offset: 14575},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 472, col: 1, offset: 14632},
			expr: &actionExpr{
				pos: position{line: 472, col: 26, offset: 14657},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 472, col: 26, offset: 14657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 472, col: 26, offset: 14657},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 472, col: 33, offset: 14664},
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 33, offset: 14664},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 40, offset: 14671},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 476, col: 1, offset: 14730},
			expr: &actionExpr{
				pos: position{line: 476, col: 30, offset: 14759},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 476, col: 30, offset: 14759},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 476, col: 30, offset: 14759},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 476, col: 37, offset: 14766},
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 37, offset: 14766},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 44, offset: 14773},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentBodyFragment",
			pos:  position{line: 485, col: 1, offset: 14981},
			expr: &actionExpr{
				pos: position{line: 485, col: 25, offset: 15005},
				run: (*parser).callonDocumentBodyFragment1,
				expr: &seqExpr{
					pos: position{line: 485, col: 25, offset: 15005},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 485, col: 25, offset: 15005},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 26, offset: 15006},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 5, offset: 15014},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 487, col: 9, offset: 15029},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 487, col: 9, offset: 15029},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 488, col: 11, offset: 15047},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 489, col: 11, offset: 15067},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 490, col: 11, offset: 15091},
										name: "BlockAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 491, col: 11, offset: 15117},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 492, col: 11, offset: 15148},
										name: "InlineAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 493, col: 11, offset: 15186},
										name: "BlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 494, col: 11, offset: 15211},
										name: "CalloutListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 495, col: 11, offset: 15237},
										name: "InlineElements",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockFragments",
			pos:  position{line: 501, col: 1, offset: 15371},
			expr: &zeroOrMoreExpr{
				pos: position{line: 501, col: 25, offset: 15395},
				expr: &seqExpr{
					pos: position{line: 501, col: 26, offset: 15396},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 501, col: 26, offset: 15396},
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 27, offset: 15397},
								name: "FencedBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 48, offset: 15418},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockFragments",
			pos:  position{line: 503, col: 1, offset: 15447},
			expr: &zeroOrMoreExpr{
				pos: position{line: 503, col: 26, offset: 15472},
				expr: &seqExpr{
					pos: position{line: 503, col: 27, offset: 15473},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 503, col: 27, offset: 15473},
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 28, offset: 15474},
								name: "ListingBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 503, col: 50, offset: 15496},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockFragments",
			pos:  position{line: 505, col: 1, offset: 15525},
			expr: &zeroOrMoreExpr{
				pos: position{line: 505, col: 26, offset: 15550},
				expr: &seqExpr{
					pos: position{line: 505, col: 27, offset: 15551},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 505, col: 27, offset: 15551},
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 28, offset: 15552},
								name: "LiteralBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 505, col: 50, offset: 15574},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "LiteralParagraphFragments",
			pos:  position{line: 507, col: 1, offset: 15603},
			expr: &zeroOrMoreExpr{
				pos: position{line: 507, col: 30, offset: 15632},
				expr: &seqExpr{
					pos: position{line: 507, col: 31, offset: 15633},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 507, col: 31, offset: 15633},
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 32, offset: 15634},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 507, col: 42, offset: 15644},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockFragments",
			pos:  position{line: 509, col: 1, offset: 15673},
			expr: &zeroOrMoreExpr{
				pos: position{line: 509, col: 25, offset: 15697},
				expr: &seqExpr{
					pos: position{line: 509, col: 26, offset: 15698},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 509, col: 26, offset: 15698},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 27, offset: 15699},
								name: "SourceBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 509, col: 48, offset: 15720},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 543, col: 1, offset: 16831},
			expr: &actionExpr{
				pos: position{line: 544, col: 9, offset: 16857},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 544, col: 9, offset: 16857},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 544, col: 9, offset: 16857},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 544, col: 13, offset: 16861},
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 13, offset: 16861},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 20, offset: 16868},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 27, offset: 16875},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 49, offset: 16897},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 544, col: 53, offset: 16901},
								expr: &ruleRefExpr{
									pos:  position{line: 544, col: 53, offset: 16901},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 544, col: 71, offset: 16919},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 548, col: 1, offset: 17034},
			expr: &choiceExpr{
				pos: position{line: 549, col: 9, offset: 17070},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 549, col: 9, offset: 17070},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 550, col: 11, offset: 17098},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 551, col: 11, offset: 17130},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 552, col: 11, offset: 17160},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 554, col: 1, offset: 17177},
			expr: &choiceExpr{
				pos: position{line: 555, col: 9, offset: 17214},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 555, col: 9, offset: 17214},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 556, col: 11, offset: 17242},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 557, col: 11, offset: 17274},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 558, col: 11, offset: 17304},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 560, col: 1, offset: 17322},
			expr: &choiceExpr{
				pos: position{line: 560, col: 20, offset: 17341},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 560, col: 20, offset: 17341},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 560, col: 48, offset: 17369},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 562, col: 1, offset: 17399},
			expr: &actionExpr{
				pos: position{line: 562, col: 30, offset: 17428},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 562, col: 30, offset: 17428},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 562, col: 30, offset: 17428},
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 30, offset: 17428},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 562, col: 37, offset: 17435},
							expr: &litMatcher{
								pos:        position{line: 562, col: 38, offset: 17436},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 562, col: 42, offset: 17440},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 562, col: 51, offset: 17449},
								expr: &ruleRefExpr{
									pos:  position{line: 562, col: 51, offset: 17449},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 68, offset: 17466},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 566, col: 1, offset: 17536},
			expr: &actionExpr{
				pos: position{line: 566, col: 33, offset: 17568},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 566, col: 33, offset: 17568},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 566, col: 33, offset: 17568},
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 33, offset: 17568},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 566, col: 40, offset: 17575},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 566, col: 51, offset: 17586},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 59, offset: 17594},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 75, offset: 17610},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 570, col: 1, offset: 17689},
			expr: &actionExpr{
				pos: position{line: 570, col: 19, offset: 17707},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 570, col: 19, offset: 17707},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 570, col: 19, offset: 17707},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 19, offset: 17707},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 570, col: 26, offset: 17714},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 36, offset: 17724},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 570, col: 56, offset: 17744},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 570, col: 62, offset: 17750},
								expr: &ruleRefExpr{
									pos:  position{line: 570, col: 63, offset: 17751},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 570, col: 85, offset: 17773},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 85, offset: 17773},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 570, col: 92, offset: 17780},
							expr: &litMatcher{
								pos:        position{line: 570, col: 92, offset: 17780},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 570, col: 97, offset: 17785},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 97, offset: 17785},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 575, col: 1, offset: 17930},
			expr: &actionExpr{
				pos: position{line: 575, col: 23, offset: 17952},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 575, col: 23, offset: 17952},
					expr: &charClassMatcher{
						pos:        position{line: 575, col: 23, offset: 17952},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 579, col: 1, offset: 17999},
			expr: &actionExpr{
				pos: position{line: 579, col: 24, offset: 18022},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 579, col: 24, offset: 18022},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 579, col: 24, offset: 18022},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 579, col: 28, offset: 18026},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 579, col: 35, offset: 18033},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 579, col: 36, offset: 18034},
									expr: &charClassMatcher{
										pos:        position{line: 579, col: 36, offset: 18034},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 581, col: 4, offset: 18081},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 587, col: 1, offset: 18242},
			expr: &actionExpr{
				pos: position{line: 587, col: 21, offset: 18262},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 587, col: 21, offset: 18262},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 587, col: 21, offset: 18262},
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 21, offset: 18262},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 587, col: 28, offset: 18269},
							expr: &litMatcher{
								pos:        position{line: 587, col: 29, offset: 18270},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 587, col: 33, offset: 18274},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 588, col: 9, offset: 18293},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 588, col: 10, offset: 18294},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 588, col: 10, offset: 18294},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 588, col: 10, offset: 18294},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 588, col: 21, offset: 18305},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 588, col: 45, offset: 18329},
													expr: &litMatcher{
														pos:        position{line: 588, col: 45, offset: 18329},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 588, col: 50, offset: 18334},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 588, col: 58, offset: 18342},
														expr: &ruleRefExpr{
															pos:  position{line: 588, col: 59, offset: 18343},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 588, col: 82, offset: 18366},
													expr: &litMatcher{
														pos:        position{line: 588, col: 82, offset: 18366},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 588, col: 87, offset: 18371},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 588, col: 97, offset: 18381},
														expr: &ruleRefExpr{
															pos:  position{line: 588, col: 98, offset: 18382},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 590, col: 15, offset: 18499},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 590, col: 15, offset: 18499},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 590, col: 15, offset: 18499},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 590, col: 24, offset: 18508},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 590, col: 46, offset: 18530},
													expr: &litMatcher{
														pos:        position{line: 590, col: 46, offset: 18530},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 590, col: 51, offset: 18535},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 590, col: 61, offset: 18545},
														expr: &ruleRefExpr{
															pos:  position{line: 590, col: 62, offset: 18546},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 13, offset: 18655},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 597, col: 1, offset: 18785},
			expr: &choiceExpr{
				pos: position{line: 597, col: 27, offset: 18811},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 597, col: 27, offset: 18811},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 597, col: 27, offset: 18811},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 597, col: 27, offset: 18811},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 597, col: 32, offset: 18816},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 597, col: 39, offset: 18823},
									expr: &charClassMatcher{
										pos:        position{line: 597, col: 39, offset: 18823},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 599, col: 5, offset: 18871},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 599, col: 5, offset: 18871},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 599, col: 5, offset: 18871},
									expr: &litMatcher{
										pos:        position{line: 599, col: 5, offset: 18871},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 599, col: 11, offset: 18877},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 599, col: 18, offset: 18884},
									expr: &charClassMatcher{
										pos:        position{line: 599, col: 18, offset: 18884},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 599, col: 29, offset: 18895},
									expr: &ruleRefExpr{
										pos:  position{line: 599, col: 29, offset: 18895},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 599, col: 36, offset: 18902},
									expr: &litMatcher{
										pos:        position{line: 599, col: 37, offset: 18903},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 603, col: 1, offset: 18943},
			expr: &actionExpr{
				pos: position{line: 603, col: 25, offset: 18967},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 603, col: 25, offset: 18967},
					expr: &charClassMatcher{
						pos:        position{line: 603, col: 25, offset: 18967},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 607, col: 1, offset: 19013},
			expr: &actionExpr{
				pos: position{line: 607, col: 27, offset: 19039},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 607, col: 27, offset: 19039},
					expr: &charClassMatcher{
						pos:        position{line: 607, col: 27, offset: 19039},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 614, col: 1, offset: 19214},
			expr: &actionExpr{
				pos: position{line: 614, col: 23, offset: 19236},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 614, col: 23, offset: 19236},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 614, col: 23, offset: 19236},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 614, col: 32, offset: 19245},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 614, col: 37, offset: 19250},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 614, col: 37, offset: 19250},
									expr: &charClassMatcher{
										pos:        position{line: 614, col: 37, offset: 19250},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 614, col: 76, offset: 19289},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 621, col: 1, offset: 19540},
			expr: &actionExpr{
				pos: position{line: 621, col: 14, offset: 19553},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 621, col: 14, offset: 19553},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 621, col: 14, offset: 19553},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 621, col: 20, offset: 19559},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 621, col: 24, offset: 19563},
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 24, offset: 19563},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 621, col: 31, offset: 19570},
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 32, offset: 19571},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 628, col: 1, offset: 19735},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 19757},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 629, col: 5, offset: 19757},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 19757},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 630, col: 9, offset: 19772},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 630, col: 9, offset: 19772},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 630, col: 9, offset: 19772},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 631, col: 9, offset: 19793},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 631, col: 15, offset: 19799},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 632, col: 9, offset: 19822},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 632, col: 27, offset: 19840},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 636, col: 5, offset: 20000},
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 5, offset: 20000},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 12, offset: 20007},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 640, col: 1, offset: 20067},
			expr: &ruleRefExpr{
				pos:  position{line: 640, col: 26, offset: 20092},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 643, col: 1, offset: 20132},
			expr: &actionExpr{
				pos: position{line: 643, col: 15, offset: 20146},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 643, col: 15, offset: 20146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 643, col: 15, offset: 20146},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 643, col: 22, offset: 20153},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 643, col: 22, offset: 20153},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 644, col: 7, offset: 20179},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 645, col: 7, offset: 20201},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 7, offset: 20224},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 650, col: 1, offset: 20314},
			expr: &actionExpr{
				pos: position{line: 650, col: 23, offset: 20336},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 650, col: 23, offset: 20336},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 23, offset: 20336},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 650, col: 30, offset: 20343},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 650, col: 30, offset: 20343},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 650, col: 47, offset: 20360},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 20382},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 651, col: 12, offset: 20389},
								expr: &actionExpr{
									pos: position{line: 652, col: 9, offset: 20399},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 652, col: 9, offset: 20399},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 652, col: 10, offset: 20400},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 652, col: 10, offset: 20400},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 652, col: 16, offset: 20406},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 653, col: 9, offset: 20517},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 653, col: 16, offset: 20524},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 653, col: 16, offset: 20524},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 653, col: 33, offset: 20541},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 659, col: 1, offset: 20683},
			expr: &actionExpr{
				pos: position{line: 659, col: 19, offset: 20701},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 659, col: 19, offset: 20701},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 659, col: 19, offset: 20701},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 26, offset: 20708},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 659, col: 34, offset: 20716},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 659, col: 39, offset: 20721},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 44, offset: 20726},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 663, col: 1, offset: 20822},
			expr: &actionExpr{
				pos: position{line: 663, col: 20, offset: 20841},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 663, col: 20, offset: 20841},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 663, col: 32, offset: 20853},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 668, col: 1, offset: 20976},
			expr: &actionExpr{
				pos: position{line: 668, col: 14, offset: 20989},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 668, col: 14, offset: 20989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 668, col: 14, offset: 20989},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 21, offset: 20996},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 668, col: 40, offset: 21015},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 672, col: 1, offset: 21105},
			expr: &actionExpr{
				pos: position{line: 672, col: 22, offset: 21126},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 672, col: 22, offset: 21126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 672, col: 22, offset: 21126},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 29, offset: 21133},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 21147},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 673, col: 12, offset: 21154},
								expr: &actionExpr{
									pos: position{line: 674, col: 9, offset: 21164},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 674, col: 9, offset: 21164},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 674, col: 10, offset: 21165},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 674, col: 10, offset: 21165},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 674, col: 16, offset: 21171},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 675, col: 9, offset: 21282},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 675, col: 16, offset: 21289},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 681, col: 1, offset: 21424},
			expr: &choiceExpr{
				pos: position{line: 681, col: 13, offset: 21436},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 681, col: 13, offset: 21436},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 681, col: 13, offset: 21436},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 681, col: 18, offset: 21441},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 681, col: 18, offset: 21441},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 681, col: 30, offset: 21453},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 9, offset: 21529},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 683, col: 9, offset: 21529},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 683, col: 9, offset: 21529},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 683, col: 13, offset: 21533},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 683, col: 18, offset: 21538},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 683, col: 18, offset: 21538},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 683, col: 30, offset: 21550},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 687, col: 1, offset: 21626},
			expr: &actionExpr{
				pos: position{line: 687, col: 16, offset: 21641},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 687, col: 16, offset: 21641},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 687, col: 16, offset: 21641},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 687, col: 23, offset: 21648},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 687, col: 23, offset: 21648},
									expr: &litMatcher{
										pos:        position{line: 687, col: 24, offset: 21649},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 690, col: 5, offset: 21703},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 697, col: 1, offset: 21870},
			expr: &actionExpr{
				pos: position{line: 697, col: 21, offset: 21890},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 697, col: 21, offset: 21890},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 697, col: 21, offset: 21890},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 697, col: 29, offset: 21898},
								expr: &choiceExpr{
									pos: position{line: 697, col: 30, offset: 21899},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 697, col: 30, offset: 21899},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 697, col: 53, offset: 21922},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 697, col: 74, offset: 21943},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 697, col: 74, offset: 21943,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 107, offset: 21976},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 701, col: 1, offset: 22055},
			expr: &actionExpr{
				pos: position{line: 701, col: 25, offset: 22079},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 701, col: 25, offset: 22079},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 701, col: 25, offset: 22079},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 33, offset: 22087},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 701, col: 38, offset: 22092},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 38, offset: 22092},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 701, col: 78, offset: 22132},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 705, col: 1, offset: 22205},
			expr: &actionExpr{
				pos: position{line: 705, col: 23, offset: 22227},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 705, col: 23, offset: 22227},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 705, col: 23, offset: 22227},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 705, col: 31, offset: 22235},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 705, col: 36, offset: 22240},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 705, col: 36, offset: 22240},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 705, col: 76, offset: 22280},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 724, col: 1, offset: 22825},
			expr: &choiceExpr{
				pos: position{line: 724, col: 24, offset: 22848},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 724, col: 24, offset: 22848},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 47, offset: 22871},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 59, offset: 22883},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 726, col: 1, offset: 22900},
			expr: &actionExpr{
				pos: position{line: 726, col: 26, offset: 22925},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 726, col: 26, offset: 22925},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 726, col: 26, offset: 22925},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 726, col: 32, offset: 22931},
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 32, offset: 22931},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 726, col: 39, offset: 22938},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 730, col: 1, offset: 23001},
			expr: &actionExpr{
				pos: position{line: 730, col: 20, offset: 23020},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 730, col: 20, offset: 23020},
					expr: &anyMatcher{
						line: 730, col: 21, offset: 23021,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 737, col: 1, offset: 23191},
			expr: &actionExpr{
				pos: position{line: 738, col: 5, offset: 23214},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 738, col: 5, offset: 23214},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 738, col: 15, offset: 23224},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 738, col: 15, offset: 23224},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 738, col: 15, offset: 23224},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 24, offset: 23233},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 740, col: 9, offset: 23325},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 740, col: 9, offset: 23325},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 740, col: 9, offset: 23325},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 740, col: 18, offset: 23334},
												expr: &ruleRefExpr{
													pos:  position{line: 740, col: 19, offset: 23335},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 740, col: 35, offset: 23351},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 756, col: 1, offset: 23668},
			expr: &actionExpr{
				pos: position{line: 757, col: 5, offset: 23691},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 757, col: 5, offset: 23691},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 757, col: 14, offset: 23700},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 757, col: 14, offset: 23700},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 758, col: 11, offset: 23761},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 759, col: 11, offset: 23806},
								expr: &ruleRefExpr{
									pos:  position{line: 759, col: 11, offset: 23806},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 760, col: 11, offset: 23824},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 760, col: 11, offset: 23824},
										expr: &ruleRefExpr{
											pos:  position{line: 760, col: 12, offset: 23825},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 761, col: 13, offset: 23843},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 761, col: 13, offset: 23843},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 762, col: 15, offset: 23874},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 763, col: 15, offset: 23894},
												name: "InlineAttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 764, col: 15, offset: 23937},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 765, col: 15, offset: 23963},
												name: "Macro",
											},
											&ruleRefExpr{
												pos:  position{line: 766, col: 15, offset: 23983},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 767, col: 15, offset: 24013},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 769, col: 15, offset: 24113},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 801, col: 1, offset: 25135},
			expr: &actionExpr{
				pos: position{line: 801, col: 20, offset: 25154},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 801, col: 20, offset: 25154},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 801, col: 20, offset: 25154},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 801, col: 25, offset: 25159},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 29, offset: 25163},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 801, col: 33, offset: 25167},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 801, col: 38, offset: 25172},
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 38, offset: 25172},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 808, col: 1, offset: 25420},
			expr: &actionExpr{
				pos: position{line: 810, col: 5, offset: 25502},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 810, col: 5, offset: 25502},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 810, col: 5, offset: 25502},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 813, col: 5, offset: 25562},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 814, col: 9, offset: 25580},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 814, col: 9, offset: 25580},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 815, col: 11, offset: 25601},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 816, col: 11, offset: 25624},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 817, col: 11, offset: 25640},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 818, col: 11, offset: 25669},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 819, col: 11, offset: 25695},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 820, col: 11, offset: 25721},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 821, col: 11, offset: 25748},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 822, col: 11, offset: 25774},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 823, col: 11, offset: 25803},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 829, col: 1, offset: 25965},
			expr: &actionExpr{
				pos: position{line: 829, col: 14, offset: 25978},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 829, col: 14, offset: 25978},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 829, col: 14, offset: 25978},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 829, col: 19, offset: 25983},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 829, col: 25, offset: 25989},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 829, col: 43, offset: 26007},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 833, col: 1, offset: 26072},
			expr: &actionExpr{
				pos: position{line: 833, col: 21, offset: 26092},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 833, col: 21, offset: 26092},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 833, col: 30, offset: 26101},
						expr: &choiceExpr{
							pos: position{line: 833, col: 31, offset: 26102},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 833, col: 31, offset: 26102},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 833, col: 38, offset: 26109},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 833, col: 53, offset: 26124},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 833, col: 66, offset: 26137},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 833, col: 74, offset: 26145},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 833, col: 93, offset: 26164},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 833, col: 114, offset: 26185},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 833, col: 115, offset: 26186},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 833, col: 115, offset: 26186},
												expr: &litMatcher{
													pos:        position{line: 833, col: 116, offset: 26187},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 833, col: 121, offset: 26192,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 839, col: 1, offset: 26298},
			expr: &actionExpr{
				pos: position{line: 839, col: 23, offset: 26320},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 839, col: 23, offset: 26320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 839, col: 23, offset: 26320},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 839, col: 29, offset: 26326},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 36, offset: 26333},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 840, col: 5, offset: 26365},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 840, col: 11, offset: 26371},
								expr: &actionExpr{
									pos: position{line: 840, col: 12, offset: 26372},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 840, col: 12, offset: 26372},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 840, col: 12, offset: 26372},
												expr: &ruleRefExpr{
													pos:  position{line: 840, col: 12, offset: 26372},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 840, col: 19, offset: 26379},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 840, col: 23, offset: 26383},
												expr: &ruleRefExpr{
													pos:  position{line: 840, col: 23, offset: 26383},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 840, col: 30, offset: 26390},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 840, col: 39, offset: 26399},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 841, col: 5, offset: 26457},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 841, col: 11, offset: 26463},
								expr: &actionExpr{
									pos: position{line: 841, col: 12, offset: 26464},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 841, col: 12, offset: 26464},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 841, col: 12, offset: 26464},
												expr: &ruleRefExpr{
													pos:  position{line: 841, col: 12, offset: 26464},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 841, col: 19, offset: 26471},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 841, col: 23, offset: 26475},
												expr: &ruleRefExpr{
													pos:  position{line: 841, col: 23, offset: 26475},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 841, col: 30, offset: 26482},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 841, col: 39, offset: 26491},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 842, col: 5, offset: 26549},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 846, col: 1, offset: 26628},
			expr: &actionExpr{
				pos: position{line: 846, col: 30, offset: 26657},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 846, col: 30, offset: 26657},
					expr: &choiceExpr{
						pos: position{line: 846, col: 31, offset: 26658},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 846, col: 31, offset: 26658},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 846, col: 42, offset: 26669},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 853, col: 1, offset: 26815},
			expr: &actionExpr{
				pos: position{line: 854, col: 5, offset: 26834},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 854, col: 5, offset: 26834},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 854, col: 5, offset: 26834},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 858, col: 5, offset: 26986},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 858, col: 15, offset: 26996},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 21, offset: 27002},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 858, col: 31, offset: 27012},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 49, offset: 27030},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 858, col: 67, offset: 27048},
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 67, offset: 27048},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 74, offset: 27055},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 863, col: 1, offset: 27301},
			expr: &actionExpr{
				pos: position{line: 863, col: 16, offset: 27316},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 863, col: 16, offset: 27316},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 863, col: 16, offset: 27316},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 863, col: 25, offset: 27325},
							expr: &litMatcher{
								pos:        position{line: 863, col: 26, offset: 27326},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 863, col: 30, offset: 27330},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 36, offset: 27336},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 863, col: 46, offset: 27346},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 64, offset: 27364},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 870, col: 1, offset: 27707},
			expr: &actionExpr{
				pos: position{line: 870, col: 15, offset: 27721},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 870, col: 15, offset: 27721},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 870, col: 15, offset: 27721},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 870, col: 23, offset: 27729},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 870, col: 29, offset: 27735},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 870, col: 29, offset: 27735},
									expr: &charClassMatcher{
										pos:        position{line: 870, col: 29, offset: 27735},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 870, col: 73, offset: 27779},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 85, offset: 27791},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 877, col: 1, offset: 28071},
			expr: &choiceExpr{
				pos: position{line: 877, col: 19, offset: 28089},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 19, offset: 28089},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 877, col: 19, offset: 28089},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 877, col: 19, offset: 28089},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 877, col: 32, offset: 28102},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 41, offset: 28111},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 877, col: 58, offset: 28128},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 879, col: 9, offset: 28204},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 879, col: 9, offset: 28204},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 879, col: 9, offset: 28204},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 879, col: 21, offset: 28216},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 879, col: 26, offset: 28221},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 879, col: 39, offset: 28234},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 879, col: 43, offset: 28238},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 879, col: 51, offset: 28246},
										expr: &ruleRefExpr{
											pos:  position{line: 879, col: 52, offset: 28247},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 879, col: 70, offset: 28265},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 883, col: 1, offset: 28334},
			expr: &ruleRefExpr{
				pos:  position{line: 883, col: 16, offset: 28349},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 885, col: 1, offset: 28360},
			expr: &actionExpr{
				pos: position{line: 885, col: 20, offset: 28379},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 885, col: 20, offset: 28379},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 885, col: 29, offset: 28388},
						expr: &seqExpr{
							pos: position{line: 885, col: 30, offset: 28389},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 885, col: 30, offset: 28389},
									expr: &litMatcher{
										pos:        position{line: 885, col: 31, offset: 28390},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 885, col: 35, offset: 28394},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 893, col: 1, offset: 28637},
			expr: &litMatcher{
				pos:        position{line: 893, col: 32, offset: 28668},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 895, col: 1, offset: 28673},
			expr: &actionExpr{
				pos: position{line: 895, col: 26, offset: 28698},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 895, col: 26, offset: 28698},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 895, col: 26, offset: 28698},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 895, col: 54, offset: 28726},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 63, offset: 28735},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 895, col: 93, offset: 28765},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 895, col: 121, offset: 28793},
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 122, offset: 28794},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 899, col: 1, offset: 28907},
			expr: &choiceExpr{
				pos: position{line: 899, col: 33, offset: 28939},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 899, col: 34, offset: 28940},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 899, col: 34, offset: 28940},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 899, col: 35, offset: 28941},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 899, col: 35, offset: 28941},
											expr: &ruleRefExpr{
												pos:  position{line: 899, col: 36, offset: 28942},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 899, col: 64, offset: 28970},
											expr: &ruleRefExpr{
												pos:  position{line: 899, col: 65, offset: 28971},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 899, col: 71, offset: 28977},
											expr: &ruleRefExpr{
												pos:  position{line: 899, col: 72, offset: 28978},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 899, col: 80, offset: 28986,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 899, col: 83, offset: 28989},
									expr: &seqExpr{
										pos: position{line: 899, col: 84, offset: 28990},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 899, col: 84, offset: 28990},
												expr: &seqExpr{
													pos: position{line: 899, col: 86, offset: 28992},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 899, col: 86, offset: 28992},
															expr: &ruleRefExpr{
																pos:  position{line: 899, col: 86, offset: 28992},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 899, col: 93, offset: 28999},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 899, col: 122, offset: 29028},
												expr: &ruleRefExpr{
													pos:  position{line: 899, col: 123, offset: 29029},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 899, col: 151, offset: 29057},
												expr: &ruleRefExpr{
													pos:  position{line: 899, col: 152, offset: 29058},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 899, col: 160, offset: 29066,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 11, offset: 29216},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 901, col: 12, offset: 29217},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 901, col: 12, offset: 29217},
									expr: &ruleRefExpr{
										pos:  position{line: 901, col: 13, offset: 29218},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 901, col: 19, offset: 29224},
									expr: &ruleRefExpr{
										pos:  position{line: 901, col: 20, offset: 29225},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 901, col: 28, offset: 29233},
									expr: &ruleRefExpr{
										pos:  position{line: 901, col: 29, offset: 29234},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 901, col: 57, offset: 29262,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 905, col: 1, offset: 29352},
			expr: &litMatcher{
				pos:        position{line: 905, col: 32, offset: 29383},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 907, col: 1, offset: 29390},
			expr: &actionExpr{
				pos: position{line: 907, col: 26, offset: 29415},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 907, col: 26, offset: 29415},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 907, col: 26, offset: 29415},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 907, col: 54, offset: 29443},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 63, offset: 29452},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 93, offset: 29482},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 907, col: 121, offset: 29510},
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 122, offset: 29511},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 911, col: 1, offset: 29624},
			expr: &choiceExpr{
				pos: position{line: 911, col: 33, offset: 29656},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 911, col: 34, offset: 29657},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 911, col: 34, offset: 29657},
							expr: &seqExpr{
								pos: position{line: 911, col: 35, offset: 29658},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 911, col: 35, offset: 29658},
										expr: &ruleRefExpr{
											pos:  position{line: 911, col: 36, offset: 29659},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 911, col: 64, offset: 29687,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 913, col: 11, offset: 29860},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 913, col: 11, offset: 29860},
							expr: &seqExpr{
								pos: position{line: 913, col: 12, offset: 29861},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 913, col: 12, offset: 29861},
										expr: &ruleRefExpr{
											pos:  position{line: 913, col: 13, offset: 29862},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 913, col: 19, offset: 29868},
										expr: &ruleRefExpr{
											pos:  position{line: 913, col: 20, offset: 29869},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 913, col: 28, offset: 29877},
										expr: &ruleRefExpr{
											pos:  position{line: 913, col: 29, offset: 29878},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 913, col: 57, offset: 29906,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 917, col: 1, offset: 29997},
			expr: &choiceExpr{
				pos: position{line: 917, col: 21, offset: 30017},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 917, col: 21, offset: 30017},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 917, col: 21, offset: 30017},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 917, col: 21, offset: 30017},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 917, col: 30, offset: 30026},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 917, col: 38, offset: 30034},
										expr: &ruleRefExpr{
											pos:  position{line: 917, col: 39, offset: 30035},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 917, col: 67, offset: 30063},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 919, col: 9, offset: 30167},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 919, col: 9, offset: 30167},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 919, col: 9, offset: 30167},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 919, col: 19, offset: 30177},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 919, col: 27, offset: 30185},
										expr: &choiceExpr{
											pos: position{line: 919, col: 28, offset: 30186},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 919, col: 28, offset: 30186},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 919, col: 41, offset: 30199},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 69, offset: 30227},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 923, col: 1, offset: 30331},
			expr: &actionExpr{
				pos: position{line: 923, col: 30, offset: 30360},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 923, col: 30, offset: 30360},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 930, col: 1, offset: 30530},
			expr: &choiceExpr{
				pos: position{line: 930, col: 9, offset: 30538},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 930, col: 9, offset: 30538},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 930, col: 24, offset: 30553},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 933, col: 1, offset: 30634},
			expr: &actionExpr{
				pos: position{line: 933, col: 17, offset: 30650},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 933, col: 17, offset: 30650},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 933, col: 17, offset: 30650},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 933, col: 25, offset: 30658},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 933, col: 30, offset: 30663},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 933, col: 40, offset: 30673},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 933, col: 58, offset: 30691},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 937, col: 1, offset: 30812},
			expr: &actionExpr{
				pos: position{line: 937, col: 17, offset: 30828},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 937, col: 17, offset: 30828},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 937, col: 17, offset: 30828},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 22, offset: 30833},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 937, col: 42, offset: 30853},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 937, col: 59, offset: 30870},
								expr: &ruleRefExpr{
									pos:  position{line: 937, col: 60, offset: 30871},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 945, col: 1, offset: 31212},
			expr: &choiceExpr{
				pos: position{line: 946, col: 5, offset: 31231},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 9, offset: 31241},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 947, col: 9, offset: 31241},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 947, col: 9, offset: 31241},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 947, col: 20, offset: 31252},
										expr: &ruleRefExpr{
											pos:  position{line: 947, col: 21, offset: 31253},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 948, col: 9, offset: 31283},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 948, col: 15, offset: 31289},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 948, col: 15, offset: 31289},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 948, col: 41, offset: 31315},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 7, offset: 31433},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 954, col: 1, offset: 31452},
			expr: &choiceExpr{
				pos: position{line: 954, col: 32, offset: 31483},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 954, col: 32, offset: 31483},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 954, col: 32, offset: 31483},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 954, col: 36, offset: 31487},
								expr: &litMatcher{
									pos:        position{line: 954, col: 37, offset: 31488},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 954, col: 43, offset: 31494},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 954, col: 43, offset: 31494},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 954, col: 47, offset: 31498},
								expr: &litMatcher{
									pos:        position{line: 954, col: 48, offset: 31499},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 954, col: 54, offset: 31505},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 954, col: 54, offset: 31505},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 954, col: 58, offset: 31509},
								expr: &litMatcher{
									pos:        position{line: 954, col: 59, offset: 31510},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 954, col: 65, offset: 31516},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 954, col: 65, offset: 31516},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 954, col: 69, offset: 31520},
								expr: &litMatcher{
									pos:        position{line: 954, col: 70, offset: 31521},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 956, col: 1, offset: 31526},
			expr: &choiceExpr{
				pos: position{line: 956, col: 34, offset: 31559},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 956, col: 34, offset: 31559},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 956, col: 41, offset: 31566},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 956, col: 48, offset: 31573},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 956, col: 55, offset: 31580},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 956, col: 62, offset: 31587},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 956, col: 68, offset: 31593},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 958, col: 1, offset: 31598},
			expr: &choiceExpr{
				pos: position{line: 959, col: 5, offset: 31628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 959, col: 5, offset: 31628},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 7, offset: 31655},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 961, col: 7, offset: 31683},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 962, col: 7, offset: 31711},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 963, col: 7, offset: 31743},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 964, col: 7, offset: 31764},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 966, col: 1, offset: 31782},
			expr: &choiceExpr{
				pos: position{line: 967, col: 5, offset: 31814},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 967, col: 5, offset: 31814},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 7, offset: 31840},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 7, offset: 31868},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 7, offset: 31896},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 972, col: 1, offset: 31922},
			expr: &choiceExpr{
				pos: position{line: 973, col: 5, offset: 31948},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 973, col: 5, offset: 31948},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 974, col: 7, offset: 31971},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 7, offset: 31995},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 976, col: 7, offset: 32019},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 7, offset: 32047},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 978, col: 7, offset: 32075},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 980, col: 1, offset: 32099},
			expr: &choiceExpr{
				pos: position{line: 980, col: 33, offset: 32131},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 980, col: 33, offset: 32131},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 980, col: 39, offset: 32137},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 980, col: 39, offset: 32137},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 984, col: 1, offset: 32279},
			expr: &actionExpr{
				pos: position{line: 984, col: 25, offset: 32303},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 984, col: 25, offset: 32303},
					expr: &litMatcher{
						pos:        position{line: 984, col: 25, offset: 32303},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 988, col: 1, offset: 32352},
			expr: &actionExpr{
				pos: position{line: 988, col: 25, offset: 32376},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 988, col: 25, offset: 32376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 988, col: 25, offset: 32376},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 988, col: 30, offset: 32381},
							expr: &litMatcher{
								pos:        position{line: 988, col: 30, offset: 32381},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 995, col: 1, offset: 32492},
			expr: &choiceExpr{
				pos: position{line: 995, col: 13, offset: 32504},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 995, col: 13, offset: 32504},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 35, offset: 32526},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 997, col: 1, offset: 32593},
			expr: &actionExpr{
				pos: position{line: 997, col: 24, offset: 32616},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 997, col: 24, offset: 32616},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 997, col: 24, offset: 32616},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 997, col: 29, offset: 32621},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 997, col: 39, offset: 32631},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 997, col: 68, offset: 32660},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1001, col: 1, offset: 32759},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1001, col: 32, offset: 32790},
				expr: &ruleRefExpr{
					pos:  position{line: 1001, col: 32, offset: 32790},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1003, col: 1, offset: 32821},
			expr: &actionExpr{
				pos: position{line: 1003, col: 31, offset: 32851},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1003, col: 31, offset: 32851},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1003, col: 31, offset: 32851},
							expr: &litMatcher{
								pos:        position{line: 1003, col: 33, offset: 32853},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1003, col: 39, offset: 32859},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1003, col: 48, offset: 32868},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1003, col: 48, offset: 32868},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1004, col: 7, offset: 32879},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1005, col: 7, offset: 32924},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1005, col: 7, offset: 32924},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1005, col: 15, offset: 32932},
												expr: &ruleRefExpr{
													pos:  position{line: 1005, col: 16, offset: 32933},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1006, col: 7, offset: 32947},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1007, col: 7, offset: 32965},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1008, col: 7, offset: 32984},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1009, col: 7, offset: 33022},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1010, col: 7, offset: 33047},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1014, col: 1, offset: 33122},
			expr: &actionExpr{
				pos: position{line: 1015, col: 5, offset: 33162},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1015, col: 5, offset: 33162},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1015, col: 5, offset: 33162},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1015, col: 16, offset: 33173},
								expr: &ruleRefExpr{
									pos:  position{line: 1015, col: 17, offset: 33174},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1016, col: 5, offset: 33200},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1016, col: 11, offset: 33206},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1016, col: 11, offset: 33206},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1017, col: 11, offset: 33236},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1018, col: 11, offset: 33257},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1019, col: 11, offset: 33278},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1020, col: 11, offset: 33302},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1021, col: 11, offset: 33326},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1025, col: 1, offset: 33426},
			expr: &choiceExpr{
				pos: position{line: 1026, col: 5, offset: 33470},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1026, col: 5, offset: 33470},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1027, col: 7, offset: 33567},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1027, col: 7, offset: 33567},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1027, col: 7, offset: 33567},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1027, col: 12, offset: 33572},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1031, col: 1, offset: 33743},
			expr: &choiceExpr{
				pos: position{line: 1032, col: 5, offset: 33771},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1032, col: 5, offset: 33771},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1032, col: 5, offset: 33771},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1032, col: 6, offset: 33772},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1032, col: 6, offset: 33772},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1032, col: 10, offset: 33776},
											expr: &litMatcher{
												pos:        position{line: 1032, col: 11, offset: 33777},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1032, col: 16, offset: 33782},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1032, col: 26, offset: 33792},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1032, col: 55, offset: 33821},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1032, col: 59, offset: 33825},
									expr: &notExpr{
										pos: position{line: 1032, col: 61, offset: 33827},
										expr: &ruleRefExpr{
											pos:  position{line: 1032, col: 62, offset: 33828},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1034, col: 9, offset: 34034},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1034, col: 9, offset: 34034},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1034, col: 9, offset: 34034},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1034, col: 13, offset: 34038},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1034, col: 23, offset: 34048},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1034, col: 23, offset: 34048},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1034, col: 27, offset: 34052},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1034, col: 56, offset: 34081},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1038, col: 1, offset: 34299},
			expr: &seqExpr{
				pos: position{line: 1038, col: 32, offset: 34330},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1038, col: 32, offset: 34330},
						expr: &ruleRefExpr{
							pos:  position{line: 1038, col: 33, offset: 34331},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1038, col: 39, offset: 34337},
						expr: &ruleRefExpr{
							pos:  position{line: 1038, col: 39, offset: 34337},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1040, col: 1, offset: 34366},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 34401},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1041, col: 5, offset: 34401},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1042, col: 7, offset: 34412},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1042, col: 7, offset: 34412},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1042, col: 15, offset: 34420},
								expr: &ruleRefExpr{
									pos:  position{line: 1042, col: 16, offset: 34421},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 7, offset: 34435},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 7, offset: 34453},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1045, col: 7, offset: 34472},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1045, col: 7, offset: 34472},
								expr: &ruleRefExpr{
									pos:  position{line: 1045, col: 7, offset: 34472},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1045, col: 14, offset: 34479},
								expr: &seqExpr{
									pos: position{line: 1045, col: 15, offset: 34480},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1045, col: 15, offset: 34480},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1045, col: 19, offset: 34484},
											expr: &litMatcher{
												pos:        position{line: 1045, col: 20, offset: 34485},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 7, offset: 34497},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 7, offset: 34535},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 7, offset: 34560},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1050, col: 1, offset: 34598},
			expr: &actionExpr{
				pos: position{line: 1051, col: 5, offset: 34638},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1051, col: 5, offset: 34638},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1051, col: 5, offset: 34638},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1051, col: 16, offset: 34649},
								expr: &ruleRefExpr{
									pos:  position{line: 1051, col: 17, offset: 34650},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1052, col: 5, offset: 34676},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1052, col: 11, offset: 34682},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1052, col: 11, offset: 34682},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1053, col: 11, offset: 34712},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1054, col: 11, offset: 34733},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1055, col: 11, offset: 34754},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1056, col: 11, offset: 34778},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1057, col: 11, offset: 34802},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1060, col: 1, offset: 34901},
			expr: &choiceExpr{
				pos: position{line: 1061, col: 5, offset: 34945},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1061, col: 5, offset: 34945},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1062, col: 7, offset: 35042},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1062, col: 7, offset: 35042},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1062, col: 7, offset: 35042},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 11, offset: 35046},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1066, col: 1, offset: 35217},
			expr: &choiceExpr{
				pos: position{line: 1067, col: 5, offset: 35241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 35241},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1067, col: 5, offset: 35241},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1067, col: 5, offset: 35241},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1067, col: 18, offset: 35254},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1067, col: 40, offset: 35276},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1067, col: 45, offset: 35281},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1067, col: 55, offset: 35291},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1067, col: 84, offset: 35320},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1069, col: 9, offset: 35477},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1069, col: 9, offset: 35477},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1069, col: 9, offset: 35477},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1069, col: 22, offset: 35490},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1069, col: 44, offset: 35512},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1069, col: 49, offset: 35517},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1069, col: 59, offset: 35527},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1069, col: 88, offset: 35556},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1072, col: 9, offset: 35756},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1072, col: 9, offset: 35756},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1072, col: 9, offset: 35756},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1072, col: 22, offset: 35769},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1072, col: 44, offset: 35791},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1072, col: 48, offset: 35795},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1072, col: 58, offset: 35805},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1072, col: 87, offset: 35834},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1079, col: 1, offset: 36055},
			expr: &choiceExpr{
				pos: position{line: 1079, col: 15, offset: 36069},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1079, col: 15, offset: 36069},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 39, offset: 36093},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1081, col: 1, offset: 36116},
			expr: &actionExpr{
				pos: position{line: 1081, col: 26, offset: 36141},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 26, offset: 36141},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1081, col: 26, offset: 36141},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 31, offset: 36146},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 41, offset: 36156},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1081, col: 72, offset: 36187},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1085, col: 1, offset: 36333},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1085, col: 34, offset: 36366},
				expr: &ruleRefExpr{
					pos:  position{line: 1085, col: 34, offset: 36366},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1087, col: 1, offset: 36398},
			expr: &actionExpr{
				pos: position{line: 1088, col: 5, offset: 36435},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1088, col: 5, offset: 36435},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1088, col: 5, offset: 36435},
							expr: &litMatcher{
								pos:        position{line: 1088, col: 7, offset: 36437},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1088, col: 13, offset: 36443},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1088, col: 22, offset: 36452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1088, col: 22, offset: 36452},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1089, col: 7, offset: 36463},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1090, col: 7, offset: 36508},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1090, col: 7, offset: 36508},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1090, col: 15, offset: 36516},
												expr: &ruleRefExpr{
													pos:  position{line: 1090, col: 16, offset: 36517},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1091, col: 7, offset: 36531},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1092, col: 7, offset: 36549},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1093, col: 7, offset: 36568},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1094, col: 7, offset: 36608},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1095, col: 7, offset: 36633},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1099, col: 1, offset: 36710},
			expr: &actionExpr{
				pos: position{line: 1100, col: 5, offset: 36752},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 5, offset: 36752},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1100, col: 5, offset: 36752},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1100, col: 16, offset: 36763},
								expr: &ruleRefExpr{
									pos:  position{line: 1100, col: 17, offset: 36764},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1101, col: 5, offset: 36790},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1101, col: 11, offset: 36796},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1101, col: 11, offset: 36796},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 11, offset: 36828},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 36847},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1104, col: 11, offset: 36868},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1105, col: 11, offset: 36892},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1106, col: 11, offset: 36916},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1110, col: 1, offset: 37016},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 5, offset: 37062},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1111, col: 5, offset: 37062},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1112, col: 7, offset: 37161},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1112, col: 7, offset: 37161},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 7, offset: 37161},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 12, offset: 37166},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1116, col: 1, offset: 37339},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 5, offset: 37369},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1117, col: 5, offset: 37369},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1117, col: 5, offset: 37369},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1117, col: 6, offset: 37370},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1117, col: 6, offset: 37370},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1117, col: 10, offset: 37374},
											expr: &litMatcher{
												pos:        position{line: 1117, col: 11, offset: 37375},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1117, col: 16, offset: 37380},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 26, offset: 37390},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1117, col: 57, offset: 37421},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1119, col: 9, offset: 37623},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1119, col: 9, offset: 37623},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1119, col: 9, offset: 37623},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1119, col: 13, offset: 37627},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1119, col: 23, offset: 37637},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1119, col: 23, offset: 37637},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1119, col: 27, offset: 37641},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1119, col: 58, offset: 37672},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1123, col: 1, offset: 37894},
			expr: &seqExpr{
				pos: position{line: 1123, col: 34, offset: 37927},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1123, col: 34, offset: 37927},
						expr: &ruleRefExpr{
							pos:  position{line: 1123, col: 35, offset: 37928},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1123, col: 41, offset: 37934},
						expr: &ruleRefExpr{
							pos:  position{line: 1123, col: 41, offset: 37934},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1125, col: 1, offset: 37965},
			expr: &choiceExpr{
				pos: position{line: 1126, col: 5, offset: 38002},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1126, col: 5, offset: 38002},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1127, col: 7, offset: 38013},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1127, col: 7, offset: 38013},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1127, col: 15, offset: 38021},
								expr: &ruleRefExpr{
									pos:  position{line: 1127, col: 16, offset: 38022},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 7, offset: 38036},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 7, offset: 38054},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1130, col: 7, offset: 38073},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1130, col: 7, offset: 38073},
								expr: &ruleRefExpr{
									pos:  position{line: 1130, col: 7, offset: 38073},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1130, col: 14, offset: 38080},
								expr: &seqExpr{
									pos: position{line: 1130, col: 15, offset: 38081},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1130, col: 15, offset: 38081},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1130, col: 19, offset: 38085},
											expr: &litMatcher{
												pos:        position{line: 1130, col: 20, offset: 38086},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 7, offset: 38098},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 7, offset: 38138},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 7, offset: 38163},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1135, col: 1, offset: 38203},
			expr: &actionExpr{
				pos: position{line: 1136, col: 5, offset: 38244},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1136, col: 5, offset: 38244},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1136, col: 5, offset: 38244},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1136, col: 16, offset: 38255},
								expr: &ruleRefExpr{
									pos:  position{line: 1136, col: 17, offset: 38256},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1137, col: 5, offset: 38282},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1137, col: 11, offset: 38288},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1137, col: 11, offset: 38288},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1138, col: 11, offset: 38307},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1139, col: 11, offset: 38339},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1140, col: 11, offset: 38360},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1141, col: 11, offset: 38384},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1142, col: 11, offset: 38408},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1146, col: 1, offset: 38508},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 5, offset: 38554},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1147, col: 5, offset: 38554},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1148, col: 7, offset: 38653},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1148, col: 7, offset: 38653},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1148, col: 7, offset: 38653},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1148, col: 11, offset: 38657},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1152, col: 1, offset: 38831},
			expr: &choiceExpr{
				pos: position{line: 1153, col: 5, offset: 38857},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1153, col: 5, offset: 38857},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1153, col: 5, offset: 38857},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1153, col: 5, offset: 38857},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1153, col: 18, offset: 38870},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1153, col: 40, offset: 38892},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1153, col: 45, offset: 38897},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1153, col: 55, offset: 38907},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1153, col: 86, offset: 38938},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1155, col: 9, offset: 39095},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1155, col: 9, offset: 39095},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1155, col: 9, offset: 39095},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1155, col: 22, offset: 39108},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1155, col: 44, offset: 39130},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 49, offset: 39135},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1155, col: 59, offset: 39145},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1155, col: 90, offset: 39176},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1158, col: 9, offset: 39376},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1158, col: 9, offset: 39376},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1158, col: 9, offset: 39376},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1158, col: 22, offset: 39389},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1158, col: 44, offset: 39411},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1158, col: 48, offset: 39415},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1158, col: 58, offset: 39425},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1158, col: 89, offset: 39456},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1165, col: 1, offset: 39683},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 18, offset: 39700},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1165, col: 18, offset: 39700},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 45, offset: 39727},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1167, col: 1, offset: 39753},
			expr: &actionExpr{
				pos: position{line: 1167, col: 29, offset: 39781},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 29, offset: 39781},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1167, col: 29, offset: 39781},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 34, offset: 39786},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1167, col: 44, offset: 39796},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1167, col: 78, offset: 39830},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1171, col: 1, offset: 39979},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1171, col: 37, offset: 40015},
				expr: &ruleRefExpr{
					pos:  position{line: 1171, col: 37, offset: 40015},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1173, col: 1, offset: 40082},
			expr: &actionExpr{
				pos: position{line: 1174, col: 5, offset: 40122},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1174, col: 5, offset: 40122},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1174, col: 5, offset: 40122},
							expr: &litMatcher{
								pos:        position{line: 1174, col: 7, offset: 40124},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1174, col: 13, offset: 40130},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1174, col: 22, offset: 40139},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1174, col: 22, offset: 40139},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1175, col: 7, offset: 40150},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1176, col: 7, offset: 40195},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1176, col: 7, offset: 40195},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1176, col: 15, offset: 40203},
												expr: &ruleRefExpr{
													pos:  position{line: 1176, col: 16, offset: 40204},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1177, col: 7, offset: 40218},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1178, col: 7, offset: 40236},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1179, col: 7, offset: 40255},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1180, col: 7, offset: 40318},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1181, col: 7, offset: 40361},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1182, col: 7, offset: 40386},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1186, col: 1, offset: 40466},
			expr: &actionExpr{
				pos: position{line: 1187, col: 5, offset: 40510},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 5, offset: 40510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1187, col: 5, offset: 40510},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1187, col: 16, offset: 40521},
								expr: &ruleRefExpr{
									pos:  position{line: 1187, col: 17, offset: 40522},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1188, col: 5, offset: 40548},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1188, col: 11, offset: 40554},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1188, col: 11, offset: 40554},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1189, col: 11, offset: 40589},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 11, offset: 40608},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1191, col: 11, offset: 40629},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 11, offset: 40650},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1193, col: 11, offset: 40674},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1197, col: 1, offset: 40775},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 5, offset: 40824},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1198, col: 5, offset: 40824},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1199, col: 7, offset: 40926},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1199, col: 7, offset: 40926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1199, col: 7, offset: 40926},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1199, col: 12, offset: 40931},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1203, col: 1, offset: 41109},
			expr: &choiceExpr{
				pos: position{line: 1204, col: 5, offset: 41142},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1204, col: 5, offset: 41142},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1204, col: 5, offset: 41142},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1204, col: 6, offset: 41143},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1204, col: 6, offset: 41143},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1204, col: 10, offset: 41147},
											expr: &litMatcher{
												pos:        position{line: 1204, col: 11, offset: 41148},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1204, col: 16, offset: 41153},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1204, col: 26, offset: 41163},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1204, col: 60, offset: 41197},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1206, col: 9, offset: 41402},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1206, col: 9, offset: 41402},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1206, col: 9, offset: 41402},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1206, col: 13, offset: 41406},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1206, col: 23, offset: 41416},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1206, col: 23, offset: 41416},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1206, col: 27, offset: 41420},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1206, col: 61, offset: 41454},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1210, col: 1, offset: 41680},
			expr: &seqExpr{
				pos: position{line: 1210, col: 37, offset: 41716},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1210, col: 37, offset: 41716},
						expr: &ruleRefExpr{
							pos:  position{line: 1210, col: 38, offset: 41717},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1210, col: 44, offset: 41723},
						expr: &ruleRefExpr{
							pos:  position{line: 1210, col: 44, offset: 41723},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1212, col: 1, offset: 41757},
			expr: &choiceExpr{
				pos: position{line: 1213, col: 5, offset: 41798},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1213, col: 5, offset: 41798},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1214, col: 7, offset: 41809},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1214, col: 7, offset: 41809},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1214, col: 15, offset: 41817},
								expr: &ruleRefExpr{
									pos:  position{line: 1214, col: 16, offset: 41818},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 7, offset: 41832},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 7, offset: 41850},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1217, col: 7, offset: 41869},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1217, col: 7, offset: 41869},
								expr: &ruleRefExpr{
									pos:  position{line: 1217, col: 7, offset: 41869},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1217, col: 14, offset: 41876},
								expr: &seqExpr{
									pos: position{line: 1217, col: 15, offset: 41877},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1217, col: 15, offset: 41877},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1217, col: 19, offset: 41881},
											expr: &litMatcher{
												pos:        position{line: 1217, col: 20, offset: 41882},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 7, offset: 42006},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 7, offset: 42049},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 7, offset: 42069},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 7, offset: 42094},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1223, col: 1, offset: 42137},
			expr: &actionExpr{
				pos: position{line: 1224, col: 5, offset: 42181},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1224, col: 5, offset: 42181},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1224, col: 5, offset: 42181},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1224, col: 16, offset: 42192},
								expr: &ruleRefExpr{
									pos:  position{line: 1224, col: 17, offset: 42193},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1225, col: 5, offset: 42219},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1225, col: 11, offset: 42225},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1225, col: 11, offset: 42225},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1226, col: 11, offset: 42260},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1227, col: 11, offset: 42279},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1228, col: 11, offset: 42300},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1229, col: 11, offset: 42321},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1230, col: 11, offset: 42345},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1234, col: 1, offset: 42446},
			expr: &actionExpr{
				pos: position{line: 1235, col: 5, offset: 42495},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1235, col: 6, offset: 42496},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1235, col: 6, offset: 42496},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1236, col: 7, offset: 42600},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1236, col: 7, offset: 42600},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1236, col: 11, offset: 42604},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1240, col: 1, offset: 42782},
			expr: &choiceExpr{
				pos: position{line: 1241, col: 5, offset: 42811},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1241, col: 5, offset: 42811},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1241, col: 5, offset: 42811},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1241, col: 5, offset: 42811},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1241, col: 18, offset: 42824},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 40, offset: 42846},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1241, col: 45, offset: 42851},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1241, col: 55, offset: 42861},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 89, offset: 42895},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1243, col: 9, offset: 43052},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1243, col: 9, offset: 43052},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1243, col: 9, offset: 43052},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1243, col: 22, offset: 43065},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1243, col: 44, offset: 43087},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 49, offset: 43092},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1243, col: 59, offset: 43102},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1243, col: 93, offset: 43136},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1246, col: 9, offset: 43336},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1246, col: 9, offset: 43336},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1246, col: 9, offset: 43336},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1246, col: 22, offset: 43349},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1246, col: 44, offset: 43371},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1246, col: 48, offset: 43375},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1246, col: 58, offset: 43385},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1246, col: 92, offset: 43419},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1253, col: 1, offset: 43640},
			expr: &choiceExpr{
				pos: position{line: 1253, col: 15, offset: 43654},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1253, col: 15, offset: 43654},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 39, offset: 43678},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1255, col: 1, offset: 43701},
			expr: &actionExpr{
				pos: position{line: 1255, col: 26, offset: 43726},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1255, col: 26, offset: 43726},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1255, col: 26, offset: 43726},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1255, col: 31, offset: 43731},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1255, col: 41, offset: 43741},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1255, col: 72, offset: 43772},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1259, col: 1, offset: 43918},
			expr: &seqExpr{
				pos: position{line: 1259, col: 34, offset: 43951},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1259, col: 34, offset: 43951},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1259, col: 63, offset: 43980},
						expr: &seqExpr{
							pos: position{line: 1259, col: 64, offset: 43981},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1259, col: 64, offset: 43981},
									expr: &litMatcher{
										pos:        position{line: 1259, col: 66, offset: 43983},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1259, col: 73, offset: 43990},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1259, col: 73, offset: 43990},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1259, col: 81, offset: 43998},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1261, col: 1, offset: 44065},
			expr: &choiceExpr{
				pos: position{line: 1261, col: 33, offset: 44097},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1261, col: 33, offset: 44097},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1262, col: 7, offset: 44108},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1262, col: 7, offset: 44108},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1262, col: 15, offset: 44116},
								expr: &ruleRefExpr{
									pos:  position{line: 1262, col: 16, offset: 44117},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 7, offset: 44131},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 7, offset: 44149},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 7, offset: 44168},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 7, offset: 44199},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 7, offset: 44224},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1269, col: 1, offset: 44264},
			expr: &actionExpr{
				pos: position{line: 1270, col: 5, offset: 44296},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 5, offset: 44296},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1270, col: 5, offset: 44296},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1270, col: 16, offset: 44307},
								expr: &ruleRefExpr{
									pos:  position{line: 1270, col: 17, offset: 44308},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1271, col: 5, offset: 44334},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1271, col: 11, offset: 44340},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1271, col: 11, offset: 44340},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1272, col: 11, offset: 44359},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1273, col: 11, offset: 44380},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 11, offset: 44404},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1275, col: 11, offset: 44436},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1276, col: 11, offset: 44460},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1280, col: 1, offset: 44561},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 5, offset: 44607},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1281, col: 5, offset: 44607},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1282, col: 7, offset: 44706},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1282, col: 7, offset: 44706},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1282, col: 7, offset: 44706},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1282, col: 12, offset: 44711},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1286, col: 1, offset: 44884},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 26, offset: 44909},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1286, col: 26, offset: 44909},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1286, col: 26, offset: 44909},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1286, col: 27, offset: 44910},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1286, col: 27, offset: 44910},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1286, col: 31, offset: 44914},
											expr: &litMatcher{
												pos:        position{line: 1286, col: 32, offset: 44915},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1286, col: 37, offset: 44920},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1286, col: 47, offset: 44930},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1286, col: 78, offset: 44961},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1288, col: 9, offset: 45163},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1288, col: 9, offset: 45163},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1288, col: 9, offset: 45163},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1288, col: 13, offset: 45167},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1288, col: 23, offset: 45177},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1288, col: 23, offset: 45177},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1288, col: 27, offset: 45181},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1288, col: 58, offset: 45212},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1292, col: 1, offset: 45433},
			expr: &seqExpr{
				pos: position{line: 1292, col: 34, offset: 45466},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1292, col: 34, offset: 45466},
						expr: &ruleRefExpr{
							pos:  position{line: 1292, col: 35, offset: 45467},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1292, col: 41, offset: 45473},
						expr: &ruleRefExpr{
							pos:  position{line: 1292, col: 41, offset: 45473},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1294, col: 1, offset: 45504},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 33, offset: 45536},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 33, offset: 45536},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1295, col: 7, offset: 45547},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1295, col: 7, offset: 45547},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1295, col: 15, offset: 45555},
								expr: &ruleRefExpr{
									pos:  position{line: 1295, col: 16, offset: 45556},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 7, offset: 45570},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 7, offset: 45588},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1298, col: 7, offset: 45607},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1298, col: 7, offset: 45607},
								expr: &ruleRefExpr{
									pos:  position{line: 1298, col: 7, offset: 45607},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1298, col: 14, offset: 45614},
								expr: &seqExpr{
									pos: position{line: 1298, col: 15, offset: 45615},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1298, col: 15, offset: 45615},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1298, col: 19, offset: 45619},
											expr: &litMatcher{
												pos:        position{line: 1298, col: 20, offset: 45620},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 7, offset: 45632},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 7, offset: 45663},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 7, offset: 45688},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1303, col: 1, offset: 45728},
			expr: &actionExpr{
				pos: position{line: 1304, col: 5, offset: 45760},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 5, offset: 45760},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1304, col: 5, offset: 45760},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1304, col: 16, offset: 45771},
								expr: &ruleRefExpr{
									pos:  position{line: 1304, col: 17, offset: 45772},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1305, col: 5, offset: 45798},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1305, col: 11, offset: 45804},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1305, col: 11, offset: 45804},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1306, col: 11, offset: 45836},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1307, col: 11, offset: 45855},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1308, col: 11, offset: 45876},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 11, offset: 45900},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1310, col: 11, offset: 45924},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1313, col: 1, offset: 46024},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 5, offset: 46070},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1314, col: 5, offset: 46070},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1315, col: 7, offset: 46167},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1315, col: 7, offset: 46167},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1315, col: 7, offset: 46167},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1315, col: 11, offset: 46171},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1319, col: 1, offset: 46342},
			expr: &choiceExpr{
				pos: position{line: 1320, col: 5, offset: 46367},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 46367},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1320, col: 5, offset: 46367},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1320, col: 5, offset: 46367},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1320, col: 18, offset: 46380},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 40, offset: 46402},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 45, offset: 46407},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1320, col: 55, offset: 46417},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 86, offset: 46448},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1322, col: 9, offset: 46605},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1322, col: 9, offset: 46605},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1322, col: 9, offset: 46605},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1322, col: 22, offset: 46618},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1322, col: 44, offset: 46640},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1322, col: 49, offset: 46645},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1322, col: 59, offset: 46655},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1322, col: 90, offset: 46686},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1325, col: 9, offset: 46886},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1325, col: 9, offset: 46886},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1325, col: 9, offset: 46886},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1325, col: 22, offset: 46899},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1325, col: 44, offset: 46921},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1325, col: 48, offset: 46925},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1325, col: 58, offset: 46935},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1325, col: 89, offset: 46966},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1332, col: 1, offset: 47194},
			expr: &actionExpr{
				pos: position{line: 1332, col: 18, offset: 47211},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 18, offset: 47211},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1332, col: 18, offset: 47211},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 22, offset: 47215},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 31, offset: 47224},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1332, col: 53, offset: 47246},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1336, col: 1, offset: 47354},
			expr: &choiceExpr{
				pos: position{line: 1336, col: 25, offset: 47378},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1336, col: 25, offset: 47378},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 38, offset: 47391},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1338, col: 1, offset: 47410},
			expr: &actionExpr{
				pos: position{line: 1338, col: 21, offset: 47430},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1338, col: 21, offset: 47430},
					expr: &charClassMatcher{
						pos:        position{line: 1338, col: 21, offset: 47430},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1342, col: 1, offset: 47515},
			expr: &actionExpr{
				pos: position{line: 1342, col: 25, offset: 47539},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1342, col: 25, offset: 47539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1342, col: 25, offset: 47539},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1342, col: 38, offset: 47552},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1342, col: 60, offset: 47574},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1342, col: 64, offset: 47578},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1342, col: 73, offset: 47587},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1342, col: 95, offset: 47609},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1349, col: 1, offset: 47827},
			expr: &actionExpr{
				pos: position{line: 1349, col: 20, offset: 47846},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 20, offset: 47846},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1349, col: 20, offset: 47846},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 24, offset: 47850},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 33, offset: 47859},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1349, col: 57, offset: 47883},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1353, col: 1, offset: 47993},
			expr: &choiceExpr{
				pos: position{line: 1353, col: 27, offset: 48019},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1353, col: 27, offset: 48019},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 40, offset: 48032},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1355, col: 1, offset: 48053},
			expr: &actionExpr{
				pos: position{line: 1355, col: 23, offset: 48075},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1355, col: 23, offset: 48075},
					expr: &charClassMatcher{
						pos:        position{line: 1355, col: 23, offset: 48075},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1359, col: 1, offset: 48160},
			expr: &actionExpr{
				pos: position{line: 1359, col: 27, offset: 48186},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1359, col: 27, offset: 48186},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1359, col: 27, offset: 48186},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 40, offset: 48199},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1359, col: 62, offset: 48221},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 66, offset: 48225},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 75, offset: 48234},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1359, col: 99, offset: 48258},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1367, col: 1, offset: 48570},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 17, offset: 48586},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1367, col: 17, offset: 48586},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 38, offset: 48607},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1369, col: 1, offset: 48627},
			expr: &actionExpr{
				pos: position{line: 1369, col: 23, offset: 48649},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 23, offset: 48649},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1369, col: 23, offset: 48649},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1369, col: 46, offset: 48672},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1369, col: 55, offset: 48681},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1369, col: 82, offset: 48708},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1373, col: 1, offset: 48820},
			expr: &actionExpr{
				pos: position{line: 1373, col: 31, offset: 48850},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1373, col: 31, offset: 48850},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1373, col: 41, offset: 48860},
						expr: &ruleRefExpr{
							pos:  position{line: 1373, col: 41, offset: 48860},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1377, col: 1, offset: 48946},
			expr: &seqExpr{
				pos: position{line: 1377, col: 27, offset: 48972},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1377, col: 27, offset: 48972},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1377, col: 32, offset: 48977},
						expr: &charClassMatcher{
							pos:        position{line: 1377, col: 33, offset: 48978},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1379, col: 1, offset: 48989},
			expr: &litMatcher{
				pos:        position{line: 1379, col: 25, offset: 49013},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1382, col: 1, offset: 49101},
			expr: &actionExpr{
				pos: position{line: 1383, col: 5, offset: 49135},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1383, col: 5, offset: 49135},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1384, col: 9, offset: 49153},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1384, col: 9, offset: 49153},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1384, col: 9, offset: 49153},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1384, col: 19, offset: 49163},
										expr: &ruleRefExpr{
											pos:  position{line: 1384, col: 20, offset: 49164},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1385, col: 11, offset: 49220},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1385, col: 11, offset: 49220},
										expr: &ruleRefExpr{
											pos:  position{line: 1385, col: 11, offset: 49220},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1385, col: 18, offset: 49227},
										expr: &ruleRefExpr{
											pos:  position{line: 1385, col: 19, offset: 49228},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1386, col: 12, offset: 49260},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1386, col: 12, offset: 49260},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1386, col: 12, offset: 49260},
											expr: &litMatcher{
												pos:        position{line: 1386, col: 13, offset: 49261},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1386, col: 17, offset: 49265},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1386, col: 26, offset: 49274},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1387, col: 11, offset: 49346},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1388, col: 11, offset: 49387},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1389, col: 11, offset: 49416},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1394, col: 1, offset: 49495},
			expr: &actionExpr{
				pos: position{line: 1395, col: 5, offset: 49533},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1395, col: 5, offset: 49533},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1395, col: 5, offset: 49533},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1395, col: 16, offset: 49544},
								expr: &ruleRefExpr{
									pos:  position{line: 1395, col: 17, offset: 49545},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1396, col: 5, offset: 49571},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1396, col: 11, offset: 49577},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1396, col: 11, offset: 49577},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1397, col: 11, offset: 49596},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1398, col: 12, offset: 49618},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1398, col: 12, offset: 49618},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1398, col: 12, offset: 49618},
													expr: &litMatcher{
														pos:        position{line: 1398, col: 13, offset: 49619},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1398, col: 18, offset: 49624},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1398, col: 27, offset: 49633},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1399, col: 11, offset: 49682},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1400, col: 11, offset: 49706},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1401, col: 11, offset: 49732},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1405, col: 1, offset: 49828},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 41, offset: 49868},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1405, col: 41, offset: 49868},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1405, col: 55, offset: 49882},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1405, col: 55, offset: 49882},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1405, col: 55, offset: 49882},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1405, col: 59, offset: 49886},
									expr: &litMatcher{
										pos:        position{line: 1405, col: 60, offset: 49887},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1409, col: 1, offset: 49959},
			expr: &actionExpr{
				pos: position{line: 1409, col: 23, offset: 49981},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 23, offset: 49981},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1409, col: 23, offset: 49981},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 46, offset: 50004},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 55, offset: 50013},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1409, col: 82, offset: 50040},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1413, col: 1, offset: 50152},
			expr: &actionExpr{
				pos: position{line: 1413, col: 31, offset: 50182},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1413, col: 31, offset: 50182},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1413, col: 41, offset: 50192},
						expr: &ruleRefExpr{
							pos:  position{line: 1413, col: 41, offset: 50192},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1418, col: 1, offset: 50360},
			expr: &actionExpr{
				pos: position{line: 1418, col: 30, offset: 50389},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1418, col: 30, offset: 50389},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1419, col: 5, offset: 50403},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1419, col: 5, offset: 50403},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1419, col: 5, offset: 50403},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1419, col: 15, offset: 50413},
										expr: &ruleRefExpr{
											pos:  position{line: 1419, col: 16, offset: 50414},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1420, col: 7, offset: 50466},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1420, col: 7, offset: 50466},
										expr: &ruleRefExpr{
											pos:  position{line: 1420, col: 7, offset: 50466},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1420, col: 14, offset: 50473},
										expr: &ruleRefExpr{
											pos:  position{line: 1420, col: 15, offset: 50474},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1421, col: 7, offset: 50501},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1422, col: 7, offset: 50538},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1423, col: 7, offset: 50563},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1427, col: 1, offset: 50637},
			expr: &actionExpr{
				pos: position{line: 1428, col: 5, offset: 50675},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1428, col: 5, offset: 50675},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1428, col: 5, offset: 50675},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1428, col: 16, offset: 50686},
								expr: &ruleRefExpr{
									pos:  position{line: 1428, col: 17, offset: 50687},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1429, col: 5, offset: 50713},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1429, col: 11, offset: 50719},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1429, col: 11, offset: 50719},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1430, col: 11, offset: 50738},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1431, col: 12, offset: 50760},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1431, col: 12, offset: 50760},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1431, col: 12, offset: 50760},
													expr: &litMatcher{
														pos:        position{line: 1431, col: 13, offset: 50761},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1431, col: 19, offset: 50767},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1431, col: 28, offset: 50776},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1432, col: 11, offset: 50825},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1433, col: 11, offset: 50849},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1434, col: 11, offset: 50875},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1438, col: 1, offset: 50971},
			expr: &seqExpr{
				pos: position{line: 1438, col: 27, offset: 50997},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1438, col: 27, offset: 50997},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1438, col: 33, offset: 51003},
						expr: &charClassMatcher{
							pos:        position{line: 1438, col: 34, offset: 51004},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1440, col: 1, offset: 51015},
			expr: &litMatcher{
				pos:        position{line: 1440, col: 25, offset: 51039},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1442, col: 1, offset: 51046},
			expr: &actionExpr{
				pos: position{line: 1442, col: 41, offset: 51086},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1442, col: 42, offset: 51087},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1442, col: 42, offset: 51087},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1442, col: 56, offset: 51101},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1442, col: 56, offset: 51101},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1442, col: 60, offset: 51105},
									expr: &litMatcher{
										pos:        position{line: 1442, col: 61, offset: 51106},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1451, col: 1, offset: 51372},
			expr: &actionExpr{
				pos: position{line: 1452, col: 5, offset: 51388},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 5, offset: 51388},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1452, col: 5, offset: 51388},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1452, col: 12, offset: 51395},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1452, col: 12, offset: 51395},
									expr: &litMatcher{
										pos:        position{line: 1452, col: 13, offset: 51396},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1456, col: 5, offset: 51504},
							run: (*parser).callonSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 1460, col: 5, offset: 51656},
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 5, offset: 51656},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 12, offset: 51663},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 19, offset: 51670},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 41, offset: 51692},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1460, col: 45, offset: 51696},
								expr: &ruleRefExpr{
									pos:  position{line: 1460, col: 45, offset: 51696},
									name: "InlineElementID",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElements",
			pos:  position{line: 1464, col: 1, offset: 51819},
			expr: &actionExpr{
				pos: position{line: 1464, col: 25, offset: 51843},
				run: (*parser).callonSectionTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 1464, col: 25, offset: 51843},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1464, col: 34, offset: 51852},
						expr: &seqExpr{
							pos: position{line: 1464, col: 35, offset: 51853},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1464, col: 35, offset: 51853},
									expr: &ruleRefExpr{
										pos:  position{line: 1464, col: 36, offset: 51854},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1464, col: 44, offset: 51862},
									expr: &ruleRefExpr{
										pos:  position{line: 1464, col: 45, offset: 51863},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1464, col: 61, offset: 51879},
									name: "SectionTitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElement",
			pos:  position{line: 1468, col: 1, offset: 52015},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 5, offset: 52044},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1469, col: 5, offset: 52044},
						name: "InlineWord",
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 7, offset: 52101},
						name: "LineBreak",
					},
					&oneOrMoreExpr{
						pos: position{line: 1471, col: 7, offset: 52142},
						expr: &ruleRefExpr{
							pos:  position{line: 1471, col: 7, offset: 52142},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1472, col: 7, offset: 52156},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1473, col: 7, offset: 52175},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1474, col: 7, offset: 52192},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 7, offset: 52209},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1476, col: 7, offset: 52228},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 7, offset: 52240},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1478, col: 7, offset: 52325},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1479, col: 7, offset: 52347},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 7, offset: 52407},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 7, offset: 52430},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1482, col: 7, offset: 52443},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1483, col: 7, offset: 52466},
						name: "InlineAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1484, col: 7, offset: 52501},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1485, col: 7, offset: 52526},
						name: "IndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1486, col: 7, offset: 52542},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1487, col: 7, offset: 52567},
						name: "AnyChar",
					},
				},
			},
		},
		{
			name: "NormalSubstitution",
			pos:  position{line: 1492, col: 1, offset: 52771},
			expr: &actionExpr{
				pos: position{line: 1493, col: 5, offset: 52798},
				run: (*parser).callonNormalSubstitution1,
				expr: &seqExpr{
					pos: position{line: 1493, col: 5, offset: 52798},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1493, col: 5, offset: 52798},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1493, col: 14, offset: 52807},
								expr: &choiceExpr{
									pos: position{line: 1493, col: 15, offset: 52808},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1493, col: 15, offset: 52808},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1494, col: 11, offset: 52836},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1495, col: 11, offset: 52863},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1496, col: 11, offset: 52879},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1497, col: 11, offset: 52911},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1498, col: 11, offset: 52933},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1499, col: 11, offset: 52955},
											name: "PostReplacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1500, col: 11, offset: 52981},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1501, col: 11, offset: 52999},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1501, col: 21, offset: 53009},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 1506, col: 1, offset: 53164},
			expr: &actionExpr{
				pos: position{line: 1508, col: 5, offset: 53256},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 1508, col: 5, offset: 53256},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1508, col: 5, offset: 53256},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 1511, col: 5, offset: 53320},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1512, col: 9, offset: 53338},
								name: "InlineAttributeSubstitution",
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1517, col: 1, offset: 53409},
			expr: &actionExpr{
				pos: position{line: 1519, col: 5, offset: 53497},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1519, col: 5, offset: 53497},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1519, col: 5, offset: 53497},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 5, offset: 53569},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1523, col: 9, offset: 53587},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1523, col: 9, offset: 53587},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1523, col: 33, offset: 53611},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1523, col: 57, offset: 53635},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1528, col: 1, offset: 53695},
			expr: &actionExpr{
				pos: position{line: 1530, col: 5, offset: 53781},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1530, col: 5, offset: 53781},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1530, col: 5, offset: 53781},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 5, offset: 53851},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1534, col: 9, offset: 53869},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1539, col: 1, offset: 53922},
			expr: &actionExpr{
				pos: position{line: 1541, col: 5, offset: 53998},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1541, col: 5, offset: 53998},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1541, col: 5, offset: 53998},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 5, offset: 54058},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1545, col: 9, offset: 54076},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1545, col: 9, offset: 54076},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1546, col: 11, offset: 54098},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1550, col: 1, offset: 54157},
			expr: &actionExpr{
				pos: position{line: 1552, col: 5, offset: 54239},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 5, offset: 54239},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1552, col: 5, offset: 54239},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1555, col: 5, offset: 54305},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1556, col: 9, offset: 54323},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1561, col: 1, offset: 54373},
			expr: &actionExpr{
				pos: position{line: 1563, col: 5, offset: 54460},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1563, col: 5, offset: 54460},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1563, col: 5, offset: 54460},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1566, col: 5, offset: 54531},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1568, col: 9, offset: 54629},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1568, col: 9, offset: 54629},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1568, col: 9, offset: 54629},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1571, col: 11, offset: 54733},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1571, col: 12, offset: 54734},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1571, col: 12, offset: 54734},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1571, col: 18, offset: 54740},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1571, col: 24, offset: 54746},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1581, col: 1, offset: 54975},
			expr: &choiceExpr{
				pos: position{line: 1581, col: 11, offset: 54985},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1581, col: 11, offset: 54985},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1581, col: 24, offset: 54998},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1581, col: 36, offset: 55010},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1581, col: 48, offset: 55022},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1581, col: 61, offset: 55035},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1581, col: 72, offset: 55046},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1583, col: 1, offset: 55065},
			expr: &actionExpr{
				pos: position{line: 1583, col: 15, offset: 55079},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1583, col: 15, offset: 55079},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1587, col: 1, offset: 55141},
			expr: &litMatcher{
				pos:        position{line: 1587, col: 18, offset: 55158},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1589, col: 1, offset: 55181},
			expr: &actionExpr{
				pos: position{line: 1589, col: 14, offset: 55194},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1589, col: 14, offset: 55194},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1593, col: 1, offset: 55257},
			expr: &actionExpr{
				pos: position{line: 1593, col: 14, offset: 55270},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1593, col: 14, offset: 55270},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1597, col: 1, offset: 55334},
			expr: &actionExpr{
				pos: position{line: 1597, col: 15, offset: 55348},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1597, col: 15, offset: 55348},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1601, col: 1, offset: 55411},
			expr: &actionExpr{
				pos: position{line: 1601, col: 13, offset: 55423},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1601, col: 13, offset: 55423},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1609, col: 1, offset: 55708},
			expr: &actionExpr{
				pos: position{line: 1609, col: 22, offset: 55729},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1609, col: 22, offset: 55729},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1609, col: 22, offset: 55729},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1609, col: 31, offset: 55738},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1609, col: 35, offset: 55742},
							expr: &charClassMatcher{
								pos:        position{line: 1609, col: 36, offset: 55743},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1616, col: 1, offset: 56021},
			expr: &actionExpr{
				pos: position{line: 1616, col: 18, offset: 56038},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1616, col: 18, offset: 56038},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1616, col: 19, offset: 56039},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1616, col: 19, offset: 56039},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1616, col: 27, offset: 56047},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1616, col: 37, offset: 56057},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1616, col: 45, offset: 56065},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1616, col: 55, offset: 56075},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1616, col: 63, offset: 56083},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1616, col: 72, offset: 56092},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1623, col: 1, offset: 56251},
			expr: &actionExpr{
				pos: position{line: 1624, col: 5, offset: 56274},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1624, col: 5, offset: 56274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1624, col: 5, offset: 56274},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1624, col: 11, offset: 56280},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1625, col: 5, offset: 56300},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1629, col: 5, offset: 56440},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 5, offset: 56450},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1630, col: 12, offset: 56457},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 5, offset: 56478},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 23, offset: 56496},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1635, col: 1, offset: 56627},
			expr: &actionExpr{
				pos: position{line: 1636, col: 5, offset: 56651},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1636, col: 5, offset: 56651},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1636, col: 5, offset: 56651},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1636, col: 11, offset: 56657},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1637, col: 5, offset: 56677},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1641, col: 5, offset: 56817},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1642, col: 5, offset: 56826},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1642, col: 12, offset: 56833},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 5, offset: 56854},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1643, col: 23, offset: 56872},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1647, col: 1, offset: 57004},
			expr: &actionExpr{
				pos: position{line: 1647, col: 18, offset: 57021},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1647, col: 19, offset: 57022},
					expr: &charClassMatcher{
						pos:        position{line: 1647, col: 19, offset: 57022},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1651, col: 1, offset: 57079},
			expr: &actionExpr{
				pos: position{line: 1651, col: 19, offset: 57097},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1651, col: 19, offset: 57097},
					expr: &charClassMatcher{
						pos:        position{line: 1651, col: 19, offset: 57097},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1658, col: 1, offset: 57259},
			expr: &charClassMatcher{
				pos:        position{line: 1658, col: 13, offset: 57271},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1660, col: 1, offset: 57281},
			expr: &choiceExpr{
				pos: position{line: 1660, col: 16, offset: 57296},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1660, col: 16, offset: 57296},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1660, col: 22, offset: 57302},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1660, col: 28, offset: 57308},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1660, col: 34, offset: 57314},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1660, col: 40, offset: 57320},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1660, col: 46, offset: 57326},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1662, col: 1, offset: 57332},
			expr: &actionExpr{
				pos: position{line: 1662, col: 14, offset: 57345},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1662, col: 14, offset: 57345},
					expr: &charClassMatcher{
						pos:        position{line: 1662, col: 14, offset: 57345},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1666, col: 1, offset: 57399},
			expr: &choiceExpr{
				pos: position{line: 1670, col: 5, offset: 57726},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1670, col: 5, offset: 57726},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1670, col: 5, offset: 57726},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1670, col: 5, offset: 57726},
									expr: &charClassMatcher{
										pos:        position{line: 1670, col: 5, offset: 57726},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1670, col: 15, offset: 57736},
									expr: &choiceExpr{
										pos: position{line: 1670, col: 17, offset: 57738},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1670, col: 17, offset: 57738},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1670, col: 30, offset: 57751},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1672, col: 9, offset: 57821},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1672, col: 9, offset: 57821},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1672, col: 9, offset: 57821},
									expr: &charClassMatcher{
										pos:        position{line: 1672, col: 9, offset: 57821},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1672, col: 19, offset: 57831},
									expr: &seqExpr{
										pos: position{line: 1672, col: 20, offset: 57832},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1672, col: 20, offset: 57832},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1672, col: 27, offset: 57839},
												expr: &charClassMatcher{
													pos:        position{line: 1672, col: 27, offset: 57839},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1676, col: 1, offset: 57926},
			expr: &choiceExpr{
				pos: position{line: 1677, col: 5, offset: 58007},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1677, col: 5, offset: 58007},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1677, col: 5, offset: 58007},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1677, col: 5, offset: 58007},
									expr: &charClassMatcher{
										pos:        position{line: 1677, col: 5, offset: 58007},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1677, col: 19, offset: 58021},
									expr: &choiceExpr{
										pos: position{line: 1677, col: 21, offset: 58023},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1677, col: 21, offset: 58023},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1677, col: 31, offset: 58033},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1679, col: 9, offset: 58102},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1682, col: 1, offset: 58202},
			expr: &actionExpr{
				pos: position{line: 1682, col: 12, offset: 58213},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1682, col: 12, offset: 58213},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1686, col: 1, offset: 58286},
			expr: &actionExpr{
				pos: position{line: 1686, col: 17, offset: 58302},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1686, col: 17, offset: 58302},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1686, col: 22, offset: 58307},
						expr: &choiceExpr{
							pos: position{line: 1686, col: 23, offset: 58308},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1686, col: 23, offset: 58308},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 1686, col: 34, offset: 58319},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1690, col: 1, offset: 58408},
			expr: &actionExpr{
				pos: position{line: 1690, col: 13, offset: 58420},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1690, col: 13, offset: 58420},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1690, col: 13, offset: 58420},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1690, col: 20, offset: 58427},
								expr: &ruleRefExpr{
									pos:  position{line: 1690, col: 21, offset: 58428},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1690, col: 30, offset: 58437},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1690, col: 35, offset: 58442},
								expr: &choiceExpr{
									pos: position{line: 1690, col: 36, offset: 58443},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1690, col: 36, offset: 58443},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1690, col: 47, offset: 58454},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1694, col: 1, offset: 58547},
			expr: &actionExpr{
				pos: position{line: 1694, col: 23, offset: 58569},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1694, col: 23, offset: 58569},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1694, col: 23, offset: 58569},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1694, col: 31, offset: 58577},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1694, col: 39, offset: 58585},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1694, col: 44, offset: 58590},
								expr: &choiceExpr{
									pos: position{line: 1694, col: 45, offset: 58591},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1694, col: 45, offset: 58591},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1694, col: 56, offset: 58602},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 1698, col: 1, offset: 58695},
			expr: &actionExpr{
				pos: position{line: 1698, col: 13, offset: 58707},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 1698, col: 13, offset: 58707},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1698, col: 22, offset: 58716},
						expr: &choiceExpr{
							pos: position{line: 1699, col: 5, offset: 58722},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1699, col: 5, offset: 58722},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 1699, col: 5, offset: 58722},
										expr: &charClassMatcher{
											pos:        position{line: 1699, col: 6, offset: 58723},
											val:        "[^\\r\\n[\\]\\uFFFD{ ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1702, col: 7, offset: 58859},
									name: "InlineAttributeSubstitution",
								},
								&actionExpr{
									pos: position{line: 1703, col: 7, offset: 58894},
									run: (*parser).callonFilename9,
									expr: &litMatcher{
										pos:        position{line: 1703, col: 7, offset: 58894},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 1709, col: 1, offset: 59032},
			expr: &choiceExpr{
				pos: position{line: 1709, col: 11, offset: 59042},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1709, col: 11, offset: 59042},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1709, col: 23, offset: 59054},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1709, col: 36, offset: 59067},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1709, col: 47, offset: 59078},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1709, col: 58, offset: 59089},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 1711, col: 1, offset: 59100},
			expr: &actionExpr{
				pos: position{line: 1711, col: 7, offset: 59106},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1711, col: 7, offset: 59106},
					expr: &charClassMatcher{
						pos:        position{line: 1711, col: 7, offset: 59106},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 1715, col: 1, offset: 59239},
			expr: &actionExpr{
				pos: position{line: 1715, col: 10, offset: 59248},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 1715, col: 10, offset: 59248},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1719, col: 1, offset: 59298},
			expr: &actionExpr{
				pos: position{line: 1719, col: 11, offset: 59308},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 1719, col: 11, offset: 59308},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1719, col: 11, offset: 59308},
							expr: &litMatcher{
								pos:        position{line: 1719, col: 11, offset: 59308},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1719, col: 16, offset: 59313},
							expr: &ruleRefExpr{
								pos:  position{line: 1719, col: 16, offset: 59313},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1723, col: 1, offset: 59373},
			expr: &choiceExpr{
				pos: position{line: 1723, col: 10, offset: 59382},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1723, col: 10, offset: 59382},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1723, col: 16, offset: 59388},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1723, col: 16, offset: 59388},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1727, col: 1, offset: 59437},
			expr: &choiceExpr{
				pos: position{line: 1727, col: 12, offset: 59448},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1727, col: 12, offset: 59448},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1727, col: 21, offset: 59457},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1727, col: 28, offset: 59464},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1729, col: 1, offset: 59493},
			expr: &notExpr{
				pos: position{line: 1729, col: 8, offset: 59500},
				expr: &anyMatcher{
					line: 1729, col: 9, offset: 59501,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1731, col: 1, offset: 59504},
			expr: &choiceExpr{
				pos: position{line: 1731, col: 8, offset: 59511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1731, col: 8, offset: 59511},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1731, col: 18, offset: 59521},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragmentElement9() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonDocumentFragmentElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElement9()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes11(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes11(stack["title"])
}

func (c *current) onBlockAttributes17(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes17(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	attributes = append(attributes, otherAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue14()
}

func (c *current) onSingleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue17()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue14()
}

func (c *current) onDoubleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue17()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue9()
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue16(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue16(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentBodyFragment1(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentBodyFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBodyFragment1(stack["line"])
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"], stack["id"])
}

func (c *current) onSectionTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonSectionTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElements1(stack["elements"])
}

func (c *current) onNormalSubstitution1(elements interface{}) (interface{}, error) {
	// TODO: use `InlineWord` to speed up?
	return types.Merge(elements), nil

}

func (p *parser) callonNormalSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalSubstitution1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename9()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

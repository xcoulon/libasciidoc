// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 413},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 7, offset: 429},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 443},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 460},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 482},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 503},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 525},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 7, offset: 549},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 7, offset: 576},
						name: "AttributeReset",
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 36, col: 1, offset: 806},
			expr: &actionExpr{
				pos: position{line: 37, col: 5, offset: 835},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 37, col: 5, offset: 835},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 37, col: 5, offset: 835},
							run: (*parser).callonAttributeDeclaration3,
						},
						&litMatcher{
							pos:        position{line: 41, col: 5, offset: 979},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 41, col: 9, offset: 983},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 15, offset: 989},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 41, col: 30, offset: 1004},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1013},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 42, col: 11, offset: 1019},
								expr: &ruleRefExpr{
									pos:  position{line: 42, col: 12, offset: 1020},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 43, col: 5, offset: 1053},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 52, col: 1, offset: 1406},
			expr: &actionExpr{
				pos: position{line: 52, col: 18, offset: 1423},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 52, col: 18, offset: 1423},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 52, col: 18, offset: 1423},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 52, col: 28, offset: 1433},
							expr: &charClassMatcher{
								pos:        position{line: 52, col: 29, offset: 1434},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 56, col: 1, offset: 1490},
			expr: &actionExpr{
				pos: position{line: 56, col: 30, offset: 1519},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 56, col: 30, offset: 1519},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 56, col: 30, offset: 1519},
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 30, offset: 1519},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 56, col: 37, offset: 1526},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 46, offset: 1535},
								expr: &ruleRefExpr{
									pos:  position{line: 56, col: 47, offset: 1536},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 60, col: 1, offset: 1658},
			expr: &actionExpr{
				pos: position{line: 60, col: 37, offset: 1694},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 60, col: 37, offset: 1694},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 60, col: 37, offset: 1694},
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 38, offset: 1695},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 61, col: 5, offset: 1704},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 62, col: 9, offset: 1722},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 62, col: 10, offset: 1723},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 62, col: 10, offset: 1723},
											expr: &charClassMatcher{
												pos:        position{line: 62, col: 10, offset: 1723},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1818},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 66, col: 12, offset: 1851},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 66, col: 12, offset: 1851},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 73, col: 1, offset: 1988},
			expr: &choiceExpr{
				pos: position{line: 73, col: 19, offset: 2006},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 73, col: 19, offset: 2006},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 73, col: 19, offset: 2006},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 73, col: 19, offset: 2006},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 73, col: 24, offset: 2011},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 30, offset: 2017},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 73, col: 45, offset: 2032},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 73, col: 49, offset: 2036},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 49, offset: 2036},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 56, offset: 2043},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2103},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2103},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2103},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 9, offset: 2107},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 15, offset: 2113},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 75, col: 30, offset: 2128},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 75, col: 35, offset: 2133},
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 35, offset: 2133},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 42, offset: 2140},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 82, col: 1, offset: 2322},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2346},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2346},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 83, col: 5, offset: 2346},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 87, col: 5, offset: 2484},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 87, col: 16, offset: 2495},
								expr: &choiceExpr{
									pos: position{line: 89, col: 9, offset: 2562},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 89, col: 10, offset: 2563},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 89, col: 10, offset: 2563},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 89, col: 10, offset: 2563},
														label: "anchor",
														expr: &ruleRefExpr{
															pos:  position{line: 89, col: 18, offset: 2571},
															name: "ShortHandAnchor",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 89, col: 35, offset: 2588},
														expr: &ruleRefExpr{
															pos:  position{line: 89, col: 35, offset: 2588},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 93, col: 12, offset: 2705},
											run: (*parser).callonBlockAttributes13,
											expr: &seqExpr{
												pos: position{line: 93, col: 12, offset: 2705},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 93, col: 12, offset: 2705},
														label: "title",
														expr: &ruleRefExpr{
															pos:  position{line: 93, col: 19, offset: 2712},
															name: "ShortHandTitle",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 93, col: 35, offset: 2728},
														expr: &ruleRefExpr{
															pos:  position{line: 93, col: 35, offset: 2728},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 97, col: 12, offset: 2815},
											run: (*parser).callonBlockAttributes19,
											expr: &seqExpr{
												pos: position{line: 97, col: 12, offset: 2815},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 97, col: 12, offset: 2815},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 97, col: 24, offset: 2827},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 97, col: 44, offset: 2847},
														expr: &ruleRefExpr{
															pos:  position{line: 97, col: 44, offset: 2847},
															name: "Space",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 105, col: 1, offset: 3021},
			expr: &actionExpr{
				pos: position{line: 106, col: 5, offset: 3045},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 106, col: 5, offset: 3045},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 106, col: 5, offset: 3045},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 107, col: 5, offset: 3053},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 16, offset: 3064},
								expr: &actionExpr{
									pos: position{line: 108, col: 9, offset: 3074},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 109, col: 13, offset: 3088},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 109, col: 13, offset: 3088},
												expr: &litMatcher{
													pos:        position{line: 109, col: 14, offset: 3089},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 110, col: 13, offset: 3121},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 110, col: 24, offset: 3132},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 110, col: 24, offset: 3132},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 110, col: 46, offset: 3154},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 115, col: 5, offset: 3237},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 120, col: 1, offset: 3365},
			expr: &actionExpr{
				pos: position{line: 121, col: 4, offset: 3387},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 121, col: 4, offset: 3387},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 121, col: 4, offset: 3387},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 5, offset: 3397},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 123, col: 9, offset: 3410},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 123, col: 9, offset: 3410},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 123, col: 18, offset: 3419},
										expr: &choiceExpr{
											pos: position{line: 124, col: 13, offset: 3433},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 124, col: 14, offset: 3434},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 124, col: 14, offset: 3434},
														expr: &charClassMatcher{
															pos:        position{line: 124, col: 14, offset: 3434},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 127, col: 15, offset: 3600},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 128, col: 15, offset: 3633},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 129, col: 16, offset: 3670},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 129, col: 16, offset: 3670},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 135, col: 5, offset: 3856},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 140, col: 1, offset: 3957},
			expr: &actionExpr{
				pos: position{line: 140, col: 19, offset: 3975},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 140, col: 19, offset: 3975},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 140, col: 19, offset: 3975},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 140, col: 23, offset: 3979},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 141, col: 5, offset: 3991},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 141, col: 5, offset: 3991},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 141, col: 5, offset: 3991},
											expr: &charClassMatcher{
												pos:        position{line: 141, col: 6, offset: 3992},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 142, col: 5, offset: 4104},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 142, col: 14, offset: 4113},
												expr: &choiceExpr{
													pos: position{line: 143, col: 9, offset: 4123},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 143, col: 10, offset: 4124},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 143, col: 10, offset: 4124},
																expr: &charClassMatcher{
																	pos:        position{line: 143, col: 10, offset: 4124},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 146, col: 11, offset: 4221},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 147, col: 11, offset: 4250},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 148, col: 12, offset: 4283},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 148, col: 12, offset: 4283},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 159, col: 1, offset: 4683},
			expr: &actionExpr{
				pos: position{line: 160, col: 5, offset: 4709},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 160, col: 5, offset: 4709},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 160, col: 5, offset: 4709},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 160, col: 9, offset: 4713},
							expr: &litMatcher{
								pos:        position{line: 160, col: 10, offset: 4714},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 162, col: 5, offset: 4884},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 162, col: 31, offset: 4910},
								expr: &ruleRefExpr{
									pos:  position{line: 162, col: 32, offset: 4911},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 163, col: 5, offset: 4943},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 163, col: 21, offset: 4959},
								expr: &choiceExpr{
									pos: position{line: 163, col: 22, offset: 4960},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 163, col: 22, offset: 4960},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 163, col: 44, offset: 4982},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 164, col: 5, offset: 5003},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 177, col: 1, offset: 5531},
			expr: &actionExpr{
				pos: position{line: 178, col: 5, offset: 5565},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 178, col: 5, offset: 5565},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 178, col: 5, offset: 5565},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 178, col: 10, offset: 5570},
								expr: &ruleRefExpr{
									pos:  position{line: 179, col: 9, offset: 5580},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 5, offset: 5610},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 12, offset: 5617},
								expr: &choiceExpr{
									pos: position{line: 182, col: 9, offset: 5628},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 182, col: 9, offset: 5628},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 183, col: 11, offset: 5660},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 184, col: 11, offset: 5695},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 185, col: 8, offset: 5728},
							expr: &seqExpr{
								pos: position{line: 185, col: 9, offset: 5729},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 185, col: 9, offset: 5729},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 185, col: 13, offset: 5733},
										expr: &ruleRefExpr{
											pos:  position{line: 185, col: 13, offset: 5733},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 186, col: 5, offset: 5747},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 202, col: 1, offset: 6163},
			expr: &actionExpr{
				pos: position{line: 202, col: 25, offset: 6187},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 202, col: 25, offset: 6187},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 202, col: 25, offset: 6187},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 29, offset: 6191},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 33, offset: 6195},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 206, col: 1, offset: 6269},
			expr: &actionExpr{
				pos: position{line: 206, col: 23, offset: 6291},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 206, col: 23, offset: 6291},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 206, col: 30, offset: 6298},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 211, col: 1, offset: 6424},
			expr: &actionExpr{
				pos: position{line: 211, col: 30, offset: 6453},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 211, col: 30, offset: 6453},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 211, col: 30, offset: 6453},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 34, offset: 6457},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 40, offset: 6463},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 216, col: 1, offset: 6585},
			expr: &actionExpr{
				pos: position{line: 216, col: 29, offset: 6613},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 216, col: 29, offset: 6613},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 216, col: 29, offset: 6613},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 33, offset: 6617},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 41, offset: 6625},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 221, col: 1, offset: 6738},
			expr: &choiceExpr{
				pos: position{line: 222, col: 5, offset: 6770},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 222, col: 5, offset: 6770},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 223, col: 7, offset: 6804},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 224, col: 7, offset: 6838},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 224, col: 7, offset: 6838},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 224, col: 7, offset: 6838},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 224, col: 16, offset: 6847},
										expr: &choiceExpr{
											pos: position{line: 227, col: 5, offset: 7017},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 227, col: 6, offset: 7018},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 227, col: 6, offset: 7018},
														expr: &charClassMatcher{
															pos:        position{line: 227, col: 6, offset: 7018},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 230, col: 5, offset: 7112},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 231, col: 5, offset: 7137},
													name: "Quote",
												},
												&ruleRefExpr{
													pos:  position{line: 232, col: 5, offset: 7149},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 233, col: 6, offset: 7178},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 233, col: 6, offset: 7178},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 235, col: 10, offset: 7248},
									expr: &charClassMatcher{
										pos:        position{line: 235, col: 11, offset: 7249},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 239, col: 1, offset: 7325},
			expr: &choiceExpr{
				pos: position{line: 239, col: 24, offset: 7348},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 7354},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 240, col: 5, offset: 7354},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 240, col: 5, offset: 7354},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 240, col: 12, offset: 7361},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 240, col: 29, offset: 7378},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 240, col: 29, offset: 7378},
											expr: &seqExpr{
												pos: position{line: 240, col: 30, offset: 7379},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 240, col: 30, offset: 7379},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 240, col: 34, offset: 7383},
														expr: &ruleRefExpr{
															pos:  position{line: 240, col: 34, offset: 7383},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 240, col: 45, offset: 7394},
											expr: &litMatcher{
												pos:        position{line: 240, col: 46, offset: 7395},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 245, col: 6, offset: 7632},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 245, col: 6, offset: 7632},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 245, col: 6, offset: 7632},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 245, col: 13, offset: 7639},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 245, col: 13, offset: 7639},
												expr: &ruleRefExpr{
													pos:  position{line: 245, col: 13, offset: 7639},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 245, col: 21, offset: 7647},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 245, col: 22, offset: 7648},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 245, col: 22, offset: 7648},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 245, col: 26, offset: 7652},
																expr: &ruleRefExpr{
																	pos:  position{line: 245, col: 26, offset: 7652},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 245, col: 36, offset: 7662},
														expr: &litMatcher{
															pos:        position{line: 245, col: 37, offset: 7663},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 246, col: 5, offset: 7673},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 256, col: 1, offset: 7988},
			expr: &actionExpr{
				pos: position{line: 256, col: 19, offset: 8006},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 256, col: 19, offset: 8006},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 256, col: 19, offset: 8006},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 24, offset: 8011},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 256, col: 43, offset: 8030},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 47, offset: 8034},
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 47, offset: 8034},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 256, col: 54, offset: 8041},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 61, offset: 8048},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 256, col: 77, offset: 8064},
							expr: &seqExpr{
								pos: position{line: 256, col: 78, offset: 8065},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 256, col: 78, offset: 8065},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 256, col: 82, offset: 8069},
										expr: &ruleRefExpr{
											pos:  position{line: 256, col: 82, offset: 8069},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 261, col: 1, offset: 8293},
			expr: &actionExpr{
				pos: position{line: 261, col: 22, offset: 8314},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 261, col: 22, offset: 8314},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 261, col: 22, offset: 8314},
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 23, offset: 8315},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 261, col: 29, offset: 8321},
							expr: &charClassMatcher{
								pos:        position{line: 261, col: 29, offset: 8321},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 261, col: 42, offset: 8334},
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 42, offset: 8334},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 265, col: 1, offset: 8404},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 8427},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 8427},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 8427},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 267, col: 9, offset: 8443},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 267, col: 9, offset: 8443},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 268, col: 11, offset: 8481},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 269, col: 11, offset: 8519},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 271, col: 5, offset: 8553},
							expr: &notExpr{
								pos: position{line: 271, col: 7, offset: 8555},
								expr: &seqExpr{
									pos: position{line: 271, col: 9, offset: 8557},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 271, col: 9, offset: 8557},
											expr: &ruleRefExpr{
												pos:  position{line: 271, col: 9, offset: 8557},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 271, col: 16, offset: 8564},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 275, col: 1, offset: 8605},
			expr: &actionExpr{
				pos: position{line: 276, col: 5, offset: 8640},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 5, offset: 8640},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 276, col: 5, offset: 8640},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 277, col: 5, offset: 8649},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 277, col: 14, offset: 8658},
								expr: &choiceExpr{
									pos: position{line: 279, col: 9, offset: 8748},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 279, col: 9, offset: 8748},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 280, col: 12, offset: 8765},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 280, col: 12, offset: 8765},
												expr: &charClassMatcher{
													pos:        position{line: 280, col: 12, offset: 8765},
													val:        "[^\\r\\n\\uFFFD\\\\{&<>']",
													chars:      []rune{'\r', '\n', '�', '\\', '{', '&', '<', '>', '\''},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 283, col: 11, offset: 8914},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 284, col: 11, offset: 8946},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 285, col: 11, offset: 8973},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 286, col: 12, offset: 9003},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 286, col: 12, offset: 9003},
													run: (*parser).callonSingleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 286, col: 12, offset: 9003},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 289, col: 11, offset: 9095},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 289, col: 17, offset: 9101},
													run: (*parser).callonSingleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 289, col: 17, offset: 9101},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 5, offset: 9190},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 297, col: 1, offset: 9246},
			expr: &actionExpr{
				pos: position{line: 298, col: 5, offset: 9281},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 298, col: 5, offset: 9281},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 298, col: 5, offset: 9281},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 5, offset: 9291},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 299, col: 14, offset: 9300},
								expr: &choiceExpr{
									pos: position{line: 300, col: 9, offset: 9310},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 300, col: 9, offset: 9310},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 301, col: 12, offset: 9327},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 301, col: 12, offset: 9327},
												expr: &charClassMatcher{
													pos:        position{line: 301, col: 12, offset: 9327},
													val:        "[^\\r\\n\\uFFFD&<>\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '&', '<', '>', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 304, col: 11, offset: 9476},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 305, col: 11, offset: 9508},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 306, col: 11, offset: 9535},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 307, col: 12, offset: 9565},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 307, col: 12, offset: 9565},
													run: (*parser).callonDoubleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 307, col: 12, offset: 9565},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 310, col: 11, offset: 9657},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 310, col: 17, offset: 9663},
													run: (*parser).callonDoubleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 310, col: 17, offset: 9663},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 5, offset: 9752},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 319, col: 1, offset: 9887},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 9918},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 9918},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 320, col: 5, offset: 9918},
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 6, offset: 9919},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 9929},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 321, col: 14, offset: 9938},
								expr: &actionExpr{
									pos: position{line: 322, col: 9, offset: 9948},
									run: (*parser).callonUnquotedAttributeValue7,
									expr: &seqExpr{
										pos: position{line: 322, col: 9, offset: 9948},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 322, col: 9, offset: 9948},
												expr: &litMatcher{
													pos:        position{line: 322, col: 10, offset: 9949},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 323, col: 9, offset: 9977},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 324, col: 13, offset: 9999},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 324, col: 13, offset: 9999},
															name: "Quote",
														},
														&actionExpr{
															pos: position{line: 325, col: 16, offset: 10020},
															run: (*parser).callonUnquotedAttributeValue14,
															expr: &oneOrMoreExpr{
																pos: position{line: 325, col: 16, offset: 10020},
																expr: &charClassMatcher{
																	pos:        position{line: 325, col: 16, offset: 10020},
																	val:        "[^,=\\r\\n\\uFFFD&<>{\\] ]",
																	chars:      []rune{',', '=', '\r', '\n', '�', '&', '<', '>', '{', ']', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 328, col: 15, offset: 10138},
															name: "Space",
														},
														&ruleRefExpr{
															pos:  position{line: 329, col: 15, offset: 10158},
															name: "AttributeSubstitution",
														},
														&ruleRefExpr{
															pos:  position{line: 330, col: 15, offset: 10194},
															name: "SpecialCharacter",
														},
														&ruleRefExpr{
															pos:  position{line: 331, col: 15, offset: 10225},
															name: "ElementPlaceHolder",
														},
														&actionExpr{
															pos: position{line: 332, col: 16, offset: 10259},
															run: (*parser).callonUnquotedAttributeValue21,
															expr: &litMatcher{
																pos:        position{line: 332, col: 16, offset: 10259},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 339, col: 5, offset: 10409},
							run: (*parser).callonUnquotedAttributeValue23,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 350, col: 1, offset: 10761},
			expr: &actionExpr{
				pos: position{line: 352, col: 5, offset: 10852},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 352, col: 5, offset: 10852},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 352, col: 5, offset: 10852},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 355, col: 5, offset: 10916},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 355, col: 14, offset: 10925},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 355, col: 14, offset: 10925},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 355, col: 36, offset: 10947},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 362, col: 1, offset: 11112},
			expr: &actionExpr{
				pos: position{line: 362, col: 31, offset: 11142},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 362, col: 31, offset: 11142},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 362, col: 31, offset: 11142},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 362, col: 35, offset: 11146},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 40, offset: 11151},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 362, col: 54, offset: 11165},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 367, col: 1, offset: 11281},
			expr: &choiceExpr{
				pos: position{line: 367, col: 24, offset: 11304},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 367, col: 24, offset: 11304},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 367, col: 47, offset: 11327},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 369, col: 1, offset: 11463},
			expr: &actionExpr{
				pos: position{line: 369, col: 25, offset: 11487},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 369, col: 25, offset: 11487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 369, col: 25, offset: 11487},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 369, col: 37, offset: 11499},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 42, offset: 11504},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 56, offset: 11518},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 62, offset: 11524},
								expr: &ruleRefExpr{
									pos:  position{line: 369, col: 63, offset: 11525},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 369, col: 78, offset: 11540},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 373, col: 1, offset: 11618},
			expr: &actionExpr{
				pos: position{line: 373, col: 25, offset: 11642},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 373, col: 25, offset: 11642},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 373, col: 25, offset: 11642},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 38, offset: 11655},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 43, offset: 11660},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 373, col: 57, offset: 11674},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 373, col: 63, offset: 11680},
								expr: &ruleRefExpr{
									pos:  position{line: 373, col: 64, offset: 11681},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 373, col: 79, offset: 11696},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 377, col: 1, offset: 11771},
			expr: &actionExpr{
				pos: position{line: 377, col: 17, offset: 11787},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 377, col: 17, offset: 11787},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 17, offset: 11787},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 21, offset: 11791},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 377, col: 28, offset: 11798},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 377, col: 28, offset: 11798},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 377, col: 28, offset: 11798},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 379, col: 9, offset: 11852},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 379, col: 9, offset: 11852},
											expr: &charClassMatcher{
												pos:        position{line: 379, col: 9, offset: 11852},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 388, col: 1, offset: 12054},
			expr: &actionExpr{
				pos: position{line: 388, col: 14, offset: 12067},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 388, col: 14, offset: 12067},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 388, col: 14, offset: 12067},
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 14, offset: 12067},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 388, col: 21, offset: 12074},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 395, col: 1, offset: 12311},
			expr: &actionExpr{
				pos: position{line: 395, col: 12, offset: 12322},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 395, col: 12, offset: 12322},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 12, offset: 12322},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 395, col: 16, offset: 12326},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 395, col: 21, offset: 12331},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 395, col: 21, offset: 12331},
									expr: &charClassMatcher{
										pos:        position{line: 395, col: 21, offset: 12331},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 69, offset: 12379},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 395, col: 73, offset: 12383},
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 73, offset: 12383},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 395, col: 80, offset: 12390},
							expr: &choiceExpr{
								pos: position{line: 395, col: 82, offset: 12392},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 395, col: 82, offset: 12392},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 395, col: 88, offset: 12398},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 399, col: 1, offset: 12459},
			expr: &actionExpr{
				pos: position{line: 399, col: 20, offset: 12478},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 399, col: 20, offset: 12478},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 399, col: 20, offset: 12478},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 25, offset: 12483},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 399, col: 48, offset: 12506},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 61, offset: 12519},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 403, col: 1, offset: 12631},
			expr: &actionExpr{
				pos: position{line: 403, col: 26, offset: 12656},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 403, col: 26, offset: 12656},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 26, offset: 12656},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 403, col: 30, offset: 12660},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 403, col: 35, offset: 12665},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 403, col: 35, offset: 12665},
									expr: &charClassMatcher{
										pos:        position{line: 403, col: 35, offset: 12665},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 83, offset: 12713},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 403, col: 87, offset: 12717},
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 87, offset: 12717},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 411, col: 1, offset: 12948},
			expr: &seqExpr{
				pos: position{line: 411, col: 31, offset: 12978},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 411, col: 31, offset: 12978},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 411, col: 38, offset: 12985},
						expr: &ruleRefExpr{
							pos:  position{line: 411, col: 38, offset: 12985},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 411, col: 45, offset: 12992},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 413, col: 1, offset: 12997},
			expr: &choiceExpr{
				pos: position{line: 413, col: 29, offset: 13025},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 413, col: 30, offset: 13026},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 413, col: 30, offset: 13026},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 413, col: 37, offset: 13033},
								expr: &ruleRefExpr{
									pos:  position{line: 413, col: 37, offset: 13033},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 413, col: 44, offset: 13040},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 413, col: 51, offset: 13047},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 430, col: 1, offset: 13537},
			expr: &actionExpr{
				pos: position{line: 435, col: 5, offset: 13696},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 435, col: 5, offset: 13696},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 435, col: 14, offset: 13705},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 439, col: 1, offset: 13751},
			expr: &actionExpr{
				pos: position{line: 439, col: 12, offset: 13762},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 439, col: 12, offset: 13762},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 439, col: 12, offset: 13762},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 439, col: 20, offset: 13770},
								expr: &anyMatcher{
									line: 439, col: 21, offset: 13771,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 25, offset: 13775},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 443, col: 1, offset: 13828},
			expr: &actionExpr{
				pos: position{line: 443, col: 22, offset: 13849},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 443, col: 22, offset: 13849},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 443, col: 22, offset: 13849},
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 23, offset: 13850},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 443, col: 45, offset: 13872},
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 45, offset: 13872},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 443, col: 52, offset: 13879},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 443, col: 57, offset: 13884},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 66, offset: 13893},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 443, col: 92, offset: 13919},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 447, col: 1, offset: 13992},
			expr: &actionExpr{
				pos: position{line: 447, col: 29, offset: 14020},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 447, col: 29, offset: 14020},
					expr: &charClassMatcher{
						pos:        position{line: 447, col: 29, offset: 14020},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 454, col: 1, offset: 14185},
			expr: &choiceExpr{
				pos: position{line: 454, col: 19, offset: 14203},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 454, col: 19, offset: 14203},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 454, col: 44, offset: 14228},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 456, col: 1, offset: 14253},
			expr: &choiceExpr{
				pos: position{line: 456, col: 27, offset: 14279},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 456, col: 27, offset: 14279},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 456, col: 27, offset: 14279},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 456, col: 27, offset: 14279},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 456, col: 32, offset: 14284},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 456, col: 36, offset: 14288},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 456, col: 40, offset: 14292},
									expr: &ruleRefExpr{
										pos:  position{line: 456, col: 40, offset: 14292},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 456, col: 47, offset: 14299},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 456, col: 51, offset: 14303},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 456, col: 58, offset: 14310},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 456, col: 79, offset: 14331},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 458, col: 9, offset: 14404},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 458, col: 9, offset: 14404},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 458, col: 9, offset: 14404},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 458, col: 14, offset: 14409},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 458, col: 18, offset: 14413},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 458, col: 22, offset: 14417},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 462, col: 1, offset: 14488},
			expr: &actionExpr{
				pos: position{line: 462, col: 27, offset: 14514},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 462, col: 27, offset: 14514},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 462, col: 27, offset: 14514},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 462, col: 35, offset: 14522},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 40, offset: 14527},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 462, col: 54, offset: 14541},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 72, offset: 14559},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 466, col: 1, offset: 14693},
			expr: &oneOrMoreExpr{
				pos: position{line: 466, col: 24, offset: 14716},
				expr: &choiceExpr{
					pos: position{line: 467, col: 5, offset: 14722},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 467, col: 6, offset: 14723},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 467, col: 6, offset: 14723},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 467, col: 6, offset: 14723},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 467, col: 14, offset: 14731},
										expr: &charClassMatcher{
											pos:        position{line: 467, col: 14, offset: 14731},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 7, offset: 14926},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 471, col: 8, offset: 14955},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 471, col: 8, offset: 14955},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 480, col: 1, offset: 15230},
			expr: &actionExpr{
				pos: position{line: 480, col: 19, offset: 15248},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 480, col: 19, offset: 15248},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 480, col: 19, offset: 15248},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 21, offset: 15250},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 5, offset: 15280},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 481, col: 16, offset: 15291},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 481, col: 16, offset: 15291},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 482, col: 7, offset: 15350},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 7, offset: 15378},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 484, col: 7, offset: 15407},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 485, col: 7, offset: 15436},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 486, col: 7, offset: 15465},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 487, col: 7, offset: 15491},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 488, col: 7, offset: 15519},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 492, col: 1, offset: 15585},
			expr: &actionExpr{
				pos: position{line: 492, col: 26, offset: 15610},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 492, col: 26, offset: 15610},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 492, col: 26, offset: 15610},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 492, col: 33, offset: 15617},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 33, offset: 15617},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 40, offset: 15624},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 496, col: 1, offset: 15683},
			expr: &actionExpr{
				pos: position{line: 496, col: 25, offset: 15707},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 496, col: 25, offset: 15707},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 25, offset: 15707},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 496, col: 31, offset: 15713},
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 31, offset: 15713},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 38, offset: 15720},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 500, col: 1, offset: 15778},
			expr: &actionExpr{
				pos: position{line: 500, col: 26, offset: 15803},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 500, col: 26, offset: 15803},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 500, col: 26, offset: 15803},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 500, col: 33, offset: 15810},
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 33, offset: 15810},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 40, offset: 15817},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 504, col: 1, offset: 15876},
			expr: &ruleRefExpr{
				pos:  position{line: 504, col: 25, offset: 15900},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 506, col: 1, offset: 15923},
			expr: &actionExpr{
				pos: position{line: 506, col: 26, offset: 15948},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 506, col: 26, offset: 15948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 506, col: 26, offset: 15948},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 506, col: 33, offset: 15955},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 33, offset: 15955},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 506, col: 40, offset: 15962},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 510, col: 1, offset: 16021},
			expr: &actionExpr{
				pos: position{line: 510, col: 26, offset: 16046},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 510, col: 26, offset: 16046},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 510, col: 26, offset: 16046},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 510, col: 33, offset: 16053},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 33, offset: 16053},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 510, col: 40, offset: 16060},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 514, col: 1, offset: 16119},
			expr: &actionExpr{
				pos: position{line: 514, col: 24, offset: 16142},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 514, col: 24, offset: 16142},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 514, col: 24, offset: 16142},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 514, col: 31, offset: 16149},
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 31, offset: 16149},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 514, col: 38, offset: 16156},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 518, col: 1, offset: 16213},
			expr: &actionExpr{
				pos: position{line: 518, col: 26, offset: 16238},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 518, col: 26, offset: 16238},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 518, col: 26, offset: 16238},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 518, col: 33, offset: 16245},
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 33, offset: 16245},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 40, offset: 16252},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 522, col: 1, offset: 16311},
			expr: &actionExpr{
				pos: position{line: 522, col: 30, offset: 16340},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 522, col: 30, offset: 16340},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 522, col: 30, offset: 16340},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 522, col: 37, offset: 16347},
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 37, offset: 16347},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 522, col: 44, offset: 16354},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 589, col: 1, offset: 18472},
			expr: &actionExpr{
				pos: position{line: 590, col: 9, offset: 18498},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 590, col: 9, offset: 18498},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 590, col: 9, offset: 18498},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 590, col: 13, offset: 18502},
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 13, offset: 18502},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 590, col: 20, offset: 18509},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 27, offset: 18516},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 590, col: 49, offset: 18538},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 590, col: 53, offset: 18542},
								expr: &ruleRefExpr{
									pos:  position{line: 590, col: 53, offset: 18542},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 590, col: 71, offset: 18560},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 594, col: 1, offset: 18675},
			expr: &choiceExpr{
				pos: position{line: 595, col: 9, offset: 18711},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 595, col: 9, offset: 18711},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 596, col: 11, offset: 18739},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 597, col: 11, offset: 18771},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 598, col: 11, offset: 18801},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 600, col: 1, offset: 18818},
			expr: &choiceExpr{
				pos: position{line: 601, col: 9, offset: 18855},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 601, col: 9, offset: 18855},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 602, col: 11, offset: 18883},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 603, col: 11, offset: 18915},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 604, col: 11, offset: 18945},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 606, col: 1, offset: 18963},
			expr: &choiceExpr{
				pos: position{line: 606, col: 20, offset: 18982},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 606, col: 20, offset: 18982},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 606, col: 48, offset: 19010},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 608, col: 1, offset: 19040},
			expr: &actionExpr{
				pos: position{line: 608, col: 30, offset: 19069},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 608, col: 30, offset: 19069},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 608, col: 30, offset: 19069},
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 30, offset: 19069},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 608, col: 37, offset: 19076},
							expr: &litMatcher{
								pos:        position{line: 608, col: 38, offset: 19077},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 608, col: 42, offset: 19081},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 608, col: 51, offset: 19090},
								expr: &ruleRefExpr{
									pos:  position{line: 608, col: 51, offset: 19090},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 68, offset: 19107},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 612, col: 1, offset: 19177},
			expr: &actionExpr{
				pos: position{line: 612, col: 33, offset: 19209},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 612, col: 33, offset: 19209},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 612, col: 33, offset: 19209},
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 33, offset: 19209},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 612, col: 40, offset: 19216},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 612, col: 51, offset: 19227},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 59, offset: 19235},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 612, col: 75, offset: 19251},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 616, col: 1, offset: 19330},
			expr: &actionExpr{
				pos: position{line: 616, col: 19, offset: 19348},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 616, col: 19, offset: 19348},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 616, col: 19, offset: 19348},
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 19, offset: 19348},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 616, col: 26, offset: 19355},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 36, offset: 19365},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 616, col: 56, offset: 19385},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 616, col: 62, offset: 19391},
								expr: &ruleRefExpr{
									pos:  position{line: 616, col: 63, offset: 19392},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 616, col: 85, offset: 19414},
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 85, offset: 19414},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 616, col: 92, offset: 19421},
							expr: &litMatcher{
								pos:        position{line: 616, col: 92, offset: 19421},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 616, col: 97, offset: 19426},
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 97, offset: 19426},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 621, col: 1, offset: 19571},
			expr: &actionExpr{
				pos: position{line: 621, col: 23, offset: 19593},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 621, col: 23, offset: 19593},
					expr: &charClassMatcher{
						pos:        position{line: 621, col: 23, offset: 19593},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 625, col: 1, offset: 19640},
			expr: &actionExpr{
				pos: position{line: 625, col: 24, offset: 19663},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 625, col: 24, offset: 19663},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 625, col: 24, offset: 19663},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 28, offset: 19667},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 625, col: 35, offset: 19674},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 625, col: 36, offset: 19675},
									expr: &charClassMatcher{
										pos:        position{line: 625, col: 36, offset: 19675},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 627, col: 4, offset: 19722},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 633, col: 1, offset: 19883},
			expr: &actionExpr{
				pos: position{line: 633, col: 21, offset: 19903},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 633, col: 21, offset: 19903},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 633, col: 21, offset: 19903},
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 21, offset: 19903},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 633, col: 28, offset: 19910},
							expr: &litMatcher{
								pos:        position{line: 633, col: 29, offset: 19911},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 633, col: 33, offset: 19915},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 634, col: 9, offset: 19934},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 634, col: 10, offset: 19935},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 634, col: 10, offset: 19935},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 634, col: 10, offset: 19935},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 634, col: 21, offset: 19946},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 634, col: 45, offset: 19970},
													expr: &litMatcher{
														pos:        position{line: 634, col: 45, offset: 19970},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 634, col: 50, offset: 19975},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 634, col: 58, offset: 19983},
														expr: &ruleRefExpr{
															pos:  position{line: 634, col: 59, offset: 19984},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 634, col: 82, offset: 20007},
													expr: &litMatcher{
														pos:        position{line: 634, col: 82, offset: 20007},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 634, col: 87, offset: 20012},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 634, col: 97, offset: 20022},
														expr: &ruleRefExpr{
															pos:  position{line: 634, col: 98, offset: 20023},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 636, col: 15, offset: 20140},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 636, col: 15, offset: 20140},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 636, col: 15, offset: 20140},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 636, col: 24, offset: 20149},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 636, col: 46, offset: 20171},
													expr: &litMatcher{
														pos:        position{line: 636, col: 46, offset: 20171},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 636, col: 51, offset: 20176},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 636, col: 61, offset: 20186},
														expr: &ruleRefExpr{
															pos:  position{line: 636, col: 62, offset: 20187},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 638, col: 13, offset: 20296},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 643, col: 1, offset: 20426},
			expr: &choiceExpr{
				pos: position{line: 643, col: 27, offset: 20452},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 643, col: 27, offset: 20452},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 643, col: 27, offset: 20452},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 643, col: 27, offset: 20452},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 643, col: 32, offset: 20457},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 643, col: 39, offset: 20464},
									expr: &charClassMatcher{
										pos:        position{line: 643, col: 39, offset: 20464},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 645, col: 5, offset: 20512},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 645, col: 5, offset: 20512},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 645, col: 5, offset: 20512},
									expr: &litMatcher{
										pos:        position{line: 645, col: 5, offset: 20512},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 645, col: 11, offset: 20518},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 645, col: 18, offset: 20525},
									expr: &charClassMatcher{
										pos:        position{line: 645, col: 18, offset: 20525},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 645, col: 29, offset: 20536},
									expr: &ruleRefExpr{
										pos:  position{line: 645, col: 29, offset: 20536},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 645, col: 36, offset: 20543},
									expr: &litMatcher{
										pos:        position{line: 645, col: 37, offset: 20544},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 649, col: 1, offset: 20584},
			expr: &actionExpr{
				pos: position{line: 649, col: 25, offset: 20608},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 649, col: 25, offset: 20608},
					expr: &charClassMatcher{
						pos:        position{line: 649, col: 25, offset: 20608},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 653, col: 1, offset: 20654},
			expr: &actionExpr{
				pos: position{line: 653, col: 27, offset: 20680},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 653, col: 27, offset: 20680},
					expr: &charClassMatcher{
						pos:        position{line: 653, col: 27, offset: 20680},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 660, col: 1, offset: 20855},
			expr: &litMatcher{
				pos:        position{line: 660, col: 32, offset: 20886},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 661, col: 1, offset: 20895},
			expr: &actionExpr{
				pos: position{line: 661, col: 23, offset: 20917},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 661, col: 23, offset: 20917},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 661, col: 23, offset: 20917},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 661, col: 51, offset: 20945},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 661, col: 56, offset: 20950},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 661, col: 56, offset: 20950},
									expr: &charClassMatcher{
										pos:        position{line: 661, col: 56, offset: 20950},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 661, col: 95, offset: 20989},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 668, col: 1, offset: 21259},
			expr: &actionExpr{
				pos: position{line: 668, col: 14, offset: 21272},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 668, col: 14, offset: 21272},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 668, col: 14, offset: 21272},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 668, col: 20, offset: 21278},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 668, col: 24, offset: 21282},
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 24, offset: 21282},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 668, col: 31, offset: 21289},
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 32, offset: 21290},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 675, col: 1, offset: 21454},
			expr: &actionExpr{
				pos: position{line: 676, col: 5, offset: 21476},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 676, col: 5, offset: 21476},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 676, col: 5, offset: 21476},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 677, col: 9, offset: 21491},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 677, col: 9, offset: 21491},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 677, col: 9, offset: 21491},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 678, col: 9, offset: 21512},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 678, col: 15, offset: 21518},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 679, col: 9, offset: 21541},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 679, col: 27, offset: 21559},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 683, col: 5, offset: 21720},
							expr: &ruleRefExpr{
								pos:  position{line: 683, col: 5, offset: 21720},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 683, col: 12, offset: 21727},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 687, col: 1, offset: 21787},
			expr: &ruleRefExpr{
				pos:  position{line: 687, col: 26, offset: 21812},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 690, col: 1, offset: 21852},
			expr: &actionExpr{
				pos: position{line: 690, col: 15, offset: 21866},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 690, col: 15, offset: 21866},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 690, col: 15, offset: 21866},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 690, col: 22, offset: 21873},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 690, col: 22, offset: 21873},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 691, col: 7, offset: 21899},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 7, offset: 21921},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 7, offset: 21944},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 697, col: 1, offset: 22034},
			expr: &actionExpr{
				pos: position{line: 697, col: 23, offset: 22056},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 697, col: 23, offset: 22056},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 697, col: 23, offset: 22056},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 697, col: 30, offset: 22063},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 697, col: 30, offset: 22063},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 697, col: 47, offset: 22080},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 698, col: 5, offset: 22102},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 698, col: 12, offset: 22109},
								expr: &actionExpr{
									pos: position{line: 699, col: 9, offset: 22119},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 699, col: 9, offset: 22119},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 699, col: 10, offset: 22120},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 699, col: 10, offset: 22120},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 699, col: 16, offset: 22126},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 700, col: 9, offset: 22237},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 700, col: 16, offset: 22244},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 700, col: 16, offset: 22244},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 700, col: 33, offset: 22261},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 706, col: 1, offset: 22403},
			expr: &actionExpr{
				pos: position{line: 706, col: 19, offset: 22421},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 706, col: 19, offset: 22421},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 706, col: 19, offset: 22421},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 26, offset: 22428},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 706, col: 34, offset: 22436},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 706, col: 39, offset: 22441},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 44, offset: 22446},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 710, col: 1, offset: 22542},
			expr: &actionExpr{
				pos: position{line: 710, col: 20, offset: 22561},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 710, col: 20, offset: 22561},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 710, col: 32, offset: 22573},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 715, col: 1, offset: 22696},
			expr: &actionExpr{
				pos: position{line: 715, col: 14, offset: 22709},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 715, col: 14, offset: 22709},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 715, col: 14, offset: 22709},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 715, col: 21, offset: 22716},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 40, offset: 22735},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 719, col: 1, offset: 22825},
			expr: &actionExpr{
				pos: position{line: 719, col: 22, offset: 22846},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 719, col: 22, offset: 22846},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 719, col: 22, offset: 22846},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 29, offset: 22853},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 5, offset: 22867},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 720, col: 12, offset: 22874},
								expr: &actionExpr{
									pos: position{line: 721, col: 9, offset: 22884},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 721, col: 9, offset: 22884},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 721, col: 10, offset: 22885},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 721, col: 10, offset: 22885},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 721, col: 16, offset: 22891},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 722, col: 9, offset: 23002},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 722, col: 16, offset: 23009},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 728, col: 1, offset: 23144},
			expr: &choiceExpr{
				pos: position{line: 728, col: 13, offset: 23156},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 728, col: 13, offset: 23156},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 728, col: 13, offset: 23156},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 728, col: 18, offset: 23161},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 728, col: 18, offset: 23161},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 30, offset: 23173},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 730, col: 9, offset: 23249},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 730, col: 9, offset: 23249},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 730, col: 9, offset: 23249},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 730, col: 13, offset: 23253},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 730, col: 18, offset: 23258},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 730, col: 18, offset: 23258},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 730, col: 30, offset: 23270},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 734, col: 1, offset: 23346},
			expr: &actionExpr{
				pos: position{line: 734, col: 16, offset: 23361},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 734, col: 16, offset: 23361},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 734, col: 16, offset: 23361},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 734, col: 23, offset: 23368},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 734, col: 23, offset: 23368},
									expr: &litMatcher{
										pos:        position{line: 734, col: 24, offset: 23369},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 737, col: 5, offset: 23423},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 744, col: 1, offset: 23590},
			expr: &actionExpr{
				pos: position{line: 744, col: 21, offset: 23610},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 744, col: 21, offset: 23610},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 744, col: 21, offset: 23610},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 744, col: 29, offset: 23618},
								expr: &choiceExpr{
									pos: position{line: 744, col: 30, offset: 23619},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 744, col: 30, offset: 23619},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 744, col: 53, offset: 23642},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 744, col: 74, offset: 23663},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 744, col: 74, offset: 23663,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 107, offset: 23696},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 748, col: 1, offset: 23775},
			expr: &actionExpr{
				pos: position{line: 748, col: 25, offset: 23799},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 748, col: 25, offset: 23799},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 748, col: 25, offset: 23799},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 748, col: 33, offset: 23807},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 748, col: 38, offset: 23812},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 748, col: 38, offset: 23812},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 748, col: 78, offset: 23852},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 752, col: 1, offset: 23925},
			expr: &actionExpr{
				pos: position{line: 752, col: 23, offset: 23947},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 752, col: 23, offset: 23947},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 752, col: 23, offset: 23947},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 31, offset: 23955},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 752, col: 36, offset: 23960},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 752, col: 36, offset: 23960},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 752, col: 76, offset: 24000},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 771, col: 1, offset: 24545},
			expr: &choiceExpr{
				pos: position{line: 771, col: 24, offset: 24568},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 771, col: 24, offset: 24568},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 771, col: 47, offset: 24591},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 771, col: 59, offset: 24603},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 773, col: 1, offset: 24620},
			expr: &actionExpr{
				pos: position{line: 773, col: 26, offset: 24645},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 773, col: 26, offset: 24645},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 773, col: 26, offset: 24645},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 773, col: 32, offset: 24651},
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 32, offset: 24651},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 39, offset: 24658},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 777, col: 1, offset: 24721},
			expr: &actionExpr{
				pos: position{line: 777, col: 20, offset: 24740},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 777, col: 20, offset: 24740},
					expr: &anyMatcher{
						line: 777, col: 21, offset: 24741,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 784, col: 1, offset: 24911},
			expr: &actionExpr{
				pos: position{line: 785, col: 5, offset: 24934},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 785, col: 5, offset: 24934},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 785, col: 15, offset: 24944},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 785, col: 15, offset: 24944},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 785, col: 15, offset: 24944},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 24, offset: 24953},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 787, col: 9, offset: 25045},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 787, col: 9, offset: 25045},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 787, col: 9, offset: 25045},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 787, col: 18, offset: 25054},
												expr: &ruleRefExpr{
													pos:  position{line: 787, col: 19, offset: 25055},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 787, col: 35, offset: 25071},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 803, col: 1, offset: 25388},
			expr: &actionExpr{
				pos: position{line: 804, col: 5, offset: 25411},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 804, col: 5, offset: 25411},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 804, col: 14, offset: 25420},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 804, col: 14, offset: 25420},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 805, col: 11, offset: 25481},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 806, col: 11, offset: 25526},
								expr: &ruleRefExpr{
									pos:  position{line: 806, col: 11, offset: 25526},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 807, col: 11, offset: 25544},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 807, col: 11, offset: 25544},
										expr: &ruleRefExpr{
											pos:  position{line: 807, col: 12, offset: 25545},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 808, col: 13, offset: 25563},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 808, col: 13, offset: 25563},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 809, col: 15, offset: 25594},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 810, col: 15, offset: 25614},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 811, col: 15, offset: 25651},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 812, col: 15, offset: 25677},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 813, col: 15, offset: 25703},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 814, col: 15, offset: 25733},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 816, col: 15, offset: 25833},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 848, col: 1, offset: 26849},
			expr: &actionExpr{
				pos: position{line: 848, col: 20, offset: 26868},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 848, col: 20, offset: 26868},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 848, col: 20, offset: 26868},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 848, col: 25, offset: 26873},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 848, col: 29, offset: 26877},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 848, col: 33, offset: 26881},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 848, col: 38, offset: 26886},
							expr: &ruleRefExpr{
								pos:  position{line: 848, col: 38, offset: 26886},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 855, col: 1, offset: 27132},
			expr: &actionExpr{
				pos: position{line: 855, col: 14, offset: 27145},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 855, col: 14, offset: 27145},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 855, col: 14, offset: 27145},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 855, col: 19, offset: 27150},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 855, col: 25, offset: 27156},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 855, col: 43, offset: 27174},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 859, col: 1, offset: 27239},
			expr: &actionExpr{
				pos: position{line: 859, col: 21, offset: 27259},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 859, col: 21, offset: 27259},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 859, col: 30, offset: 27268},
						expr: &choiceExpr{
							pos: position{line: 859, col: 31, offset: 27269},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 859, col: 31, offset: 27269},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 38, offset: 27276},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 53, offset: 27291},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 66, offset: 27304},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 74, offset: 27312},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 93, offset: 27331},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 859, col: 114, offset: 27352},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 859, col: 115, offset: 27353},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 859, col: 115, offset: 27353},
												expr: &litMatcher{
													pos:        position{line: 859, col: 116, offset: 27354},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 859, col: 121, offset: 27359,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 865, col: 1, offset: 27465},
			expr: &actionExpr{
				pos: position{line: 865, col: 23, offset: 27487},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 865, col: 23, offset: 27487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 865, col: 23, offset: 27487},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 865, col: 29, offset: 27493},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 36, offset: 27500},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 866, col: 5, offset: 27532},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 866, col: 11, offset: 27538},
								expr: &actionExpr{
									pos: position{line: 866, col: 12, offset: 27539},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 866, col: 12, offset: 27539},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 866, col: 12, offset: 27539},
												expr: &ruleRefExpr{
													pos:  position{line: 866, col: 12, offset: 27539},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 866, col: 19, offset: 27546},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 866, col: 23, offset: 27550},
												expr: &ruleRefExpr{
													pos:  position{line: 866, col: 23, offset: 27550},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 866, col: 30, offset: 27557},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 866, col: 39, offset: 27566},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 27624},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 867, col: 11, offset: 27630},
								expr: &actionExpr{
									pos: position{line: 867, col: 12, offset: 27631},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 867, col: 12, offset: 27631},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 867, col: 12, offset: 27631},
												expr: &ruleRefExpr{
													pos:  position{line: 867, col: 12, offset: 27631},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 867, col: 19, offset: 27638},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 867, col: 23, offset: 27642},
												expr: &ruleRefExpr{
													pos:  position{line: 867, col: 23, offset: 27642},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 867, col: 30, offset: 27649},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 867, col: 39, offset: 27658},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 868, col: 5, offset: 27716},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 872, col: 1, offset: 27795},
			expr: &actionExpr{
				pos: position{line: 872, col: 30, offset: 27824},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 872, col: 30, offset: 27824},
					expr: &choiceExpr{
						pos: position{line: 872, col: 31, offset: 27825},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 872, col: 31, offset: 27825},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 872, col: 42, offset: 27836},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 879, col: 1, offset: 27982},
			expr: &actionExpr{
				pos: position{line: 884, col: 5, offset: 28165},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 884, col: 5, offset: 28165},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 884, col: 5, offset: 28165},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 888, col: 5, offset: 28293},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 888, col: 15, offset: 28303},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 21, offset: 28309},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 31, offset: 28319},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 49, offset: 28337},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 888, col: 67, offset: 28355},
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 67, offset: 28355},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 894, col: 1, offset: 28640},
			expr: &actionExpr{
				pos: position{line: 894, col: 16, offset: 28655},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 894, col: 16, offset: 28655},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 894, col: 16, offset: 28655},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 894, col: 25, offset: 28664},
							expr: &litMatcher{
								pos:        position{line: 894, col: 26, offset: 28665},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 30, offset: 28669},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 36, offset: 28675},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 46, offset: 28685},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 64, offset: 28703},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 901, col: 1, offset: 29047},
			expr: &actionExpr{
				pos: position{line: 901, col: 15, offset: 29061},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 901, col: 15, offset: 29061},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 901, col: 15, offset: 29061},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 23, offset: 29069},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 901, col: 29, offset: 29075},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 901, col: 29, offset: 29075},
									expr: &charClassMatcher{
										pos:        position{line: 901, col: 29, offset: 29075},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 901, col: 73, offset: 29119},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 85, offset: 29131},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 908, col: 1, offset: 29411},
			expr: &choiceExpr{
				pos: position{line: 908, col: 19, offset: 29429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 908, col: 19, offset: 29429},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 908, col: 19, offset: 29429},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 908, col: 19, offset: 29429},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 908, col: 32, offset: 29442},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 41, offset: 29451},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 908, col: 58, offset: 29468},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 910, col: 9, offset: 29544},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 910, col: 9, offset: 29544},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 910, col: 9, offset: 29544},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 910, col: 21, offset: 29556},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 910, col: 26, offset: 29561},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 910, col: 39, offset: 29574},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 910, col: 43, offset: 29578},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 910, col: 51, offset: 29586},
										expr: &ruleRefExpr{
											pos:  position{line: 910, col: 52, offset: 29587},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 910, col: 70, offset: 29605},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 914, col: 1, offset: 29674},
			expr: &ruleRefExpr{
				pos:  position{line: 914, col: 16, offset: 29689},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 916, col: 1, offset: 29700},
			expr: &actionExpr{
				pos: position{line: 916, col: 20, offset: 29719},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 916, col: 20, offset: 29719},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 916, col: 29, offset: 29728},
						expr: &seqExpr{
							pos: position{line: 916, col: 30, offset: 29729},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 916, col: 30, offset: 29729},
									expr: &litMatcher{
										pos:        position{line: 916, col: 31, offset: 29730},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 916, col: 35, offset: 29734},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 924, col: 1, offset: 29977},
			expr: &litMatcher{
				pos:        position{line: 924, col: 32, offset: 30008},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 926, col: 1, offset: 30013},
			expr: &actionExpr{
				pos: position{line: 926, col: 26, offset: 30038},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 926, col: 26, offset: 30038},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 926, col: 26, offset: 30038},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 926, col: 54, offset: 30066},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 63, offset: 30075},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 93, offset: 30105},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 926, col: 121, offset: 30133},
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 122, offset: 30134},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 930, col: 1, offset: 30247},
			expr: &choiceExpr{
				pos: position{line: 930, col: 33, offset: 30279},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 930, col: 34, offset: 30280},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 930, col: 34, offset: 30280},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 930, col: 35, offset: 30281},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 930, col: 35, offset: 30281},
											expr: &ruleRefExpr{
												pos:  position{line: 930, col: 36, offset: 30282},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 930, col: 64, offset: 30310},
											expr: &ruleRefExpr{
												pos:  position{line: 930, col: 65, offset: 30311},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 930, col: 71, offset: 30317},
											expr: &ruleRefExpr{
												pos:  position{line: 930, col: 72, offset: 30318},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 930, col: 80, offset: 30326,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 930, col: 83, offset: 30329},
									expr: &seqExpr{
										pos: position{line: 930, col: 84, offset: 30330},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 930, col: 84, offset: 30330},
												expr: &seqExpr{
													pos: position{line: 930, col: 86, offset: 30332},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 930, col: 86, offset: 30332},
															expr: &ruleRefExpr{
																pos:  position{line: 930, col: 86, offset: 30332},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 930, col: 93, offset: 30339},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 930, col: 122, offset: 30368},
												expr: &ruleRefExpr{
													pos:  position{line: 930, col: 123, offset: 30369},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 930, col: 151, offset: 30397},
												expr: &ruleRefExpr{
													pos:  position{line: 930, col: 152, offset: 30398},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 930, col: 160, offset: 30406,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 11, offset: 30556},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 932, col: 12, offset: 30557},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 932, col: 12, offset: 30557},
									expr: &ruleRefExpr{
										pos:  position{line: 932, col: 13, offset: 30558},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 932, col: 19, offset: 30564},
									expr: &ruleRefExpr{
										pos:  position{line: 932, col: 20, offset: 30565},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 932, col: 28, offset: 30573},
									expr: &ruleRefExpr{
										pos:  position{line: 932, col: 29, offset: 30574},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 932, col: 57, offset: 30602,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 936, col: 1, offset: 30692},
			expr: &litMatcher{
				pos:        position{line: 936, col: 32, offset: 30723},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 938, col: 1, offset: 30730},
			expr: &actionExpr{
				pos: position{line: 938, col: 26, offset: 30755},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 938, col: 26, offset: 30755},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 938, col: 26, offset: 30755},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 938, col: 54, offset: 30783},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 63, offset: 30792},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 938, col: 93, offset: 30822},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 938, col: 121, offset: 30850},
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 122, offset: 30851},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 942, col: 1, offset: 30964},
			expr: &choiceExpr{
				pos: position{line: 942, col: 33, offset: 30996},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 942, col: 34, offset: 30997},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 942, col: 34, offset: 30997},
							expr: &seqExpr{
								pos: position{line: 942, col: 35, offset: 30998},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 942, col: 35, offset: 30998},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 36, offset: 30999},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 942, col: 64, offset: 31027,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 11, offset: 31200},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 944, col: 11, offset: 31200},
							expr: &seqExpr{
								pos: position{line: 944, col: 12, offset: 31201},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 944, col: 12, offset: 31201},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 13, offset: 31202},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 944, col: 19, offset: 31208},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 20, offset: 31209},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 944, col: 28, offset: 31217},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 29, offset: 31218},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 944, col: 57, offset: 31246,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 948, col: 1, offset: 31337},
			expr: &choiceExpr{
				pos: position{line: 948, col: 21, offset: 31357},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 948, col: 21, offset: 31357},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 948, col: 21, offset: 31357},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 948, col: 21, offset: 31357},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 948, col: 30, offset: 31366},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 948, col: 38, offset: 31374},
										expr: &ruleRefExpr{
											pos:  position{line: 948, col: 39, offset: 31375},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 948, col: 67, offset: 31403},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 950, col: 9, offset: 31507},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 950, col: 9, offset: 31507},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 950, col: 9, offset: 31507},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 950, col: 19, offset: 31517},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 950, col: 27, offset: 31525},
										expr: &choiceExpr{
											pos: position{line: 950, col: 28, offset: 31526},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 950, col: 28, offset: 31526},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 950, col: 41, offset: 31539},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 950, col: 69, offset: 31567},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 954, col: 1, offset: 31671},
			expr: &actionExpr{
				pos: position{line: 954, col: 30, offset: 31700},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 954, col: 30, offset: 31700},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 961, col: 1, offset: 31870},
			expr: &choiceExpr{
				pos: position{line: 961, col: 9, offset: 31878},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 961, col: 9, offset: 31878},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 961, col: 24, offset: 31893},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 964, col: 1, offset: 31974},
			expr: &actionExpr{
				pos: position{line: 964, col: 17, offset: 31990},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 964, col: 17, offset: 31990},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 964, col: 17, offset: 31990},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 964, col: 25, offset: 31998},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 964, col: 30, offset: 32003},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 964, col: 40, offset: 32013},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 964, col: 58, offset: 32031},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 968, col: 1, offset: 32153},
			expr: &actionExpr{
				pos: position{line: 968, col: 17, offset: 32169},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 968, col: 17, offset: 32169},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 968, col: 17, offset: 32169},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 968, col: 22, offset: 32174},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 968, col: 42, offset: 32194},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 968, col: 59, offset: 32211},
								expr: &ruleRefExpr{
									pos:  position{line: 968, col: 60, offset: 32212},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 976, col: 1, offset: 32554},
			expr: &choiceExpr{
				pos: position{line: 977, col: 5, offset: 32573},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 978, col: 9, offset: 32583},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 978, col: 9, offset: 32583},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 978, col: 9, offset: 32583},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 978, col: 20, offset: 32594},
										expr: &ruleRefExpr{
											pos:  position{line: 978, col: 21, offset: 32595},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 979, col: 9, offset: 32721},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 979, col: 15, offset: 32727},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 32727},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 41, offset: 32753},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 983, col: 7, offset: 32872},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 985, col: 1, offset: 32891},
			expr: &choiceExpr{
				pos: position{line: 985, col: 32, offset: 32922},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 985, col: 32, offset: 32922},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 985, col: 32, offset: 32922},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 985, col: 36, offset: 32926},
								expr: &litMatcher{
									pos:        position{line: 985, col: 37, offset: 32927},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 985, col: 43, offset: 32933},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 985, col: 43, offset: 32933},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 985, col: 47, offset: 32937},
								expr: &litMatcher{
									pos:        position{line: 985, col: 48, offset: 32938},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 985, col: 54, offset: 32944},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 985, col: 54, offset: 32944},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 985, col: 58, offset: 32948},
								expr: &litMatcher{
									pos:        position{line: 985, col: 59, offset: 32949},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 985, col: 65, offset: 32955},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 985, col: 65, offset: 32955},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 985, col: 69, offset: 32959},
								expr: &litMatcher{
									pos:        position{line: 985, col: 70, offset: 32960},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 987, col: 1, offset: 32965},
			expr: &choiceExpr{
				pos: position{line: 987, col: 34, offset: 32998},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 987, col: 34, offset: 32998},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 987, col: 41, offset: 33005},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 987, col: 48, offset: 33012},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 987, col: 55, offset: 33019},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 987, col: 62, offset: 33026},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 987, col: 68, offset: 33032},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 989, col: 1, offset: 33037},
			expr: &choiceExpr{
				pos: position{line: 990, col: 5, offset: 33067},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 990, col: 5, offset: 33067},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 7, offset: 33094},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 7, offset: 33122},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 7, offset: 33150},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 7, offset: 33182},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 7, offset: 33203},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 997, col: 1, offset: 33221},
			expr: &choiceExpr{
				pos: position{line: 998, col: 5, offset: 33253},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 998, col: 5, offset: 33253},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 7, offset: 33279},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 7, offset: 33307},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1001, col: 7, offset: 33335},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1003, col: 1, offset: 33361},
			expr: &actionExpr{
				pos: position{line: 1004, col: 5, offset: 33442},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1004, col: 5, offset: 33442},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1004, col: 5, offset: 33442},
							expr: &litMatcher{
								pos:        position{line: 1004, col: 7, offset: 33444},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1005, col: 5, offset: 33453},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1006, col: 9, offset: 33471},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1006, col: 9, offset: 33471},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1007, col: 11, offset: 33498},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1008, col: 11, offset: 33526},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1009, col: 11, offset: 33554},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1010, col: 11, offset: 33586},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1011, col: 11, offset: 33618},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1017, col: 1, offset: 33685},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 33, offset: 33717},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1017, col: 33, offset: 33717},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1017, col: 39, offset: 33723},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1017, col: 39, offset: 33723},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1021, col: 1, offset: 33865},
			expr: &actionExpr{
				pos: position{line: 1021, col: 25, offset: 33889},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1021, col: 25, offset: 33889},
					expr: &litMatcher{
						pos:        position{line: 1021, col: 25, offset: 33889},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1025, col: 1, offset: 33938},
			expr: &actionExpr{
				pos: position{line: 1025, col: 25, offset: 33962},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1025, col: 25, offset: 33962},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1025, col: 25, offset: 33962},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1025, col: 30, offset: 33967},
							expr: &litMatcher{
								pos:        position{line: 1025, col: 30, offset: 33967},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1032, col: 1, offset: 34078},
			expr: &choiceExpr{
				pos: position{line: 1032, col: 13, offset: 34090},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1032, col: 13, offset: 34090},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 35, offset: 34112},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1034, col: 1, offset: 34179},
			expr: &actionExpr{
				pos: position{line: 1034, col: 24, offset: 34202},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 24, offset: 34202},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1034, col: 24, offset: 34202},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 29, offset: 34207},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 39, offset: 34217},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1034, col: 68, offset: 34246},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1038, col: 1, offset: 34345},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1038, col: 32, offset: 34376},
				expr: &ruleRefExpr{
					pos:  position{line: 1038, col: 32, offset: 34376},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1040, col: 1, offset: 34407},
			expr: &actionExpr{
				pos: position{line: 1040, col: 31, offset: 34437},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1040, col: 31, offset: 34437},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1040, col: 31, offset: 34437},
							expr: &litMatcher{
								pos:        position{line: 1040, col: 33, offset: 34439},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1040, col: 39, offset: 34445},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1040, col: 48, offset: 34454},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1040, col: 48, offset: 34454},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1041, col: 7, offset: 34465},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1042, col: 7, offset: 34510},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1042, col: 7, offset: 34510},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1042, col: 15, offset: 34518},
												expr: &ruleRefExpr{
													pos:  position{line: 1042, col: 16, offset: 34519},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1043, col: 7, offset: 34533},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1044, col: 7, offset: 34561},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1045, col: 7, offset: 34584},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1046, col: 7, offset: 34602},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1047, col: 7, offset: 34621},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1048, col: 7, offset: 34659},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1049, col: 7, offset: 34684},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1053, col: 1, offset: 34759},
			expr: &actionExpr{
				pos: position{line: 1054, col: 5, offset: 34799},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1054, col: 5, offset: 34799},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1054, col: 5, offset: 34799},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1054, col: 16, offset: 34810},
								expr: &ruleRefExpr{
									pos:  position{line: 1054, col: 17, offset: 34811},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1055, col: 5, offset: 34837},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1055, col: 11, offset: 34843},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1055, col: 11, offset: 34843},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1056, col: 11, offset: 34873},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1057, col: 11, offset: 34894},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1058, col: 11, offset: 34915},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1059, col: 11, offset: 34939},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1060, col: 11, offset: 34963},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1064, col: 1, offset: 35064},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 5, offset: 35108},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1065, col: 5, offset: 35108},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1066, col: 7, offset: 35205},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1066, col: 7, offset: 35205},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1066, col: 7, offset: 35205},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1066, col: 12, offset: 35210},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1070, col: 1, offset: 35381},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 5, offset: 35409},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 35409},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 35409},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1071, col: 6, offset: 35410},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1071, col: 6, offset: 35410},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1071, col: 10, offset: 35414},
											expr: &litMatcher{
												pos:        position{line: 1071, col: 11, offset: 35415},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 16, offset: 35420},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 26, offset: 35430},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 55, offset: 35459},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1071, col: 59, offset: 35463},
									expr: &notExpr{
										pos: position{line: 1071, col: 61, offset: 35465},
										expr: &ruleRefExpr{
											pos:  position{line: 1071, col: 62, offset: 35466},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 9, offset: 35672},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1073, col: 9, offset: 35672},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1073, col: 9, offset: 35672},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 13, offset: 35676},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1073, col: 23, offset: 35686},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1073, col: 23, offset: 35686},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1073, col: 27, offset: 35690},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1073, col: 56, offset: 35719},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1077, col: 1, offset: 35937},
			expr: &seqExpr{
				pos: position{line: 1077, col: 32, offset: 35968},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1077, col: 32, offset: 35968},
						expr: &ruleRefExpr{
							pos:  position{line: 1077, col: 33, offset: 35969},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1077, col: 39, offset: 35975},
						expr: &ruleRefExpr{
							pos:  position{line: 1077, col: 39, offset: 35975},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1079, col: 1, offset: 36004},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 36039},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1080, col: 5, offset: 36039},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1081, col: 7, offset: 36050},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1081, col: 7, offset: 36050},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1081, col: 15, offset: 36058},
								expr: &ruleRefExpr{
									pos:  position{line: 1081, col: 16, offset: 36059},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 7, offset: 36073},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 7, offset: 36101},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 7, offset: 36124},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 7, offset: 36142},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1086, col: 7, offset: 36161},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1086, col: 7, offset: 36161},
								expr: &ruleRefExpr{
									pos:  position{line: 1086, col: 7, offset: 36161},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1086, col: 14, offset: 36168},
								expr: &seqExpr{
									pos: position{line: 1086, col: 15, offset: 36169},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1086, col: 15, offset: 36169},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1086, col: 19, offset: 36173},
											expr: &litMatcher{
												pos:        position{line: 1086, col: 20, offset: 36174},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 7, offset: 36186},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 7, offset: 36224},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 7, offset: 36249},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1091, col: 1, offset: 36287},
			expr: &actionExpr{
				pos: position{line: 1092, col: 5, offset: 36327},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1092, col: 5, offset: 36327},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1092, col: 5, offset: 36327},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1092, col: 16, offset: 36338},
								expr: &ruleRefExpr{
									pos:  position{line: 1092, col: 17, offset: 36339},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1093, col: 5, offset: 36365},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1093, col: 11, offset: 36371},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1093, col: 11, offset: 36371},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1094, col: 11, offset: 36401},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1095, col: 11, offset: 36422},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1096, col: 11, offset: 36443},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1097, col: 11, offset: 36467},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 36491},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1101, col: 1, offset: 36591},
			expr: &choiceExpr{
				pos: position{line: 1102, col: 5, offset: 36635},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1102, col: 5, offset: 36635},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1103, col: 7, offset: 36732},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1103, col: 7, offset: 36732},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1103, col: 7, offset: 36732},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1103, col: 11, offset: 36736},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1107, col: 1, offset: 36907},
			expr: &choiceExpr{
				pos: position{line: 1108, col: 5, offset: 36931},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 36931},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 36931},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1108, col: 5, offset: 36931},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 18, offset: 36944},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1108, col: 40, offset: 36966},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1108, col: 45, offset: 36971},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 55, offset: 36981},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1108, col: 84, offset: 37010},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1110, col: 9, offset: 37167},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1110, col: 9, offset: 37167},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1110, col: 9, offset: 37167},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 22, offset: 37180},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 44, offset: 37202},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 49, offset: 37207},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 59, offset: 37217},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 88, offset: 37246},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 9, offset: 37446},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1113, col: 9, offset: 37446},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1113, col: 9, offset: 37446},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 22, offset: 37459},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 44, offset: 37481},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 48, offset: 37485},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 58, offset: 37495},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 87, offset: 37524},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1120, col: 1, offset: 37745},
			expr: &choiceExpr{
				pos: position{line: 1120, col: 15, offset: 37759},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1120, col: 15, offset: 37759},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 39, offset: 37783},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1122, col: 1, offset: 37806},
			expr: &actionExpr{
				pos: position{line: 1122, col: 26, offset: 37831},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 26, offset: 37831},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1122, col: 26, offset: 37831},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1122, col: 31, offset: 37836},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 41, offset: 37846},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1122, col: 72, offset: 37877},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1126, col: 1, offset: 38023},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1126, col: 34, offset: 38056},
				expr: &ruleRefExpr{
					pos:  position{line: 1126, col: 34, offset: 38056},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1128, col: 1, offset: 38088},
			expr: &actionExpr{
				pos: position{line: 1129, col: 5, offset: 38125},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 5, offset: 38125},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1129, col: 5, offset: 38125},
							expr: &litMatcher{
								pos:        position{line: 1129, col: 7, offset: 38127},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1129, col: 13, offset: 38133},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1129, col: 22, offset: 38142},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1129, col: 22, offset: 38142},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1130, col: 7, offset: 38153},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1131, col: 7, offset: 38198},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1131, col: 7, offset: 38198},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1131, col: 15, offset: 38206},
												expr: &ruleRefExpr{
													pos:  position{line: 1131, col: 16, offset: 38207},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1132, col: 7, offset: 38221},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 7, offset: 38249},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1134, col: 7, offset: 38272},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1135, col: 7, offset: 38290},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1136, col: 7, offset: 38309},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1137, col: 7, offset: 38349},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1138, col: 7, offset: 38374},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1142, col: 1, offset: 38451},
			expr: &actionExpr{
				pos: position{line: 1143, col: 5, offset: 38493},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1143, col: 5, offset: 38493},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1143, col: 5, offset: 38493},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1143, col: 16, offset: 38504},
								expr: &ruleRefExpr{
									pos:  position{line: 1143, col: 17, offset: 38505},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1144, col: 5, offset: 38531},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1144, col: 11, offset: 38537},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1144, col: 11, offset: 38537},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1145, col: 11, offset: 38569},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1146, col: 11, offset: 38588},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1147, col: 11, offset: 38609},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1148, col: 11, offset: 38633},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1149, col: 11, offset: 38657},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1153, col: 1, offset: 38758},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 5, offset: 38804},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1154, col: 5, offset: 38804},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1155, col: 7, offset: 38903},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1155, col: 7, offset: 38903},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1155, col: 7, offset: 38903},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1155, col: 12, offset: 38908},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1159, col: 1, offset: 39081},
			expr: &choiceExpr{
				pos: position{line: 1160, col: 5, offset: 39111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1160, col: 5, offset: 39111},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1160, col: 5, offset: 39111},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1160, col: 6, offset: 39112},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1160, col: 6, offset: 39112},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1160, col: 10, offset: 39116},
											expr: &litMatcher{
												pos:        position{line: 1160, col: 11, offset: 39117},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1160, col: 16, offset: 39122},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1160, col: 26, offset: 39132},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1160, col: 57, offset: 39163},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1162, col: 9, offset: 39365},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1162, col: 9, offset: 39365},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1162, col: 9, offset: 39365},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1162, col: 13, offset: 39369},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1162, col: 23, offset: 39379},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1162, col: 23, offset: 39379},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1162, col: 27, offset: 39383},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1162, col: 58, offset: 39414},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1166, col: 1, offset: 39636},
			expr: &actionExpr{
				pos: position{line: 1166, col: 34, offset: 39669},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 34, offset: 39669},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1166, col: 34, offset: 39669},
							expr: &ruleRefExpr{
								pos:  position{line: 1166, col: 35, offset: 39670},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1166, col: 41, offset: 39676},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1166, col: 51, offset: 39686},
								expr: &ruleRefExpr{
									pos:  position{line: 1166, col: 51, offset: 39686},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1170, col: 1, offset: 39747},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 5, offset: 39784},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1171, col: 5, offset: 39784},
						name: "ItalicWord",
					},
					&seqExpr{
						pos: position{line: 1172, col: 7, offset: 39801},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1172, col: 7, offset: 39801},
								expr: &ruleRefExpr{
									pos:  position{line: 1172, col: 7, offset: 39801},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1172, col: 14, offset: 39808},
								expr: &seqExpr{
									pos: position{line: 1172, col: 15, offset: 39809},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1172, col: 15, offset: 39809},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1172, col: 19, offset: 39813},
											expr: &litMatcher{
												pos:        position{line: 1172, col: 20, offset: 39814},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1173, col: 7, offset: 39826},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1173, col: 7, offset: 39826},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1173, col: 15, offset: 39834},
								expr: &ruleRefExpr{
									pos:  position{line: 1173, col: 16, offset: 39835},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 7, offset: 39849},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 7, offset: 39877},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 7, offset: 39900},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 7, offset: 39918},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 7, offset: 39937},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 7, offset: 39977},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 7, offset: 40002},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "ItalicWord",
			pos:  position{line: 1183, col: 1, offset: 40097},
			expr: &actionExpr{
				pos: position{line: 1183, col: 15, offset: 40111},
				run: (*parser).callonItalicWord1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 15, offset: 40111},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1183, col: 15, offset: 40111},
							expr: &charClassMatcher{
								pos:        position{line: 1183, col: 15, offset: 40111},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1183, col: 25, offset: 40121},
							expr: &choiceExpr{
								pos: position{line: 1183, col: 27, offset: 40123},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1183, col: 27, offset: 40123},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&litMatcher{
										pos:        position{line: 1183, col: 33, offset: 40129},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1187, col: 1, offset: 40189},
			expr: &actionExpr{
				pos: position{line: 1188, col: 5, offset: 40230},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 5, offset: 40230},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1188, col: 5, offset: 40230},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1188, col: 16, offset: 40241},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 17, offset: 40242},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 5, offset: 40268},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1189, col: 11, offset: 40274},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1189, col: 11, offset: 40274},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 11, offset: 40293},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1191, col: 11, offset: 40325},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 11, offset: 40346},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1193, col: 11, offset: 40370},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1194, col: 11, offset: 40394},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1198, col: 1, offset: 40495},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 5, offset: 40541},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1199, col: 5, offset: 40541},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1200, col: 7, offset: 40640},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1200, col: 7, offset: 40640},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1200, col: 7, offset: 40640},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1200, col: 11, offset: 40644},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1204, col: 1, offset: 40818},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 5, offset: 40844},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1205, col: 5, offset: 40844},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1205, col: 5, offset: 40844},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1205, col: 5, offset: 40844},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1205, col: 18, offset: 40857},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1205, col: 40, offset: 40879},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1205, col: 45, offset: 40884},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1205, col: 55, offset: 40894},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1205, col: 86, offset: 40925},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1207, col: 9, offset: 41082},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1207, col: 9, offset: 41082},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1207, col: 9, offset: 41082},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1207, col: 22, offset: 41095},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1207, col: 44, offset: 41117},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1207, col: 49, offset: 41122},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1207, col: 59, offset: 41132},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1207, col: 90, offset: 41163},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1210, col: 9, offset: 41363},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1210, col: 9, offset: 41363},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1210, col: 9, offset: 41363},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1210, col: 22, offset: 41376},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1210, col: 44, offset: 41398},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1210, col: 48, offset: 41402},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1210, col: 58, offset: 41412},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1210, col: 89, offset: 41443},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1217, col: 1, offset: 41670},
			expr: &choiceExpr{
				pos: position{line: 1217, col: 18, offset: 41687},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1217, col: 18, offset: 41687},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 45, offset: 41714},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1219, col: 1, offset: 41740},
			expr: &actionExpr{
				pos: position{line: 1219, col: 29, offset: 41768},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 29, offset: 41768},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1219, col: 29, offset: 41768},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 34, offset: 41773},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 44, offset: 41783},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1219, col: 78, offset: 41817},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1223, col: 1, offset: 41966},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1223, col: 37, offset: 42002},
				expr: &ruleRefExpr{
					pos:  position{line: 1223, col: 37, offset: 42002},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1225, col: 1, offset: 42069},
			expr: &actionExpr{
				pos: position{line: 1226, col: 5, offset: 42109},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 5, offset: 42109},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1226, col: 5, offset: 42109},
							expr: &litMatcher{
								pos:        position{line: 1226, col: 7, offset: 42111},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1226, col: 13, offset: 42117},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1226, col: 22, offset: 42126},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1226, col: 22, offset: 42126},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1227, col: 7, offset: 42137},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1228, col: 7, offset: 42182},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1228, col: 7, offset: 42182},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1228, col: 15, offset: 42190},
												expr: &ruleRefExpr{
													pos:  position{line: 1228, col: 16, offset: 42191},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1229, col: 7, offset: 42205},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1230, col: 7, offset: 42233},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1231, col: 7, offset: 42256},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1232, col: 7, offset: 42274},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1233, col: 7, offset: 42293},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1234, col: 7, offset: 42356},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1235, col: 7, offset: 42399},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1236, col: 7, offset: 42424},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1240, col: 1, offset: 42504},
			expr: &actionExpr{
				pos: position{line: 1241, col: 5, offset: 42548},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1241, col: 5, offset: 42548},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1241, col: 5, offset: 42548},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1241, col: 16, offset: 42559},
								expr: &ruleRefExpr{
									pos:  position{line: 1241, col: 17, offset: 42560},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 5, offset: 42586},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1242, col: 11, offset: 42592},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 42592},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 42627},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 42646},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 42667},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 42688},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 42712},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1251, col: 1, offset: 42814},
			expr: &choiceExpr{
				pos: position{line: 1252, col: 5, offset: 42863},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1252, col: 5, offset: 42863},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1253, col: 7, offset: 42965},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1253, col: 7, offset: 42965},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1253, col: 7, offset: 42965},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1253, col: 12, offset: 42970},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1257, col: 1, offset: 43148},
			expr: &choiceExpr{
				pos: position{line: 1258, col: 5, offset: 43181},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1258, col: 5, offset: 43181},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1258, col: 5, offset: 43181},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1258, col: 6, offset: 43182},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1258, col: 6, offset: 43182},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1258, col: 10, offset: 43186},
											expr: &litMatcher{
												pos:        position{line: 1258, col: 11, offset: 43187},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 16, offset: 43192},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1258, col: 26, offset: 43202},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1258, col: 60, offset: 43236},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1260, col: 9, offset: 43441},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1260, col: 9, offset: 43441},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1260, col: 9, offset: 43441},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1260, col: 13, offset: 43445},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1260, col: 23, offset: 43455},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1260, col: 23, offset: 43455},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1260, col: 27, offset: 43459},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1260, col: 61, offset: 43493},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1264, col: 1, offset: 43719},
			expr: &seqExpr{
				pos: position{line: 1264, col: 37, offset: 43755},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1264, col: 37, offset: 43755},
						expr: &ruleRefExpr{
							pos:  position{line: 1264, col: 38, offset: 43756},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1264, col: 44, offset: 43762},
						expr: &ruleRefExpr{
							pos:  position{line: 1264, col: 44, offset: 43762},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1266, col: 1, offset: 43796},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 5, offset: 43837},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1267, col: 5, offset: 43837},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1268, col: 7, offset: 43848},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1268, col: 7, offset: 43848},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1268, col: 15, offset: 43856},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 16, offset: 43857},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 7, offset: 43871},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 7, offset: 43899},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 7, offset: 43922},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 7, offset: 43940},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1273, col: 7, offset: 43959},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1273, col: 7, offset: 43959},
								expr: &ruleRefExpr{
									pos:  position{line: 1273, col: 7, offset: 43959},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1273, col: 14, offset: 43966},
								expr: &seqExpr{
									pos: position{line: 1273, col: 15, offset: 43967},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1273, col: 15, offset: 43967},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1273, col: 19, offset: 43971},
											expr: &litMatcher{
												pos:        position{line: 1273, col: 20, offset: 43972},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 7, offset: 44096},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 7, offset: 44139},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 7, offset: 44159},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1277, col: 7, offset: 44184},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1279, col: 1, offset: 44227},
			expr: &actionExpr{
				pos: position{line: 1280, col: 5, offset: 44271},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 5, offset: 44271},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1280, col: 5, offset: 44271},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1280, col: 16, offset: 44282},
								expr: &ruleRefExpr{
									pos:  position{line: 1280, col: 17, offset: 44283},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 5, offset: 44309},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1281, col: 11, offset: 44315},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1281, col: 11, offset: 44315},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 11, offset: 44350},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 11, offset: 44369},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1284, col: 11, offset: 44390},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 11, offset: 44411},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1286, col: 11, offset: 44435},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1290, col: 1, offset: 44537},
			expr: &actionExpr{
				pos: position{line: 1291, col: 5, offset: 44586},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1291, col: 6, offset: 44587},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1291, col: 6, offset: 44587},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1292, col: 7, offset: 44691},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1292, col: 7, offset: 44691},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1292, col: 11, offset: 44695},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1296, col: 1, offset: 44873},
			expr: &choiceExpr{
				pos: position{line: 1297, col: 5, offset: 44902},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1297, col: 5, offset: 44902},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1297, col: 5, offset: 44902},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1297, col: 5, offset: 44902},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1297, col: 18, offset: 44915},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1297, col: 40, offset: 44937},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1297, col: 45, offset: 44942},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1297, col: 55, offset: 44952},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1297, col: 89, offset: 44986},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1299, col: 9, offset: 45143},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1299, col: 9, offset: 45143},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1299, col: 9, offset: 45143},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1299, col: 22, offset: 45156},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1299, col: 44, offset: 45178},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1299, col: 49, offset: 45183},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1299, col: 59, offset: 45193},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1299, col: 93, offset: 45227},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1302, col: 9, offset: 45427},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1302, col: 9, offset: 45427},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1302, col: 9, offset: 45427},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 22, offset: 45440},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 44, offset: 45462},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1302, col: 48, offset: 45466},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 58, offset: 45476},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 92, offset: 45510},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1309, col: 1, offset: 45731},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 15, offset: 45745},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1309, col: 15, offset: 45745},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 39, offset: 45769},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1311, col: 1, offset: 45792},
			expr: &actionExpr{
				pos: position{line: 1311, col: 26, offset: 45817},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1311, col: 26, offset: 45817},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1311, col: 26, offset: 45817},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1311, col: 31, offset: 45822},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1311, col: 41, offset: 45832},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1311, col: 72, offset: 45863},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1315, col: 1, offset: 46009},
			expr: &seqExpr{
				pos: position{line: 1315, col: 34, offset: 46042},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1315, col: 34, offset: 46042},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1315, col: 63, offset: 46071},
						expr: &seqExpr{
							pos: position{line: 1315, col: 64, offset: 46072},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1315, col: 64, offset: 46072},
									expr: &litMatcher{
										pos:        position{line: 1315, col: 66, offset: 46074},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1315, col: 73, offset: 46081},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1315, col: 73, offset: 46081},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1315, col: 81, offset: 46089},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1317, col: 1, offset: 46156},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 33, offset: 46188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1317, col: 33, offset: 46188},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1318, col: 7, offset: 46199},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1318, col: 7, offset: 46199},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1318, col: 15, offset: 46207},
								expr: &ruleRefExpr{
									pos:  position{line: 1318, col: 16, offset: 46208},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 7, offset: 46222},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 7, offset: 46250},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 7, offset: 46273},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 7, offset: 46291},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 7, offset: 46310},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 7, offset: 46341},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 7, offset: 46366},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1327, col: 1, offset: 46406},
			expr: &actionExpr{
				pos: position{line: 1328, col: 5, offset: 46438},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1328, col: 5, offset: 46438},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1328, col: 5, offset: 46438},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1328, col: 16, offset: 46449},
								expr: &ruleRefExpr{
									pos:  position{line: 1328, col: 17, offset: 46450},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1329, col: 5, offset: 46476},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1329, col: 11, offset: 46482},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1329, col: 11, offset: 46482},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 11, offset: 46501},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 11, offset: 46522},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 11, offset: 46546},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 11, offset: 46578},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1334, col: 11, offset: 46602},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1338, col: 1, offset: 46704},
			expr: &choiceExpr{
				pos: position{line: 1339, col: 5, offset: 46750},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1339, col: 5, offset: 46750},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1340, col: 7, offset: 46849},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1340, col: 7, offset: 46849},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1340, col: 7, offset: 46849},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1340, col: 12, offset: 46854},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1344, col: 1, offset: 47027},
			expr: &choiceExpr{
				pos: position{line: 1344, col: 26, offset: 47052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1344, col: 26, offset: 47052},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1344, col: 26, offset: 47052},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1344, col: 27, offset: 47053},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1344, col: 27, offset: 47053},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1344, col: 31, offset: 47057},
											expr: &litMatcher{
												pos:        position{line: 1344, col: 32, offset: 47058},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1344, col: 37, offset: 47063},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1344, col: 47, offset: 47073},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1344, col: 78, offset: 47104},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1346, col: 9, offset: 47306},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1346, col: 9, offset: 47306},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1346, col: 9, offset: 47306},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1346, col: 13, offset: 47310},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1346, col: 23, offset: 47320},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1346, col: 23, offset: 47320},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1346, col: 27, offset: 47324},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1346, col: 58, offset: 47355},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1350, col: 1, offset: 47576},
			expr: &seqExpr{
				pos: position{line: 1350, col: 34, offset: 47609},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1350, col: 34, offset: 47609},
						expr: &ruleRefExpr{
							pos:  position{line: 1350, col: 35, offset: 47610},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1350, col: 41, offset: 47616},
						expr: &ruleRefExpr{
							pos:  position{line: 1350, col: 41, offset: 47616},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1352, col: 1, offset: 47647},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 33, offset: 47679},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1352, col: 33, offset: 47679},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1353, col: 7, offset: 47690},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1353, col: 7, offset: 47690},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1353, col: 15, offset: 47698},
								expr: &ruleRefExpr{
									pos:  position{line: 1353, col: 16, offset: 47699},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 7, offset: 47713},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 7, offset: 47741},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 7, offset: 47764},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 7, offset: 47782},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1358, col: 7, offset: 47801},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1358, col: 7, offset: 47801},
								expr: &ruleRefExpr{
									pos:  position{line: 1358, col: 7, offset: 47801},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1358, col: 14, offset: 47808},
								expr: &seqExpr{
									pos: position{line: 1358, col: 15, offset: 47809},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1358, col: 15, offset: 47809},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1358, col: 19, offset: 47813},
											expr: &litMatcher{
												pos:        position{line: 1358, col: 20, offset: 47814},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 7, offset: 47826},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 7, offset: 47857},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 7, offset: 47882},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1363, col: 1, offset: 47922},
			expr: &actionExpr{
				pos: position{line: 1364, col: 5, offset: 47954},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1364, col: 5, offset: 47954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1364, col: 5, offset: 47954},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1364, col: 16, offset: 47965},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 17, offset: 47966},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1365, col: 5, offset: 47992},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1365, col: 11, offset: 47998},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1365, col: 11, offset: 47998},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1366, col: 11, offset: 48030},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1367, col: 11, offset: 48049},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1368, col: 11, offset: 48070},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1369, col: 11, offset: 48094},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1370, col: 11, offset: 48118},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1373, col: 1, offset: 48219},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 5, offset: 48265},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1374, col: 5, offset: 48265},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1375, col: 7, offset: 48362},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1375, col: 7, offset: 48362},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1375, col: 7, offset: 48362},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1375, col: 11, offset: 48366},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1379, col: 1, offset: 48537},
			expr: &choiceExpr{
				pos: position{line: 1380, col: 5, offset: 48562},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1380, col: 5, offset: 48562},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1380, col: 5, offset: 48562},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1380, col: 5, offset: 48562},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1380, col: 18, offset: 48575},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 40, offset: 48597},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1380, col: 45, offset: 48602},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1380, col: 55, offset: 48612},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 86, offset: 48643},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1382, col: 9, offset: 48800},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1382, col: 9, offset: 48800},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1382, col: 9, offset: 48800},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1382, col: 22, offset: 48813},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1382, col: 44, offset: 48835},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1382, col: 49, offset: 48840},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1382, col: 59, offset: 48850},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1382, col: 90, offset: 48881},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1385, col: 9, offset: 49081},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1385, col: 9, offset: 49081},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1385, col: 9, offset: 49081},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1385, col: 22, offset: 49094},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1385, col: 44, offset: 49116},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1385, col: 48, offset: 49120},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1385, col: 58, offset: 49130},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1385, col: 89, offset: 49161},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1392, col: 1, offset: 49389},
			expr: &actionExpr{
				pos: position{line: 1392, col: 18, offset: 49406},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1392, col: 18, offset: 49406},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1392, col: 18, offset: 49406},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1392, col: 22, offset: 49410},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1392, col: 31, offset: 49419},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1392, col: 53, offset: 49441},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1396, col: 1, offset: 49549},
			expr: &choiceExpr{
				pos: position{line: 1396, col: 25, offset: 49573},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1396, col: 25, offset: 49573},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 38, offset: 49586},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1398, col: 1, offset: 49605},
			expr: &actionExpr{
				pos: position{line: 1398, col: 21, offset: 49625},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1398, col: 21, offset: 49625},
					expr: &charClassMatcher{
						pos:        position{line: 1398, col: 21, offset: 49625},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1402, col: 1, offset: 49710},
			expr: &actionExpr{
				pos: position{line: 1402, col: 25, offset: 49734},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1402, col: 25, offset: 49734},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1402, col: 25, offset: 49734},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1402, col: 38, offset: 49747},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1402, col: 60, offset: 49769},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1402, col: 64, offset: 49773},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1402, col: 73, offset: 49782},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1402, col: 95, offset: 49804},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1409, col: 1, offset: 50022},
			expr: &actionExpr{
				pos: position{line: 1409, col: 20, offset: 50041},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 20, offset: 50041},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1409, col: 20, offset: 50041},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 24, offset: 50045},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 33, offset: 50054},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1409, col: 57, offset: 50078},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1413, col: 1, offset: 50188},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 27, offset: 50214},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1413, col: 27, offset: 50214},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 40, offset: 50227},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1415, col: 1, offset: 50248},
			expr: &actionExpr{
				pos: position{line: 1415, col: 23, offset: 50270},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1415, col: 23, offset: 50270},
					expr: &charClassMatcher{
						pos:        position{line: 1415, col: 23, offset: 50270},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1419, col: 1, offset: 50355},
			expr: &actionExpr{
				pos: position{line: 1419, col: 27, offset: 50381},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1419, col: 27, offset: 50381},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1419, col: 27, offset: 50381},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 40, offset: 50394},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1419, col: 62, offset: 50416},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1419, col: 66, offset: 50420},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 75, offset: 50429},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1419, col: 99, offset: 50453},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1427, col: 1, offset: 50765},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 17, offset: 50781},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1427, col: 17, offset: 50781},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 38, offset: 50802},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1429, col: 1, offset: 50822},
			expr: &actionExpr{
				pos: position{line: 1429, col: 23, offset: 50844},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1429, col: 23, offset: 50844},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1429, col: 23, offset: 50844},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1429, col: 46, offset: 50867},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1429, col: 55, offset: 50876},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1429, col: 82, offset: 50903},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1433, col: 1, offset: 51015},
			expr: &actionExpr{
				pos: position{line: 1433, col: 31, offset: 51045},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1433, col: 31, offset: 51045},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1433, col: 41, offset: 51055},
						expr: &ruleRefExpr{
							pos:  position{line: 1433, col: 41, offset: 51055},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1437, col: 1, offset: 51141},
			expr: &seqExpr{
				pos: position{line: 1437, col: 27, offset: 51167},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1437, col: 27, offset: 51167},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1437, col: 32, offset: 51172},
						expr: &charClassMatcher{
							pos:        position{line: 1437, col: 33, offset: 51173},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1439, col: 1, offset: 51184},
			expr: &litMatcher{
				pos:        position{line: 1439, col: 25, offset: 51208},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1442, col: 1, offset: 51296},
			expr: &actionExpr{
				pos: position{line: 1443, col: 5, offset: 51330},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1443, col: 5, offset: 51330},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1444, col: 9, offset: 51348},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1444, col: 9, offset: 51348},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1444, col: 9, offset: 51348},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1444, col: 19, offset: 51358},
										expr: &ruleRefExpr{
											pos:  position{line: 1444, col: 20, offset: 51359},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1445, col: 11, offset: 51415},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1445, col: 11, offset: 51415},
										expr: &ruleRefExpr{
											pos:  position{line: 1445, col: 11, offset: 51415},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1445, col: 18, offset: 51422},
										expr: &ruleRefExpr{
											pos:  position{line: 1445, col: 19, offset: 51423},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1446, col: 12, offset: 51455},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1446, col: 12, offset: 51455},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1446, col: 12, offset: 51455},
											expr: &litMatcher{
												pos:        position{line: 1446, col: 13, offset: 51456},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1446, col: 17, offset: 51460},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 26, offset: 51469},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1447, col: 11, offset: 51541},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1448, col: 11, offset: 51582},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1449, col: 11, offset: 51611},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1454, col: 1, offset: 51690},
			expr: &actionExpr{
				pos: position{line: 1455, col: 5, offset: 51728},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 5, offset: 51728},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1455, col: 5, offset: 51728},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1455, col: 16, offset: 51739},
								expr: &ruleRefExpr{
									pos:  position{line: 1455, col: 17, offset: 51740},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1456, col: 5, offset: 51766},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1456, col: 11, offset: 51772},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1456, col: 11, offset: 51772},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1457, col: 11, offset: 51791},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1458, col: 12, offset: 51813},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1458, col: 12, offset: 51813},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1458, col: 12, offset: 51813},
													expr: &litMatcher{
														pos:        position{line: 1458, col: 13, offset: 51814},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1458, col: 18, offset: 51819},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1458, col: 27, offset: 51828},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1459, col: 11, offset: 51877},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1460, col: 11, offset: 51901},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1461, col: 11, offset: 51927},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1465, col: 1, offset: 52024},
			expr: &choiceExpr{
				pos: position{line: 1465, col: 41, offset: 52064},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1465, col: 41, offset: 52064},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1465, col: 55, offset: 52078},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1465, col: 55, offset: 52078},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1465, col: 55, offset: 52078},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1465, col: 59, offset: 52082},
									expr: &litMatcher{
										pos:        position{line: 1465, col: 60, offset: 52083},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1469, col: 1, offset: 52155},
			expr: &actionExpr{
				pos: position{line: 1469, col: 23, offset: 52177},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1469, col: 23, offset: 52177},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1469, col: 23, offset: 52177},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 46, offset: 52200},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 55, offset: 52209},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1469, col: 82, offset: 52236},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1473, col: 1, offset: 52348},
			expr: &actionExpr{
				pos: position{line: 1473, col: 31, offset: 52378},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1473, col: 31, offset: 52378},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1473, col: 41, offset: 52388},
						expr: &ruleRefExpr{
							pos:  position{line: 1473, col: 41, offset: 52388},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1478, col: 1, offset: 52556},
			expr: &actionExpr{
				pos: position{line: 1478, col: 30, offset: 52585},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1478, col: 30, offset: 52585},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1479, col: 5, offset: 52599},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1479, col: 5, offset: 52599},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1479, col: 5, offset: 52599},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1479, col: 15, offset: 52609},
										expr: &ruleRefExpr{
											pos:  position{line: 1479, col: 16, offset: 52610},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1480, col: 7, offset: 52662},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1480, col: 7, offset: 52662},
										expr: &ruleRefExpr{
											pos:  position{line: 1480, col: 7, offset: 52662},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1480, col: 14, offset: 52669},
										expr: &ruleRefExpr{
											pos:  position{line: 1480, col: 15, offset: 52670},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1481, col: 7, offset: 52697},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1482, col: 7, offset: 52734},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1483, col: 7, offset: 52759},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1487, col: 1, offset: 52833},
			expr: &actionExpr{
				pos: position{line: 1488, col: 5, offset: 52871},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1488, col: 5, offset: 52871},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1488, col: 5, offset: 52871},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1488, col: 16, offset: 52882},
								expr: &ruleRefExpr{
									pos:  position{line: 1488, col: 17, offset: 52883},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1489, col: 5, offset: 52909},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1489, col: 11, offset: 52915},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1489, col: 11, offset: 52915},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1490, col: 11, offset: 52934},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1491, col: 12, offset: 52956},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1491, col: 12, offset: 52956},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1491, col: 12, offset: 52956},
													expr: &litMatcher{
														pos:        position{line: 1491, col: 13, offset: 52957},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1491, col: 19, offset: 52963},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1491, col: 28, offset: 52972},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1492, col: 11, offset: 53021},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1493, col: 11, offset: 53045},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1494, col: 11, offset: 53071},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1498, col: 1, offset: 53168},
			expr: &seqExpr{
				pos: position{line: 1498, col: 27, offset: 53194},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1498, col: 27, offset: 53194},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1498, col: 33, offset: 53200},
						expr: &charClassMatcher{
							pos:        position{line: 1498, col: 34, offset: 53201},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1500, col: 1, offset: 53212},
			expr: &litMatcher{
				pos:        position{line: 1500, col: 25, offset: 53236},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1502, col: 1, offset: 53243},
			expr: &actionExpr{
				pos: position{line: 1502, col: 41, offset: 53283},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1502, col: 42, offset: 53284},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1502, col: 42, offset: 53284},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1502, col: 56, offset: 53298},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1502, col: 56, offset: 53298},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1502, col: 60, offset: 53302},
									expr: &litMatcher{
										pos:        position{line: 1502, col: 61, offset: 53303},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1511, col: 1, offset: 53569},
			expr: &actionExpr{
				pos: position{line: 1512, col: 5, offset: 53585},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1512, col: 5, offset: 53585},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1512, col: 5, offset: 53585},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1512, col: 12, offset: 53592},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1512, col: 12, offset: 53592},
									expr: &litMatcher{
										pos:        position{line: 1512, col: 13, offset: 53593},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1516, col: 5, offset: 53701},
							run: (*parser).callonSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 1528, col: 5, offset: 54207},
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 5, offset: 54207},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 12, offset: 54214},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 19, offset: 54221},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1528, col: 36, offset: 54238},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 1552, col: 1, offset: 55069},
			expr: &actionExpr{
				pos: position{line: 1552, col: 20, offset: 55088},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1552, col: 20, offset: 55088},
					expr: &charClassMatcher{
						pos:        position{line: 1552, col: 20, offset: 55088},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1564, col: 1, offset: 55591},
			expr: &actionExpr{
				pos: position{line: 1564, col: 16, offset: 55606},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1564, col: 16, offset: 55606},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1564, col: 16, offset: 55606},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1564, col: 25, offset: 55615},
								expr: &ruleRefExpr{
									pos:  position{line: 1564, col: 26, offset: 55616},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1564, col: 47, offset: 55637},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1568, col: 1, offset: 55693},
			expr: &actionExpr{
				pos: position{line: 1568, col: 23, offset: 55715},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1568, col: 23, offset: 55715},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1568, col: 23, offset: 55715},
							expr: &ruleRefExpr{
								pos:  position{line: 1568, col: 24, offset: 55716},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1569, col: 5, offset: 55724},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1570, col: 9, offset: 55742},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1570, col: 9, offset: 55742},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1571, col: 11, offset: 55763},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1572, col: 11, offset: 55779},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 1573, col: 11, offset: 55797},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1574, col: 11, offset: 55825},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1575, col: 11, offset: 55852},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1576, col: 11, offset: 55868},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1577, col: 11, offset: 55900},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1578, col: 11, offset: 55922},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 11, offset: 55944},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1580, col: 11, offset: 55970},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1581, col: 11, offset: 56087},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1586, col: 1, offset: 56185},
			expr: &actionExpr{
				pos: position{line: 1586, col: 16, offset: 56200},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1586, col: 16, offset: 56200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1586, col: 16, offset: 56200},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1586, col: 25, offset: 56209},
								expr: &choiceExpr{
									pos: position{line: 1587, col: 5, offset: 56215},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1587, col: 5, offset: 56215},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1588, col: 7, offset: 56232},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1589, col: 7, offset: 56256},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1590, col: 7, offset: 56279},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1591, col: 7, offset: 56291},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1592, col: 7, offset: 56319},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1593, col: 7, offset: 56432},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1594, col: 7, offset: 56450},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1594, col: 17, offset: 56460},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 1599, col: 1, offset: 56561},
			expr: &actionExpr{
				pos: position{line: 1599, col: 27, offset: 56587},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1599, col: 27, offset: 56587},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1599, col: 27, offset: 56587},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1599, col: 36, offset: 56596},
								expr: &choiceExpr{
									pos: position{line: 1600, col: 5, offset: 56602},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1600, col: 5, offset: 56602},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1601, col: 7, offset: 56619},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1602, col: 7, offset: 56647},
											name: "Quotes",
										},
										&ruleRefExpr{
											pos:  position{line: 1603, col: 7, offset: 56660},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1604, col: 7, offset: 56773},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1605, col: 7, offset: 56787},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1605, col: 17, offset: 56797},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1610, col: 1, offset: 56880},
			expr: &actionExpr{
				pos: position{line: 1610, col: 14, offset: 56893},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1610, col: 14, offset: 56893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1610, col: 14, offset: 56893},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1610, col: 22, offset: 56901},
								expr: &anyMatcher{
									line: 1610, col: 23, offset: 56902,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1610, col: 27, offset: 56906},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1616, col: 1, offset: 57055},
			expr: &actionExpr{
				pos: position{line: 1616, col: 20, offset: 57074},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1616, col: 20, offset: 57074},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1616, col: 20, offset: 57074},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1616, col: 29, offset: 57083},
								expr: &choiceExpr{
									pos: position{line: 1617, col: 5, offset: 57089},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1617, col: 5, offset: 57089},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1618, col: 7, offset: 57106},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1619, col: 7, offset: 57130},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1620, col: 7, offset: 57158},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1621, col: 7, offset: 57271},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1622, col: 7, offset: 57285},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1622, col: 17, offset: 57295},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1627, col: 1, offset: 57391},
			expr: &actionExpr{
				pos: position{line: 1627, col: 16, offset: 57406},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1627, col: 16, offset: 57406},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1627, col: 16, offset: 57406},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1627, col: 25, offset: 57415},
								expr: &choiceExpr{
									pos: position{line: 1628, col: 5, offset: 57421},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1628, col: 5, offset: 57421},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1629, col: 7, offset: 57438},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1630, col: 7, offset: 57456},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1631, col: 7, offset: 57569},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1632, col: 7, offset: 57583},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1632, col: 17, offset: 57593},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1637, col: 1, offset: 57689},
			expr: &actionExpr{
				pos: position{line: 1637, col: 16, offset: 57704},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1637, col: 16, offset: 57704},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1637, col: 16, offset: 57704},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1637, col: 25, offset: 57713},
								expr: &choiceExpr{
									pos: position{line: 1638, col: 5, offset: 57719},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1638, col: 5, offset: 57719},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1639, col: 7, offset: 57736},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1640, col: 7, offset: 57748},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1641, col: 7, offset: 57861},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1642, col: 7, offset: 57875},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1642, col: 17, offset: 57885},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1647, col: 1, offset: 57987},
			expr: &actionExpr{
				pos: position{line: 1647, col: 22, offset: 58008},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 22, offset: 58008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1647, col: 22, offset: 58008},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1647, col: 31, offset: 58017},
								expr: &choiceExpr{
									pos: position{line: 1648, col: 5, offset: 58023},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1648, col: 5, offset: 58023},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1649, col: 7, offset: 58040},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1650, col: 7, offset: 58058},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1651, col: 7, offset: 58171},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1652, col: 7, offset: 58185},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1652, col: 17, offset: 58195},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1657, col: 1, offset: 58322},
			expr: &actionExpr{
				pos: position{line: 1657, col: 27, offset: 58348},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1657, col: 27, offset: 58348},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1657, col: 27, offset: 58348},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1657, col: 36, offset: 58357},
								expr: &choiceExpr{
									pos: position{line: 1658, col: 5, offset: 58363},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1658, col: 5, offset: 58363},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1659, col: 7, offset: 58380},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1660, col: 7, offset: 58403},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1661, col: 7, offset: 58516},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1662, col: 7, offset: 58530},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1662, col: 17, offset: 58540},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1666, col: 1, offset: 58596},
			expr: &actionExpr{
				pos: position{line: 1668, col: 5, offset: 58678},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 5, offset: 58678},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1668, col: 5, offset: 58678},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1671, col: 5, offset: 58738},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1672, col: 9, offset: 58756},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1672, col: 9, offset: 58756},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1673, col: 11, offset: 58777},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1674, col: 11, offset: 58800},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1675, col: 11, offset: 58816},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1676, col: 11, offset: 58845},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1677, col: 11, offset: 58871},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1678, col: 11, offset: 58897},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1679, col: 11, offset: 58924},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1680, col: 11, offset: 58950},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1681, col: 11, offset: 58979},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1685, col: 1, offset: 59035},
			expr: &actionExpr{
				pos: position{line: 1687, col: 5, offset: 59123},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1687, col: 5, offset: 59123},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1687, col: 5, offset: 59123},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1690, col: 5, offset: 59195},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1691, col: 9, offset: 59213},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1691, col: 9, offset: 59213},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1691, col: 33, offset: 59237},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1691, col: 57, offset: 59261},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1696, col: 1, offset: 59321},
			expr: &actionExpr{
				pos: position{line: 1698, col: 5, offset: 59407},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1698, col: 5, offset: 59407},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1698, col: 5, offset: 59407},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1701, col: 5, offset: 59477},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1702, col: 9, offset: 59495},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1707, col: 1, offset: 59548},
			expr: &actionExpr{
				pos: position{line: 1709, col: 5, offset: 59624},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1709, col: 5, offset: 59624},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1709, col: 5, offset: 59624},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 5, offset: 59684},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1713, col: 9, offset: 59702},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1713, col: 9, offset: 59702},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1714, col: 11, offset: 59724},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1718, col: 1, offset: 59783},
			expr: &actionExpr{
				pos: position{line: 1720, col: 5, offset: 59865},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1720, col: 5, offset: 59865},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1720, col: 5, offset: 59865},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1723, col: 5, offset: 59931},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1724, col: 9, offset: 59949},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1729, col: 1, offset: 59999},
			expr: &actionExpr{
				pos: position{line: 1731, col: 5, offset: 60086},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1731, col: 5, offset: 60086},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1731, col: 5, offset: 60086},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1734, col: 5, offset: 60157},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1736, col: 9, offset: 60255},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1736, col: 9, offset: 60255},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1736, col: 9, offset: 60255},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1739, col: 11, offset: 60359},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1739, col: 12, offset: 60360},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1739, col: 12, offset: 60360},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1739, col: 18, offset: 60366},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1739, col: 24, offset: 60372},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1749, col: 1, offset: 60601},
			expr: &choiceExpr{
				pos: position{line: 1749, col: 11, offset: 60611},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1749, col: 11, offset: 60611},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1749, col: 24, offset: 60624},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1749, col: 36, offset: 60636},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1749, col: 48, offset: 60648},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1749, col: 61, offset: 60661},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1749, col: 72, offset: 60672},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1751, col: 1, offset: 60691},
			expr: &actionExpr{
				pos: position{line: 1751, col: 15, offset: 60705},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1751, col: 15, offset: 60705},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1755, col: 1, offset: 60767},
			expr: &litMatcher{
				pos:        position{line: 1755, col: 18, offset: 60784},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1757, col: 1, offset: 60807},
			expr: &actionExpr{
				pos: position{line: 1757, col: 14, offset: 60820},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1757, col: 14, offset: 60820},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1761, col: 1, offset: 60883},
			expr: &actionExpr{
				pos: position{line: 1761, col: 14, offset: 60896},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1761, col: 14, offset: 60896},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1765, col: 1, offset: 60960},
			expr: &actionExpr{
				pos: position{line: 1765, col: 15, offset: 60974},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1765, col: 15, offset: 60974},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1769, col: 1, offset: 61037},
			expr: &actionExpr{
				pos: position{line: 1769, col: 13, offset: 61049},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1769, col: 13, offset: 61049},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1777, col: 1, offset: 61334},
			expr: &actionExpr{
				pos: position{line: 1777, col: 22, offset: 61355},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1777, col: 22, offset: 61355},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1777, col: 22, offset: 61355},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1777, col: 31, offset: 61364},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1777, col: 35, offset: 61368},
							expr: &charClassMatcher{
								pos:        position{line: 1777, col: 36, offset: 61369},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1784, col: 1, offset: 61647},
			expr: &actionExpr{
				pos: position{line: 1784, col: 18, offset: 61664},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1784, col: 18, offset: 61664},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1784, col: 19, offset: 61665},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1784, col: 19, offset: 61665},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 27, offset: 61673},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 37, offset: 61683},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 45, offset: 61691},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 55, offset: 61701},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 63, offset: 61709},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1784, col: 72, offset: 61718},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1791, col: 1, offset: 61877},
			expr: &actionExpr{
				pos: position{line: 1792, col: 5, offset: 61900},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1792, col: 5, offset: 61900},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1792, col: 5, offset: 61900},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1792, col: 11, offset: 61906},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1793, col: 5, offset: 61926},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1797, col: 5, offset: 62066},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1798, col: 5, offset: 62076},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1798, col: 12, offset: 62083},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1799, col: 5, offset: 62104},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1799, col: 23, offset: 62122},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1803, col: 1, offset: 62253},
			expr: &actionExpr{
				pos: position{line: 1804, col: 5, offset: 62277},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1804, col: 5, offset: 62277},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1804, col: 5, offset: 62277},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1804, col: 11, offset: 62283},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1805, col: 5, offset: 62303},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1809, col: 5, offset: 62443},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1810, col: 5, offset: 62452},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1810, col: 12, offset: 62459},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1811, col: 5, offset: 62480},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1811, col: 23, offset: 62498},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1815, col: 1, offset: 62630},
			expr: &actionExpr{
				pos: position{line: 1815, col: 18, offset: 62647},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1815, col: 19, offset: 62648},
					expr: &charClassMatcher{
						pos:        position{line: 1815, col: 19, offset: 62648},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1819, col: 1, offset: 62705},
			expr: &actionExpr{
				pos: position{line: 1819, col: 19, offset: 62723},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1819, col: 19, offset: 62723},
					expr: &charClassMatcher{
						pos:        position{line: 1819, col: 19, offset: 62723},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1826, col: 1, offset: 62885},
			expr: &charClassMatcher{
				pos:        position{line: 1826, col: 13, offset: 62897},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1828, col: 1, offset: 62907},
			expr: &choiceExpr{
				pos: position{line: 1828, col: 16, offset: 62922},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1828, col: 16, offset: 62922},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1828, col: 22, offset: 62928},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1828, col: 28, offset: 62934},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1828, col: 34, offset: 62940},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1828, col: 40, offset: 62946},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1828, col: 46, offset: 62952},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1830, col: 1, offset: 62958},
			expr: &actionExpr{
				pos: position{line: 1830, col: 14, offset: 62971},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1830, col: 14, offset: 62971},
					expr: &charClassMatcher{
						pos:        position{line: 1830, col: 14, offset: 62971},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1834, col: 1, offset: 63025},
			expr: &choiceExpr{
				pos: position{line: 1838, col: 5, offset: 63352},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1838, col: 5, offset: 63352},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1838, col: 5, offset: 63352},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1838, col: 5, offset: 63352},
									expr: &charClassMatcher{
										pos:        position{line: 1838, col: 5, offset: 63352},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1838, col: 15, offset: 63362},
									expr: &choiceExpr{
										pos: position{line: 1838, col: 17, offset: 63364},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1838, col: 17, offset: 63364},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1838, col: 30, offset: 63377},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1840, col: 9, offset: 63446},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1840, col: 9, offset: 63446},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1840, col: 9, offset: 63446},
									expr: &charClassMatcher{
										pos:        position{line: 1840, col: 9, offset: 63446},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1840, col: 19, offset: 63456},
									expr: &seqExpr{
										pos: position{line: 1840, col: 20, offset: 63457},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1840, col: 20, offset: 63457},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1840, col: 27, offset: 63464},
												expr: &charClassMatcher{
													pos:        position{line: 1840, col: 27, offset: 63464},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1845, col: 1, offset: 63556},
			expr: &choiceExpr{
				pos: position{line: 1849, col: 5, offset: 63749},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1849, col: 5, offset: 63749},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1849, col: 5, offset: 63749},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1849, col: 5, offset: 63749},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 1849, col: 14, offset: 63758},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 1849, col: 14, offset: 63758},
											expr: &charClassMatcher{
												pos:        position{line: 1849, col: 14, offset: 63758},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1852, col: 5, offset: 63839},
									expr: &choiceExpr{
										pos: position{line: 1852, col: 7, offset: 63841},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1852, col: 7, offset: 63841},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1852, col: 17, offset: 63851},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 1852, col: 47, offset: 63881},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 9, offset: 63924},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1857, col: 1, offset: 64024},
			expr: &actionExpr{
				pos: position{line: 1857, col: 12, offset: 64035},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1857, col: 12, offset: 64035},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1861, col: 1, offset: 64108},
			expr: &actionExpr{
				pos: position{line: 1861, col: 17, offset: 64124},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1861, col: 17, offset: 64124},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1861, col: 22, offset: 64129},
						expr: &choiceExpr{
							pos: position{line: 1861, col: 23, offset: 64130},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1861, col: 23, offset: 64130},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 1861, col: 34, offset: 64141},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1865, col: 1, offset: 64230},
			expr: &actionExpr{
				pos: position{line: 1865, col: 13, offset: 64242},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1865, col: 13, offset: 64242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1865, col: 13, offset: 64242},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1865, col: 20, offset: 64249},
								expr: &ruleRefExpr{
									pos:  position{line: 1865, col: 21, offset: 64250},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1865, col: 30, offset: 64259},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1865, col: 35, offset: 64264},
								expr: &choiceExpr{
									pos: position{line: 1865, col: 36, offset: 64265},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1865, col: 36, offset: 64265},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1865, col: 47, offset: 64276},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1869, col: 1, offset: 64369},
			expr: &actionExpr{
				pos: position{line: 1869, col: 23, offset: 64391},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1869, col: 23, offset: 64391},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1869, col: 23, offset: 64391},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 31, offset: 64399},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1869, col: 39, offset: 64407},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1869, col: 44, offset: 64412},
								expr: &choiceExpr{
									pos: position{line: 1869, col: 45, offset: 64413},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1869, col: 45, offset: 64413},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1869, col: 56, offset: 64424},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 1873, col: 1, offset: 64517},
			expr: &actionExpr{
				pos: position{line: 1873, col: 13, offset: 64529},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 1873, col: 13, offset: 64529},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1873, col: 22, offset: 64538},
						expr: &choiceExpr{
							pos: position{line: 1875, col: 5, offset: 64577},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1875, col: 5, offset: 64577},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 1875, col: 5, offset: 64577},
										expr: &charClassMatcher{
											pos:        position{line: 1875, col: 6, offset: 64578},
											val:        "[^\\r\\n[\\]\\uFFFD{&<> ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1878, col: 7, offset: 64717},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1879, col: 7, offset: 64746},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 1880, col: 7, offset: 64769},
									run: (*parser).callonFilename10,
									expr: &litMatcher{
										pos:        position{line: 1880, col: 7, offset: 64769},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 1886, col: 1, offset: 64907},
			expr: &choiceExpr{
				pos: position{line: 1886, col: 11, offset: 64917},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1886, col: 11, offset: 64917},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1886, col: 23, offset: 64929},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1886, col: 36, offset: 64942},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1886, col: 47, offset: 64953},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1886, col: 58, offset: 64964},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 1888, col: 1, offset: 64975},
			expr: &actionExpr{
				pos: position{line: 1888, col: 7, offset: 64981},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1888, col: 7, offset: 64981},
					expr: &charClassMatcher{
						pos:        position{line: 1888, col: 7, offset: 64981},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 1892, col: 1, offset: 65114},
			expr: &actionExpr{
				pos: position{line: 1892, col: 10, offset: 65123},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 1892, col: 10, offset: 65123},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1896, col: 1, offset: 65173},
			expr: &actionExpr{
				pos: position{line: 1896, col: 11, offset: 65183},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 1896, col: 11, offset: 65183},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1896, col: 11, offset: 65183},
							expr: &litMatcher{
								pos:        position{line: 1896, col: 11, offset: 65183},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1896, col: 16, offset: 65188},
							expr: &ruleRefExpr{
								pos:  position{line: 1896, col: 16, offset: 65188},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1900, col: 1, offset: 65248},
			expr: &choiceExpr{
				pos: position{line: 1900, col: 10, offset: 65257},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1900, col: 10, offset: 65257},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1900, col: 16, offset: 65263},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1900, col: 16, offset: 65263},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1904, col: 1, offset: 65312},
			expr: &choiceExpr{
				pos: position{line: 1904, col: 12, offset: 65323},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1904, col: 12, offset: 65323},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1904, col: 19, offset: 65330},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 1904, col: 28, offset: 65339},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 1904, col: 28, offset: 65339},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1908, col: 1, offset: 65423},
			expr: &notExpr{
				pos: position{line: 1908, col: 8, offset: 65430},
				expr: &anyMatcher{
					line: 1908, col: 9, offset: 65431,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1910, col: 1, offset: 65434},
			expr: &choiceExpr{
				pos: position{line: 1910, col: 8, offset: 65441},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1910, col: 8, offset: 65441},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 1910, col: 14, offset: 65447},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onAttributeDeclaration3() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonAttributeDeclaration3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration3()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes13(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue15()
}

func (c *current) onSingleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue18()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue15()
}

func (c *current) onDoubleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue18()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue21() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue7(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue7(stack["element"])
}

func (c *current) onUnquotedAttributeValue23(elements interface{}) (bool, error) {
	// post-parsing condition to verify that the value is not an empty string
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue23(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() error {
	// for images, we always enable the 'normal' substitutions
	return c.setSubstitutionPhase("normal")

}

func (p *parser) callonImageBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onItalicWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonItalicWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicWord1()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return []interface{}{
		types.StringElement{Content: string(c.text)},
	}, nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(content interface{}) (interface{}, error) {
	s, _ := types.NewStringElement(string(c.text))
	return []interface{}{s}, nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["content"])
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename10()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

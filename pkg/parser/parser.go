// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragments",
			pos:  position{line: 21, col: 1, offset: 347},
			expr: &actionExpr{
				pos: position{line: 22, col: 5, offset: 373},
				run: (*parser).callonDocumentFragments1,
				expr: &seqExpr{
					pos: position{line: 22, col: 5, offset: 373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 5, offset: 373},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 22, col: 17, offset: 385},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 18, offset: 386},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 404},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 23, col: 13, offset: 412},
								expr: &ruleRefExpr{
									pos:  position{line: 23, col: 13, offset: 412},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 434},
							label: "fragments",
							expr: &zeroOrMoreExpr{
								pos: position{line: 24, col: 15, offset: 444},
								expr: &ruleRefExpr{
									pos:  position{line: 24, col: 16, offset: 445},
									name: "DocumentFragment",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 35, offset: 464},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 31, col: 1, offset: 696},
			expr: &actionExpr{
				pos: position{line: 31, col: 25, offset: 720},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 31, col: 25, offset: 720},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 31, col: 25, offset: 720},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 31, col: 29, offset: 724},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 35, offset: 730},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 31, col: 50, offset: 745},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 32, col: 9, offset: 758},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 15, offset: 764},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 16, offset: 765},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 32, col: 44, offset: 793},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 39, col: 1, offset: 1066},
			expr: &actionExpr{
				pos: position{line: 39, col: 18, offset: 1083},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 39, col: 18, offset: 1083},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 39, col: 18, offset: 1083},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 39, col: 28, offset: 1093},
							expr: &charClassMatcher{
								pos:        position{line: 39, col: 29, offset: 1094},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 43, col: 1, offset: 1142},
			expr: &actionExpr{
				pos: position{line: 43, col: 30, offset: 1171},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 43, col: 30, offset: 1171},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 43, col: 30, offset: 1171},
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 30, offset: 1171},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 43, col: 37, offset: 1178},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 43, col: 46, offset: 1187},
								expr: &choiceExpr{
									pos: position{line: 44, col: 5, offset: 1193},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 44, col: 6, offset: 1194},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 44, col: 6, offset: 1194},
												expr: &charClassMatcher{
													pos:        position{line: 44, col: 6, offset: 1194},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 47, col: 5, offset: 1273},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 48, col: 6, offset: 1302},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 48, col: 6, offset: 1302},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 55, col: 1, offset: 1469},
			expr: &choiceExpr{
				pos: position{line: 55, col: 19, offset: 1487},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 55, col: 19, offset: 1487},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 55, col: 19, offset: 1487},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 55, col: 19, offset: 1487},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 55, col: 24, offset: 1492},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 30, offset: 1498},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 55, col: 45, offset: 1513},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 55, col: 49, offset: 1517},
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 49, offset: 1517},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1524},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 57, col: 5, offset: 1584},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 57, col: 5, offset: 1584},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 57, col: 5, offset: 1584},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 57, col: 9, offset: 1588},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 57, col: 15, offset: 1594},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 57, col: 30, offset: 1609},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 57, col: 35, offset: 1614},
									expr: &ruleRefExpr{
										pos:  position{line: 57, col: 35, offset: 1614},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 57, col: 42, offset: 1621},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 64, col: 1, offset: 1803},
			expr: &actionExpr{
				pos: position{line: 65, col: 5, offset: 1827},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 65, col: 5, offset: 1827},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 65, col: 16, offset: 1838},
						expr: &choiceExpr{
							pos: position{line: 67, col: 9, offset: 1905},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 67, col: 10, offset: 1906},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 67, col: 10, offset: 1906},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 67, col: 10, offset: 1906},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 67, col: 18, offset: 1914},
													name: "ShortHandAnchor",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 67, col: 35, offset: 1931},
												expr: &ruleRefExpr{
													pos:  position{line: 67, col: 35, offset: 1931},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 67, col: 42, offset: 1938},
												name: "Newline",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 71, col: 12, offset: 2056},
									run: (*parser).callonBlockAttributes12,
									expr: &seqExpr{
										pos: position{line: 71, col: 12, offset: 2056},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 71, col: 12, offset: 2056},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 71, col: 19, offset: 2063},
													name: "ShortHandTitle",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 71, col: 35, offset: 2079},
												expr: &ruleRefExpr{
													pos:  position{line: 71, col: 35, offset: 2079},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 71, col: 42, offset: 2086},
												name: "Newline",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 75, col: 12, offset: 2174},
									run: (*parser).callonBlockAttributes19,
									expr: &seqExpr{
										pos: position{line: 75, col: 12, offset: 2174},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 75, col: 12, offset: 2174},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 75, col: 24, offset: 2186},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 75, col: 44, offset: 2206},
												expr: &ruleRefExpr{
													pos:  position{line: 75, col: 44, offset: 2206},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 75, col: 51, offset: 2213},
												name: "Newline",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 82, col: 1, offset: 2353},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2377},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2377},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 83, col: 5, offset: 2377},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 2385},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 84, col: 16, offset: 2396},
								expr: &choiceExpr{
									pos: position{line: 84, col: 17, offset: 2397},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 84, col: 17, offset: 2397},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 84, col: 37, offset: 2417},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 85, col: 5, offset: 2438},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 90, col: 1, offset: 2566},
			expr: &actionExpr{
				pos: position{line: 91, col: 4, offset: 2588},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 91, col: 4, offset: 2588},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 4, offset: 2588},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 5, offset: 2598},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 93, col: 9, offset: 2611},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 93, col: 9, offset: 2611},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 93, col: 18, offset: 2620},
										expr: &choiceExpr{
											pos: position{line: 94, col: 13, offset: 2634},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 94, col: 14, offset: 2635},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 94, col: 14, offset: 2635},
														expr: &charClassMatcher{
															pos:        position{line: 94, col: 14, offset: 2635},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 97, col: 13, offset: 2802},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 98, col: 13, offset: 2835},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 99, col: 14, offset: 2858},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 99, col: 14, offset: 2858},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 105, col: 5, offset: 3044},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 110, col: 1, offset: 3145},
			expr: &actionExpr{
				pos: position{line: 110, col: 19, offset: 3163},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 110, col: 19, offset: 3163},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 110, col: 19, offset: 3163},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 110, col: 23, offset: 3167},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 111, col: 5, offset: 3179},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 111, col: 5, offset: 3179},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 111, col: 5, offset: 3179},
											expr: &charClassMatcher{
												pos:        position{line: 111, col: 6, offset: 3180},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 112, col: 5, offset: 3292},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 112, col: 14, offset: 3301},
												expr: &choiceExpr{
													pos: position{line: 113, col: 9, offset: 3311},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 113, col: 10, offset: 3312},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 113, col: 10, offset: 3312},
																expr: &charClassMatcher{
																	pos:        position{line: 113, col: 10, offset: 3312},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 116, col: 9, offset: 3410},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 117, col: 9, offset: 3439},
															name: "AttrSub",
														},
														&actionExpr{
															pos: position{line: 118, col: 10, offset: 3458},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 118, col: 10, offset: 3458},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 129, col: 1, offset: 3858},
			expr: &actionExpr{
				pos: position{line: 130, col: 5, offset: 3884},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 130, col: 5, offset: 3884},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 130, col: 5, offset: 3884},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 130, col: 9, offset: 3888},
							expr: &litMatcher{
								pos:        position{line: 130, col: 10, offset: 3889},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 132, col: 5, offset: 4059},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 132, col: 31, offset: 4085},
								expr: &ruleRefExpr{
									pos:  position{line: 132, col: 32, offset: 4086},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 5, offset: 4118},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 133, col: 21, offset: 4134},
								expr: &choiceExpr{
									pos: position{line: 133, col: 22, offset: 4135},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 133, col: 22, offset: 4135},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 133, col: 44, offset: 4157},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 134, col: 5, offset: 4178},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 145, col: 1, offset: 4638},
			expr: &actionExpr{
				pos: position{line: 146, col: 5, offset: 4672},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 146, col: 5, offset: 4672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 146, col: 5, offset: 4672},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 146, col: 10, offset: 4677},
								expr: &ruleRefExpr{
									pos:  position{line: 147, col: 9, offset: 4687},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 149, col: 5, offset: 4717},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 149, col: 12, offset: 4724},
								expr: &choiceExpr{
									pos: position{line: 150, col: 9, offset: 4735},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 150, col: 9, offset: 4735},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 151, col: 11, offset: 4767},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 152, col: 11, offset: 4802},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 153, col: 8, offset: 4835},
							expr: &seqExpr{
								pos: position{line: 153, col: 9, offset: 4836},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 153, col: 9, offset: 4836},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 153, col: 13, offset: 4840},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 13, offset: 4840},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 154, col: 5, offset: 4854},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 168, col: 1, offset: 5211},
			expr: &actionExpr{
				pos: position{line: 168, col: 25, offset: 5235},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 168, col: 25, offset: 5235},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 168, col: 25, offset: 5235},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 168, col: 29, offset: 5239},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 33, offset: 5243},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 172, col: 1, offset: 5317},
			expr: &actionExpr{
				pos: position{line: 172, col: 23, offset: 5339},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 172, col: 23, offset: 5339},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 172, col: 30, offset: 5346},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 177, col: 1, offset: 5472},
			expr: &actionExpr{
				pos: position{line: 177, col: 30, offset: 5501},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 177, col: 30, offset: 5501},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 177, col: 30, offset: 5501},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 34, offset: 5505},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 40, offset: 5511},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 182, col: 1, offset: 5633},
			expr: &actionExpr{
				pos: position{line: 182, col: 29, offset: 5661},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 182, col: 29, offset: 5661},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 182, col: 29, offset: 5661},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 33, offset: 5665},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 41, offset: 5673},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 187, col: 1, offset: 5786},
			expr: &choiceExpr{
				pos: position{line: 188, col: 5, offset: 5818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 5818},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 7, offset: 5852},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 190, col: 7, offset: 5886},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 190, col: 7, offset: 5886},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 190, col: 7, offset: 5886},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 190, col: 16, offset: 5895},
										expr: &choiceExpr{
											pos: position{line: 193, col: 5, offset: 6065},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 193, col: 6, offset: 6066},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 193, col: 6, offset: 6066},
														expr: &charClassMatcher{
															pos:        position{line: 193, col: 6, offset: 6066},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 196, col: 5, offset: 6160},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 197, col: 5, offset: 6177},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 198, col: 5, offset: 6202},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 199, col: 6, offset: 6217},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 199, col: 6, offset: 6217},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 201, col: 10, offset: 6287},
									expr: &charClassMatcher{
										pos:        position{line: 201, col: 11, offset: 6288},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 205, col: 1, offset: 6364},
			expr: &choiceExpr{
				pos: position{line: 205, col: 24, offset: 6387},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 206, col: 5, offset: 6393},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 206, col: 5, offset: 6393},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 206, col: 5, offset: 6393},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 12, offset: 6400},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 206, col: 29, offset: 6417},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 206, col: 29, offset: 6417},
											expr: &seqExpr{
												pos: position{line: 206, col: 30, offset: 6418},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 206, col: 30, offset: 6418},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 206, col: 34, offset: 6422},
														expr: &ruleRefExpr{
															pos:  position{line: 206, col: 34, offset: 6422},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 206, col: 45, offset: 6433},
											expr: &litMatcher{
												pos:        position{line: 206, col: 46, offset: 6434},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 211, col: 6, offset: 6671},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 211, col: 6, offset: 6671},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 211, col: 6, offset: 6671},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 211, col: 13, offset: 6678},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 211, col: 13, offset: 6678},
												expr: &ruleRefExpr{
													pos:  position{line: 211, col: 13, offset: 6678},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 211, col: 21, offset: 6686},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 211, col: 22, offset: 6687},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 211, col: 22, offset: 6687},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 211, col: 26, offset: 6691},
																expr: &ruleRefExpr{
																	pos:  position{line: 211, col: 26, offset: 6691},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 211, col: 36, offset: 6701},
														expr: &litMatcher{
															pos:        position{line: 211, col: 37, offset: 6702},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 212, col: 5, offset: 6712},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 223, col: 1, offset: 7025},
			expr: &actionExpr{
				pos: position{line: 223, col: 19, offset: 7043},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 223, col: 19, offset: 7043},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 223, col: 19, offset: 7043},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 24, offset: 7048},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 43, offset: 7067},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 223, col: 47, offset: 7071},
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 47, offset: 7071},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 223, col: 54, offset: 7078},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 61, offset: 7085},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 223, col: 77, offset: 7101},
							expr: &seqExpr{
								pos: position{line: 223, col: 78, offset: 7102},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 223, col: 78, offset: 7102},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 223, col: 82, offset: 7106},
										expr: &ruleRefExpr{
											pos:  position{line: 223, col: 82, offset: 7106},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 228, col: 1, offset: 7330},
			expr: &actionExpr{
				pos: position{line: 228, col: 22, offset: 7351},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 228, col: 22, offset: 7351},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 228, col: 22, offset: 7351},
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 23, offset: 7352},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 228, col: 29, offset: 7358},
							expr: &charClassMatcher{
								pos:        position{line: 228, col: 29, offset: 7358},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 228, col: 42, offset: 7371},
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 42, offset: 7371},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 232, col: 1, offset: 7441},
			expr: &actionExpr{
				pos: position{line: 233, col: 5, offset: 7464},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 233, col: 5, offset: 7464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 233, col: 5, offset: 7464},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 234, col: 9, offset: 7480},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7480},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 11, offset: 7518},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 11, offset: 7556},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 238, col: 5, offset: 7590},
							expr: &notExpr{
								pos: position{line: 238, col: 7, offset: 7592},
								expr: &seqExpr{
									pos: position{line: 238, col: 9, offset: 7594},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 238, col: 9, offset: 7594},
											expr: &ruleRefExpr{
												pos:  position{line: 238, col: 9, offset: 7594},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 238, col: 16, offset: 7601},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 242, col: 1, offset: 7642},
			expr: &actionExpr{
				pos: position{line: 243, col: 5, offset: 7677},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 243, col: 5, offset: 7677},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 5, offset: 7677},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 5, offset: 7686},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 244, col: 14, offset: 7695},
								expr: &choiceExpr{
									pos: position{line: 245, col: 9, offset: 7705},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 245, col: 9, offset: 7705},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 246, col: 12, offset: 7728},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 246, col: 12, offset: 7728},
												expr: &charClassMatcher{
													pos:        position{line: 246, col: 12, offset: 7728},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 249, col: 11, offset: 7874},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 250, col: 11, offset: 7903},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 251, col: 12, offset: 7922},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 251, col: 12, offset: 7922},
													run: (*parser).callonSingleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 251, col: 12, offset: 7922},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 254, col: 11, offset: 8014},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 254, col: 17, offset: 8020},
													run: (*parser).callonSingleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 254, col: 17, offset: 8020},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 258, col: 5, offset: 8109},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 262, col: 1, offset: 8165},
			expr: &actionExpr{
				pos: position{line: 263, col: 5, offset: 8200},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 263, col: 5, offset: 8200},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 263, col: 5, offset: 8200},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 5, offset: 8210},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 264, col: 14, offset: 8219},
								expr: &choiceExpr{
									pos: position{line: 265, col: 9, offset: 8229},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 265, col: 9, offset: 8229},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 266, col: 12, offset: 8252},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 266, col: 12, offset: 8252},
												expr: &charClassMatcher{
													pos:        position{line: 266, col: 12, offset: 8252},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 11, offset: 8398},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 270, col: 11, offset: 8427},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 271, col: 12, offset: 8446},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 271, col: 12, offset: 8446},
													run: (*parser).callonDoubleQuotedAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 271, col: 12, offset: 8446},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 274, col: 11, offset: 8538},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 274, col: 17, offset: 8544},
													run: (*parser).callonDoubleQuotedAttributeValue17,
													expr: &litMatcher{
														pos:        position{line: 274, col: 17, offset: 8544},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 5, offset: 8633},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 283, col: 1, offset: 8768},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8799},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8799},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 284, col: 5, offset: 8799},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 6, offset: 8800},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 5, offset: 8810},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 14, offset: 8819},
								expr: &choiceExpr{
									pos: position{line: 286, col: 9, offset: 8829},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 286, col: 9, offset: 8829},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 287, col: 12, offset: 8851},
											run: (*parser).callonUnquotedAttributeValue9,
											expr: &oneOrMoreExpr{
												pos: position{line: 287, col: 12, offset: 8851},
												expr: &charClassMatcher{
													pos:        position{line: 287, col: 12, offset: 8851},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 290, col: 11, offset: 8953},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 291, col: 11, offset: 8982},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 292, col: 12, offset: 9001},
											run: (*parser).callonUnquotedAttributeValue14,
											expr: &litMatcher{
												pos:        position{line: 292, col: 12, offset: 9001},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 296, col: 5, offset: 9089},
							run: (*parser).callonUnquotedAttributeValue16,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 307, col: 1, offset: 9403},
			expr: &choiceExpr{
				pos: position{line: 307, col: 26, offset: 9428},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 307, col: 26, offset: 9428},
						name: "CounterSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 307, col: 48, offset: 9450},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 309, col: 1, offset: 9459},
			expr: &actionExpr{
				pos: position{line: 309, col: 12, offset: 9470},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 309, col: 12, offset: 9470},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 12, offset: 9470},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 16, offset: 9474},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 21, offset: 9479},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 309, col: 35, offset: 9493},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 314, col: 1, offset: 9608},
			expr: &choiceExpr{
				pos: position{line: 314, col: 24, offset: 9631},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 314, col: 24, offset: 9631},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 314, col: 47, offset: 9654},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 316, col: 1, offset: 9790},
			expr: &actionExpr{
				pos: position{line: 316, col: 25, offset: 9814},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 316, col: 25, offset: 9814},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 316, col: 25, offset: 9814},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 316, col: 37, offset: 9826},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 316, col: 42, offset: 9831},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 56, offset: 9845},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 316, col: 62, offset: 9851},
								expr: &ruleRefExpr{
									pos:  position{line: 316, col: 63, offset: 9852},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 316, col: 78, offset: 9867},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 320, col: 1, offset: 9945},
			expr: &actionExpr{
				pos: position{line: 320, col: 25, offset: 9969},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 320, col: 25, offset: 9969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 25, offset: 9969},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 38, offset: 9982},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 43, offset: 9987},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 57, offset: 10001},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 63, offset: 10007},
								expr: &ruleRefExpr{
									pos:  position{line: 320, col: 64, offset: 10008},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 320, col: 79, offset: 10023},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 324, col: 1, offset: 10098},
			expr: &actionExpr{
				pos: position{line: 324, col: 17, offset: 10114},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 324, col: 17, offset: 10114},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 324, col: 17, offset: 10114},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 21, offset: 10118},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 324, col: 28, offset: 10125},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 324, col: 28, offset: 10125},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 324, col: 28, offset: 10125},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 326, col: 9, offset: 10179},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 326, col: 9, offset: 10179},
											expr: &charClassMatcher{
												pos:        position{line: 326, col: 9, offset: 10179},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 335, col: 1, offset: 10381},
			expr: &actionExpr{
				pos: position{line: 335, col: 14, offset: 10394},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 335, col: 14, offset: 10394},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 335, col: 14, offset: 10394},
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 15, offset: 10395},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 335, col: 19, offset: 10399},
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 19, offset: 10399},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 335, col: 26, offset: 10406},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 342, col: 1, offset: 10643},
			expr: &actionExpr{
				pos: position{line: 342, col: 12, offset: 10654},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 342, col: 12, offset: 10654},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 12, offset: 10654},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 342, col: 16, offset: 10658},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 342, col: 21, offset: 10663},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 342, col: 21, offset: 10663},
									expr: &charClassMatcher{
										pos:        position{line: 342, col: 21, offset: 10663},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 342, col: 69, offset: 10711},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 73, offset: 10715},
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 73, offset: 10715},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 342, col: 80, offset: 10722},
							expr: &choiceExpr{
								pos: position{line: 342, col: 82, offset: 10724},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 342, col: 82, offset: 10724},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 342, col: 88, offset: 10730},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 346, col: 1, offset: 10791},
			expr: &actionExpr{
				pos: position{line: 346, col: 20, offset: 10810},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 346, col: 20, offset: 10810},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 346, col: 20, offset: 10810},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 25, offset: 10815},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 346, col: 48, offset: 10838},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 61, offset: 10851},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 350, col: 1, offset: 10963},
			expr: &actionExpr{
				pos: position{line: 350, col: 26, offset: 10988},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 350, col: 26, offset: 10988},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 26, offset: 10988},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 30, offset: 10992},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 350, col: 35, offset: 10997},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 350, col: 35, offset: 10997},
									expr: &charClassMatcher{
										pos:        position{line: 350, col: 35, offset: 10997},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 350, col: 83, offset: 11045},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 350, col: 87, offset: 11049},
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 87, offset: 11049},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 357, col: 1, offset: 11279},
			expr: &seqExpr{
				pos: position{line: 357, col: 26, offset: 11304},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 357, col: 26, offset: 11304},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 357, col: 33, offset: 11311},
						expr: &ruleRefExpr{
							pos:  position{line: 357, col: 33, offset: 11311},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 357, col: 40, offset: 11318},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 359, col: 1, offset: 11323},
			expr: &seqExpr{
				pos: position{line: 359, col: 31, offset: 11353},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 359, col: 31, offset: 11353},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 359, col: 38, offset: 11360},
						expr: &ruleRefExpr{
							pos:  position{line: 359, col: 38, offset: 11360},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 359, col: 45, offset: 11367},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 361, col: 1, offset: 11372},
			expr: &choiceExpr{
				pos: position{line: 361, col: 29, offset: 11400},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 361, col: 30, offset: 11401},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 361, col: 30, offset: 11401},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 361, col: 37, offset: 11408},
								expr: &ruleRefExpr{
									pos:  position{line: 361, col: 37, offset: 11408},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 361, col: 44, offset: 11415},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 361, col: 51, offset: 11422},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 363, col: 1, offset: 11427},
			expr: &actionExpr{
				pos: position{line: 363, col: 17, offset: 11443},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 363, col: 17, offset: 11443},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 363, col: 17, offset: 11443},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 44, offset: 11470},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 53, offset: 11479},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 78, offset: 11504},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 367, col: 1, offset: 11605},
			expr: &zeroOrMoreExpr{
				pos: position{line: 367, col: 27, offset: 11631},
				expr: &actionExpr{
					pos: position{line: 367, col: 28, offset: 11632},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 367, col: 28, offset: 11632},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 367, col: 28, offset: 11632},
								expr: &ruleRefExpr{
									pos:  position{line: 367, col: 29, offset: 11633},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 367, col: 54, offset: 11658},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 367, col: 60, offset: 11664},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 372, col: 1, offset: 11711},
			expr: &actionExpr{
				pos: position{line: 372, col: 12, offset: 11722},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 372, col: 12, offset: 11722},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 372, col: 12, offset: 11722},
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 13, offset: 11723},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 372, col: 17, offset: 11727},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 372, col: 26, offset: 11736},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 372, col: 26, offset: 11736},
									expr: &charClassMatcher{
										pos:        position{line: 372, col: 26, offset: 11736},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 8, offset: 11815},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 378, col: 1, offset: 11879},
			expr: &actionExpr{
				pos: position{line: 378, col: 22, offset: 11900},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 378, col: 22, offset: 11900},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 378, col: 22, offset: 11900},
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 23, offset: 11901},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 378, col: 45, offset: 11923},
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 45, offset: 11923},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 378, col: 52, offset: 11930},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 57, offset: 11935},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 66, offset: 11944},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 92, offset: 11970},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 382, col: 1, offset: 12043},
			expr: &actionExpr{
				pos: position{line: 382, col: 29, offset: 12071},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 382, col: 29, offset: 12071},
					expr: &charClassMatcher{
						pos:        position{line: 382, col: 29, offset: 12071},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 389, col: 1, offset: 12236},
			expr: &choiceExpr{
				pos: position{line: 389, col: 19, offset: 12254},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 389, col: 19, offset: 12254},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 389, col: 44, offset: 12279},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 391, col: 1, offset: 12304},
			expr: &choiceExpr{
				pos: position{line: 391, col: 27, offset: 12330},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 391, col: 27, offset: 12330},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 391, col: 27, offset: 12330},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 391, col: 27, offset: 12330},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 391, col: 32, offset: 12335},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 391, col: 36, offset: 12339},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 391, col: 40, offset: 12343},
									expr: &ruleRefExpr{
										pos:  position{line: 391, col: 40, offset: 12343},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 391, col: 47, offset: 12350},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 391, col: 51, offset: 12354},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 391, col: 58, offset: 12361},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 391, col: 79, offset: 12382},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 393, col: 9, offset: 12455},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 393, col: 9, offset: 12455},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 393, col: 9, offset: 12455},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 393, col: 14, offset: 12460},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 393, col: 18, offset: 12464},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 393, col: 22, offset: 12468},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 397, col: 1, offset: 12539},
			expr: &actionExpr{
				pos: position{line: 397, col: 27, offset: 12565},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 397, col: 27, offset: 12565},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 397, col: 27, offset: 12565},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 397, col: 35, offset: 12573},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 40, offset: 12578},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 397, col: 54, offset: 12592},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 72, offset: 12610},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 401, col: 1, offset: 12743},
			expr: &oneOrMoreExpr{
				pos: position{line: 401, col: 24, offset: 12766},
				expr: &choiceExpr{
					pos: position{line: 402, col: 5, offset: 12772},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 402, col: 6, offset: 12773},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 402, col: 6, offset: 12773},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 402, col: 6, offset: 12773},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 402, col: 14, offset: 12781},
										expr: &charClassMatcher{
											pos:        position{line: 402, col: 14, offset: 12781},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 405, col: 5, offset: 12976},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 406, col: 6, offset: 12991},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 406, col: 6, offset: 12991},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 415, col: 1, offset: 13266},
			expr: &actionExpr{
				pos: position{line: 415, col: 19, offset: 13284},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 415, col: 19, offset: 13284},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 415, col: 19, offset: 13284},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 21, offset: 13286},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 416, col: 5, offset: 13316},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 416, col: 16, offset: 13327},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 416, col: 16, offset: 13327},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 417, col: 7, offset: 13386},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 418, col: 7, offset: 13414},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 419, col: 7, offset: 13443},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 420, col: 7, offset: 13472},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 421, col: 7, offset: 13501},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 422, col: 7, offset: 13527},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 423, col: 7, offset: 13555},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 427, col: 1, offset: 13621},
			expr: &actionExpr{
				pos: position{line: 427, col: 26, offset: 13646},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 427, col: 26, offset: 13646},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 26, offset: 13646},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 427, col: 33, offset: 13653},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 33, offset: 13653},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 427, col: 40, offset: 13660},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 431, col: 1, offset: 13719},
			expr: &actionExpr{
				pos: position{line: 431, col: 25, offset: 13743},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 431, col: 25, offset: 13743},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 25, offset: 13743},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 431, col: 31, offset: 13749},
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 31, offset: 13749},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 38, offset: 13756},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 435, col: 1, offset: 13814},
			expr: &actionExpr{
				pos: position{line: 435, col: 26, offset: 13839},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 435, col: 26, offset: 13839},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 26, offset: 13839},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 435, col: 33, offset: 13846},
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 33, offset: 13846},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 40, offset: 13853},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 439, col: 1, offset: 13912},
			expr: &ruleRefExpr{
				pos:  position{line: 439, col: 25, offset: 13936},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 441, col: 1, offset: 13959},
			expr: &actionExpr{
				pos: position{line: 441, col: 26, offset: 13984},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 441, col: 26, offset: 13984},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 441, col: 26, offset: 13984},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 441, col: 33, offset: 13991},
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 33, offset: 13991},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 441, col: 40, offset: 13998},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 445, col: 1, offset: 14057},
			expr: &actionExpr{
				pos: position{line: 445, col: 26, offset: 14082},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 445, col: 26, offset: 14082},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 445, col: 26, offset: 14082},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 445, col: 33, offset: 14089},
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 33, offset: 14089},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 445, col: 40, offset: 14096},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 449, col: 1, offset: 14155},
			expr: &actionExpr{
				pos: position{line: 449, col: 24, offset: 14178},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 449, col: 24, offset: 14178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 449, col: 24, offset: 14178},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 449, col: 31, offset: 14185},
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 31, offset: 14185},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 449, col: 38, offset: 14192},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 453, col: 1, offset: 14249},
			expr: &actionExpr{
				pos: position{line: 453, col: 26, offset: 14274},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 453, col: 26, offset: 14274},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 453, col: 26, offset: 14274},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 453, col: 33, offset: 14281},
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 33, offset: 14281},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 40, offset: 14288},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 457, col: 1, offset: 14347},
			expr: &actionExpr{
				pos: position{line: 457, col: 30, offset: 14376},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 457, col: 30, offset: 14376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 30, offset: 14376},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 457, col: 37, offset: 14383},
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 37, offset: 14383},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 44, offset: 14390},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentFragment",
			pos:  position{line: 466, col: 1, offset: 14593},
			expr: &actionExpr{
				pos: position{line: 466, col: 21, offset: 14613},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 466, col: 21, offset: 14613},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 466, col: 21, offset: 14613},
							expr: &ruleRefExpr{
								pos:  position{line: 466, col: 22, offset: 14614},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 467, col: 5, offset: 14622},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 468, col: 9, offset: 14637},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 468, col: 9, offset: 14637},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 469, col: 11, offset: 14655},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 470, col: 11, offset: 14675},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 471, col: 11, offset: 14699},
										name: "BlockAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 472, col: 11, offset: 14725},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 473, col: 11, offset: 14756},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 474, col: 11, offset: 14788},
										name: "BlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 475, col: 11, offset: 14813},
										name: "CalloutListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 476, col: 11, offset: 14839},
										name: "InlineElements",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockFragments",
			pos:  position{line: 482, col: 1, offset: 14973},
			expr: &zeroOrMoreExpr{
				pos: position{line: 482, col: 25, offset: 14997},
				expr: &seqExpr{
					pos: position{line: 482, col: 26, offset: 14998},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 482, col: 26, offset: 14998},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 27, offset: 14999},
								name: "FencedBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 482, col: 48, offset: 15020},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockFragments",
			pos:  position{line: 484, col: 1, offset: 15049},
			expr: &zeroOrMoreExpr{
				pos: position{line: 484, col: 26, offset: 15074},
				expr: &seqExpr{
					pos: position{line: 484, col: 27, offset: 15075},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 484, col: 27, offset: 15075},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 28, offset: 15076},
								name: "ListingBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 50, offset: 15098},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockFragments",
			pos:  position{line: 486, col: 1, offset: 15127},
			expr: &zeroOrMoreExpr{
				pos: position{line: 486, col: 26, offset: 15152},
				expr: &seqExpr{
					pos: position{line: 486, col: 27, offset: 15153},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 486, col: 27, offset: 15153},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 28, offset: 15154},
								name: "LiteralBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 50, offset: 15176},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "LiteralParagraphFragments",
			pos:  position{line: 488, col: 1, offset: 15205},
			expr: &zeroOrMoreExpr{
				pos: position{line: 488, col: 30, offset: 15234},
				expr: &seqExpr{
					pos: position{line: 488, col: 31, offset: 15235},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 488, col: 31, offset: 15235},
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 32, offset: 15236},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 42, offset: 15246},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "SourceBlockFragments",
			pos:  position{line: 490, col: 1, offset: 15275},
			expr: &zeroOrMoreExpr{
				pos: position{line: 490, col: 25, offset: 15299},
				expr: &seqExpr{
					pos: position{line: 490, col: 26, offset: 15300},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 490, col: 26, offset: 15300},
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 27, offset: 15301},
								name: "SourceBlockDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 48, offset: 15322},
							name: "VerbatimDocumentFragment",
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 495, col: 1, offset: 15475},
			expr: &actionExpr{
				pos: position{line: 497, col: 5, offset: 15560},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 497, col: 5, offset: 15560},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 497, col: 5, offset: 15560},
							run: (*parser).callonDocumentHeader3,
						},
						&labeledExpr{
							pos:   position{line: 504, col: 5, offset: 15741},
							label: "fragments",
							expr: &seqExpr{
								pos: position{line: 505, col: 9, offset: 15761},
								exprs: []interface{}{
									&actionExpr{
										pos: position{line: 505, col: 10, offset: 15762},
										run: (*parser).callonDocumentHeader6,
										expr: &seqExpr{
											pos: position{line: 505, col: 10, offset: 15762},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 505, col: 10, offset: 15762},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 505, col: 14, offset: 15766},
													expr: &ruleRefExpr{
														pos:  position{line: 505, col: 14, offset: 15766},
														name: "Space",
													},
												},
												&labeledExpr{
													pos:   position{line: 505, col: 21, offset: 15773},
													label: "title",
													expr: &ruleRefExpr{
														pos:  position{line: 505, col: 28, offset: 15780},
														name: "SectionTitleElements",
													},
												},
												&labeledExpr{
													pos:   position{line: 505, col: 50, offset: 15802},
													label: "id",
													expr: &zeroOrMoreExpr{
														pos: position{line: 505, col: 54, offset: 15806},
														expr: &ruleRefExpr{
															pos:  position{line: 505, col: 54, offset: 15806},
															name: "InlineElementID",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 505, col: 72, offset: 15824},
													name: "EOL",
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 508, col: 9, offset: 15939},
										expr: &choiceExpr{
											pos: position{line: 508, col: 10, offset: 15940},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 508, col: 10, offset: 15940},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 508, col: 30, offset: 15960},
													name: "CommentBlock",
												},
											},
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 509, col: 9, offset: 15983},
										expr: &ruleRefExpr{
											pos:  position{line: 509, col: 9, offset: 15983},
											name: "DocumentAuthors",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 510, col: 9, offset: 16008},
										expr: &choiceExpr{
											pos: position{line: 510, col: 10, offset: 16009},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 510, col: 10, offset: 16009},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 510, col: 30, offset: 16029},
													name: "CommentBlock",
												},
											},
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 511, col: 9, offset: 16052},
										expr: &ruleRefExpr{
											pos:  position{line: 511, col: 9, offset: 16052},
											name: "DocumentRevision",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 516, col: 1, offset: 16152},
			expr: &choiceExpr{
				pos: position{line: 516, col: 20, offset: 16171},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 516, col: 20, offset: 16171},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 516, col: 48, offset: 16199},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 518, col: 1, offset: 16229},
			expr: &actionExpr{
				pos: position{line: 518, col: 30, offset: 16258},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 518, col: 30, offset: 16258},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 518, col: 30, offset: 16258},
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 30, offset: 16258},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 518, col: 37, offset: 16265},
							expr: &litMatcher{
								pos:        position{line: 518, col: 38, offset: 16266},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 518, col: 42, offset: 16270},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 518, col: 51, offset: 16279},
								expr: &ruleRefExpr{
									pos:  position{line: 518, col: 51, offset: 16279},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 68, offset: 16296},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 522, col: 1, offset: 16366},
			expr: &actionExpr{
				pos: position{line: 522, col: 33, offset: 16398},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 522, col: 33, offset: 16398},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 522, col: 33, offset: 16398},
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 33, offset: 16398},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 522, col: 40, offset: 16405},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 51, offset: 16416},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 59, offset: 16424},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 522, col: 75, offset: 16440},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 526, col: 1, offset: 16519},
			expr: &actionExpr{
				pos: position{line: 526, col: 19, offset: 16537},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 526, col: 19, offset: 16537},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 526, col: 19, offset: 16537},
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 19, offset: 16537},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 26, offset: 16544},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 36, offset: 16554},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 56, offset: 16574},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 526, col: 62, offset: 16580},
								expr: &ruleRefExpr{
									pos:  position{line: 526, col: 63, offset: 16581},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 526, col: 85, offset: 16603},
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 85, offset: 16603},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 526, col: 92, offset: 16610},
							expr: &litMatcher{
								pos:        position{line: 526, col: 92, offset: 16610},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 526, col: 97, offset: 16615},
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 97, offset: 16615},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 531, col: 1, offset: 16760},
			expr: &actionExpr{
				pos: position{line: 531, col: 23, offset: 16782},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 531, col: 23, offset: 16782},
					expr: &charClassMatcher{
						pos:        position{line: 531, col: 23, offset: 16782},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 535, col: 1, offset: 16829},
			expr: &actionExpr{
				pos: position{line: 535, col: 24, offset: 16852},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 535, col: 24, offset: 16852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 535, col: 24, offset: 16852},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 535, col: 28, offset: 16856},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 535, col: 35, offset: 16863},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 535, col: 36, offset: 16864},
									expr: &charClassMatcher{
										pos:        position{line: 535, col: 36, offset: 16864},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 537, col: 4, offset: 16911},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 543, col: 1, offset: 17072},
			expr: &actionExpr{
				pos: position{line: 543, col: 21, offset: 17092},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 543, col: 21, offset: 17092},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 543, col: 21, offset: 17092},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 21, offset: 17092},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 543, col: 28, offset: 17099},
							expr: &litMatcher{
								pos:        position{line: 543, col: 29, offset: 17100},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 33, offset: 17104},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 544, col: 9, offset: 17123},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 544, col: 10, offset: 17124},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 544, col: 10, offset: 17124},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 544, col: 10, offset: 17124},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 544, col: 21, offset: 17135},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 544, col: 45, offset: 17159},
													expr: &litMatcher{
														pos:        position{line: 544, col: 45, offset: 17159},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 544, col: 50, offset: 17164},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 544, col: 58, offset: 17172},
														expr: &ruleRefExpr{
															pos:  position{line: 544, col: 59, offset: 17173},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 544, col: 82, offset: 17196},
													expr: &litMatcher{
														pos:        position{line: 544, col: 82, offset: 17196},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 544, col: 87, offset: 17201},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 544, col: 97, offset: 17211},
														expr: &ruleRefExpr{
															pos:  position{line: 544, col: 98, offset: 17212},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 546, col: 15, offset: 17329},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 546, col: 15, offset: 17329},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 546, col: 15, offset: 17329},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 546, col: 24, offset: 17338},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 546, col: 46, offset: 17360},
													expr: &litMatcher{
														pos:        position{line: 546, col: 46, offset: 17360},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 546, col: 51, offset: 17365},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 546, col: 61, offset: 17375},
														expr: &ruleRefExpr{
															pos:  position{line: 546, col: 62, offset: 17376},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 13, offset: 17485},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 553, col: 1, offset: 17615},
			expr: &choiceExpr{
				pos: position{line: 553, col: 27, offset: 17641},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 553, col: 27, offset: 17641},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 553, col: 27, offset: 17641},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 553, col: 27, offset: 17641},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 553, col: 32, offset: 17646},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 553, col: 39, offset: 17653},
									expr: &charClassMatcher{
										pos:        position{line: 553, col: 39, offset: 17653},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 555, col: 5, offset: 17701},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 555, col: 5, offset: 17701},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 555, col: 5, offset: 17701},
									expr: &litMatcher{
										pos:        position{line: 555, col: 5, offset: 17701},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 11, offset: 17707},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 555, col: 18, offset: 17714},
									expr: &charClassMatcher{
										pos:        position{line: 555, col: 18, offset: 17714},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 555, col: 29, offset: 17725},
									expr: &ruleRefExpr{
										pos:  position{line: 555, col: 29, offset: 17725},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 555, col: 36, offset: 17732},
									expr: &litMatcher{
										pos:        position{line: 555, col: 37, offset: 17733},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 559, col: 1, offset: 17773},
			expr: &actionExpr{
				pos: position{line: 559, col: 25, offset: 17797},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 559, col: 25, offset: 17797},
					expr: &charClassMatcher{
						pos:        position{line: 559, col: 25, offset: 17797},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 563, col: 1, offset: 17843},
			expr: &actionExpr{
				pos: position{line: 563, col: 27, offset: 17869},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 563, col: 27, offset: 17869},
					expr: &charClassMatcher{
						pos:        position{line: 563, col: 27, offset: 17869},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 570, col: 1, offset: 18044},
			expr: &actionExpr{
				pos: position{line: 570, col: 23, offset: 18066},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 570, col: 23, offset: 18066},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 570, col: 23, offset: 18066},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 570, col: 32, offset: 18075},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 570, col: 37, offset: 18080},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 570, col: 37, offset: 18080},
									expr: &charClassMatcher{
										pos:        position{line: 570, col: 37, offset: 18080},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 570, col: 76, offset: 18119},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 577, col: 1, offset: 18370},
			expr: &actionExpr{
				pos: position{line: 577, col: 14, offset: 18383},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 577, col: 14, offset: 18383},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 577, col: 14, offset: 18383},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 577, col: 20, offset: 18389},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 577, col: 24, offset: 18393},
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 24, offset: 18393},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 577, col: 31, offset: 18400},
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 32, offset: 18401},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 584, col: 1, offset: 18565},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 18587},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 18587},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 585, col: 5, offset: 18587},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 586, col: 9, offset: 18602},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 586, col: 9, offset: 18602},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 586, col: 9, offset: 18602},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 587, col: 9, offset: 18623},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 587, col: 15, offset: 18629},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 588, col: 9, offset: 18652},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 588, col: 27, offset: 18670},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 592, col: 5, offset: 18830},
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 5, offset: 18830},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 12, offset: 18837},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 596, col: 1, offset: 18897},
			expr: &ruleRefExpr{
				pos:  position{line: 596, col: 26, offset: 18922},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 599, col: 1, offset: 18962},
			expr: &actionExpr{
				pos: position{line: 599, col: 15, offset: 18976},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 599, col: 15, offset: 18976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 15, offset: 18976},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 599, col: 22, offset: 18983},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 599, col: 22, offset: 18983},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 600, col: 7, offset: 19009},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 601, col: 7, offset: 19031},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 7, offset: 19054},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 606, col: 1, offset: 19144},
			expr: &actionExpr{
				pos: position{line: 606, col: 23, offset: 19166},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 606, col: 23, offset: 19166},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 23, offset: 19166},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 606, col: 30, offset: 19173},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 606, col: 30, offset: 19173},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 606, col: 47, offset: 19190},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 607, col: 5, offset: 19212},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 607, col: 12, offset: 19219},
								expr: &actionExpr{
									pos: position{line: 608, col: 9, offset: 19229},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 608, col: 9, offset: 19229},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 608, col: 10, offset: 19230},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 608, col: 10, offset: 19230},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 608, col: 16, offset: 19236},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 609, col: 9, offset: 19347},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 609, col: 16, offset: 19354},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 609, col: 16, offset: 19354},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 609, col: 33, offset: 19371},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 615, col: 1, offset: 19513},
			expr: &actionExpr{
				pos: position{line: 615, col: 19, offset: 19531},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 615, col: 19, offset: 19531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 615, col: 19, offset: 19531},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 26, offset: 19538},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 615, col: 34, offset: 19546},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 39, offset: 19551},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 44, offset: 19556},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 619, col: 1, offset: 19652},
			expr: &actionExpr{
				pos: position{line: 619, col: 20, offset: 19671},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 619, col: 20, offset: 19671},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 619, col: 32, offset: 19683},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 624, col: 1, offset: 19806},
			expr: &actionExpr{
				pos: position{line: 624, col: 14, offset: 19819},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 624, col: 14, offset: 19819},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 624, col: 14, offset: 19819},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 21, offset: 19826},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 40, offset: 19845},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 628, col: 1, offset: 19935},
			expr: &actionExpr{
				pos: position{line: 628, col: 22, offset: 19956},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 628, col: 22, offset: 19956},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 628, col: 22, offset: 19956},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 29, offset: 19963},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 19977},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 12, offset: 19984},
								expr: &actionExpr{
									pos: position{line: 630, col: 9, offset: 19994},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 630, col: 9, offset: 19994},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 630, col: 10, offset: 19995},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 630, col: 10, offset: 19995},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 630, col: 16, offset: 20001},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 631, col: 9, offset: 20112},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 631, col: 16, offset: 20119},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 637, col: 1, offset: 20254},
			expr: &choiceExpr{
				pos: position{line: 637, col: 13, offset: 20266},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 637, col: 13, offset: 20266},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 637, col: 13, offset: 20266},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 637, col: 18, offset: 20271},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 637, col: 18, offset: 20271},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 637, col: 30, offset: 20283},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 639, col: 9, offset: 20359},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 639, col: 9, offset: 20359},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 639, col: 9, offset: 20359},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 639, col: 13, offset: 20363},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 639, col: 18, offset: 20368},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 639, col: 18, offset: 20368},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 639, col: 30, offset: 20380},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 643, col: 1, offset: 20456},
			expr: &actionExpr{
				pos: position{line: 643, col: 16, offset: 20471},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 643, col: 16, offset: 20471},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 643, col: 16, offset: 20471},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 643, col: 23, offset: 20478},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 643, col: 23, offset: 20478},
									expr: &litMatcher{
										pos:        position{line: 643, col: 24, offset: 20479},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 646, col: 5, offset: 20533},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 653, col: 1, offset: 20700},
			expr: &actionExpr{
				pos: position{line: 653, col: 21, offset: 20720},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 653, col: 21, offset: 20720},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 653, col: 21, offset: 20720},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 653, col: 29, offset: 20728},
								expr: &choiceExpr{
									pos: position{line: 653, col: 30, offset: 20729},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 653, col: 30, offset: 20729},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 653, col: 53, offset: 20752},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 653, col: 74, offset: 20773},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 653, col: 74, offset: 20773,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 107, offset: 20806},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 657, col: 1, offset: 20885},
			expr: &actionExpr{
				pos: position{line: 657, col: 25, offset: 20909},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 657, col: 25, offset: 20909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 657, col: 25, offset: 20909},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 657, col: 33, offset: 20917},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 657, col: 38, offset: 20922},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 657, col: 38, offset: 20922},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 657, col: 78, offset: 20962},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 661, col: 1, offset: 21035},
			expr: &actionExpr{
				pos: position{line: 661, col: 23, offset: 21057},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 661, col: 23, offset: 21057},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 661, col: 23, offset: 21057},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 661, col: 31, offset: 21065},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 661, col: 36, offset: 21070},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 661, col: 36, offset: 21070},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 661, col: 76, offset: 21110},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 668, col: 1, offset: 21289},
			expr: &ruleRefExpr{
				pos:  position{line: 668, col: 16, offset: 21304},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 670, col: 1, offset: 21322},
			expr: &actionExpr{
				pos: position{line: 670, col: 20, offset: 21341},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 670, col: 20, offset: 21341},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 670, col: 20, offset: 21341},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 670, col: 41, offset: 21362},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 670, col: 49, offset: 21370},
								expr: &ruleRefExpr{
									pos:  position{line: 670, col: 50, offset: 21371},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 670, col: 75, offset: 21396},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 674, col: 1, offset: 21476},
			expr: &seqExpr{
				pos: position{line: 674, col: 26, offset: 21501},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 674, col: 26, offset: 21501},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 674, col: 32, offset: 21507},
						expr: &ruleRefExpr{
							pos:  position{line: 674, col: 32, offset: 21507},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 674, col: 39, offset: 21514},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 676, col: 1, offset: 21519},
			expr: &actionExpr{
				pos: position{line: 676, col: 27, offset: 21545},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 676, col: 27, offset: 21545},
					expr: &oneOrMoreExpr{
						pos: position{line: 676, col: 28, offset: 21546},
						expr: &seqExpr{
							pos: position{line: 676, col: 29, offset: 21547},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 676, col: 29, offset: 21547},
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 30, offset: 21548},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 676, col: 51, offset: 21569,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 682, col: 1, offset: 21721},
			expr: &actionExpr{
				pos: position{line: 683, col: 5, offset: 21744},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 683, col: 5, offset: 21744},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 683, col: 15, offset: 21754},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 683, col: 15, offset: 21754},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 683, col: 15, offset: 21754},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 24, offset: 21763},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 685, col: 9, offset: 21855},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 685, col: 9, offset: 21855},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 685, col: 9, offset: 21855},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 685, col: 18, offset: 21864},
												expr: &ruleRefExpr{
													pos:  position{line: 685, col: 19, offset: 21865},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 685, col: 35, offset: 21881},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 694, col: 1, offset: 22101},
			expr: &actionExpr{
				pos: position{line: 695, col: 5, offset: 22124},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 695, col: 5, offset: 22124},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 695, col: 14, offset: 22133},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 695, col: 14, offset: 22133},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 696, col: 11, offset: 22194},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 697, col: 11, offset: 22239},
								expr: &ruleRefExpr{
									pos:  position{line: 697, col: 11, offset: 22239},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 698, col: 11, offset: 22257},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 698, col: 11, offset: 22257},
										expr: &ruleRefExpr{
											pos:  position{line: 698, col: 12, offset: 22258},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 699, col: 13, offset: 22276},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 699, col: 13, offset: 22276},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 700, col: 15, offset: 22303},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 701, col: 15, offset: 22328},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 702, col: 15, offset: 22353},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 703, col: 15, offset: 22380},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 704, col: 15, offset: 22400},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 705, col: 15, offset: 22493},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 706, col: 15, offset: 22523},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 707, col: 15, offset: 22591},
												name: "Callout",
											},
											&ruleRefExpr{
												pos:  position{line: 708, col: 15, offset: 22613},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 709, col: 15, offset: 22644},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 710, col: 15, offset: 22665},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 711, col: 15, offset: 22696},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 712, col: 15, offset: 22733},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 713, col: 15, offset: 22763},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 714, col: 15, offset: 22796},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 715, col: 15, offset: 22820},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 716, col: 15, offset: 22853},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 723, col: 1, offset: 23004},
			expr: &actionExpr{
				pos: position{line: 723, col: 20, offset: 23023},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 723, col: 20, offset: 23023},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 723, col: 20, offset: 23023},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 723, col: 25, offset: 23028},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 29, offset: 23032},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 723, col: 33, offset: 23036},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 723, col: 38, offset: 23041},
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 38, offset: 23041},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 730, col: 1, offset: 23287},
			expr: &actionExpr{
				pos: position{line: 730, col: 14, offset: 23300},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 730, col: 14, offset: 23300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 730, col: 14, offset: 23300},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 730, col: 19, offset: 23305},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 25, offset: 23311},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 730, col: 43, offset: 23329},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 734, col: 1, offset: 23394},
			expr: &actionExpr{
				pos: position{line: 734, col: 21, offset: 23414},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 734, col: 21, offset: 23414},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 734, col: 30, offset: 23423},
						expr: &choiceExpr{
							pos: position{line: 734, col: 31, offset: 23424},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 734, col: 31, offset: 23424},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 38, offset: 23431},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 53, offset: 23446},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 66, offset: 23459},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 74, offset: 23467},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 93, offset: 23486},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 734, col: 114, offset: 23507},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 734, col: 115, offset: 23508},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 734, col: 115, offset: 23508},
												expr: &litMatcher{
													pos:        position{line: 734, col: 116, offset: 23509},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 734, col: 121, offset: 23514,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 740, col: 1, offset: 23620},
			expr: &actionExpr{
				pos: position{line: 740, col: 23, offset: 23642},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 740, col: 23, offset: 23642},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 740, col: 23, offset: 23642},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 740, col: 29, offset: 23648},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 36, offset: 23655},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 5, offset: 23687},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 741, col: 11, offset: 23693},
								expr: &actionExpr{
									pos: position{line: 741, col: 12, offset: 23694},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 741, col: 12, offset: 23694},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 741, col: 12, offset: 23694},
												expr: &ruleRefExpr{
													pos:  position{line: 741, col: 12, offset: 23694},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 741, col: 19, offset: 23701},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 741, col: 23, offset: 23705},
												expr: &ruleRefExpr{
													pos:  position{line: 741, col: 23, offset: 23705},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 741, col: 30, offset: 23712},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 741, col: 39, offset: 23721},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 742, col: 5, offset: 23779},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 742, col: 11, offset: 23785},
								expr: &actionExpr{
									pos: position{line: 742, col: 12, offset: 23786},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 742, col: 12, offset: 23786},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 742, col: 12, offset: 23786},
												expr: &ruleRefExpr{
													pos:  position{line: 742, col: 12, offset: 23786},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 742, col: 19, offset: 23793},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 742, col: 23, offset: 23797},
												expr: &ruleRefExpr{
													pos:  position{line: 742, col: 23, offset: 23797},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 742, col: 30, offset: 23804},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 742, col: 39, offset: 23813},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 743, col: 5, offset: 23871},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 747, col: 1, offset: 23950},
			expr: &actionExpr{
				pos: position{line: 747, col: 30, offset: 23979},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 747, col: 30, offset: 23979},
					expr: &choiceExpr{
						pos: position{line: 747, col: 31, offset: 23980},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 747, col: 31, offset: 23980},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 747, col: 42, offset: 23991},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 754, col: 1, offset: 24137},
			expr: &actionExpr{
				pos: position{line: 755, col: 5, offset: 24156},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 755, col: 5, offset: 24156},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 755, col: 5, offset: 24156},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 759, col: 5, offset: 24308},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 759, col: 15, offset: 24318},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 21, offset: 24324},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 759, col: 31, offset: 24334},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 49, offset: 24352},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 759, col: 67, offset: 24370},
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 67, offset: 24370},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 759, col: 74, offset: 24377},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 764, col: 1, offset: 24623},
			expr: &actionExpr{
				pos: position{line: 764, col: 16, offset: 24638},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 764, col: 16, offset: 24638},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 764, col: 16, offset: 24638},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 764, col: 25, offset: 24647},
							expr: &litMatcher{
								pos:        position{line: 764, col: 26, offset: 24648},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 764, col: 30, offset: 24652},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 36, offset: 24658},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 764, col: 46, offset: 24668},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 64, offset: 24686},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 771, col: 1, offset: 25029},
			expr: &actionExpr{
				pos: position{line: 771, col: 15, offset: 25043},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 771, col: 15, offset: 25043},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 771, col: 15, offset: 25043},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 771, col: 23, offset: 25051},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 771, col: 29, offset: 25057},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 771, col: 29, offset: 25057},
									expr: &charClassMatcher{
										pos:        position{line: 771, col: 29, offset: 25057},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 771, col: 73, offset: 25101},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 85, offset: 25113},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 778, col: 1, offset: 25393},
			expr: &choiceExpr{
				pos: position{line: 778, col: 19, offset: 25411},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 778, col: 19, offset: 25411},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 778, col: 19, offset: 25411},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 778, col: 19, offset: 25411},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 778, col: 32, offset: 25424},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 41, offset: 25433},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 778, col: 58, offset: 25450},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 780, col: 9, offset: 25526},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 780, col: 9, offset: 25526},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 780, col: 9, offset: 25526},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 780, col: 21, offset: 25538},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 780, col: 26, offset: 25543},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 780, col: 39, offset: 25556},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 780, col: 43, offset: 25560},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 780, col: 51, offset: 25568},
										expr: &ruleRefExpr{
											pos:  position{line: 780, col: 52, offset: 25569},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 780, col: 70, offset: 25587},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 784, col: 1, offset: 25656},
			expr: &ruleRefExpr{
				pos:  position{line: 784, col: 16, offset: 25671},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 786, col: 1, offset: 25682},
			expr: &actionExpr{
				pos: position{line: 786, col: 20, offset: 25701},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 786, col: 20, offset: 25701},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 786, col: 29, offset: 25710},
						expr: &seqExpr{
							pos: position{line: 786, col: 30, offset: 25711},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 786, col: 30, offset: 25711},
									expr: &litMatcher{
										pos:        position{line: 786, col: 31, offset: 25712},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 786, col: 35, offset: 25716},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 793, col: 1, offset: 25965},
			expr: &choiceExpr{
				pos: position{line: 793, col: 22, offset: 25986},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 793, col: 22, offset: 25986},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 793, col: 46, offset: 26010},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 793, col: 70, offset: 26034},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 795, col: 1, offset: 26052},
			expr: &litMatcher{
				pos:        position{line: 795, col: 32, offset: 26083},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 797, col: 1, offset: 26088},
			expr: &actionExpr{
				pos: position{line: 797, col: 26, offset: 26113},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 797, col: 26, offset: 26113},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 797, col: 26, offset: 26113},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 797, col: 54, offset: 26141},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 63, offset: 26150},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 797, col: 93, offset: 26180},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 797, col: 121, offset: 26208},
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 122, offset: 26209},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 801, col: 1, offset: 26322},
			expr: &choiceExpr{
				pos: position{line: 801, col: 33, offset: 26354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 801, col: 34, offset: 26355},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 801, col: 34, offset: 26355},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 801, col: 35, offset: 26356},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 801, col: 35, offset: 26356},
											expr: &ruleRefExpr{
												pos:  position{line: 801, col: 36, offset: 26357},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 801, col: 64, offset: 26385},
											expr: &ruleRefExpr{
												pos:  position{line: 801, col: 65, offset: 26386},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 801, col: 71, offset: 26392},
											expr: &ruleRefExpr{
												pos:  position{line: 801, col: 72, offset: 26393},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 801, col: 80, offset: 26401,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 801, col: 83, offset: 26404},
									expr: &seqExpr{
										pos: position{line: 801, col: 84, offset: 26405},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 801, col: 84, offset: 26405},
												expr: &seqExpr{
													pos: position{line: 801, col: 86, offset: 26407},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 801, col: 86, offset: 26407},
															expr: &ruleRefExpr{
																pos:  position{line: 801, col: 86, offset: 26407},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 801, col: 93, offset: 26414},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 801, col: 122, offset: 26443},
												expr: &ruleRefExpr{
													pos:  position{line: 801, col: 123, offset: 26444},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 801, col: 151, offset: 26472},
												expr: &ruleRefExpr{
													pos:  position{line: 801, col: 152, offset: 26473},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 801, col: 160, offset: 26481,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 803, col: 11, offset: 26631},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 803, col: 12, offset: 26632},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 803, col: 12, offset: 26632},
									expr: &ruleRefExpr{
										pos:  position{line: 803, col: 13, offset: 26633},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 803, col: 19, offset: 26639},
									expr: &ruleRefExpr{
										pos:  position{line: 803, col: 20, offset: 26640},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 803, col: 28, offset: 26648},
									expr: &ruleRefExpr{
										pos:  position{line: 803, col: 29, offset: 26649},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 803, col: 57, offset: 26677,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 807, col: 1, offset: 26767},
			expr: &litMatcher{
				pos:        position{line: 807, col: 32, offset: 26798},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 809, col: 1, offset: 26805},
			expr: &actionExpr{
				pos: position{line: 809, col: 26, offset: 26830},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 809, col: 26, offset: 26830},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 809, col: 26, offset: 26830},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 809, col: 54, offset: 26858},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 63, offset: 26867},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 93, offset: 26897},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 809, col: 121, offset: 26925},
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 122, offset: 26926},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 813, col: 1, offset: 27039},
			expr: &choiceExpr{
				pos: position{line: 813, col: 33, offset: 27071},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 813, col: 34, offset: 27072},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 813, col: 34, offset: 27072},
							expr: &seqExpr{
								pos: position{line: 813, col: 35, offset: 27073},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 813, col: 35, offset: 27073},
										expr: &ruleRefExpr{
											pos:  position{line: 813, col: 36, offset: 27074},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 813, col: 64, offset: 27102,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 815, col: 11, offset: 27275},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 815, col: 11, offset: 27275},
							expr: &seqExpr{
								pos: position{line: 815, col: 12, offset: 27276},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 815, col: 12, offset: 27276},
										expr: &ruleRefExpr{
											pos:  position{line: 815, col: 13, offset: 27277},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 815, col: 19, offset: 27283},
										expr: &ruleRefExpr{
											pos:  position{line: 815, col: 20, offset: 27284},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 815, col: 28, offset: 27292},
										expr: &ruleRefExpr{
											pos:  position{line: 815, col: 29, offset: 27293},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 815, col: 57, offset: 27321,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 819, col: 1, offset: 27412},
			expr: &choiceExpr{
				pos: position{line: 819, col: 21, offset: 27432},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 819, col: 21, offset: 27432},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 819, col: 21, offset: 27432},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 819, col: 21, offset: 27432},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 819, col: 30, offset: 27441},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 819, col: 38, offset: 27449},
										expr: &ruleRefExpr{
											pos:  position{line: 819, col: 39, offset: 27450},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 819, col: 67, offset: 27478},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 9, offset: 27582},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 821, col: 9, offset: 27582},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 821, col: 9, offset: 27582},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 821, col: 19, offset: 27592},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 821, col: 27, offset: 27600},
										expr: &choiceExpr{
											pos: position{line: 821, col: 28, offset: 27601},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 821, col: 28, offset: 27601},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 821, col: 41, offset: 27614},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 69, offset: 27642},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 825, col: 1, offset: 27746},
			expr: &actionExpr{
				pos: position{line: 825, col: 30, offset: 27775},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 825, col: 30, offset: 27775},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 832, col: 1, offset: 27945},
			expr: &choiceExpr{
				pos: position{line: 832, col: 9, offset: 27953},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 832, col: 9, offset: 27953},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 832, col: 24, offset: 27968},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 835, col: 1, offset: 28049},
			expr: &actionExpr{
				pos: position{line: 835, col: 17, offset: 28065},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 835, col: 17, offset: 28065},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 835, col: 17, offset: 28065},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 835, col: 25, offset: 28073},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 30, offset: 28078},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 835, col: 40, offset: 28088},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 58, offset: 28106},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 839, col: 1, offset: 28227},
			expr: &actionExpr{
				pos: position{line: 839, col: 17, offset: 28243},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 839, col: 17, offset: 28243},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 839, col: 17, offset: 28243},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 22, offset: 28248},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 839, col: 42, offset: 28268},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 839, col: 59, offset: 28285},
								expr: &ruleRefExpr{
									pos:  position{line: 839, col: 60, offset: 28286},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 848, col: 1, offset: 28633},
			expr: &choiceExpr{
				pos: position{line: 849, col: 5, offset: 28652},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 850, col: 9, offset: 28662},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 850, col: 9, offset: 28662},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 850, col: 9, offset: 28662},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 850, col: 20, offset: 28673},
										expr: &ruleRefExpr{
											pos:  position{line: 850, col: 21, offset: 28674},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 851, col: 9, offset: 28704},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 851, col: 15, offset: 28710},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 851, col: 15, offset: 28710},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 851, col: 41, offset: 28736},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 855, col: 7, offset: 28854},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 857, col: 1, offset: 28873},
			expr: &choiceExpr{
				pos: position{line: 857, col: 32, offset: 28904},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 857, col: 32, offset: 28904},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 857, col: 32, offset: 28904},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 857, col: 36, offset: 28908},
								expr: &litMatcher{
									pos:        position{line: 857, col: 37, offset: 28909},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 857, col: 43, offset: 28915},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 857, col: 43, offset: 28915},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 857, col: 47, offset: 28919},
								expr: &litMatcher{
									pos:        position{line: 857, col: 48, offset: 28920},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 857, col: 54, offset: 28926},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 857, col: 54, offset: 28926},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 857, col: 58, offset: 28930},
								expr: &litMatcher{
									pos:        position{line: 857, col: 59, offset: 28931},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 857, col: 65, offset: 28937},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 857, col: 65, offset: 28937},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 857, col: 69, offset: 28941},
								expr: &litMatcher{
									pos:        position{line: 857, col: 70, offset: 28942},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 859, col: 1, offset: 28947},
			expr: &choiceExpr{
				pos: position{line: 859, col: 34, offset: 28980},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 859, col: 34, offset: 28980},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 859, col: 41, offset: 28987},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 859, col: 48, offset: 28994},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 859, col: 55, offset: 29001},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 859, col: 62, offset: 29008},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 859, col: 68, offset: 29014},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 861, col: 1, offset: 29019},
			expr: &choiceExpr{
				pos: position{line: 862, col: 5, offset: 29049},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 862, col: 5, offset: 29049},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 863, col: 7, offset: 29076},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 864, col: 7, offset: 29104},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 865, col: 7, offset: 29132},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 866, col: 7, offset: 29164},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 867, col: 7, offset: 29185},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 869, col: 1, offset: 29203},
			expr: &choiceExpr{
				pos: position{line: 870, col: 5, offset: 29235},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 870, col: 5, offset: 29235},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 871, col: 7, offset: 29261},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 872, col: 7, offset: 29289},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 873, col: 7, offset: 29317},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 875, col: 1, offset: 29343},
			expr: &choiceExpr{
				pos: position{line: 876, col: 5, offset: 29369},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 876, col: 5, offset: 29369},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 877, col: 7, offset: 29392},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 878, col: 7, offset: 29416},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 879, col: 7, offset: 29440},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 880, col: 7, offset: 29468},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 881, col: 7, offset: 29496},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 883, col: 1, offset: 29520},
			expr: &choiceExpr{
				pos: position{line: 883, col: 33, offset: 29552},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 883, col: 33, offset: 29552},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 883, col: 39, offset: 29558},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 883, col: 39, offset: 29558},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 887, col: 1, offset: 29700},
			expr: &actionExpr{
				pos: position{line: 887, col: 25, offset: 29724},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 887, col: 25, offset: 29724},
					expr: &litMatcher{
						pos:        position{line: 887, col: 25, offset: 29724},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 891, col: 1, offset: 29773},
			expr: &actionExpr{
				pos: position{line: 891, col: 25, offset: 29797},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 891, col: 25, offset: 29797},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 891, col: 25, offset: 29797},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 891, col: 30, offset: 29802},
							expr: &litMatcher{
								pos:        position{line: 891, col: 30, offset: 29802},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 898, col: 1, offset: 29906},
			expr: &choiceExpr{
				pos: position{line: 898, col: 13, offset: 29918},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 898, col: 13, offset: 29918},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 898, col: 35, offset: 29940},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 900, col: 1, offset: 30007},
			expr: &actionExpr{
				pos: position{line: 900, col: 24, offset: 30030},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 900, col: 24, offset: 30030},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 900, col: 24, offset: 30030},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 900, col: 29, offset: 30035},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 39, offset: 30045},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 900, col: 68, offset: 30074},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 904, col: 1, offset: 30173},
			expr: &zeroOrMoreExpr{
				pos: position{line: 904, col: 32, offset: 30204},
				expr: &ruleRefExpr{
					pos:  position{line: 904, col: 32, offset: 30204},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 906, col: 1, offset: 30235},
			expr: &actionExpr{
				pos: position{line: 906, col: 31, offset: 30265},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 906, col: 31, offset: 30265},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 906, col: 31, offset: 30265},
							expr: &litMatcher{
								pos:        position{line: 906, col: 33, offset: 30267},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 906, col: 39, offset: 30273},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 906, col: 48, offset: 30282},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 906, col: 48, offset: 30282},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 907, col: 7, offset: 30293},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 908, col: 7, offset: 30338},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 908, col: 7, offset: 30338},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 908, col: 15, offset: 30346},
												expr: &ruleRefExpr{
													pos:  position{line: 908, col: 16, offset: 30347},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 909, col: 7, offset: 30361},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 910, col: 7, offset: 30380},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 911, col: 7, offset: 30418},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 912, col: 7, offset: 30443},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 916, col: 1, offset: 30518},
			expr: &actionExpr{
				pos: position{line: 917, col: 5, offset: 30558},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 917, col: 5, offset: 30558},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 917, col: 5, offset: 30558},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 917, col: 16, offset: 30569},
								expr: &ruleRefExpr{
									pos:  position{line: 917, col: 17, offset: 30570},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 5, offset: 30596},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 918, col: 11, offset: 30602},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 918, col: 11, offset: 30602},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 919, col: 11, offset: 30632},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 30653},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 11, offset: 30674},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 922, col: 11, offset: 30698},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 11, offset: 30722},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 927, col: 1, offset: 30822},
			expr: &choiceExpr{
				pos: position{line: 928, col: 5, offset: 30866},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 928, col: 5, offset: 30866},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 929, col: 7, offset: 30963},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 929, col: 7, offset: 30963},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 929, col: 7, offset: 30963},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 929, col: 12, offset: 30968},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 933, col: 1, offset: 31139},
			expr: &choiceExpr{
				pos: position{line: 934, col: 5, offset: 31167},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 31167},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 934, col: 5, offset: 31167},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 934, col: 6, offset: 31168},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 934, col: 6, offset: 31168},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 934, col: 10, offset: 31172},
											expr: &litMatcher{
												pos:        position{line: 934, col: 11, offset: 31173},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 934, col: 16, offset: 31178},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 26, offset: 31188},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 934, col: 55, offset: 31217},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 934, col: 59, offset: 31221},
									expr: &notExpr{
										pos: position{line: 934, col: 61, offset: 31223},
										expr: &ruleRefExpr{
											pos:  position{line: 934, col: 62, offset: 31224},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 936, col: 9, offset: 31430},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 936, col: 9, offset: 31430},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 936, col: 9, offset: 31430},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 936, col: 13, offset: 31434},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 936, col: 23, offset: 31444},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 936, col: 23, offset: 31444},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 936, col: 27, offset: 31448},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 56, offset: 31477},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 940, col: 1, offset: 31695},
			expr: &seqExpr{
				pos: position{line: 940, col: 32, offset: 31726},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 940, col: 32, offset: 31726},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 33, offset: 31727},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 940, col: 39, offset: 31733},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 39, offset: 31733},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 942, col: 1, offset: 31762},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 31797},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 943, col: 5, offset: 31797},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 944, col: 7, offset: 31808},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 944, col: 7, offset: 31808},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 944, col: 15, offset: 31816},
								expr: &ruleRefExpr{
									pos:  position{line: 944, col: 16, offset: 31817},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 7, offset: 31831},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 946, col: 7, offset: 31850},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 946, col: 7, offset: 31850},
								expr: &ruleRefExpr{
									pos:  position{line: 946, col: 7, offset: 31850},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 946, col: 14, offset: 31857},
								expr: &seqExpr{
									pos: position{line: 946, col: 15, offset: 31858},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 946, col: 15, offset: 31858},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 946, col: 19, offset: 31862},
											expr: &litMatcher{
												pos:        position{line: 946, col: 20, offset: 31863},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 947, col: 7, offset: 31875},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 7, offset: 31913},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 7, offset: 31938},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 951, col: 1, offset: 31976},
			expr: &actionExpr{
				pos: position{line: 952, col: 5, offset: 32016},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 952, col: 5, offset: 32016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 952, col: 5, offset: 32016},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 952, col: 16, offset: 32027},
								expr: &ruleRefExpr{
									pos:  position{line: 952, col: 17, offset: 32028},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 953, col: 5, offset: 32054},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 953, col: 11, offset: 32060},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 953, col: 11, offset: 32060},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 954, col: 11, offset: 32090},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 955, col: 11, offset: 32111},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 956, col: 11, offset: 32132},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 957, col: 11, offset: 32156},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 958, col: 11, offset: 32180},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 961, col: 1, offset: 32279},
			expr: &choiceExpr{
				pos: position{line: 962, col: 5, offset: 32323},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 962, col: 5, offset: 32323},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 963, col: 7, offset: 32420},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 963, col: 7, offset: 32420},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 963, col: 7, offset: 32420},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 963, col: 11, offset: 32424},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 967, col: 1, offset: 32595},
			expr: &choiceExpr{
				pos: position{line: 968, col: 5, offset: 32619},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 968, col: 5, offset: 32619},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 968, col: 5, offset: 32619},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 968, col: 5, offset: 32619},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 968, col: 18, offset: 32632},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 968, col: 40, offset: 32654},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 968, col: 45, offset: 32659},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 968, col: 55, offset: 32669},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 968, col: 84, offset: 32698},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 9, offset: 32855},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 970, col: 9, offset: 32855},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 970, col: 9, offset: 32855},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 22, offset: 32868},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 970, col: 44, offset: 32890},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 970, col: 49, offset: 32895},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 59, offset: 32905},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 970, col: 88, offset: 32934},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 9, offset: 33134},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 973, col: 9, offset: 33134},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 973, col: 9, offset: 33134},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 22, offset: 33147},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 973, col: 44, offset: 33169},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 973, col: 48, offset: 33173},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 58, offset: 33183},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 973, col: 87, offset: 33212},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 980, col: 1, offset: 33422},
			expr: &choiceExpr{
				pos: position{line: 980, col: 15, offset: 33436},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 980, col: 15, offset: 33436},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 980, col: 39, offset: 33460},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 982, col: 1, offset: 33483},
			expr: &actionExpr{
				pos: position{line: 982, col: 26, offset: 33508},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 982, col: 26, offset: 33508},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 982, col: 26, offset: 33508},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 982, col: 31, offset: 33513},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 982, col: 41, offset: 33523},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 982, col: 72, offset: 33554},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 986, col: 1, offset: 33700},
			expr: &zeroOrMoreExpr{
				pos: position{line: 986, col: 34, offset: 33733},
				expr: &ruleRefExpr{
					pos:  position{line: 986, col: 34, offset: 33733},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 988, col: 1, offset: 33765},
			expr: &actionExpr{
				pos: position{line: 989, col: 5, offset: 33802},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 989, col: 5, offset: 33802},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 989, col: 5, offset: 33802},
							expr: &litMatcher{
								pos:        position{line: 989, col: 7, offset: 33804},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 13, offset: 33810},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 989, col: 22, offset: 33819},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 989, col: 22, offset: 33819},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 990, col: 7, offset: 33830},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 991, col: 7, offset: 33875},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 991, col: 7, offset: 33875},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 991, col: 15, offset: 33883},
												expr: &ruleRefExpr{
													pos:  position{line: 991, col: 16, offset: 33884},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 992, col: 7, offset: 33898},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 993, col: 7, offset: 33917},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 994, col: 7, offset: 33957},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 995, col: 7, offset: 33982},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 999, col: 1, offset: 34059},
			expr: &actionExpr{
				pos: position{line: 1000, col: 5, offset: 34101},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1000, col: 5, offset: 34101},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1000, col: 5, offset: 34101},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1000, col: 16, offset: 34112},
								expr: &ruleRefExpr{
									pos:  position{line: 1000, col: 17, offset: 34113},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1001, col: 5, offset: 34139},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1001, col: 11, offset: 34145},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1001, col: 11, offset: 34145},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1002, col: 11, offset: 34177},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1003, col: 11, offset: 34196},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1004, col: 11, offset: 34217},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1005, col: 11, offset: 34241},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1006, col: 11, offset: 34265},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1010, col: 1, offset: 34365},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 5, offset: 34411},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1011, col: 5, offset: 34411},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1012, col: 7, offset: 34510},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1012, col: 7, offset: 34510},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1012, col: 7, offset: 34510},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 12, offset: 34515},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1016, col: 1, offset: 34688},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 5, offset: 34718},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 34718},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1017, col: 5, offset: 34718},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1017, col: 6, offset: 34719},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1017, col: 6, offset: 34719},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1017, col: 10, offset: 34723},
											expr: &litMatcher{
												pos:        position{line: 1017, col: 11, offset: 34724},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1017, col: 16, offset: 34729},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 26, offset: 34739},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1017, col: 57, offset: 34770},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 9, offset: 34972},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1019, col: 9, offset: 34972},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1019, col: 9, offset: 34972},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1019, col: 13, offset: 34976},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1019, col: 23, offset: 34986},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1019, col: 23, offset: 34986},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1019, col: 27, offset: 34990},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1019, col: 58, offset: 35021},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1023, col: 1, offset: 35243},
			expr: &seqExpr{
				pos: position{line: 1023, col: 34, offset: 35276},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1023, col: 34, offset: 35276},
						expr: &ruleRefExpr{
							pos:  position{line: 1023, col: 35, offset: 35277},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1023, col: 41, offset: 35283},
						expr: &ruleRefExpr{
							pos:  position{line: 1023, col: 41, offset: 35283},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1025, col: 1, offset: 35314},
			expr: &choiceExpr{
				pos: position{line: 1026, col: 5, offset: 35351},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1026, col: 5, offset: 35351},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1027, col: 7, offset: 35362},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1027, col: 7, offset: 35362},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1027, col: 15, offset: 35370},
								expr: &ruleRefExpr{
									pos:  position{line: 1027, col: 16, offset: 35371},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 7, offset: 35385},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1029, col: 7, offset: 35404},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1029, col: 7, offset: 35404},
								expr: &ruleRefExpr{
									pos:  position{line: 1029, col: 7, offset: 35404},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1029, col: 14, offset: 35411},
								expr: &seqExpr{
									pos: position{line: 1029, col: 15, offset: 35412},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1029, col: 15, offset: 35412},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1029, col: 19, offset: 35416},
											expr: &litMatcher{
												pos:        position{line: 1029, col: 20, offset: 35417},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1030, col: 7, offset: 35429},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 7, offset: 35469},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 7, offset: 35494},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1034, col: 1, offset: 35534},
			expr: &actionExpr{
				pos: position{line: 1035, col: 5, offset: 35575},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1035, col: 5, offset: 35575},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1035, col: 5, offset: 35575},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1035, col: 16, offset: 35586},
								expr: &ruleRefExpr{
									pos:  position{line: 1035, col: 17, offset: 35587},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 5, offset: 35613},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1036, col: 11, offset: 35619},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1036, col: 11, offset: 35619},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1037, col: 11, offset: 35638},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1038, col: 11, offset: 35670},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1039, col: 11, offset: 35691},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1040, col: 11, offset: 35715},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1041, col: 11, offset: 35739},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1045, col: 1, offset: 35839},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 5, offset: 35885},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1046, col: 5, offset: 35885},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1047, col: 7, offset: 35984},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1047, col: 7, offset: 35984},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1047, col: 7, offset: 35984},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1047, col: 11, offset: 35988},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1051, col: 1, offset: 36162},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 5, offset: 36188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 36188},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1052, col: 5, offset: 36188},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1052, col: 5, offset: 36188},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 18, offset: 36201},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1052, col: 40, offset: 36223},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1052, col: 45, offset: 36228},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 55, offset: 36238},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1052, col: 86, offset: 36269},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1054, col: 9, offset: 36426},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1054, col: 9, offset: 36426},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1054, col: 9, offset: 36426},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 22, offset: 36439},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1054, col: 44, offset: 36461},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1054, col: 49, offset: 36466},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 59, offset: 36476},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1054, col: 90, offset: 36507},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1057, col: 9, offset: 36707},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1057, col: 9, offset: 36707},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1057, col: 9, offset: 36707},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1057, col: 22, offset: 36720},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1057, col: 44, offset: 36742},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1057, col: 48, offset: 36746},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1057, col: 58, offset: 36756},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1057, col: 89, offset: 36787},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1064, col: 1, offset: 36997},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 18, offset: 37014},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1064, col: 18, offset: 37014},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 45, offset: 37041},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1066, col: 1, offset: 37067},
			expr: &actionExpr{
				pos: position{line: 1066, col: 29, offset: 37095},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1066, col: 29, offset: 37095},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1066, col: 29, offset: 37095},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1066, col: 34, offset: 37100},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1066, col: 44, offset: 37110},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1066, col: 78, offset: 37144},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1070, col: 1, offset: 37293},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1070, col: 37, offset: 37329},
				expr: &ruleRefExpr{
					pos:  position{line: 1070, col: 37, offset: 37329},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1072, col: 1, offset: 37396},
			expr: &actionExpr{
				pos: position{line: 1073, col: 5, offset: 37436},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1073, col: 5, offset: 37436},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1073, col: 5, offset: 37436},
							expr: &litMatcher{
								pos:        position{line: 1073, col: 7, offset: 37438},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1073, col: 13, offset: 37444},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1073, col: 22, offset: 37453},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1073, col: 22, offset: 37453},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1074, col: 7, offset: 37464},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1075, col: 7, offset: 37509},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1075, col: 7, offset: 37509},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1075, col: 15, offset: 37517},
												expr: &ruleRefExpr{
													pos:  position{line: 1075, col: 16, offset: 37518},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1076, col: 7, offset: 37532},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1077, col: 7, offset: 37551},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1078, col: 7, offset: 37614},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1079, col: 7, offset: 37657},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1080, col: 7, offset: 37682},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1084, col: 1, offset: 37762},
			expr: &actionExpr{
				pos: position{line: 1085, col: 5, offset: 37806},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1085, col: 5, offset: 37806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1085, col: 5, offset: 37806},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1085, col: 16, offset: 37817},
								expr: &ruleRefExpr{
									pos:  position{line: 1085, col: 17, offset: 37818},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1086, col: 5, offset: 37844},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1086, col: 11, offset: 37850},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1086, col: 11, offset: 37850},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1087, col: 11, offset: 37885},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1088, col: 11, offset: 37904},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1089, col: 11, offset: 37925},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1090, col: 11, offset: 37946},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1091, col: 11, offset: 37970},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1095, col: 1, offset: 38071},
			expr: &choiceExpr{
				pos: position{line: 1096, col: 5, offset: 38120},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1096, col: 5, offset: 38120},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1097, col: 7, offset: 38222},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1097, col: 7, offset: 38222},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1097, col: 7, offset: 38222},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 12, offset: 38227},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1101, col: 1, offset: 38405},
			expr: &choiceExpr{
				pos: position{line: 1102, col: 5, offset: 38438},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1102, col: 5, offset: 38438},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1102, col: 5, offset: 38438},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1102, col: 6, offset: 38439},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1102, col: 6, offset: 38439},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1102, col: 10, offset: 38443},
											expr: &litMatcher{
												pos:        position{line: 1102, col: 11, offset: 38444},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 16, offset: 38449},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1102, col: 26, offset: 38459},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1102, col: 60, offset: 38493},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 9, offset: 38698},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1104, col: 9, offset: 38698},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1104, col: 9, offset: 38698},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 13, offset: 38702},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1104, col: 23, offset: 38712},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1104, col: 23, offset: 38712},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1104, col: 27, offset: 38716},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 61, offset: 38750},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1108, col: 1, offset: 38976},
			expr: &seqExpr{
				pos: position{line: 1108, col: 37, offset: 39012},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1108, col: 37, offset: 39012},
						expr: &ruleRefExpr{
							pos:  position{line: 1108, col: 38, offset: 39013},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1108, col: 44, offset: 39019},
						expr: &ruleRefExpr{
							pos:  position{line: 1108, col: 44, offset: 39019},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1110, col: 1, offset: 39053},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 5, offset: 39094},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1111, col: 5, offset: 39094},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1112, col: 7, offset: 39105},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1112, col: 7, offset: 39105},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1112, col: 15, offset: 39113},
								expr: &ruleRefExpr{
									pos:  position{line: 1112, col: 16, offset: 39114},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 7, offset: 39128},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1114, col: 7, offset: 39147},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1114, col: 7, offset: 39147},
								expr: &ruleRefExpr{
									pos:  position{line: 1114, col: 7, offset: 39147},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1114, col: 14, offset: 39154},
								expr: &seqExpr{
									pos: position{line: 1114, col: 15, offset: 39155},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1114, col: 15, offset: 39155},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1114, col: 19, offset: 39159},
											expr: &litMatcher{
												pos:        position{line: 1114, col: 20, offset: 39160},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 7, offset: 39284},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1116, col: 7, offset: 39327},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 7, offset: 39347},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 7, offset: 39372},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1120, col: 1, offset: 39415},
			expr: &actionExpr{
				pos: position{line: 1121, col: 5, offset: 39459},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 5, offset: 39459},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1121, col: 5, offset: 39459},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1121, col: 16, offset: 39470},
								expr: &ruleRefExpr{
									pos:  position{line: 1121, col: 17, offset: 39471},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1122, col: 5, offset: 39497},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1122, col: 11, offset: 39503},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1122, col: 11, offset: 39503},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1123, col: 11, offset: 39538},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1124, col: 11, offset: 39557},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1125, col: 11, offset: 39578},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1126, col: 11, offset: 39599},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1127, col: 11, offset: 39623},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1131, col: 1, offset: 39724},
			expr: &actionExpr{
				pos: position{line: 1132, col: 5, offset: 39773},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1132, col: 6, offset: 39774},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1132, col: 6, offset: 39774},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1133, col: 7, offset: 39878},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1133, col: 7, offset: 39878},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1133, col: 11, offset: 39882},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1137, col: 1, offset: 40060},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 5, offset: 40089},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1138, col: 5, offset: 40089},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1138, col: 5, offset: 40089},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1138, col: 5, offset: 40089},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 18, offset: 40102},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1138, col: 40, offset: 40124},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 45, offset: 40129},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 55, offset: 40139},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1138, col: 89, offset: 40173},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1140, col: 9, offset: 40330},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1140, col: 9, offset: 40330},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1140, col: 9, offset: 40330},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 22, offset: 40343},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1140, col: 44, offset: 40365},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1140, col: 49, offset: 40370},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 59, offset: 40380},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1140, col: 93, offset: 40414},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 9, offset: 40614},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1143, col: 9, offset: 40614},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1143, col: 9, offset: 40614},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 22, offset: 40627},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 44, offset: 40649},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1143, col: 48, offset: 40653},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 58, offset: 40663},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 92, offset: 40697},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1150, col: 1, offset: 40907},
			expr: &choiceExpr{
				pos: position{line: 1150, col: 15, offset: 40921},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1150, col: 15, offset: 40921},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 39, offset: 40945},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1152, col: 1, offset: 40968},
			expr: &actionExpr{
				pos: position{line: 1152, col: 26, offset: 40993},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 26, offset: 40993},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1152, col: 26, offset: 40993},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1152, col: 31, offset: 40998},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1152, col: 41, offset: 41008},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1152, col: 72, offset: 41039},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1156, col: 1, offset: 41185},
			expr: &seqExpr{
				pos: position{line: 1156, col: 34, offset: 41218},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1156, col: 34, offset: 41218},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1156, col: 63, offset: 41247},
						expr: &seqExpr{
							pos: position{line: 1156, col: 64, offset: 41248},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1156, col: 64, offset: 41248},
									expr: &litMatcher{
										pos:        position{line: 1156, col: 66, offset: 41250},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1156, col: 73, offset: 41257},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1156, col: 73, offset: 41257},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1156, col: 81, offset: 41265},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1158, col: 1, offset: 41332},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 33, offset: 41364},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 33, offset: 41364},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1159, col: 7, offset: 41375},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1159, col: 7, offset: 41375},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1159, col: 15, offset: 41383},
								expr: &ruleRefExpr{
									pos:  position{line: 1159, col: 16, offset: 41384},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 7, offset: 41398},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 7, offset: 41417},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 7, offset: 41448},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 7, offset: 41473},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1165, col: 1, offset: 41513},
			expr: &actionExpr{
				pos: position{line: 1166, col: 5, offset: 41545},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 5, offset: 41545},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1166, col: 5, offset: 41545},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1166, col: 16, offset: 41556},
								expr: &ruleRefExpr{
									pos:  position{line: 1166, col: 17, offset: 41557},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 5, offset: 41583},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1167, col: 11, offset: 41589},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1167, col: 11, offset: 41589},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1168, col: 11, offset: 41608},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 41629},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1170, col: 11, offset: 41653},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1171, col: 11, offset: 41685},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1172, col: 11, offset: 41709},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1176, col: 1, offset: 41810},
			expr: &choiceExpr{
				pos: position{line: 1177, col: 5, offset: 41856},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1177, col: 5, offset: 41856},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1178, col: 7, offset: 41955},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1178, col: 7, offset: 41955},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1178, col: 7, offset: 41955},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1178, col: 12, offset: 41960},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1182, col: 1, offset: 42133},
			expr: &choiceExpr{
				pos: position{line: 1182, col: 26, offset: 42158},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1182, col: 26, offset: 42158},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1182, col: 26, offset: 42158},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1182, col: 27, offset: 42159},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1182, col: 27, offset: 42159},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1182, col: 31, offset: 42163},
											expr: &litMatcher{
												pos:        position{line: 1182, col: 32, offset: 42164},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 37, offset: 42169},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 47, offset: 42179},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 78, offset: 42210},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1184, col: 9, offset: 42412},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1184, col: 9, offset: 42412},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1184, col: 9, offset: 42412},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 13, offset: 42416},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1184, col: 23, offset: 42426},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1184, col: 23, offset: 42426},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1184, col: 27, offset: 42430},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1184, col: 58, offset: 42461},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1188, col: 1, offset: 42682},
			expr: &seqExpr{
				pos: position{line: 1188, col: 34, offset: 42715},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1188, col: 34, offset: 42715},
						expr: &ruleRefExpr{
							pos:  position{line: 1188, col: 35, offset: 42716},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1188, col: 41, offset: 42722},
						expr: &ruleRefExpr{
							pos:  position{line: 1188, col: 41, offset: 42722},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1190, col: 1, offset: 42753},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 33, offset: 42785},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1190, col: 33, offset: 42785},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1191, col: 7, offset: 42796},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1191, col: 7, offset: 42796},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1191, col: 15, offset: 42804},
								expr: &ruleRefExpr{
									pos:  position{line: 1191, col: 16, offset: 42805},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 7, offset: 42819},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1193, col: 7, offset: 42838},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1193, col: 7, offset: 42838},
								expr: &ruleRefExpr{
									pos:  position{line: 1193, col: 7, offset: 42838},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1193, col: 14, offset: 42845},
								expr: &seqExpr{
									pos: position{line: 1193, col: 15, offset: 42846},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1193, col: 15, offset: 42846},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1193, col: 19, offset: 42850},
											expr: &litMatcher{
												pos:        position{line: 1193, col: 20, offset: 42851},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 7, offset: 42863},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 7, offset: 42894},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 7, offset: 42919},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1198, col: 1, offset: 42959},
			expr: &actionExpr{
				pos: position{line: 1199, col: 5, offset: 42991},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 5, offset: 42991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1199, col: 5, offset: 42991},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1199, col: 16, offset: 43002},
								expr: &ruleRefExpr{
									pos:  position{line: 1199, col: 17, offset: 43003},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 5, offset: 43029},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1200, col: 11, offset: 43035},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1200, col: 11, offset: 43035},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 11, offset: 43067},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 11, offset: 43086},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 11, offset: 43107},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 11, offset: 43131},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1205, col: 11, offset: 43155},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1208, col: 1, offset: 43255},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 5, offset: 43301},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1209, col: 5, offset: 43301},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1210, col: 7, offset: 43398},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1210, col: 7, offset: 43398},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1210, col: 7, offset: 43398},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1210, col: 11, offset: 43402},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1214, col: 1, offset: 43573},
			expr: &choiceExpr{
				pos: position{line: 1215, col: 5, offset: 43598},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1215, col: 5, offset: 43598},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1215, col: 5, offset: 43598},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1215, col: 5, offset: 43598},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1215, col: 18, offset: 43611},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1215, col: 40, offset: 43633},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1215, col: 45, offset: 43638},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1215, col: 55, offset: 43648},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1215, col: 86, offset: 43679},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1217, col: 9, offset: 43836},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1217, col: 9, offset: 43836},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1217, col: 9, offset: 43836},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1217, col: 22, offset: 43849},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1217, col: 44, offset: 43871},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1217, col: 49, offset: 43876},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1217, col: 59, offset: 43886},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1217, col: 90, offset: 43917},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1220, col: 9, offset: 44117},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1220, col: 9, offset: 44117},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1220, col: 9, offset: 44117},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1220, col: 22, offset: 44130},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1220, col: 44, offset: 44152},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1220, col: 48, offset: 44156},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1220, col: 58, offset: 44166},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1220, col: 89, offset: 44197},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1227, col: 1, offset: 44410},
			expr: &actionExpr{
				pos: position{line: 1227, col: 18, offset: 44427},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1227, col: 18, offset: 44427},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1227, col: 18, offset: 44427},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1227, col: 22, offset: 44431},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1227, col: 31, offset: 44440},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1227, col: 53, offset: 44462},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1231, col: 1, offset: 44570},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 25, offset: 44594},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1231, col: 25, offset: 44594},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 38, offset: 44607},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1233, col: 1, offset: 44626},
			expr: &actionExpr{
				pos: position{line: 1233, col: 21, offset: 44646},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1233, col: 21, offset: 44646},
					expr: &charClassMatcher{
						pos:        position{line: 1233, col: 21, offset: 44646},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1237, col: 1, offset: 44731},
			expr: &actionExpr{
				pos: position{line: 1237, col: 25, offset: 44755},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 25, offset: 44755},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1237, col: 25, offset: 44755},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 38, offset: 44768},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1237, col: 60, offset: 44790},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 64, offset: 44794},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 73, offset: 44803},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1237, col: 95, offset: 44825},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1244, col: 1, offset: 45024},
			expr: &actionExpr{
				pos: position{line: 1244, col: 20, offset: 45043},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 20, offset: 45043},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1244, col: 20, offset: 45043},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 24, offset: 45047},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 33, offset: 45056},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1244, col: 57, offset: 45080},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1248, col: 1, offset: 45190},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 27, offset: 45216},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1248, col: 27, offset: 45216},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 40, offset: 45229},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1250, col: 1, offset: 45250},
			expr: &actionExpr{
				pos: position{line: 1250, col: 23, offset: 45272},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1250, col: 23, offset: 45272},
					expr: &charClassMatcher{
						pos:        position{line: 1250, col: 23, offset: 45272},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1254, col: 1, offset: 45357},
			expr: &actionExpr{
				pos: position{line: 1254, col: 27, offset: 45383},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1254, col: 27, offset: 45383},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1254, col: 27, offset: 45383},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1254, col: 40, offset: 45396},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1254, col: 62, offset: 45418},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1254, col: 66, offset: 45422},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1254, col: 75, offset: 45431},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1254, col: 99, offset: 45455},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1262, col: 1, offset: 45767},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 17, offset: 45783},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1262, col: 17, offset: 45783},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 38, offset: 45804},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1264, col: 1, offset: 45824},
			expr: &actionExpr{
				pos: position{line: 1264, col: 23, offset: 45846},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1264, col: 23, offset: 45846},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1264, col: 23, offset: 45846},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1264, col: 46, offset: 45869},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1264, col: 55, offset: 45878},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1264, col: 82, offset: 45905},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1268, col: 1, offset: 46017},
			expr: &actionExpr{
				pos: position{line: 1268, col: 31, offset: 46047},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1268, col: 31, offset: 46047},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1268, col: 41, offset: 46057},
						expr: &ruleRefExpr{
							pos:  position{line: 1268, col: 41, offset: 46057},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1272, col: 1, offset: 46143},
			expr: &seqExpr{
				pos: position{line: 1272, col: 27, offset: 46169},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1272, col: 27, offset: 46169},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1272, col: 32, offset: 46174},
						expr: &charClassMatcher{
							pos:        position{line: 1272, col: 33, offset: 46175},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1274, col: 1, offset: 46186},
			expr: &litMatcher{
				pos:        position{line: 1274, col: 25, offset: 46210},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1277, col: 1, offset: 46298},
			expr: &actionExpr{
				pos: position{line: 1278, col: 5, offset: 46332},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1278, col: 5, offset: 46332},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1279, col: 9, offset: 46350},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1279, col: 9, offset: 46350},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1279, col: 9, offset: 46350},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1279, col: 19, offset: 46360},
										expr: &ruleRefExpr{
											pos:  position{line: 1279, col: 20, offset: 46361},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1280, col: 11, offset: 46417},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1280, col: 11, offset: 46417},
										expr: &ruleRefExpr{
											pos:  position{line: 1280, col: 11, offset: 46417},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1280, col: 18, offset: 46424},
										expr: &ruleRefExpr{
											pos:  position{line: 1280, col: 19, offset: 46425},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1281, col: 12, offset: 46457},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1281, col: 12, offset: 46457},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1281, col: 12, offset: 46457},
											expr: &litMatcher{
												pos:        position{line: 1281, col: 13, offset: 46458},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1281, col: 17, offset: 46462},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1281, col: 26, offset: 46471},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1282, col: 11, offset: 46543},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1283, col: 11, offset: 46584},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1284, col: 11, offset: 46613},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1289, col: 1, offset: 46692},
			expr: &actionExpr{
				pos: position{line: 1290, col: 5, offset: 46730},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 5, offset: 46730},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1290, col: 5, offset: 46730},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1290, col: 16, offset: 46741},
								expr: &ruleRefExpr{
									pos:  position{line: 1290, col: 17, offset: 46742},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1291, col: 5, offset: 46768},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1291, col: 11, offset: 46774},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1291, col: 11, offset: 46774},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1292, col: 11, offset: 46793},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1293, col: 12, offset: 46815},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1293, col: 12, offset: 46815},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1293, col: 12, offset: 46815},
													expr: &litMatcher{
														pos:        position{line: 1293, col: 13, offset: 46816},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1293, col: 18, offset: 46821},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1293, col: 27, offset: 46830},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1294, col: 11, offset: 46879},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1295, col: 11, offset: 46903},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1296, col: 11, offset: 46929},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1300, col: 1, offset: 47025},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 41, offset: 47065},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1300, col: 41, offset: 47065},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1300, col: 55, offset: 47079},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1300, col: 55, offset: 47079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1300, col: 55, offset: 47079},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1300, col: 59, offset: 47083},
									expr: &litMatcher{
										pos:        position{line: 1300, col: 60, offset: 47084},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1304, col: 1, offset: 47156},
			expr: &actionExpr{
				pos: position{line: 1304, col: 23, offset: 47178},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 23, offset: 47178},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1304, col: 23, offset: 47178},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 46, offset: 47201},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 55, offset: 47210},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1304, col: 82, offset: 47237},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1308, col: 1, offset: 47349},
			expr: &actionExpr{
				pos: position{line: 1308, col: 31, offset: 47379},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1308, col: 31, offset: 47379},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1308, col: 41, offset: 47389},
						expr: &ruleRefExpr{
							pos:  position{line: 1308, col: 41, offset: 47389},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1313, col: 1, offset: 47557},
			expr: &actionExpr{
				pos: position{line: 1313, col: 30, offset: 47586},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1313, col: 30, offset: 47586},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1314, col: 5, offset: 47600},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1314, col: 5, offset: 47600},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1314, col: 5, offset: 47600},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1314, col: 15, offset: 47610},
										expr: &ruleRefExpr{
											pos:  position{line: 1314, col: 16, offset: 47611},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1315, col: 7, offset: 47663},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1315, col: 7, offset: 47663},
										expr: &ruleRefExpr{
											pos:  position{line: 1315, col: 7, offset: 47663},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1315, col: 14, offset: 47670},
										expr: &ruleRefExpr{
											pos:  position{line: 1315, col: 15, offset: 47671},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1316, col: 7, offset: 47698},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1317, col: 7, offset: 47735},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1318, col: 7, offset: 47760},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1322, col: 1, offset: 47834},
			expr: &actionExpr{
				pos: position{line: 1323, col: 5, offset: 47872},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 5, offset: 47872},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1323, col: 5, offset: 47872},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1323, col: 16, offset: 47883},
								expr: &ruleRefExpr{
									pos:  position{line: 1323, col: 17, offset: 47884},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1324, col: 5, offset: 47910},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1324, col: 11, offset: 47916},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1324, col: 11, offset: 47916},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 11, offset: 47935},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1326, col: 12, offset: 47957},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1326, col: 12, offset: 47957},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1326, col: 12, offset: 47957},
													expr: &litMatcher{
														pos:        position{line: 1326, col: 13, offset: 47958},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1326, col: 19, offset: 47964},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1326, col: 28, offset: 47973},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1327, col: 11, offset: 48022},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 11, offset: 48046},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1329, col: 11, offset: 48072},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1333, col: 1, offset: 48168},
			expr: &seqExpr{
				pos: position{line: 1333, col: 27, offset: 48194},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1333, col: 27, offset: 48194},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1333, col: 33, offset: 48200},
						expr: &charClassMatcher{
							pos:        position{line: 1333, col: 34, offset: 48201},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1335, col: 1, offset: 48212},
			expr: &litMatcher{
				pos:        position{line: 1335, col: 25, offset: 48236},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1337, col: 1, offset: 48243},
			expr: &actionExpr{
				pos: position{line: 1337, col: 41, offset: 48283},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1337, col: 42, offset: 48284},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1337, col: 42, offset: 48284},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1337, col: 56, offset: 48298},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1337, col: 56, offset: 48298},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1337, col: 60, offset: 48302},
									expr: &litMatcher{
										pos:        position{line: 1337, col: 61, offset: 48303},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1345, col: 1, offset: 48568},
			expr: &actionExpr{
				pos: position{line: 1347, col: 5, offset: 48646},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1347, col: 5, offset: 48646},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1347, col: 5, offset: 48646},
							run: (*parser).callonSection3,
						},
						&labeledExpr{
							pos:   position{line: 1354, col: 5, offset: 48827},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1354, col: 12, offset: 48834},
								run: (*parser).callonSection5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1354, col: 12, offset: 48834},
									expr: &litMatcher{
										pos:        position{line: 1354, col: 13, offset: 48835},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1358, col: 5, offset: 48943},
							run: (*parser).callonSection8,
						},
						&oneOrMoreExpr{
							pos: position{line: 1362, col: 5, offset: 49095},
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 5, offset: 49095},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 12, offset: 49102},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 19, offset: 49109},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 41, offset: 49131},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1362, col: 45, offset: 49135},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 45, offset: 49135},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1362, col: 63, offset: 49153},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElements",
			pos:  position{line: 1366, col: 1, offset: 49254},
			expr: &actionExpr{
				pos: position{line: 1366, col: 25, offset: 49278},
				run: (*parser).callonSectionTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 1366, col: 25, offset: 49278},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1366, col: 34, offset: 49287},
						expr: &seqExpr{
							pos: position{line: 1366, col: 35, offset: 49288},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1366, col: 35, offset: 49288},
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 36, offset: 49289},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1366, col: 44, offset: 49297},
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 45, offset: 49298},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1366, col: 61, offset: 49314},
									name: "SectionTitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElement",
			pos:  position{line: 1370, col: 1, offset: 49442},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 9, offset: 49475},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1371, col: 9, offset: 49475},
						name: "InlineWord",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 49536},
						name: "LineBreak",
					},
					&oneOrMoreExpr{
						pos: position{line: 1373, col: 11, offset: 49581},
						expr: &ruleRefExpr{
							pos:  position{line: 1373, col: 11, offset: 49581},
							name: "Space",
						},
					},
					&seqExpr{
						pos: position{line: 1374, col: 11, offset: 49599},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1374, col: 11, offset: 49599},
								expr: &ruleRefExpr{
									pos:  position{line: 1374, col: 12, offset: 49600},
									name: "EOL",
								},
							},
							&choiceExpr{
								pos: position{line: 1375, col: 13, offset: 49618},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1375, col: 13, offset: 49618},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1376, col: 15, offset: 49645},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1377, col: 15, offset: 49670},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1378, col: 15, offset: 49695},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1379, col: 15, offset: 49722},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1380, col: 15, offset: 49742},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1381, col: 15, offset: 49835},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1382, col: 15, offset: 49865},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1383, col: 15, offset: 49933},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1384, col: 15, offset: 49964},
										name: "Symbol",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 15, offset: 49985},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 15, offset: 50016},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 15, offset: 50053},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 15, offset: 50086},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 15, offset: 50110},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 15, offset: 50143},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1396, col: 1, offset: 50441},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 5, offset: 50542},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1398, col: 5, offset: 50542},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 1398, col: 5, offset: 50542},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 1401, col: 7, offset: 50634},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 1401, col: 8, offset: 50635},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1401, col: 8, offset: 50635},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 1401, col: 14, offset: 50641},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 1401, col: 20, offset: 50647},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1415, col: 1, offset: 51185},
			expr: &seqExpr{
				pos: position{line: 1416, col: 5, offset: 51207},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1416, col: 5, offset: 51207},
						expr: &choiceExpr{
							pos: position{line: 1416, col: 6, offset: 51208},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1416, col: 6, offset: 51208},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1417, col: 7, offset: 51265},
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 7, offset: 51265},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1418, col: 7, offset: 51279},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1420, col: 7, offset: 51335},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1421, col: 7, offset: 51349},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1421, col: 17, offset: 51359},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1427, col: 1, offset: 51468},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 11, offset: 51478},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1427, col: 11, offset: 51478},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 24, offset: 51491},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 36, offset: 51503},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 48, offset: 51515},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 61, offset: 51528},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 72, offset: 51539},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1429, col: 1, offset: 51558},
			expr: &actionExpr{
				pos: position{line: 1429, col: 15, offset: 51572},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1429, col: 15, offset: 51572},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1433, col: 1, offset: 51634},
			expr: &litMatcher{
				pos:        position{line: 1433, col: 18, offset: 51651},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1435, col: 1, offset: 51674},
			expr: &actionExpr{
				pos: position{line: 1435, col: 14, offset: 51687},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1435, col: 14, offset: 51687},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1439, col: 1, offset: 51750},
			expr: &actionExpr{
				pos: position{line: 1439, col: 14, offset: 51763},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1439, col: 14, offset: 51763},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1443, col: 1, offset: 51827},
			expr: &actionExpr{
				pos: position{line: 1443, col: 15, offset: 51841},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1443, col: 15, offset: 51841},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1447, col: 1, offset: 51904},
			expr: &actionExpr{
				pos: position{line: 1447, col: 13, offset: 51916},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1447, col: 13, offset: 51916},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1455, col: 1, offset: 52201},
			expr: &actionExpr{
				pos: position{line: 1455, col: 22, offset: 52222},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 22, offset: 52222},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1455, col: 22, offset: 52222},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1455, col: 31, offset: 52231},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1455, col: 35, offset: 52235},
							expr: &charClassMatcher{
								pos:        position{line: 1455, col: 36, offset: 52236},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1462, col: 1, offset: 52514},
			expr: &actionExpr{
				pos: position{line: 1462, col: 18, offset: 52531},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1462, col: 18, offset: 52531},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1462, col: 19, offset: 52532},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1462, col: 19, offset: 52532},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1462, col: 27, offset: 52540},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1462, col: 37, offset: 52550},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1462, col: 45, offset: 52558},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1462, col: 55, offset: 52568},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1462, col: 63, offset: 52576},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1462, col: 72, offset: 52585},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1469, col: 1, offset: 52744},
			expr: &actionExpr{
				pos: position{line: 1470, col: 5, offset: 52767},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 5, offset: 52767},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1470, col: 5, offset: 52767},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 11, offset: 52773},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1471, col: 5, offset: 52793},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1475, col: 5, offset: 52933},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1476, col: 5, offset: 52943},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1476, col: 12, offset: 52950},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1477, col: 5, offset: 52971},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1477, col: 23, offset: 52989},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1481, col: 1, offset: 53120},
			expr: &actionExpr{
				pos: position{line: 1482, col: 5, offset: 53144},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1482, col: 5, offset: 53144},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1482, col: 5, offset: 53144},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1482, col: 11, offset: 53150},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1483, col: 5, offset: 53170},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1487, col: 5, offset: 53310},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1488, col: 5, offset: 53319},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1488, col: 12, offset: 53326},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1489, col: 5, offset: 53347},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1489, col: 23, offset: 53365},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1493, col: 1, offset: 53497},
			expr: &actionExpr{
				pos: position{line: 1493, col: 18, offset: 53514},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1493, col: 19, offset: 53515},
					expr: &charClassMatcher{
						pos:        position{line: 1493, col: 19, offset: 53515},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1497, col: 1, offset: 53572},
			expr: &actionExpr{
				pos: position{line: 1497, col: 19, offset: 53590},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1497, col: 19, offset: 53590},
					expr: &charClassMatcher{
						pos:        position{line: 1497, col: 19, offset: 53590},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1516, col: 1, offset: 54004},
			expr: &charClassMatcher{
				pos:        position{line: 1516, col: 13, offset: 54016},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1518, col: 1, offset: 54026},
			expr: &choiceExpr{
				pos: position{line: 1518, col: 16, offset: 54041},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1518, col: 16, offset: 54041},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1518, col: 22, offset: 54047},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1518, col: 28, offset: 54053},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1518, col: 34, offset: 54059},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1518, col: 40, offset: 54065},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1518, col: 46, offset: 54071},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1520, col: 1, offset: 54077},
			expr: &actionExpr{
				pos: position{line: 1520, col: 14, offset: 54090},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1520, col: 14, offset: 54090},
					expr: &charClassMatcher{
						pos:        position{line: 1520, col: 14, offset: 54090},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1524, col: 1, offset: 54144},
			expr: &choiceExpr{
				pos: position{line: 1528, col: 5, offset: 54471},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1528, col: 5, offset: 54471},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1528, col: 5, offset: 54471},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1528, col: 5, offset: 54471},
									expr: &charClassMatcher{
										pos:        position{line: 1528, col: 5, offset: 54471},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1528, col: 15, offset: 54481},
									expr: &choiceExpr{
										pos: position{line: 1528, col: 17, offset: 54483},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1528, col: 17, offset: 54483},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1528, col: 30, offset: 54496},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1530, col: 9, offset: 54566},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1530, col: 9, offset: 54566},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1530, col: 9, offset: 54566},
									expr: &charClassMatcher{
										pos:        position{line: 1530, col: 9, offset: 54566},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1530, col: 19, offset: 54576},
									expr: &seqExpr{
										pos: position{line: 1530, col: 20, offset: 54577},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1530, col: 20, offset: 54577},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1530, col: 27, offset: 54584},
												expr: &charClassMatcher{
													pos:        position{line: 1530, col: 27, offset: 54584},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1534, col: 1, offset: 54671},
			expr: &choiceExpr{
				pos: position{line: 1535, col: 5, offset: 54752},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1535, col: 5, offset: 54752},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1535, col: 5, offset: 54752},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1535, col: 5, offset: 54752},
									expr: &charClassMatcher{
										pos:        position{line: 1535, col: 5, offset: 54752},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1535, col: 19, offset: 54766},
									expr: &choiceExpr{
										pos: position{line: 1535, col: 21, offset: 54768},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1535, col: 21, offset: 54768},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1535, col: 31, offset: 54778},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1537, col: 9, offset: 54847},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1540, col: 1, offset: 54947},
			expr: &actionExpr{
				pos: position{line: 1540, col: 12, offset: 54958},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1540, col: 12, offset: 54958},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1544, col: 1, offset: 55031},
			expr: &actionExpr{
				pos: position{line: 1544, col: 17, offset: 55047},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1544, col: 17, offset: 55047},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1544, col: 22, offset: 55052},
						expr: &choiceExpr{
							pos: position{line: 1544, col: 23, offset: 55053},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1544, col: 23, offset: 55053},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 1544, col: 34, offset: 55064},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1548, col: 1, offset: 55153},
			expr: &actionExpr{
				pos: position{line: 1548, col: 13, offset: 55165},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1548, col: 13, offset: 55165},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1548, col: 13, offset: 55165},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1548, col: 20, offset: 55172},
								expr: &ruleRefExpr{
									pos:  position{line: 1548, col: 21, offset: 55173},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 30, offset: 55182},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1548, col: 35, offset: 55187},
								expr: &choiceExpr{
									pos: position{line: 1548, col: 36, offset: 55188},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1548, col: 36, offset: 55188},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1548, col: 47, offset: 55199},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1552, col: 1, offset: 55292},
			expr: &actionExpr{
				pos: position{line: 1552, col: 23, offset: 55314},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 23, offset: 55314},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1552, col: 23, offset: 55314},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1552, col: 31, offset: 55322},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 39, offset: 55330},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1552, col: 44, offset: 55335},
								expr: &choiceExpr{
									pos: position{line: 1552, col: 45, offset: 55336},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1552, col: 45, offset: 55336},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1552, col: 56, offset: 55347},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 1556, col: 1, offset: 55440},
			expr: &actionExpr{
				pos: position{line: 1556, col: 13, offset: 55452},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1556, col: 13, offset: 55452},
					expr: &charClassMatcher{
						pos:        position{line: 1556, col: 14, offset: 55453},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 1560, col: 1, offset: 55583},
			expr: &choiceExpr{
				pos: position{line: 1560, col: 11, offset: 55593},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1560, col: 11, offset: 55593},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1560, col: 23, offset: 55605},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1560, col: 36, offset: 55618},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1560, col: 47, offset: 55629},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1560, col: 58, offset: 55640},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 1562, col: 1, offset: 55651},
			expr: &actionExpr{
				pos: position{line: 1562, col: 7, offset: 55657},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1562, col: 7, offset: 55657},
					expr: &charClassMatcher{
						pos:        position{line: 1562, col: 7, offset: 55657},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 1566, col: 1, offset: 55790},
			expr: &actionExpr{
				pos: position{line: 1566, col: 10, offset: 55799},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 1566, col: 10, offset: 55799},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1570, col: 1, offset: 55849},
			expr: &actionExpr{
				pos: position{line: 1570, col: 11, offset: 55859},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 1570, col: 11, offset: 55859},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1570, col: 11, offset: 55859},
							expr: &litMatcher{
								pos:        position{line: 1570, col: 11, offset: 55859},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1570, col: 16, offset: 55864},
							expr: &ruleRefExpr{
								pos:  position{line: 1570, col: 16, offset: 55864},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1574, col: 1, offset: 55924},
			expr: &choiceExpr{
				pos: position{line: 1574, col: 10, offset: 55933},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1574, col: 10, offset: 55933},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1574, col: 16, offset: 55939},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1574, col: 16, offset: 55939},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1578, col: 1, offset: 55988},
			expr: &choiceExpr{
				pos: position{line: 1578, col: 12, offset: 55999},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1578, col: 12, offset: 55999},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1578, col: 21, offset: 56008},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1578, col: 28, offset: 56015},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1580, col: 1, offset: 56021},
			expr: &notExpr{
				pos: position{line: 1580, col: 8, offset: 56028},
				expr: &anyMatcher{
					line: 1580, col: 9, offset: 56029,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1582, col: 1, offset: 56032},
			expr: &choiceExpr{
				pos: position{line: 1582, col: 8, offset: 56039},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1582, col: 8, offset: 56039},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1582, col: 18, offset: 56049},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragments1(frontmatter, header, fragments interface{}) (interface{}, error) {
	return types.NewDocumentFragments(frontmatter, header, fragments.([]interface{}))

}

func (p *parser) callonDocumentFragments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragments1(stack["frontmatter"], stack["header"], stack["fragments"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes12(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	attributes = append(attributes, otherAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue14()
}

func (c *current) onSingleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue17()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue14()
}

func (c *current) onDoubleQuotedAttributeValue17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue17()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue9()
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue16(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue16(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)

}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onRawLine6() (interface{}, error) {
	// line MAY have content
	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentFragment1(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["line"])
}

func (c *current) onDocumentHeader3() (bool, error) {
	ctx, err := c.globalStore.fileinclusionContext()
	if err != nil {
		return false, err
	}
	return ctx.isSectionRuleEnabled(), nil

}

func (p *parser) callonDocumentHeader3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader3()
}

func (c *current) onDocumentHeader6(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentHeader6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader6(stack["title"], stack["id"])
}

func (c *current) onDocumentHeader1(fragments interface{}) (interface{}, error) {
	return types.NewDocumentHeader(fragments.([]interface{}))

}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["fragments"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection3() (bool, error) {
	ctx, err := c.globalStore.fileinclusionContext()
	if err != nil {
		return false, err
	}
	return ctx.isSectionRuleEnabled(), nil

}

func (p *parser) callonSection3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3()
}

func (c *current) onSection5() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5()
}

func (c *current) onSection8(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection8(stack["level"])
}

func (c *current) onSection1(level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}))
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"], stack["id"])
}

func (c *current) onSectionTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonSectionTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElements1(stack["elements"])
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

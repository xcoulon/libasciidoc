// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DefaultDocumentFragmentElement",
			pos:  position{line: 21, col: 1, offset: 381},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 420},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 420},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 7, offset: 436},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 7, offset: 450},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 7, offset: 467},
						name: "BlockAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 7, offset: 489},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 27, col: 7, offset: 510},
						name: "BlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 7, offset: 532},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 7, offset: 556},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 7, offset: 583},
						name: "AttributeReset",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinParagraph",
			pos:  position{line: 35, col: 1, offset: 790},
			expr: &choiceExpr{
				pos: position{line: 36, col: 5, offset: 837},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 36, col: 5, offset: 837},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 37, col: 7, offset: 853},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "DocumentFragmentElementWithinDelimitedBlock",
			pos:  position{line: 42, col: 1, offset: 1063},
			expr: &choiceExpr{
				pos: position{line: 43, col: 5, offset: 1115},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 5, offset: 1115},
						name: "BlankLine",
					},
					&actionExpr{
						pos: position{line: 45, col: 9, offset: 1141},
						run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock3,
						expr: &seqExpr{
							pos: position{line: 45, col: 9, offset: 1141},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 9, offset: 1141},
									label: "delimiter",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 20, offset: 1152},
										name: "BlockDelimiter",
									},
								},
								&andCodeExpr{
									pos: position{line: 46, col: 9, offset: 1176},
									run: (*parser).callonDocumentFragmentElementWithinDelimitedBlock7,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 58, col: 1, offset: 1616},
			expr: &actionExpr{
				pos: position{line: 59, col: 5, offset: 1645},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 59, col: 5, offset: 1645},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 59, col: 5, offset: 1645},
							run: (*parser).callonAttributeDeclaration3,
						},
						&litMatcher{
							pos:        position{line: 63, col: 5, offset: 1789},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 63, col: 9, offset: 1793},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 15, offset: 1799},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 63, col: 30, offset: 1814},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 5, offset: 1823},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 64, col: 11, offset: 1829},
								expr: &ruleRefExpr{
									pos:  position{line: 64, col: 12, offset: 1830},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 65, col: 5, offset: 1863},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 74, col: 1, offset: 2216},
			expr: &actionExpr{
				pos: position{line: 74, col: 18, offset: 2233},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 74, col: 18, offset: 2233},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 74, col: 18, offset: 2233},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 74, col: 28, offset: 2243},
							expr: &charClassMatcher{
								pos:        position{line: 74, col: 29, offset: 2244},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 78, col: 1, offset: 2300},
			expr: &actionExpr{
				pos: position{line: 78, col: 30, offset: 2329},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 78, col: 30, offset: 2329},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 78, col: 30, offset: 2329},
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 30, offset: 2329},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 78, col: 37, offset: 2336},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 78, col: 46, offset: 2345},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 47, offset: 2346},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 82, col: 1, offset: 2468},
			expr: &actionExpr{
				pos: position{line: 82, col: 37, offset: 2504},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 82, col: 37, offset: 2504},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 82, col: 37, offset: 2504},
							expr: &ruleRefExpr{
								pos:  position{line: 82, col: 38, offset: 2505},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 83, col: 5, offset: 2514},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 84, col: 9, offset: 2532},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 84, col: 10, offset: 2533},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 84, col: 10, offset: 2533},
											expr: &charClassMatcher{
												pos:        position{line: 84, col: 10, offset: 2533},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2628},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 88, col: 12, offset: 2661},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 88, col: 12, offset: 2661},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 95, col: 1, offset: 2798},
			expr: &choiceExpr{
				pos: position{line: 95, col: 19, offset: 2816},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 95, col: 19, offset: 2816},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 95, col: 19, offset: 2816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 95, col: 19, offset: 2816},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 95, col: 24, offset: 2821},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2827},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 95, col: 45, offset: 2842},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 95, col: 49, offset: 2846},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 49, offset: 2846},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 95, col: 56, offset: 2853},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 2913},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 97, col: 5, offset: 2913},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 97, col: 5, offset: 2913},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 97, col: 9, offset: 2917},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 15, offset: 2923},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 97, col: 30, offset: 2938},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 97, col: 35, offset: 2943},
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 35, offset: 2943},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 42, offset: 2950},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 104, col: 1, offset: 3132},
			expr: &actionExpr{
				pos: position{line: 105, col: 5, offset: 3156},
				run: (*parser).callonBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 105, col: 5, offset: 3156},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 105, col: 5, offset: 3156},
							run: (*parser).callonBlockAttributes3,
						},
						&labeledExpr{
							pos:   position{line: 109, col: 5, offset: 3294},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 109, col: 16, offset: 3305},
								expr: &choiceExpr{
									pos: position{line: 111, col: 9, offset: 3372},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 111, col: 10, offset: 3373},
											run: (*parser).callonBlockAttributes7,
											expr: &seqExpr{
												pos: position{line: 111, col: 10, offset: 3373},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 111, col: 10, offset: 3373},
														label: "anchor",
														expr: &ruleRefExpr{
															pos:  position{line: 111, col: 18, offset: 3381},
															name: "ShortHandAnchor",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 111, col: 35, offset: 3398},
														expr: &ruleRefExpr{
															pos:  position{line: 111, col: 35, offset: 3398},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 115, col: 12, offset: 3515},
											run: (*parser).callonBlockAttributes13,
											expr: &seqExpr{
												pos: position{line: 115, col: 12, offset: 3515},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 115, col: 12, offset: 3515},
														label: "title",
														expr: &ruleRefExpr{
															pos:  position{line: 115, col: 19, offset: 3522},
															name: "ShortHandTitle",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 115, col: 35, offset: 3538},
														expr: &ruleRefExpr{
															pos:  position{line: 115, col: 35, offset: 3538},
															name: "Space",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 119, col: 12, offset: 3625},
											run: (*parser).callonBlockAttributes19,
											expr: &seqExpr{
												pos: position{line: 119, col: 12, offset: 3625},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 119, col: 12, offset: 3625},
														label: "attributes",
														expr: &ruleRefExpr{
															pos:  position{line: 119, col: 24, offset: 3637},
															name: "LongHandAttributes",
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 119, col: 44, offset: 3657},
														expr: &ruleRefExpr{
															pos:  position{line: 119, col: 44, offset: 3657},
															name: "Space",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 127, col: 1, offset: 3831},
			expr: &actionExpr{
				pos: position{line: 128, col: 5, offset: 3855},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 128, col: 5, offset: 3855},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 128, col: 5, offset: 3855},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 129, col: 5, offset: 3863},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 129, col: 16, offset: 3874},
								expr: &actionExpr{
									pos: position{line: 130, col: 9, offset: 3884},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 131, col: 13, offset: 3898},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 131, col: 13, offset: 3898},
												expr: &litMatcher{
													pos:        position{line: 131, col: 14, offset: 3899},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 132, col: 13, offset: 3931},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 132, col: 24, offset: 3942},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 132, col: 24, offset: 3942},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 132, col: 46, offset: 3964},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 137, col: 5, offset: 4047},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 142, col: 1, offset: 4175},
			expr: &actionExpr{
				pos: position{line: 143, col: 4, offset: 4197},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 143, col: 4, offset: 4197},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 143, col: 4, offset: 4197},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 144, col: 5, offset: 4207},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 145, col: 9, offset: 4220},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 145, col: 9, offset: 4220},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 145, col: 18, offset: 4229},
										expr: &choiceExpr{
											pos: position{line: 146, col: 13, offset: 4243},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 146, col: 14, offset: 4244},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 146, col: 14, offset: 4244},
														expr: &charClassMatcher{
															pos:        position{line: 146, col: 14, offset: 4244},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 149, col: 15, offset: 4410},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 150, col: 15, offset: 4443},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 151, col: 16, offset: 4480},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 151, col: 16, offset: 4480},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 157, col: 5, offset: 4666},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 162, col: 1, offset: 4767},
			expr: &actionExpr{
				pos: position{line: 162, col: 19, offset: 4785},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 162, col: 19, offset: 4785},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 162, col: 19, offset: 4785},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 162, col: 23, offset: 4789},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 163, col: 5, offset: 4801},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 163, col: 5, offset: 4801},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 163, col: 5, offset: 4801},
											expr: &charClassMatcher{
												pos:        position{line: 163, col: 6, offset: 4802},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 164, col: 5, offset: 4914},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 164, col: 14, offset: 4923},
												expr: &choiceExpr{
													pos: position{line: 165, col: 9, offset: 4933},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 165, col: 10, offset: 4934},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 165, col: 10, offset: 4934},
																expr: &charClassMatcher{
																	pos:        position{line: 165, col: 10, offset: 4934},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 168, col: 11, offset: 5031},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 169, col: 11, offset: 5060},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 170, col: 12, offset: 5093},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 170, col: 12, offset: 5093},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 181, col: 1, offset: 5493},
			expr: &actionExpr{
				pos: position{line: 182, col: 5, offset: 5519},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 182, col: 5, offset: 5519},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 182, col: 5, offset: 5519},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 182, col: 9, offset: 5523},
							expr: &litMatcher{
								pos:        position{line: 182, col: 10, offset: 5524},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 184, col: 5, offset: 5694},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 184, col: 31, offset: 5720},
								expr: &ruleRefExpr{
									pos:  position{line: 184, col: 32, offset: 5721},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 5753},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 185, col: 21, offset: 5769},
								expr: &choiceExpr{
									pos: position{line: 185, col: 22, offset: 5770},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 185, col: 22, offset: 5770},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 185, col: 44, offset: 5792},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 186, col: 5, offset: 5813},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 199, col: 1, offset: 6341},
			expr: &actionExpr{
				pos: position{line: 200, col: 5, offset: 6375},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 200, col: 5, offset: 6375},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 200, col: 5, offset: 6375},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 200, col: 10, offset: 6380},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 9, offset: 6390},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 5, offset: 6420},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 203, col: 12, offset: 6427},
								expr: &choiceExpr{
									pos: position{line: 204, col: 9, offset: 6438},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 204, col: 9, offset: 6438},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 205, col: 11, offset: 6470},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 206, col: 11, offset: 6505},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 207, col: 8, offset: 6538},
							expr: &seqExpr{
								pos: position{line: 207, col: 9, offset: 6539},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 207, col: 9, offset: 6539},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 207, col: 13, offset: 6543},
										expr: &ruleRefExpr{
											pos:  position{line: 207, col: 13, offset: 6543},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 208, col: 5, offset: 6557},
							run: (*parser).callonFirstPositionalAttributes17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 224, col: 1, offset: 6973},
			expr: &actionExpr{
				pos: position{line: 224, col: 25, offset: 6997},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 224, col: 25, offset: 6997},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 25, offset: 6997},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 29, offset: 7001},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 33, offset: 7005},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 228, col: 1, offset: 7079},
			expr: &actionExpr{
				pos: position{line: 228, col: 23, offset: 7101},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 228, col: 23, offset: 7101},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 228, col: 30, offset: 7108},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 233, col: 1, offset: 7234},
			expr: &actionExpr{
				pos: position{line: 233, col: 30, offset: 7263},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 233, col: 30, offset: 7263},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 30, offset: 7263},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 34, offset: 7267},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 40, offset: 7273},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 238, col: 1, offset: 7395},
			expr: &actionExpr{
				pos: position{line: 238, col: 29, offset: 7423},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 238, col: 29, offset: 7423},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 238, col: 29, offset: 7423},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 238, col: 33, offset: 7427},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 41, offset: 7435},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 243, col: 1, offset: 7548},
			expr: &choiceExpr{
				pos: position{line: 244, col: 5, offset: 7580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7580},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 7, offset: 7614},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 246, col: 7, offset: 7648},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 246, col: 7, offset: 7648},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 246, col: 7, offset: 7648},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 246, col: 16, offset: 7657},
										expr: &choiceExpr{
											pos: position{line: 249, col: 5, offset: 7827},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 249, col: 6, offset: 7828},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 249, col: 6, offset: 7828},
														expr: &charClassMatcher{
															pos:        position{line: 249, col: 6, offset: 7828},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 252, col: 5, offset: 7922},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 253, col: 5, offset: 7947},
													name: "Quote",
												},
												&ruleRefExpr{
													pos:  position{line: 254, col: 5, offset: 7959},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 255, col: 6, offset: 7988},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 255, col: 6, offset: 7988},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 257, col: 10, offset: 8058},
									expr: &charClassMatcher{
										pos:        position{line: 257, col: 11, offset: 8059},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 261, col: 1, offset: 8135},
			expr: &choiceExpr{
				pos: position{line: 261, col: 24, offset: 8158},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 8164},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 262, col: 5, offset: 8164},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 262, col: 5, offset: 8164},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 12, offset: 8171},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 262, col: 29, offset: 8188},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 262, col: 29, offset: 8188},
											expr: &seqExpr{
												pos: position{line: 262, col: 30, offset: 8189},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 262, col: 30, offset: 8189},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 262, col: 34, offset: 8193},
														expr: &ruleRefExpr{
															pos:  position{line: 262, col: 34, offset: 8193},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 262, col: 45, offset: 8204},
											expr: &litMatcher{
												pos:        position{line: 262, col: 46, offset: 8205},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 267, col: 6, offset: 8442},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 267, col: 6, offset: 8442},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 267, col: 6, offset: 8442},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 267, col: 13, offset: 8449},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 267, col: 13, offset: 8449},
												expr: &ruleRefExpr{
													pos:  position{line: 267, col: 13, offset: 8449},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 267, col: 21, offset: 8457},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 267, col: 22, offset: 8458},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 267, col: 22, offset: 8458},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 267, col: 26, offset: 8462},
																expr: &ruleRefExpr{
																	pos:  position{line: 267, col: 26, offset: 8462},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 267, col: 36, offset: 8472},
														expr: &litMatcher{
															pos:        position{line: 267, col: 37, offset: 8473},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 268, col: 5, offset: 8483},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 278, col: 1, offset: 8798},
			expr: &actionExpr{
				pos: position{line: 278, col: 19, offset: 8816},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 278, col: 19, offset: 8816},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 278, col: 19, offset: 8816},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 24, offset: 8821},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 43, offset: 8840},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 47, offset: 8844},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 47, offset: 8844},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 278, col: 54, offset: 8851},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 61, offset: 8858},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 278, col: 77, offset: 8874},
							expr: &seqExpr{
								pos: position{line: 278, col: 78, offset: 8875},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 278, col: 78, offset: 8875},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 278, col: 82, offset: 8879},
										expr: &ruleRefExpr{
											pos:  position{line: 278, col: 82, offset: 8879},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 283, col: 1, offset: 9103},
			expr: &actionExpr{
				pos: position{line: 283, col: 22, offset: 9124},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 283, col: 22, offset: 9124},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 283, col: 22, offset: 9124},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 23, offset: 9125},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 283, col: 29, offset: 9131},
							expr: &charClassMatcher{
								pos:        position{line: 283, col: 29, offset: 9131},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 42, offset: 9144},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 42, offset: 9144},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 287, col: 1, offset: 9214},
			expr: &actionExpr{
				pos: position{line: 288, col: 5, offset: 9237},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 288, col: 5, offset: 9237},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 5, offset: 9237},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 289, col: 9, offset: 9253},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 289, col: 9, offset: 9253},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 290, col: 11, offset: 9291},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 291, col: 11, offset: 9329},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 293, col: 5, offset: 9363},
							expr: &notExpr{
								pos: position{line: 293, col: 7, offset: 9365},
								expr: &seqExpr{
									pos: position{line: 293, col: 9, offset: 9367},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 293, col: 9, offset: 9367},
											expr: &ruleRefExpr{
												pos:  position{line: 293, col: 9, offset: 9367},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 293, col: 16, offset: 9374},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 297, col: 1, offset: 9415},
			expr: &actionExpr{
				pos: position{line: 298, col: 5, offset: 9450},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 298, col: 5, offset: 9450},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 298, col: 5, offset: 9450},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 5, offset: 9459},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 299, col: 14, offset: 9468},
								expr: &choiceExpr{
									pos: position{line: 301, col: 9, offset: 9558},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 301, col: 9, offset: 9558},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 302, col: 12, offset: 9575},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 302, col: 12, offset: 9575},
												expr: &charClassMatcher{
													pos:        position{line: 302, col: 12, offset: 9575},
													val:        "[^\\r\\n\\uFFFD\\\\{&<>']",
													chars:      []rune{'\r', '\n', '�', '\\', '{', '&', '<', '>', '\''},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 305, col: 11, offset: 9724},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 306, col: 11, offset: 9756},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 307, col: 11, offset: 9783},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 308, col: 12, offset: 9813},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 308, col: 12, offset: 9813},
													run: (*parser).callonSingleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 308, col: 12, offset: 9813},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 311, col: 11, offset: 9905},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 311, col: 17, offset: 9911},
													run: (*parser).callonSingleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 311, col: 17, offset: 9911},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 5, offset: 10000},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 319, col: 1, offset: 10056},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 10091},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 10091},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 10091},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 10101},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 321, col: 14, offset: 10110},
								expr: &choiceExpr{
									pos: position{line: 322, col: 9, offset: 10120},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 322, col: 9, offset: 10120},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 323, col: 12, offset: 10137},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 323, col: 12, offset: 10137},
												expr: &charClassMatcher{
													pos:        position{line: 323, col: 12, offset: 10137},
													val:        "[^\\r\\n\\uFFFD&<>\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '&', '<', '>', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 326, col: 11, offset: 10286},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 327, col: 11, offset: 10318},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 328, col: 11, offset: 10345},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 329, col: 12, offset: 10375},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 329, col: 12, offset: 10375},
													run: (*parser).callonDoubleQuotedAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 329, col: 12, offset: 10375},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 332, col: 11, offset: 10467},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 332, col: 17, offset: 10473},
													run: (*parser).callonDoubleQuotedAttributeValue18,
													expr: &litMatcher{
														pos:        position{line: 332, col: 17, offset: 10473},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 336, col: 5, offset: 10562},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 341, col: 1, offset: 10697},
			expr: &actionExpr{
				pos: position{line: 342, col: 5, offset: 10728},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 342, col: 5, offset: 10728},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 342, col: 5, offset: 10728},
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 6, offset: 10729},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 5, offset: 10739},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 343, col: 14, offset: 10748},
								expr: &actionExpr{
									pos: position{line: 344, col: 9, offset: 10758},
									run: (*parser).callonUnquotedAttributeValue7,
									expr: &seqExpr{
										pos: position{line: 344, col: 9, offset: 10758},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 344, col: 9, offset: 10758},
												expr: &litMatcher{
													pos:        position{line: 344, col: 10, offset: 10759},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 345, col: 9, offset: 10787},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 346, col: 13, offset: 10809},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 346, col: 13, offset: 10809},
															name: "Quote",
														},
														&actionExpr{
															pos: position{line: 347, col: 16, offset: 10830},
															run: (*parser).callonUnquotedAttributeValue14,
															expr: &oneOrMoreExpr{
																pos: position{line: 347, col: 16, offset: 10830},
																expr: &charClassMatcher{
																	pos:        position{line: 347, col: 16, offset: 10830},
																	val:        "[^,=\\r\\n\\uFFFD&<>{\\] ]",
																	chars:      []rune{',', '=', '\r', '\n', '�', '&', '<', '>', '{', ']', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 350, col: 15, offset: 10948},
															name: "Space",
														},
														&ruleRefExpr{
															pos:  position{line: 351, col: 15, offset: 10968},
															name: "AttributeSubstitution",
														},
														&ruleRefExpr{
															pos:  position{line: 352, col: 15, offset: 11004},
															name: "SpecialCharacter",
														},
														&ruleRefExpr{
															pos:  position{line: 353, col: 15, offset: 11035},
															name: "ElementPlaceHolder",
														},
														&actionExpr{
															pos: position{line: 354, col: 16, offset: 11069},
															run: (*parser).callonUnquotedAttributeValue21,
															expr: &litMatcher{
																pos:        position{line: 354, col: 16, offset: 11069},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 361, col: 5, offset: 11219},
							run: (*parser).callonUnquotedAttributeValue23,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 372, col: 1, offset: 11571},
			expr: &actionExpr{
				pos: position{line: 374, col: 5, offset: 11662},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 374, col: 5, offset: 11662},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 374, col: 5, offset: 11662},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 377, col: 5, offset: 11726},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 377, col: 14, offset: 11735},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 377, col: 14, offset: 11735},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 36, offset: 11757},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 384, col: 1, offset: 11922},
			expr: &actionExpr{
				pos: position{line: 384, col: 31, offset: 11952},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 384, col: 31, offset: 11952},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 384, col: 31, offset: 11952},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 35, offset: 11956},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 40, offset: 11961},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 54, offset: 11975},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 389, col: 1, offset: 12091},
			expr: &choiceExpr{
				pos: position{line: 389, col: 24, offset: 12114},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 389, col: 24, offset: 12114},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 389, col: 47, offset: 12137},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 391, col: 1, offset: 12273},
			expr: &actionExpr{
				pos: position{line: 391, col: 25, offset: 12297},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 391, col: 25, offset: 12297},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 25, offset: 12297},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 37, offset: 12309},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 42, offset: 12314},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 391, col: 56, offset: 12328},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 391, col: 62, offset: 12334},
								expr: &ruleRefExpr{
									pos:  position{line: 391, col: 63, offset: 12335},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 391, col: 78, offset: 12350},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 395, col: 1, offset: 12428},
			expr: &actionExpr{
				pos: position{line: 395, col: 25, offset: 12452},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 395, col: 25, offset: 12452},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 25, offset: 12452},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 395, col: 38, offset: 12465},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 43, offset: 12470},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 395, col: 57, offset: 12484},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 395, col: 63, offset: 12490},
								expr: &ruleRefExpr{
									pos:  position{line: 395, col: 64, offset: 12491},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 79, offset: 12506},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 399, col: 1, offset: 12581},
			expr: &actionExpr{
				pos: position{line: 399, col: 17, offset: 12597},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 399, col: 17, offset: 12597},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 17, offset: 12597},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 399, col: 21, offset: 12601},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 399, col: 28, offset: 12608},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 399, col: 28, offset: 12608},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 399, col: 28, offset: 12608},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 401, col: 9, offset: 12662},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 401, col: 9, offset: 12662},
											expr: &charClassMatcher{
												pos:        position{line: 401, col: 9, offset: 12662},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 410, col: 1, offset: 12864},
			expr: &actionExpr{
				pos: position{line: 410, col: 14, offset: 12877},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 410, col: 14, offset: 12877},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 410, col: 14, offset: 12877},
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 14, offset: 12877},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 21, offset: 12884},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 417, col: 1, offset: 13121},
			expr: &actionExpr{
				pos: position{line: 419, col: 5, offset: 13199},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 419, col: 5, offset: 13199},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 419, col: 5, offset: 13199},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 422, col: 5, offset: 13261},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 422, col: 9, offset: 13265},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 422, col: 14, offset: 13270},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 422, col: 14, offset: 13270},
									expr: &charClassMatcher{
										pos:        position{line: 422, col: 14, offset: 13270},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 422, col: 62, offset: 13318},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 422, col: 66, offset: 13322},
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 66, offset: 13322},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 422, col: 73, offset: 13329},
							expr: &choiceExpr{
								pos: position{line: 422, col: 75, offset: 13331},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 422, col: 75, offset: 13331},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 422, col: 81, offset: 13337},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 426, col: 1, offset: 13398},
			expr: &actionExpr{
				pos: position{line: 426, col: 20, offset: 13417},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 426, col: 20, offset: 13417},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 426, col: 20, offset: 13417},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 25, offset: 13422},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 426, col: 48, offset: 13445},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 61, offset: 13458},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 430, col: 1, offset: 13570},
			expr: &actionExpr{
				pos: position{line: 430, col: 26, offset: 13595},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 430, col: 26, offset: 13595},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 430, col: 26, offset: 13595},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 30, offset: 13599},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 430, col: 35, offset: 13604},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 430, col: 35, offset: 13604},
									expr: &charClassMatcher{
										pos:        position{line: 430, col: 35, offset: 13604},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 430, col: 83, offset: 13652},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 430, col: 87, offset: 13656},
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 87, offset: 13656},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 438, col: 1, offset: 13887},
			expr: &seqExpr{
				pos: position{line: 438, col: 31, offset: 13917},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 438, col: 31, offset: 13917},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 438, col: 38, offset: 13924},
						expr: &ruleRefExpr{
							pos:  position{line: 438, col: 38, offset: 13924},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 45, offset: 13931},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 440, col: 1, offset: 13936},
			expr: &choiceExpr{
				pos: position{line: 440, col: 29, offset: 13964},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 440, col: 30, offset: 13965},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 440, col: 30, offset: 13965},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 440, col: 37, offset: 13972},
								expr: &ruleRefExpr{
									pos:  position{line: 440, col: 37, offset: 13972},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 440, col: 44, offset: 13979},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 440, col: 51, offset: 13986},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 457, col: 1, offset: 14476},
			expr: &actionExpr{
				pos: position{line: 462, col: 5, offset: 14635},
				run: (*parser).callonCommentBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 462, col: 5, offset: 14635},
					label: "content",
					expr: &ruleRefExpr{
						pos:  position{line: 462, col: 14, offset: 14644},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 466, col: 1, offset: 14690},
			expr: &actionExpr{
				pos: position{line: 466, col: 12, offset: 14701},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 466, col: 12, offset: 14701},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 466, col: 12, offset: 14701},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 466, col: 20, offset: 14709},
								expr: &anyMatcher{
									line: 466, col: 21, offset: 14710,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 25, offset: 14714},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 470, col: 1, offset: 14767},
			expr: &actionExpr{
				pos: position{line: 470, col: 22, offset: 14788},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 470, col: 22, offset: 14788},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 470, col: 22, offset: 14788},
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 23, offset: 14789},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 470, col: 45, offset: 14811},
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 45, offset: 14811},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 470, col: 52, offset: 14818},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 470, col: 57, offset: 14823},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 66, offset: 14832},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 92, offset: 14858},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 474, col: 1, offset: 14931},
			expr: &actionExpr{
				pos: position{line: 474, col: 29, offset: 14959},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 474, col: 29, offset: 14959},
					expr: &charClassMatcher{
						pos:        position{line: 474, col: 29, offset: 14959},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 481, col: 1, offset: 15124},
			expr: &choiceExpr{
				pos: position{line: 481, col: 19, offset: 15142},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 481, col: 19, offset: 15142},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 44, offset: 15167},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 483, col: 1, offset: 15192},
			expr: &choiceExpr{
				pos: position{line: 483, col: 27, offset: 15218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 483, col: 27, offset: 15218},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 483, col: 27, offset: 15218},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 483, col: 27, offset: 15218},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 483, col: 32, offset: 15223},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 483, col: 36, offset: 15227},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 483, col: 40, offset: 15231},
									expr: &ruleRefExpr{
										pos:  position{line: 483, col: 40, offset: 15231},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 483, col: 47, offset: 15238},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 483, col: 51, offset: 15242},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 483, col: 58, offset: 15249},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 483, col: 79, offset: 15270},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 485, col: 9, offset: 15343},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 485, col: 9, offset: 15343},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 485, col: 9, offset: 15343},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 485, col: 14, offset: 15348},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 18, offset: 15352},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 485, col: 22, offset: 15356},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 489, col: 1, offset: 15427},
			expr: &actionExpr{
				pos: position{line: 489, col: 27, offset: 15453},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 489, col: 27, offset: 15453},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 489, col: 27, offset: 15453},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 35, offset: 15461},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 40, offset: 15466},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 54, offset: 15480},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 72, offset: 15498},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 493, col: 1, offset: 15632},
			expr: &oneOrMoreExpr{
				pos: position{line: 493, col: 24, offset: 15655},
				expr: &choiceExpr{
					pos: position{line: 494, col: 5, offset: 15661},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 494, col: 6, offset: 15662},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 494, col: 6, offset: 15662},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 494, col: 6, offset: 15662},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 494, col: 14, offset: 15670},
										expr: &charClassMatcher{
											pos:        position{line: 494, col: 14, offset: 15670},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 497, col: 7, offset: 15865},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 498, col: 8, offset: 15894},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 498, col: 8, offset: 15894},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 507, col: 1, offset: 16169},
			expr: &actionExpr{
				pos: position{line: 507, col: 19, offset: 16187},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 507, col: 19, offset: 16187},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 507, col: 19, offset: 16187},
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 21, offset: 16189},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 5, offset: 16219},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 508, col: 16, offset: 16230},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 508, col: 16, offset: 16230},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 509, col: 7, offset: 16289},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 510, col: 7, offset: 16317},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 511, col: 7, offset: 16346},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 512, col: 7, offset: 16375},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 513, col: 7, offset: 16404},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 514, col: 7, offset: 16430},
										name: "SidebarBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 515, col: 7, offset: 16458},
										name: "PassthroughBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 519, col: 1, offset: 16524},
			expr: &actionExpr{
				pos: position{line: 519, col: 26, offset: 16549},
				run: (*parser).callonLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 519, col: 26, offset: 16549},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 519, col: 26, offset: 16549},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 519, col: 33, offset: 16556},
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 33, offset: 16556},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 40, offset: 16563},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 523, col: 1, offset: 16622},
			expr: &actionExpr{
				pos: position{line: 523, col: 25, offset: 16646},
				run: (*parser).callonFencedBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 523, col: 25, offset: 16646},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 523, col: 25, offset: 16646},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 523, col: 31, offset: 16652},
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 31, offset: 16652},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 38, offset: 16659},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 527, col: 1, offset: 16717},
			expr: &actionExpr{
				pos: position{line: 527, col: 26, offset: 16742},
				run: (*parser).callonListingBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 527, col: 26, offset: 16742},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 527, col: 26, offset: 16742},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 527, col: 33, offset: 16749},
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 33, offset: 16749},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "SourceBlockDelimiter",
			pos:  position{line: 531, col: 1, offset: 16811},
			expr: &ruleRefExpr{
				pos:  position{line: 531, col: 25, offset: 16835},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 533, col: 1, offset: 16858},
			expr: &actionExpr{
				pos: position{line: 533, col: 26, offset: 16883},
				run: (*parser).callonExampleBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 533, col: 26, offset: 16883},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 533, col: 26, offset: 16883},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 533, col: 33, offset: 16890},
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 33, offset: 16890},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 40, offset: 16897},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 537, col: 1, offset: 16956},
			expr: &actionExpr{
				pos: position{line: 537, col: 26, offset: 16981},
				run: (*parser).callonCommentBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 537, col: 26, offset: 16981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 537, col: 26, offset: 16981},
							val:        "////",
							ignoreCase: false,
							want:       "\"////\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 537, col: 33, offset: 16988},
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 33, offset: 16988},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 40, offset: 16995},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 541, col: 1, offset: 17054},
			expr: &actionExpr{
				pos: position{line: 541, col: 24, offset: 17077},
				run: (*parser).callonQuoteBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 541, col: 24, offset: 17077},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 24, offset: 17077},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 541, col: 31, offset: 17084},
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 31, offset: 17084},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 38, offset: 17091},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 545, col: 1, offset: 17148},
			expr: &actionExpr{
				pos: position{line: 545, col: 26, offset: 17173},
				run: (*parser).callonSidebarBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 545, col: 26, offset: 17173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 26, offset: 17173},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 545, col: 33, offset: 17180},
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 33, offset: 17180},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 40, offset: 17187},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 549, col: 1, offset: 17246},
			expr: &actionExpr{
				pos: position{line: 549, col: 30, offset: 17275},
				run: (*parser).callonPassthroughBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 549, col: 30, offset: 17275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 549, col: 30, offset: 17275},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 549, col: 37, offset: 17282},
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 37, offset: 17282},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 549, col: 44, offset: 17289},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 616, col: 1, offset: 19407},
			expr: &actionExpr{
				pos: position{line: 617, col: 9, offset: 19433},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 617, col: 9, offset: 19433},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 617, col: 9, offset: 19433},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 617, col: 13, offset: 19437},
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 13, offset: 19437},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 20, offset: 19444},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 27, offset: 19451},
								name: "SectionTitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 49, offset: 19473},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 617, col: 53, offset: 19477},
								expr: &ruleRefExpr{
									pos:  position{line: 617, col: 53, offset: 19477},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 71, offset: 19495},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsMetadata",
			pos:  position{line: 621, col: 1, offset: 19610},
			expr: &choiceExpr{
				pos: position{line: 622, col: 9, offset: 19646},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 622, col: 9, offset: 19646},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 623, col: 11, offset: 19674},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 624, col: 11, offset: 19706},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 11, offset: 19736},
						name: "DocumentAuthors",
					},
				},
			},
		},
		{
			name: "DocumentRevisionMetadata",
			pos:  position{line: 627, col: 1, offset: 19753},
			expr: &choiceExpr{
				pos: position{line: 628, col: 9, offset: 19790},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 628, col: 9, offset: 19790},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 629, col: 11, offset: 19818},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 630, col: 11, offset: 19850},
						name: "CommentBlockContent",
					},
					&ruleRefExpr{
						pos:  position{line: 631, col: 11, offset: 19880},
						name: "DocumentRevision",
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 633, col: 1, offset: 19898},
			expr: &choiceExpr{
				pos: position{line: 633, col: 20, offset: 19917},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 633, col: 20, offset: 19917},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 633, col: 48, offset: 19945},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 635, col: 1, offset: 19975},
			expr: &actionExpr{
				pos: position{line: 635, col: 30, offset: 20004},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 635, col: 30, offset: 20004},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 635, col: 30, offset: 20004},
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 30, offset: 20004},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 635, col: 37, offset: 20011},
							expr: &litMatcher{
								pos:        position{line: 635, col: 38, offset: 20012},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 635, col: 42, offset: 20016},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 635, col: 51, offset: 20025},
								expr: &ruleRefExpr{
									pos:  position{line: 635, col: 51, offset: 20025},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 635, col: 68, offset: 20042},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 639, col: 1, offset: 20112},
			expr: &actionExpr{
				pos: position{line: 639, col: 33, offset: 20144},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 639, col: 33, offset: 20144},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 639, col: 33, offset: 20144},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 33, offset: 20144},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 639, col: 40, offset: 20151},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 639, col: 51, offset: 20162},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 59, offset: 20170},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 75, offset: 20186},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 643, col: 1, offset: 20265},
			expr: &actionExpr{
				pos: position{line: 643, col: 19, offset: 20283},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 643, col: 19, offset: 20283},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 643, col: 19, offset: 20283},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 19, offset: 20283},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 26, offset: 20290},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 36, offset: 20300},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 56, offset: 20320},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 643, col: 62, offset: 20326},
								expr: &ruleRefExpr{
									pos:  position{line: 643, col: 63, offset: 20327},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 643, col: 85, offset: 20349},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 85, offset: 20349},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 643, col: 92, offset: 20356},
							expr: &litMatcher{
								pos:        position{line: 643, col: 92, offset: 20356},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 643, col: 97, offset: 20361},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 97, offset: 20361},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 648, col: 1, offset: 20506},
			expr: &actionExpr{
				pos: position{line: 648, col: 23, offset: 20528},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 648, col: 23, offset: 20528},
					expr: &charClassMatcher{
						pos:        position{line: 648, col: 23, offset: 20528},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 652, col: 1, offset: 20575},
			expr: &actionExpr{
				pos: position{line: 652, col: 24, offset: 20598},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 652, col: 24, offset: 20598},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 652, col: 24, offset: 20598},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 652, col: 28, offset: 20602},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 652, col: 35, offset: 20609},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 652, col: 36, offset: 20610},
									expr: &charClassMatcher{
										pos:        position{line: 652, col: 36, offset: 20610},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 654, col: 4, offset: 20657},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 660, col: 1, offset: 20818},
			expr: &actionExpr{
				pos: position{line: 660, col: 21, offset: 20838},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 660, col: 21, offset: 20838},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 660, col: 21, offset: 20838},
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 21, offset: 20838},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 660, col: 28, offset: 20845},
							expr: &litMatcher{
								pos:        position{line: 660, col: 29, offset: 20846},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 33, offset: 20850},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 661, col: 9, offset: 20869},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 661, col: 10, offset: 20870},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 661, col: 10, offset: 20870},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 661, col: 10, offset: 20870},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 661, col: 21, offset: 20881},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 661, col: 45, offset: 20905},
													expr: &litMatcher{
														pos:        position{line: 661, col: 45, offset: 20905},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 661, col: 50, offset: 20910},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 661, col: 58, offset: 20918},
														expr: &ruleRefExpr{
															pos:  position{line: 661, col: 59, offset: 20919},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 661, col: 82, offset: 20942},
													expr: &litMatcher{
														pos:        position{line: 661, col: 82, offset: 20942},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 661, col: 87, offset: 20947},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 661, col: 97, offset: 20957},
														expr: &ruleRefExpr{
															pos:  position{line: 661, col: 98, offset: 20958},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 663, col: 15, offset: 21075},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 663, col: 15, offset: 21075},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 663, col: 15, offset: 21075},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 663, col: 24, offset: 21084},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 663, col: 46, offset: 21106},
													expr: &litMatcher{
														pos:        position{line: 663, col: 46, offset: 21106},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 663, col: 51, offset: 21111},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 663, col: 61, offset: 21121},
														expr: &ruleRefExpr{
															pos:  position{line: 663, col: 62, offset: 21122},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 665, col: 13, offset: 21231},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 670, col: 1, offset: 21361},
			expr: &choiceExpr{
				pos: position{line: 670, col: 27, offset: 21387},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 670, col: 27, offset: 21387},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 670, col: 27, offset: 21387},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 670, col: 27, offset: 21387},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 670, col: 32, offset: 21392},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 670, col: 39, offset: 21399},
									expr: &charClassMatcher{
										pos:        position{line: 670, col: 39, offset: 21399},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 21447},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 672, col: 5, offset: 21447},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 672, col: 5, offset: 21447},
									expr: &litMatcher{
										pos:        position{line: 672, col: 5, offset: 21447},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 672, col: 11, offset: 21453},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 672, col: 18, offset: 21460},
									expr: &charClassMatcher{
										pos:        position{line: 672, col: 18, offset: 21460},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 672, col: 29, offset: 21471},
									expr: &ruleRefExpr{
										pos:  position{line: 672, col: 29, offset: 21471},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 672, col: 36, offset: 21478},
									expr: &litMatcher{
										pos:        position{line: 672, col: 37, offset: 21479},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 676, col: 1, offset: 21519},
			expr: &actionExpr{
				pos: position{line: 676, col: 25, offset: 21543},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 676, col: 25, offset: 21543},
					expr: &charClassMatcher{
						pos:        position{line: 676, col: 25, offset: 21543},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 680, col: 1, offset: 21589},
			expr: &actionExpr{
				pos: position{line: 680, col: 27, offset: 21615},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 680, col: 27, offset: 21615},
					expr: &charClassMatcher{
						pos:        position{line: 680, col: 27, offset: 21615},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 687, col: 1, offset: 21790},
			expr: &litMatcher{
				pos:        position{line: 687, col: 32, offset: 21821},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 688, col: 1, offset: 21830},
			expr: &actionExpr{
				pos: position{line: 688, col: 23, offset: 21852},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 688, col: 23, offset: 21852},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 688, col: 23, offset: 21852},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 688, col: 51, offset: 21880},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 688, col: 56, offset: 21885},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 688, col: 56, offset: 21885},
									expr: &charClassMatcher{
										pos:        position{line: 688, col: 56, offset: 21885},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 688, col: 95, offset: 21924},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 695, col: 1, offset: 22194},
			expr: &actionExpr{
				pos: position{line: 695, col: 14, offset: 22207},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 695, col: 14, offset: 22207},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 695, col: 14, offset: 22207},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 695, col: 20, offset: 22213},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 695, col: 24, offset: 22217},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 24, offset: 22217},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 695, col: 31, offset: 22224},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 32, offset: 22225},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 702, col: 1, offset: 22389},
			expr: &actionExpr{
				pos: position{line: 703, col: 5, offset: 22411},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 703, col: 5, offset: 22411},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 703, col: 5, offset: 22411},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 704, col: 9, offset: 22426},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 704, col: 9, offset: 22426},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 704, col: 9, offset: 22426},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 705, col: 9, offset: 22447},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 705, col: 15, offset: 22453},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 706, col: 9, offset: 22476},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 706, col: 27, offset: 22494},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 710, col: 5, offset: 22655},
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 5, offset: 22655},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 710, col: 12, offset: 22662},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 714, col: 1, offset: 22722},
			expr: &ruleRefExpr{
				pos:  position{line: 714, col: 26, offset: 22747},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 717, col: 1, offset: 22787},
			expr: &actionExpr{
				pos: position{line: 717, col: 15, offset: 22801},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 717, col: 15, offset: 22801},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 717, col: 15, offset: 22801},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 717, col: 22, offset: 22808},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 717, col: 22, offset: 22808},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 718, col: 7, offset: 22834},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 719, col: 7, offset: 22856},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 720, col: 7, offset: 22879},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 724, col: 1, offset: 22969},
			expr: &actionExpr{
				pos: position{line: 724, col: 23, offset: 22991},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 724, col: 23, offset: 22991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 724, col: 23, offset: 22991},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 724, col: 30, offset: 22998},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 724, col: 30, offset: 22998},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 724, col: 47, offset: 23015},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 5, offset: 23037},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 725, col: 12, offset: 23044},
								expr: &actionExpr{
									pos: position{line: 726, col: 9, offset: 23054},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 726, col: 9, offset: 23054},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 726, col: 10, offset: 23055},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 726, col: 10, offset: 23055},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 726, col: 16, offset: 23061},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 727, col: 9, offset: 23172},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 727, col: 16, offset: 23179},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 727, col: 16, offset: 23179},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 727, col: 33, offset: 23196},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 733, col: 1, offset: 23338},
			expr: &actionExpr{
				pos: position{line: 733, col: 19, offset: 23356},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 733, col: 19, offset: 23356},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 733, col: 19, offset: 23356},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 26, offset: 23363},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 733, col: 34, offset: 23371},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 39, offset: 23376},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 44, offset: 23381},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 737, col: 1, offset: 23477},
			expr: &actionExpr{
				pos: position{line: 737, col: 20, offset: 23496},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 737, col: 20, offset: 23496},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 737, col: 32, offset: 23508},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 742, col: 1, offset: 23631},
			expr: &actionExpr{
				pos: position{line: 742, col: 14, offset: 23644},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 742, col: 14, offset: 23644},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 742, col: 14, offset: 23644},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 21, offset: 23651},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 40, offset: 23670},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 746, col: 1, offset: 23760},
			expr: &actionExpr{
				pos: position{line: 746, col: 22, offset: 23781},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 746, col: 22, offset: 23781},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 746, col: 22, offset: 23781},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 29, offset: 23788},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 747, col: 5, offset: 23802},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 747, col: 12, offset: 23809},
								expr: &actionExpr{
									pos: position{line: 748, col: 9, offset: 23819},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 748, col: 9, offset: 23819},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 748, col: 10, offset: 23820},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 748, col: 10, offset: 23820},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 748, col: 16, offset: 23826},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 749, col: 9, offset: 23937},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 749, col: 16, offset: 23944},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 755, col: 1, offset: 24079},
			expr: &choiceExpr{
				pos: position{line: 755, col: 13, offset: 24091},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 755, col: 13, offset: 24091},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 755, col: 13, offset: 24091},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 755, col: 18, offset: 24096},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 755, col: 18, offset: 24096},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 30, offset: 24108},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 757, col: 9, offset: 24184},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 757, col: 9, offset: 24184},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 757, col: 9, offset: 24184},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 757, col: 13, offset: 24188},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 757, col: 18, offset: 24193},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 757, col: 18, offset: 24193},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 757, col: 30, offset: 24205},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 761, col: 1, offset: 24281},
			expr: &actionExpr{
				pos: position{line: 761, col: 16, offset: 24296},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 761, col: 16, offset: 24296},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 761, col: 16, offset: 24296},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 761, col: 23, offset: 24303},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 761, col: 23, offset: 24303},
									expr: &litMatcher{
										pos:        position{line: 761, col: 24, offset: 24304},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 764, col: 5, offset: 24358},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 771, col: 1, offset: 24525},
			expr: &actionExpr{
				pos: position{line: 771, col: 21, offset: 24545},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 771, col: 21, offset: 24545},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 771, col: 21, offset: 24545},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 771, col: 29, offset: 24553},
								expr: &choiceExpr{
									pos: position{line: 771, col: 30, offset: 24554},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 771, col: 30, offset: 24554},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 771, col: 53, offset: 24577},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 771, col: 74, offset: 24598},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 771, col: 74, offset: 24598,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 107, offset: 24631},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 775, col: 1, offset: 24710},
			expr: &actionExpr{
				pos: position{line: 775, col: 25, offset: 24734},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 775, col: 25, offset: 24734},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 775, col: 25, offset: 24734},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 775, col: 33, offset: 24742},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 775, col: 38, offset: 24747},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 775, col: 38, offset: 24747},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 775, col: 78, offset: 24787},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 779, col: 1, offset: 24860},
			expr: &actionExpr{
				pos: position{line: 779, col: 23, offset: 24882},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 779, col: 23, offset: 24882},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 779, col: 23, offset: 24882},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 779, col: 31, offset: 24890},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 779, col: 36, offset: 24895},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 779, col: 36, offset: 24895},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 779, col: 76, offset: 24935},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 798, col: 1, offset: 25480},
			expr: &choiceExpr{
				pos: position{line: 798, col: 24, offset: 25503},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 798, col: 24, offset: 25503},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 798, col: 47, offset: 25526},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 798, col: 59, offset: 25538},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 800, col: 1, offset: 25555},
			expr: &actionExpr{
				pos: position{line: 800, col: 26, offset: 25580},
				run: (*parser).callonFrontMatterDelimiter1,
				expr: &seqExpr{
					pos: position{line: 800, col: 26, offset: 25580},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 800, col: 26, offset: 25580},
							val:        "---",
							ignoreCase: false,
							want:       "\"---\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 800, col: 32, offset: 25586},
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 32, offset: 25586},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 800, col: 39, offset: 25593},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 804, col: 1, offset: 25656},
			expr: &actionExpr{
				pos: position{line: 804, col: 20, offset: 25675},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 804, col: 20, offset: 25675},
					expr: &anyMatcher{
						line: 804, col: 21, offset: 25676,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 811, col: 1, offset: 25846},
			expr: &actionExpr{
				pos: position{line: 812, col: 5, offset: 25869},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 812, col: 5, offset: 25869},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 812, col: 15, offset: 25879},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 812, col: 15, offset: 25879},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 812, col: 15, offset: 25879},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 24, offset: 25888},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 814, col: 9, offset: 25980},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 814, col: 9, offset: 25980},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 814, col: 9, offset: 25980},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 814, col: 18, offset: 25989},
												expr: &ruleRefExpr{
													pos:  position{line: 814, col: 19, offset: 25990},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 814, col: 35, offset: 26006},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 830, col: 1, offset: 26323},
			expr: &actionExpr{
				pos: position{line: 831, col: 5, offset: 26346},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 831, col: 5, offset: 26346},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 831, col: 14, offset: 26355},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 831, col: 14, offset: 26355},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 832, col: 11, offset: 26416},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 833, col: 11, offset: 26461},
								expr: &ruleRefExpr{
									pos:  position{line: 833, col: 11, offset: 26461},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 834, col: 11, offset: 26479},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 834, col: 11, offset: 26479},
										expr: &ruleRefExpr{
											pos:  position{line: 834, col: 12, offset: 26480},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 835, col: 13, offset: 26498},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 835, col: 13, offset: 26498},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 836, col: 15, offset: 26529},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 837, col: 15, offset: 26549},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 838, col: 15, offset: 26586},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 839, col: 15, offset: 26612},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 26638},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 841, col: 15, offset: 26668},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 843, col: 15, offset: 26768},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 875, col: 1, offset: 27784},
			expr: &actionExpr{
				pos: position{line: 875, col: 20, offset: 27803},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 875, col: 20, offset: 27803},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 875, col: 20, offset: 27803},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 875, col: 25, offset: 27808},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 29, offset: 27812},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 875, col: 33, offset: 27816},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 875, col: 38, offset: 27821},
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 38, offset: 27821},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 882, col: 1, offset: 28067},
			expr: &actionExpr{
				pos: position{line: 882, col: 14, offset: 28080},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 882, col: 14, offset: 28080},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 882, col: 14, offset: 28080},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 882, col: 19, offset: 28085},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 25, offset: 28091},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 882, col: 43, offset: 28109},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 886, col: 1, offset: 28174},
			expr: &actionExpr{
				pos: position{line: 886, col: 21, offset: 28194},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 886, col: 21, offset: 28194},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 886, col: 30, offset: 28203},
						expr: &choiceExpr{
							pos: position{line: 886, col: 31, offset: 28204},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 886, col: 31, offset: 28204},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 886, col: 38, offset: 28211},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 886, col: 53, offset: 28226},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 886, col: 66, offset: 28239},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 886, col: 74, offset: 28247},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 886, col: 93, offset: 28266},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 886, col: 114, offset: 28287},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 886, col: 115, offset: 28288},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 886, col: 115, offset: 28288},
												expr: &litMatcher{
													pos:        position{line: 886, col: 116, offset: 28289},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 886, col: 121, offset: 28294,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 892, col: 1, offset: 28400},
			expr: &actionExpr{
				pos: position{line: 892, col: 23, offset: 28422},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 892, col: 23, offset: 28422},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 892, col: 23, offset: 28422},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 892, col: 29, offset: 28428},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 36, offset: 28435},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 893, col: 5, offset: 28467},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 893, col: 11, offset: 28473},
								expr: &actionExpr{
									pos: position{line: 893, col: 12, offset: 28474},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 893, col: 12, offset: 28474},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 893, col: 12, offset: 28474},
												expr: &ruleRefExpr{
													pos:  position{line: 893, col: 12, offset: 28474},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 893, col: 19, offset: 28481},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 893, col: 23, offset: 28485},
												expr: &ruleRefExpr{
													pos:  position{line: 893, col: 23, offset: 28485},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 893, col: 30, offset: 28492},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 893, col: 39, offset: 28501},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 5, offset: 28559},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 894, col: 11, offset: 28565},
								expr: &actionExpr{
									pos: position{line: 894, col: 12, offset: 28566},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 894, col: 12, offset: 28566},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 894, col: 12, offset: 28566},
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 12, offset: 28566},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 894, col: 19, offset: 28573},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 894, col: 23, offset: 28577},
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 23, offset: 28577},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 894, col: 30, offset: 28584},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 39, offset: 28593},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 895, col: 5, offset: 28651},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 899, col: 1, offset: 28730},
			expr: &actionExpr{
				pos: position{line: 899, col: 30, offset: 28759},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 899, col: 30, offset: 28759},
					expr: &choiceExpr{
						pos: position{line: 899, col: 31, offset: 28760},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 899, col: 31, offset: 28760},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 899, col: 42, offset: 28771},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 906, col: 1, offset: 28917},
			expr: &actionExpr{
				pos: position{line: 911, col: 5, offset: 29100},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 911, col: 5, offset: 29100},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 911, col: 5, offset: 29100},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 915, col: 5, offset: 29228},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 915, col: 15, offset: 29238},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 21, offset: 29244},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 31, offset: 29254},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 49, offset: 29272},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 915, col: 67, offset: 29290},
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 67, offset: 29290},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 921, col: 1, offset: 29575},
			expr: &actionExpr{
				pos: position{line: 921, col: 16, offset: 29590},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 921, col: 16, offset: 29590},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 921, col: 16, offset: 29590},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 921, col: 25, offset: 29599},
							expr: &litMatcher{
								pos:        position{line: 921, col: 26, offset: 29600},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 921, col: 30, offset: 29604},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 921, col: 36, offset: 29610},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 921, col: 46, offset: 29620},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 921, col: 64, offset: 29638},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 928, col: 1, offset: 29982},
			expr: &actionExpr{
				pos: position{line: 928, col: 15, offset: 29996},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 928, col: 15, offset: 29996},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 928, col: 15, offset: 29996},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 928, col: 23, offset: 30004},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 928, col: 29, offset: 30010},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 928, col: 29, offset: 30010},
									expr: &charClassMatcher{
										pos:        position{line: 928, col: 29, offset: 30010},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 928, col: 73, offset: 30054},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 928, col: 85, offset: 30066},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 935, col: 1, offset: 30346},
			expr: &choiceExpr{
				pos: position{line: 935, col: 19, offset: 30364},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 935, col: 19, offset: 30364},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 935, col: 19, offset: 30364},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 935, col: 19, offset: 30364},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 935, col: 32, offset: 30377},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 935, col: 41, offset: 30386},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 935, col: 58, offset: 30403},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 9, offset: 30479},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 937, col: 9, offset: 30479},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 937, col: 9, offset: 30479},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 937, col: 21, offset: 30491},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 26, offset: 30496},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 937, col: 39, offset: 30509},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 937, col: 43, offset: 30513},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 937, col: 51, offset: 30521},
										expr: &ruleRefExpr{
											pos:  position{line: 937, col: 52, offset: 30522},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 937, col: 70, offset: 30540},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 941, col: 1, offset: 30609},
			expr: &ruleRefExpr{
				pos:  position{line: 941, col: 16, offset: 30624},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 943, col: 1, offset: 30635},
			expr: &actionExpr{
				pos: position{line: 943, col: 20, offset: 30654},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 943, col: 20, offset: 30654},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 943, col: 29, offset: 30663},
						expr: &seqExpr{
							pos: position{line: 943, col: 30, offset: 30664},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 943, col: 30, offset: 30664},
									expr: &litMatcher{
										pos:        position{line: 943, col: 31, offset: 30665},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 943, col: 35, offset: 30669},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 951, col: 1, offset: 30912},
			expr: &litMatcher{
				pos:        position{line: 951, col: 32, offset: 30943},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 953, col: 1, offset: 30948},
			expr: &actionExpr{
				pos: position{line: 953, col: 26, offset: 30973},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 953, col: 26, offset: 30973},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 953, col: 26, offset: 30973},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 953, col: 54, offset: 31001},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 63, offset: 31010},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 953, col: 93, offset: 31040},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 953, col: 121, offset: 31068},
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 122, offset: 31069},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 957, col: 1, offset: 31182},
			expr: &choiceExpr{
				pos: position{line: 957, col: 33, offset: 31214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 957, col: 34, offset: 31215},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 957, col: 34, offset: 31215},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 957, col: 35, offset: 31216},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 957, col: 35, offset: 31216},
											expr: &ruleRefExpr{
												pos:  position{line: 957, col: 36, offset: 31217},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 957, col: 64, offset: 31245},
											expr: &ruleRefExpr{
												pos:  position{line: 957, col: 65, offset: 31246},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 957, col: 71, offset: 31252},
											expr: &ruleRefExpr{
												pos:  position{line: 957, col: 72, offset: 31253},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 957, col: 80, offset: 31261,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 957, col: 83, offset: 31264},
									expr: &seqExpr{
										pos: position{line: 957, col: 84, offset: 31265},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 957, col: 84, offset: 31265},
												expr: &seqExpr{
													pos: position{line: 957, col: 86, offset: 31267},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 957, col: 86, offset: 31267},
															expr: &ruleRefExpr{
																pos:  position{line: 957, col: 86, offset: 31267},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 957, col: 93, offset: 31274},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 957, col: 122, offset: 31303},
												expr: &ruleRefExpr{
													pos:  position{line: 957, col: 123, offset: 31304},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 957, col: 151, offset: 31332},
												expr: &ruleRefExpr{
													pos:  position{line: 957, col: 152, offset: 31333},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 957, col: 160, offset: 31341,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 11, offset: 31491},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 959, col: 12, offset: 31492},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 959, col: 12, offset: 31492},
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 13, offset: 31493},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 959, col: 19, offset: 31499},
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 20, offset: 31500},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 959, col: 28, offset: 31508},
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 29, offset: 31509},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 959, col: 57, offset: 31537,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 963, col: 1, offset: 31627},
			expr: &litMatcher{
				pos:        position{line: 963, col: 32, offset: 31658},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 965, col: 1, offset: 31665},
			expr: &actionExpr{
				pos: position{line: 965, col: 26, offset: 31690},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 965, col: 26, offset: 31690},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 965, col: 26, offset: 31690},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 965, col: 54, offset: 31718},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 63, offset: 31727},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 93, offset: 31757},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 965, col: 121, offset: 31785},
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 122, offset: 31786},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 969, col: 1, offset: 31899},
			expr: &choiceExpr{
				pos: position{line: 969, col: 33, offset: 31931},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 969, col: 34, offset: 31932},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 969, col: 34, offset: 31932},
							expr: &seqExpr{
								pos: position{line: 969, col: 35, offset: 31933},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 969, col: 35, offset: 31933},
										expr: &ruleRefExpr{
											pos:  position{line: 969, col: 36, offset: 31934},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 969, col: 64, offset: 31962,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 971, col: 11, offset: 32135},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 971, col: 11, offset: 32135},
							expr: &seqExpr{
								pos: position{line: 971, col: 12, offset: 32136},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 971, col: 12, offset: 32136},
										expr: &ruleRefExpr{
											pos:  position{line: 971, col: 13, offset: 32137},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 971, col: 19, offset: 32143},
										expr: &ruleRefExpr{
											pos:  position{line: 971, col: 20, offset: 32144},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 971, col: 28, offset: 32152},
										expr: &ruleRefExpr{
											pos:  position{line: 971, col: 29, offset: 32153},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 971, col: 57, offset: 32181,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 975, col: 1, offset: 32272},
			expr: &choiceExpr{
				pos: position{line: 975, col: 21, offset: 32292},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 975, col: 21, offset: 32292},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 975, col: 21, offset: 32292},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 975, col: 21, offset: 32292},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 975, col: 30, offset: 32301},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 975, col: 38, offset: 32309},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 39, offset: 32310},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 975, col: 67, offset: 32338},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 977, col: 9, offset: 32442},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 977, col: 9, offset: 32442},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 977, col: 9, offset: 32442},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 977, col: 19, offset: 32452},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 977, col: 27, offset: 32460},
										expr: &choiceExpr{
											pos: position{line: 977, col: 28, offset: 32461},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 977, col: 28, offset: 32461},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 977, col: 41, offset: 32474},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 977, col: 69, offset: 32502},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 981, col: 1, offset: 32606},
			expr: &actionExpr{
				pos: position{line: 981, col: 30, offset: 32635},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 981, col: 30, offset: 32635},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 988, col: 1, offset: 32805},
			expr: &choiceExpr{
				pos: position{line: 988, col: 9, offset: 32813},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 988, col: 9, offset: 32813},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 24, offset: 32828},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 991, col: 1, offset: 32909},
			expr: &actionExpr{
				pos: position{line: 991, col: 17, offset: 32925},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 991, col: 17, offset: 32925},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 991, col: 17, offset: 32925},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 991, col: 25, offset: 32933},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 30, offset: 32938},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 991, col: 40, offset: 32948},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 58, offset: 32966},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 995, col: 1, offset: 33088},
			expr: &actionExpr{
				pos: position{line: 995, col: 17, offset: 33104},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 995, col: 17, offset: 33104},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 995, col: 17, offset: 33104},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 22, offset: 33109},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 995, col: 42, offset: 33129},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 995, col: 59, offset: 33146},
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 60, offset: 33147},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1003, col: 1, offset: 33489},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 5, offset: 33508},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1005, col: 9, offset: 33518},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1005, col: 9, offset: 33518},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1005, col: 9, offset: 33518},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1005, col: 20, offset: 33529},
										expr: &ruleRefExpr{
											pos:  position{line: 1005, col: 21, offset: 33530},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1006, col: 9, offset: 33656},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1006, col: 15, offset: 33662},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1006, col: 15, offset: 33662},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1006, col: 41, offset: 33688},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 7, offset: 33807},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1012, col: 1, offset: 33826},
			expr: &choiceExpr{
				pos: position{line: 1012, col: 32, offset: 33857},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1012, col: 32, offset: 33857},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1012, col: 32, offset: 33857},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1012, col: 36, offset: 33861},
								expr: &litMatcher{
									pos:        position{line: 1012, col: 37, offset: 33862},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1012, col: 43, offset: 33868},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1012, col: 43, offset: 33868},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1012, col: 47, offset: 33872},
								expr: &litMatcher{
									pos:        position{line: 1012, col: 48, offset: 33873},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1012, col: 54, offset: 33879},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1012, col: 54, offset: 33879},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1012, col: 58, offset: 33883},
								expr: &litMatcher{
									pos:        position{line: 1012, col: 59, offset: 33884},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1012, col: 65, offset: 33890},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1012, col: 65, offset: 33890},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1012, col: 69, offset: 33894},
								expr: &litMatcher{
									pos:        position{line: 1012, col: 70, offset: 33895},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1014, col: 1, offset: 33900},
			expr: &choiceExpr{
				pos: position{line: 1014, col: 34, offset: 33933},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1014, col: 34, offset: 33933},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1014, col: 41, offset: 33940},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1014, col: 48, offset: 33947},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1014, col: 55, offset: 33954},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1014, col: 62, offset: 33961},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1014, col: 68, offset: 33967},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1016, col: 1, offset: 33972},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 5, offset: 34002},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1017, col: 5, offset: 34002},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 7, offset: 34029},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 7, offset: 34057},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 7, offset: 34085},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 7, offset: 34117},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 7, offset: 34138},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1024, col: 1, offset: 34156},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 34188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 34188},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 7, offset: 34214},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 7, offset: 34242},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 7, offset: 34270},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1030, col: 1, offset: 34296},
			expr: &actionExpr{
				pos: position{line: 1031, col: 5, offset: 34377},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1031, col: 5, offset: 34377},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1031, col: 5, offset: 34377},
							expr: &litMatcher{
								pos:        position{line: 1031, col: 7, offset: 34379},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1032, col: 5, offset: 34388},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1033, col: 9, offset: 34406},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1033, col: 9, offset: 34406},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1034, col: 11, offset: 34433},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1035, col: 11, offset: 34461},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1036, col: 11, offset: 34489},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1037, col: 11, offset: 34521},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1038, col: 11, offset: 34553},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1044, col: 1, offset: 34620},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 33, offset: 34652},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1044, col: 33, offset: 34652},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1044, col: 39, offset: 34658},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1044, col: 39, offset: 34658},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1048, col: 1, offset: 34800},
			expr: &actionExpr{
				pos: position{line: 1048, col: 25, offset: 34824},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1048, col: 25, offset: 34824},
					expr: &litMatcher{
						pos:        position{line: 1048, col: 25, offset: 34824},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1052, col: 1, offset: 34873},
			expr: &actionExpr{
				pos: position{line: 1052, col: 25, offset: 34897},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1052, col: 25, offset: 34897},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1052, col: 25, offset: 34897},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1052, col: 30, offset: 34902},
							expr: &litMatcher{
								pos:        position{line: 1052, col: 30, offset: 34902},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1059, col: 1, offset: 35013},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 13, offset: 35025},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1059, col: 13, offset: 35025},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 35, offset: 35047},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1061, col: 1, offset: 35114},
			expr: &actionExpr{
				pos: position{line: 1061, col: 24, offset: 35137},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1061, col: 24, offset: 35137},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1061, col: 24, offset: 35137},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1061, col: 29, offset: 35142},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1061, col: 39, offset: 35152},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1061, col: 68, offset: 35181},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1065, col: 1, offset: 35280},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1065, col: 32, offset: 35311},
				expr: &ruleRefExpr{
					pos:  position{line: 1065, col: 32, offset: 35311},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1067, col: 1, offset: 35342},
			expr: &actionExpr{
				pos: position{line: 1067, col: 31, offset: 35372},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1067, col: 31, offset: 35372},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1067, col: 31, offset: 35372},
							expr: &litMatcher{
								pos:        position{line: 1067, col: 33, offset: 35374},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1067, col: 39, offset: 35380},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1067, col: 48, offset: 35389},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1067, col: 48, offset: 35389},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1068, col: 7, offset: 35400},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1069, col: 7, offset: 35445},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1069, col: 7, offset: 35445},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1069, col: 15, offset: 35453},
												expr: &ruleRefExpr{
													pos:  position{line: 1069, col: 16, offset: 35454},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1070, col: 7, offset: 35468},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1071, col: 7, offset: 35496},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1072, col: 7, offset: 35519},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1073, col: 7, offset: 35537},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1074, col: 7, offset: 35556},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1075, col: 7, offset: 35594},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1076, col: 7, offset: 35619},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1080, col: 1, offset: 35694},
			expr: &actionExpr{
				pos: position{line: 1081, col: 5, offset: 35734},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 5, offset: 35734},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1081, col: 5, offset: 35734},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1081, col: 16, offset: 35745},
								expr: &ruleRefExpr{
									pos:  position{line: 1081, col: 17, offset: 35746},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 5, offset: 35772},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1082, col: 11, offset: 35778},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1082, col: 11, offset: 35778},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1083, col: 11, offset: 35808},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1084, col: 11, offset: 35829},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1085, col: 11, offset: 35850},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1086, col: 11, offset: 35874},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1087, col: 11, offset: 35898},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1091, col: 1, offset: 35999},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 5, offset: 36043},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1092, col: 5, offset: 36043},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1093, col: 7, offset: 36140},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1093, col: 7, offset: 36140},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 7, offset: 36140},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1093, col: 12, offset: 36145},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1097, col: 1, offset: 36316},
			expr: &choiceExpr{
				pos: position{line: 1098, col: 5, offset: 36344},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 36344},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 36344},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1098, col: 6, offset: 36345},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1098, col: 6, offset: 36345},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1098, col: 10, offset: 36349},
											expr: &litMatcher{
												pos:        position{line: 1098, col: 11, offset: 36350},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 16, offset: 36355},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1098, col: 26, offset: 36365},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1098, col: 55, offset: 36394},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1098, col: 59, offset: 36398},
									expr: &notExpr{
										pos: position{line: 1098, col: 61, offset: 36400},
										expr: &ruleRefExpr{
											pos:  position{line: 1098, col: 62, offset: 36401},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1100, col: 9, offset: 36607},
						run: (*parser).callonSingleQuoteBoldText14,
						expr: &seqExpr{
							pos: position{line: 1100, col: 9, offset: 36607},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1100, col: 9, offset: 36607},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 13, offset: 36611},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1100, col: 23, offset: 36621},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1100, col: 23, offset: 36621},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1100, col: 27, offset: 36625},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1100, col: 56, offset: 36654},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1104, col: 1, offset: 36872},
			expr: &seqExpr{
				pos: position{line: 1104, col: 32, offset: 36903},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1104, col: 32, offset: 36903},
						expr: &ruleRefExpr{
							pos:  position{line: 1104, col: 33, offset: 36904},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1104, col: 39, offset: 36910},
						expr: &ruleRefExpr{
							pos:  position{line: 1104, col: 39, offset: 36910},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1106, col: 1, offset: 36939},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 36974},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1107, col: 5, offset: 36974},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1108, col: 7, offset: 36985},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1108, col: 7, offset: 36985},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1108, col: 15, offset: 36993},
								expr: &ruleRefExpr{
									pos:  position{line: 1108, col: 16, offset: 36994},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 7, offset: 37008},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 7, offset: 37036},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 7, offset: 37059},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 7, offset: 37077},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1113, col: 7, offset: 37096},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1113, col: 7, offset: 37096},
								expr: &ruleRefExpr{
									pos:  position{line: 1113, col: 7, offset: 37096},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1113, col: 14, offset: 37103},
								expr: &seqExpr{
									pos: position{line: 1113, col: 15, offset: 37104},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1113, col: 15, offset: 37104},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1113, col: 19, offset: 37108},
											expr: &litMatcher{
												pos:        position{line: 1113, col: 20, offset: 37109},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1114, col: 7, offset: 37121},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 7, offset: 37159},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1116, col: 7, offset: 37184},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1118, col: 1, offset: 37222},
			expr: &actionExpr{
				pos: position{line: 1119, col: 5, offset: 37262},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 5, offset: 37262},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1119, col: 5, offset: 37262},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1119, col: 16, offset: 37273},
								expr: &ruleRefExpr{
									pos:  position{line: 1119, col: 17, offset: 37274},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1120, col: 5, offset: 37300},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1120, col: 11, offset: 37306},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1120, col: 11, offset: 37306},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1121, col: 11, offset: 37336},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1122, col: 11, offset: 37357},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1123, col: 11, offset: 37378},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1124, col: 11, offset: 37402},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1125, col: 11, offset: 37426},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1128, col: 1, offset: 37526},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 5, offset: 37570},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1129, col: 5, offset: 37570},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1130, col: 7, offset: 37667},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1130, col: 7, offset: 37667},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1130, col: 7, offset: 37667},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1130, col: 11, offset: 37671},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1134, col: 1, offset: 37842},
			expr: &choiceExpr{
				pos: position{line: 1135, col: 5, offset: 37866},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1135, col: 5, offset: 37866},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1135, col: 5, offset: 37866},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1135, col: 5, offset: 37866},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1135, col: 18, offset: 37879},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1135, col: 40, offset: 37901},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 45, offset: 37906},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1135, col: 55, offset: 37916},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1135, col: 84, offset: 37945},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1137, col: 9, offset: 38102},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1137, col: 9, offset: 38102},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1137, col: 9, offset: 38102},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1137, col: 22, offset: 38115},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1137, col: 44, offset: 38137},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 49, offset: 38142},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1137, col: 59, offset: 38152},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1137, col: 88, offset: 38181},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1140, col: 9, offset: 38381},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1140, col: 9, offset: 38381},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1140, col: 9, offset: 38381},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 22, offset: 38394},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1140, col: 44, offset: 38416},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1140, col: 48, offset: 38420},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 58, offset: 38430},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1140, col: 87, offset: 38459},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1147, col: 1, offset: 38680},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 15, offset: 38694},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1147, col: 15, offset: 38694},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 39, offset: 38718},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1149, col: 1, offset: 38741},
			expr: &actionExpr{
				pos: position{line: 1149, col: 26, offset: 38766},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 26, offset: 38766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1149, col: 26, offset: 38766},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 31, offset: 38771},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 41, offset: 38781},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1149, col: 72, offset: 38812},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1153, col: 1, offset: 38958},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1153, col: 34, offset: 38991},
				expr: &ruleRefExpr{
					pos:  position{line: 1153, col: 34, offset: 38991},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1155, col: 1, offset: 39023},
			expr: &actionExpr{
				pos: position{line: 1156, col: 5, offset: 39060},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 5, offset: 39060},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1156, col: 5, offset: 39060},
							expr: &litMatcher{
								pos:        position{line: 1156, col: 7, offset: 39062},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 13, offset: 39068},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1156, col: 22, offset: 39077},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1156, col: 22, offset: 39077},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1157, col: 7, offset: 39088},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1158, col: 7, offset: 39133},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1158, col: 7, offset: 39133},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1158, col: 15, offset: 39141},
												expr: &ruleRefExpr{
													pos:  position{line: 1158, col: 16, offset: 39142},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1159, col: 7, offset: 39156},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1160, col: 7, offset: 39184},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1161, col: 7, offset: 39207},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1162, col: 7, offset: 39225},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1163, col: 7, offset: 39244},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1164, col: 7, offset: 39284},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1165, col: 7, offset: 39309},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1169, col: 1, offset: 39386},
			expr: &actionExpr{
				pos: position{line: 1170, col: 5, offset: 39428},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 5, offset: 39428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1170, col: 5, offset: 39428},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1170, col: 16, offset: 39439},
								expr: &ruleRefExpr{
									pos:  position{line: 1170, col: 17, offset: 39440},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1171, col: 5, offset: 39466},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1171, col: 11, offset: 39472},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1171, col: 11, offset: 39472},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1172, col: 11, offset: 39504},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1173, col: 11, offset: 39523},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 11, offset: 39544},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1175, col: 11, offset: 39568},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 11, offset: 39592},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1180, col: 1, offset: 39693},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 39739},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1181, col: 5, offset: 39739},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1182, col: 7, offset: 39838},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1182, col: 7, offset: 39838},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1182, col: 7, offset: 39838},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1182, col: 12, offset: 39843},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1186, col: 1, offset: 40016},
			expr: &choiceExpr{
				pos: position{line: 1187, col: 5, offset: 40046},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1187, col: 5, offset: 40046},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1187, col: 5, offset: 40046},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1187, col: 6, offset: 40047},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1187, col: 6, offset: 40047},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1187, col: 10, offset: 40051},
											expr: &litMatcher{
												pos:        position{line: 1187, col: 11, offset: 40052},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 16, offset: 40057},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 26, offset: 40067},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1187, col: 57, offset: 40098},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1189, col: 9, offset: 40300},
						run: (*parser).callonSingleQuoteItalicText11,
						expr: &seqExpr{
							pos: position{line: 1189, col: 9, offset: 40300},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1189, col: 9, offset: 40300},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1189, col: 13, offset: 40304},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1189, col: 23, offset: 40314},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1189, col: 23, offset: 40314},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1189, col: 27, offset: 40318},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1189, col: 58, offset: 40349},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1193, col: 1, offset: 40571},
			expr: &actionExpr{
				pos: position{line: 1193, col: 34, offset: 40604},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 34, offset: 40604},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1193, col: 34, offset: 40604},
							expr: &ruleRefExpr{
								pos:  position{line: 1193, col: 35, offset: 40605},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1193, col: 41, offset: 40611},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1193, col: 51, offset: 40621},
								expr: &ruleRefExpr{
									pos:  position{line: 1193, col: 51, offset: 40621},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1197, col: 1, offset: 40682},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 5, offset: 40719},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 5, offset: 40719},
						name: "ItalicWord",
					},
					&seqExpr{
						pos: position{line: 1199, col: 7, offset: 40736},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1199, col: 7, offset: 40736},
								expr: &ruleRefExpr{
									pos:  position{line: 1199, col: 7, offset: 40736},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1199, col: 14, offset: 40743},
								expr: &seqExpr{
									pos: position{line: 1199, col: 15, offset: 40744},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1199, col: 15, offset: 40744},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1199, col: 19, offset: 40748},
											expr: &litMatcher{
												pos:        position{line: 1199, col: 20, offset: 40749},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1200, col: 7, offset: 40761},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1200, col: 7, offset: 40761},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1200, col: 15, offset: 40769},
								expr: &ruleRefExpr{
									pos:  position{line: 1200, col: 16, offset: 40770},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 7, offset: 40784},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 7, offset: 40812},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 7, offset: 40835},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 7, offset: 40853},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 7, offset: 40872},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 7, offset: 40912},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 7, offset: 40937},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "ItalicWord",
			pos:  position{line: 1210, col: 1, offset: 41032},
			expr: &actionExpr{
				pos: position{line: 1210, col: 15, offset: 41046},
				run: (*parser).callonItalicWord1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 15, offset: 41046},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1210, col: 15, offset: 41046},
							expr: &charClassMatcher{
								pos:        position{line: 1210, col: 15, offset: 41046},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1210, col: 25, offset: 41056},
							expr: &choiceExpr{
								pos: position{line: 1210, col: 27, offset: 41058},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1210, col: 27, offset: 41058},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&litMatcher{
										pos:        position{line: 1210, col: 33, offset: 41064},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1214, col: 1, offset: 41124},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 41165},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 41165},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1215, col: 5, offset: 41165},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1215, col: 16, offset: 41176},
								expr: &ruleRefExpr{
									pos:  position{line: 1215, col: 17, offset: 41177},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 5, offset: 41203},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1216, col: 11, offset: 41209},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1216, col: 11, offset: 41209},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1217, col: 11, offset: 41228},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1218, col: 11, offset: 41260},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1219, col: 11, offset: 41281},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1220, col: 11, offset: 41305},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1221, col: 11, offset: 41329},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1225, col: 1, offset: 41430},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 5, offset: 41476},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1226, col: 5, offset: 41476},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1227, col: 7, offset: 41575},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1227, col: 7, offset: 41575},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1227, col: 7, offset: 41575},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1227, col: 11, offset: 41579},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1231, col: 1, offset: 41753},
			expr: &choiceExpr{
				pos: position{line: 1232, col: 5, offset: 41779},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1232, col: 5, offset: 41779},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1232, col: 5, offset: 41779},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1232, col: 5, offset: 41779},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 18, offset: 41792},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 40, offset: 41814},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1232, col: 45, offset: 41819},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 55, offset: 41829},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 86, offset: 41860},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1234, col: 9, offset: 42017},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1234, col: 9, offset: 42017},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1234, col: 9, offset: 42017},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 22, offset: 42030},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 44, offset: 42052},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1234, col: 49, offset: 42057},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 59, offset: 42067},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 90, offset: 42098},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1237, col: 9, offset: 42298},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1237, col: 9, offset: 42298},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1237, col: 9, offset: 42298},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 22, offset: 42311},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1237, col: 44, offset: 42333},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1237, col: 48, offset: 42337},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 58, offset: 42347},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1237, col: 89, offset: 42378},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1244, col: 1, offset: 42605},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 18, offset: 42622},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1244, col: 18, offset: 42622},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 45, offset: 42649},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1246, col: 1, offset: 42675},
			expr: &actionExpr{
				pos: position{line: 1246, col: 29, offset: 42703},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1246, col: 29, offset: 42703},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1246, col: 29, offset: 42703},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1246, col: 34, offset: 42708},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1246, col: 44, offset: 42718},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1246, col: 78, offset: 42752},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1250, col: 1, offset: 42901},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1250, col: 37, offset: 42937},
				expr: &ruleRefExpr{
					pos:  position{line: 1250, col: 37, offset: 42937},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1252, col: 1, offset: 43004},
			expr: &actionExpr{
				pos: position{line: 1253, col: 5, offset: 43044},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1253, col: 5, offset: 43044},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1253, col: 5, offset: 43044},
							expr: &litMatcher{
								pos:        position{line: 1253, col: 7, offset: 43046},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1253, col: 13, offset: 43052},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1253, col: 22, offset: 43061},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1253, col: 22, offset: 43061},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1254, col: 7, offset: 43072},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1255, col: 7, offset: 43117},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1255, col: 7, offset: 43117},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1255, col: 15, offset: 43125},
												expr: &ruleRefExpr{
													pos:  position{line: 1255, col: 16, offset: 43126},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1256, col: 7, offset: 43140},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1257, col: 7, offset: 43168},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1258, col: 7, offset: 43191},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1259, col: 7, offset: 43209},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 7, offset: 43228},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 1261, col: 7, offset: 43291},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1262, col: 7, offset: 43334},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1263, col: 7, offset: 43359},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1267, col: 1, offset: 43439},
			expr: &actionExpr{
				pos: position{line: 1268, col: 5, offset: 43483},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1268, col: 5, offset: 43483},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1268, col: 5, offset: 43483},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1268, col: 16, offset: 43494},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 17, offset: 43495},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 5, offset: 43521},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1269, col: 11, offset: 43527},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1269, col: 11, offset: 43527},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1270, col: 11, offset: 43562},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1271, col: 11, offset: 43581},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1272, col: 11, offset: 43602},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1273, col: 11, offset: 43623},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 11, offset: 43647},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1278, col: 1, offset: 43749},
			expr: &choiceExpr{
				pos: position{line: 1279, col: 5, offset: 43798},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1279, col: 5, offset: 43798},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1280, col: 7, offset: 43900},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1280, col: 7, offset: 43900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1280, col: 7, offset: 43900},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1280, col: 12, offset: 43905},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1284, col: 1, offset: 44083},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 5, offset: 44116},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1285, col: 5, offset: 44116},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1285, col: 5, offset: 44116},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1285, col: 6, offset: 44117},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1285, col: 6, offset: 44117},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1285, col: 10, offset: 44121},
											expr: &litMatcher{
												pos:        position{line: 1285, col: 11, offset: 44122},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1285, col: 16, offset: 44127},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1285, col: 26, offset: 44137},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1285, col: 60, offset: 44171},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1287, col: 9, offset: 44376},
						run: (*parser).callonSingleQuoteMonospaceText11,
						expr: &seqExpr{
							pos: position{line: 1287, col: 9, offset: 44376},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1287, col: 9, offset: 44376},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1287, col: 13, offset: 44380},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1287, col: 23, offset: 44390},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1287, col: 23, offset: 44390},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1287, col: 27, offset: 44394},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1287, col: 61, offset: 44428},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1291, col: 1, offset: 44654},
			expr: &seqExpr{
				pos: position{line: 1291, col: 37, offset: 44690},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1291, col: 37, offset: 44690},
						expr: &ruleRefExpr{
							pos:  position{line: 1291, col: 38, offset: 44691},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1291, col: 44, offset: 44697},
						expr: &ruleRefExpr{
							pos:  position{line: 1291, col: 44, offset: 44697},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1293, col: 1, offset: 44731},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 5, offset: 44772},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 5, offset: 44772},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1295, col: 7, offset: 44783},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1295, col: 7, offset: 44783},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1295, col: 15, offset: 44791},
								expr: &ruleRefExpr{
									pos:  position{line: 1295, col: 16, offset: 44792},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 7, offset: 44806},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 7, offset: 44834},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 7, offset: 44857},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 7, offset: 44875},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1300, col: 7, offset: 44894},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1300, col: 7, offset: 44894},
								expr: &ruleRefExpr{
									pos:  position{line: 1300, col: 7, offset: 44894},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1300, col: 14, offset: 44901},
								expr: &seqExpr{
									pos: position{line: 1300, col: 15, offset: 44902},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1300, col: 15, offset: 44902},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1300, col: 19, offset: 44906},
											expr: &litMatcher{
												pos:        position{line: 1300, col: 20, offset: 44907},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 7, offset: 45031},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 7, offset: 45074},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 7, offset: 45094},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 7, offset: 45119},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1306, col: 1, offset: 45162},
			expr: &actionExpr{
				pos: position{line: 1307, col: 5, offset: 45206},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1307, col: 5, offset: 45206},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1307, col: 5, offset: 45206},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1307, col: 16, offset: 45217},
								expr: &ruleRefExpr{
									pos:  position{line: 1307, col: 17, offset: 45218},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 5, offset: 45244},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1308, col: 11, offset: 45250},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1308, col: 11, offset: 45250},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 11, offset: 45285},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1310, col: 11, offset: 45304},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1311, col: 11, offset: 45325},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 11, offset: 45346},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1313, col: 11, offset: 45370},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1317, col: 1, offset: 45472},
			expr: &actionExpr{
				pos: position{line: 1318, col: 5, offset: 45521},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1318, col: 6, offset: 45522},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1318, col: 6, offset: 45522},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1319, col: 7, offset: 45626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1319, col: 7, offset: 45626},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1319, col: 11, offset: 45630},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1323, col: 1, offset: 45808},
			expr: &choiceExpr{
				pos: position{line: 1324, col: 5, offset: 45837},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1324, col: 5, offset: 45837},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1324, col: 5, offset: 45837},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1324, col: 5, offset: 45837},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 18, offset: 45850},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 40, offset: 45872},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1324, col: 45, offset: 45877},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 55, offset: 45887},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 89, offset: 45921},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1326, col: 9, offset: 46078},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1326, col: 9, offset: 46078},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1326, col: 9, offset: 46078},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1326, col: 22, offset: 46091},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1326, col: 44, offset: 46113},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1326, col: 49, offset: 46118},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1326, col: 59, offset: 46128},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1326, col: 93, offset: 46162},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1329, col: 9, offset: 46362},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1329, col: 9, offset: 46362},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1329, col: 9, offset: 46362},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1329, col: 22, offset: 46375},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1329, col: 44, offset: 46397},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1329, col: 48, offset: 46401},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1329, col: 58, offset: 46411},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1329, col: 92, offset: 46445},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1336, col: 1, offset: 46666},
			expr: &choiceExpr{
				pos: position{line: 1336, col: 15, offset: 46680},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1336, col: 15, offset: 46680},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 39, offset: 46704},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1338, col: 1, offset: 46727},
			expr: &actionExpr{
				pos: position{line: 1338, col: 26, offset: 46752},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 26, offset: 46752},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1338, col: 26, offset: 46752},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 31, offset: 46757},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 41, offset: 46767},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1338, col: 72, offset: 46798},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1342, col: 1, offset: 46944},
			expr: &seqExpr{
				pos: position{line: 1342, col: 34, offset: 46977},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1342, col: 34, offset: 46977},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1342, col: 63, offset: 47006},
						expr: &seqExpr{
							pos: position{line: 1342, col: 64, offset: 47007},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1342, col: 64, offset: 47007},
									expr: &litMatcher{
										pos:        position{line: 1342, col: 66, offset: 47009},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1342, col: 73, offset: 47016},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1342, col: 73, offset: 47016},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1342, col: 81, offset: 47024},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1344, col: 1, offset: 47091},
			expr: &choiceExpr{
				pos: position{line: 1344, col: 33, offset: 47123},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1344, col: 33, offset: 47123},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1345, col: 7, offset: 47134},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1345, col: 7, offset: 47134},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1345, col: 15, offset: 47142},
								expr: &ruleRefExpr{
									pos:  position{line: 1345, col: 16, offset: 47143},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 7, offset: 47157},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 7, offset: 47185},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 7, offset: 47208},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 7, offset: 47226},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 7, offset: 47245},
						name: "NonDoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 7, offset: 47276},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 7, offset: 47301},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1354, col: 1, offset: 47341},
			expr: &actionExpr{
				pos: position{line: 1355, col: 5, offset: 47373},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1355, col: 5, offset: 47373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1355, col: 5, offset: 47373},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1355, col: 16, offset: 47384},
								expr: &ruleRefExpr{
									pos:  position{line: 1355, col: 17, offset: 47385},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1356, col: 5, offset: 47411},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1356, col: 11, offset: 47417},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1356, col: 11, offset: 47417},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1357, col: 11, offset: 47436},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1358, col: 11, offset: 47457},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1359, col: 11, offset: 47481},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1360, col: 11, offset: 47513},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1361, col: 11, offset: 47537},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1365, col: 1, offset: 47639},
			expr: &choiceExpr{
				pos: position{line: 1366, col: 5, offset: 47685},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1366, col: 5, offset: 47685},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1367, col: 7, offset: 47784},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1367, col: 7, offset: 47784},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1367, col: 7, offset: 47784},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1367, col: 12, offset: 47789},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1371, col: 1, offset: 47962},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 26, offset: 47987},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1371, col: 26, offset: 47987},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1371, col: 26, offset: 47987},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1371, col: 27, offset: 47988},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1371, col: 27, offset: 47988},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1371, col: 31, offset: 47992},
											expr: &litMatcher{
												pos:        position{line: 1371, col: 32, offset: 47993},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1371, col: 37, offset: 47998},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 47, offset: 48008},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 78, offset: 48039},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1373, col: 9, offset: 48241},
						run: (*parser).callonSingleQuoteMarkedText11,
						expr: &seqExpr{
							pos: position{line: 1373, col: 9, offset: 48241},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1373, col: 9, offset: 48241},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1373, col: 13, offset: 48245},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1373, col: 23, offset: 48255},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1373, col: 23, offset: 48255},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1373, col: 27, offset: 48259},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1373, col: 58, offset: 48290},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1377, col: 1, offset: 48511},
			expr: &seqExpr{
				pos: position{line: 1377, col: 34, offset: 48544},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1377, col: 34, offset: 48544},
						expr: &ruleRefExpr{
							pos:  position{line: 1377, col: 35, offset: 48545},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1377, col: 41, offset: 48551},
						expr: &ruleRefExpr{
							pos:  position{line: 1377, col: 41, offset: 48551},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1379, col: 1, offset: 48582},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 33, offset: 48614},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1379, col: 33, offset: 48614},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1380, col: 7, offset: 48625},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1380, col: 7, offset: 48625},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1380, col: 15, offset: 48633},
								expr: &ruleRefExpr{
									pos:  position{line: 1380, col: 16, offset: 48634},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 7, offset: 48648},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 7, offset: 48676},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 7, offset: 48699},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 7, offset: 48717},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1385, col: 7, offset: 48736},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1385, col: 7, offset: 48736},
								expr: &ruleRefExpr{
									pos:  position{line: 1385, col: 7, offset: 48736},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1385, col: 14, offset: 48743},
								expr: &seqExpr{
									pos: position{line: 1385, col: 15, offset: 48744},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1385, col: 15, offset: 48744},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1385, col: 19, offset: 48748},
											expr: &litMatcher{
												pos:        position{line: 1385, col: 20, offset: 48749},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 7, offset: 48761},
						name: "NonSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1387, col: 7, offset: 48792},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 7, offset: 48817},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1390, col: 1, offset: 48857},
			expr: &actionExpr{
				pos: position{line: 1391, col: 5, offset: 48889},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 5, offset: 48889},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1391, col: 5, offset: 48889},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 16, offset: 48900},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 17, offset: 48901},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1392, col: 5, offset: 48927},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1392, col: 11, offset: 48933},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1392, col: 11, offset: 48933},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1393, col: 11, offset: 48965},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1394, col: 11, offset: 48984},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1395, col: 11, offset: 49005},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1396, col: 11, offset: 49029},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1397, col: 11, offset: 49053},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1400, col: 1, offset: 49154},
			expr: &choiceExpr{
				pos: position{line: 1401, col: 5, offset: 49200},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1401, col: 5, offset: 49200},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1402, col: 7, offset: 49297},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1402, col: 7, offset: 49297},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1402, col: 7, offset: 49297},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1402, col: 11, offset: 49301},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1406, col: 1, offset: 49472},
			expr: &choiceExpr{
				pos: position{line: 1407, col: 5, offset: 49497},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1407, col: 5, offset: 49497},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1407, col: 5, offset: 49497},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1407, col: 5, offset: 49497},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1407, col: 18, offset: 49510},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1407, col: 40, offset: 49532},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1407, col: 45, offset: 49537},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1407, col: 55, offset: 49547},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1407, col: 86, offset: 49578},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1409, col: 9, offset: 49735},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1409, col: 9, offset: 49735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1409, col: 9, offset: 49735},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1409, col: 22, offset: 49748},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1409, col: 44, offset: 49770},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1409, col: 49, offset: 49775},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1409, col: 59, offset: 49785},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1409, col: 90, offset: 49816},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1412, col: 9, offset: 50016},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1412, col: 9, offset: 50016},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1412, col: 9, offset: 50016},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1412, col: 22, offset: 50029},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1412, col: 44, offset: 50051},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1412, col: 48, offset: 50055},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1412, col: 58, offset: 50065},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1412, col: 89, offset: 50096},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1419, col: 1, offset: 50324},
			expr: &actionExpr{
				pos: position{line: 1419, col: 18, offset: 50341},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1419, col: 18, offset: 50341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1419, col: 18, offset: 50341},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1419, col: 22, offset: 50345},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 31, offset: 50354},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1419, col: 53, offset: 50376},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1423, col: 1, offset: 50484},
			expr: &choiceExpr{
				pos: position{line: 1423, col: 25, offset: 50508},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1423, col: 25, offset: 50508},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1423, col: 38, offset: 50521},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1425, col: 1, offset: 50540},
			expr: &actionExpr{
				pos: position{line: 1425, col: 21, offset: 50560},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1425, col: 21, offset: 50560},
					expr: &charClassMatcher{
						pos:        position{line: 1425, col: 21, offset: 50560},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1429, col: 1, offset: 50645},
			expr: &actionExpr{
				pos: position{line: 1429, col: 25, offset: 50669},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1429, col: 25, offset: 50669},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1429, col: 25, offset: 50669},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1429, col: 38, offset: 50682},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1429, col: 60, offset: 50704},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1429, col: 64, offset: 50708},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1429, col: 73, offset: 50717},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1429, col: 95, offset: 50739},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1436, col: 1, offset: 50957},
			expr: &actionExpr{
				pos: position{line: 1436, col: 20, offset: 50976},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1436, col: 20, offset: 50976},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1436, col: 20, offset: 50976},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1436, col: 24, offset: 50980},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1436, col: 33, offset: 50989},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1436, col: 57, offset: 51013},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1440, col: 1, offset: 51123},
			expr: &choiceExpr{
				pos: position{line: 1440, col: 27, offset: 51149},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1440, col: 27, offset: 51149},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 40, offset: 51162},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1442, col: 1, offset: 51183},
			expr: &actionExpr{
				pos: position{line: 1442, col: 23, offset: 51205},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1442, col: 23, offset: 51205},
					expr: &charClassMatcher{
						pos:        position{line: 1442, col: 23, offset: 51205},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1446, col: 1, offset: 51290},
			expr: &actionExpr{
				pos: position{line: 1446, col: 27, offset: 51316},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 27, offset: 51316},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1446, col: 27, offset: 51316},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 40, offset: 51329},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1446, col: 62, offset: 51351},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 66, offset: 51355},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 75, offset: 51364},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1446, col: 99, offset: 51388},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1454, col: 1, offset: 51700},
			expr: &choiceExpr{
				pos: position{line: 1454, col: 17, offset: 51716},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1454, col: 17, offset: 51716},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1454, col: 38, offset: 51737},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1456, col: 1, offset: 51757},
			expr: &actionExpr{
				pos: position{line: 1456, col: 23, offset: 51779},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 23, offset: 51779},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1456, col: 23, offset: 51779},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1456, col: 46, offset: 51802},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 55, offset: 51811},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1456, col: 82, offset: 51838},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1460, col: 1, offset: 51950},
			expr: &actionExpr{
				pos: position{line: 1460, col: 31, offset: 51980},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1460, col: 31, offset: 51980},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1460, col: 41, offset: 51990},
						expr: &ruleRefExpr{
							pos:  position{line: 1460, col: 41, offset: 51990},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1464, col: 1, offset: 52076},
			expr: &seqExpr{
				pos: position{line: 1464, col: 27, offset: 52102},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1464, col: 27, offset: 52102},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1464, col: 32, offset: 52107},
						expr: &charClassMatcher{
							pos:        position{line: 1464, col: 33, offset: 52108},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1466, col: 1, offset: 52119},
			expr: &litMatcher{
				pos:        position{line: 1466, col: 25, offset: 52143},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1469, col: 1, offset: 52231},
			expr: &actionExpr{
				pos: position{line: 1470, col: 5, offset: 52265},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1470, col: 5, offset: 52265},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1471, col: 9, offset: 52283},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1471, col: 9, offset: 52283},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1471, col: 9, offset: 52283},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1471, col: 19, offset: 52293},
										expr: &ruleRefExpr{
											pos:  position{line: 1471, col: 20, offset: 52294},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1472, col: 11, offset: 52350},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1472, col: 11, offset: 52350},
										expr: &ruleRefExpr{
											pos:  position{line: 1472, col: 11, offset: 52350},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1472, col: 18, offset: 52357},
										expr: &ruleRefExpr{
											pos:  position{line: 1472, col: 19, offset: 52358},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1473, col: 12, offset: 52390},
								run: (*parser).callonSingleQuotedStringElement13,
								expr: &seqExpr{
									pos: position{line: 1473, col: 12, offset: 52390},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1473, col: 12, offset: 52390},
											expr: &litMatcher{
												pos:        position{line: 1473, col: 13, offset: 52391},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1473, col: 17, offset: 52395},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1473, col: 26, offset: 52404},
												name: "Symbol",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1474, col: 11, offset: 52476},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1475, col: 11, offset: 52517},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1476, col: 11, offset: 52546},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1481, col: 1, offset: 52625},
			expr: &actionExpr{
				pos: position{line: 1482, col: 5, offset: 52663},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1482, col: 5, offset: 52663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1482, col: 5, offset: 52663},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1482, col: 16, offset: 52674},
								expr: &ruleRefExpr{
									pos:  position{line: 1482, col: 17, offset: 52675},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1483, col: 5, offset: 52701},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1483, col: 11, offset: 52707},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1483, col: 11, offset: 52707},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1484, col: 11, offset: 52726},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1485, col: 12, offset: 52748},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1485, col: 12, offset: 52748},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1485, col: 12, offset: 52748},
													expr: &litMatcher{
														pos:        position{line: 1485, col: 13, offset: 52749},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1485, col: 18, offset: 52754},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1485, col: 27, offset: 52763},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1486, col: 11, offset: 52812},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1487, col: 11, offset: 52836},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1488, col: 11, offset: 52862},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1492, col: 1, offset: 52959},
			expr: &choiceExpr{
				pos: position{line: 1492, col: 41, offset: 52999},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1492, col: 41, offset: 52999},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1492, col: 55, offset: 53013},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1492, col: 55, offset: 53013},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1492, col: 55, offset: 53013},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1492, col: 59, offset: 53017},
									expr: &litMatcher{
										pos:        position{line: 1492, col: 60, offset: 53018},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1496, col: 1, offset: 53090},
			expr: &actionExpr{
				pos: position{line: 1496, col: 23, offset: 53112},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 23, offset: 53112},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1496, col: 23, offset: 53112},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 46, offset: 53135},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 55, offset: 53144},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1496, col: 82, offset: 53171},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1500, col: 1, offset: 53283},
			expr: &actionExpr{
				pos: position{line: 1500, col: 31, offset: 53313},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1500, col: 31, offset: 53313},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1500, col: 41, offset: 53323},
						expr: &ruleRefExpr{
							pos:  position{line: 1500, col: 41, offset: 53323},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1505, col: 1, offset: 53491},
			expr: &actionExpr{
				pos: position{line: 1505, col: 30, offset: 53520},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1505, col: 30, offset: 53520},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1506, col: 5, offset: 53534},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1506, col: 5, offset: 53534},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1506, col: 5, offset: 53534},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1506, col: 15, offset: 53544},
										expr: &ruleRefExpr{
											pos:  position{line: 1506, col: 16, offset: 53545},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1507, col: 7, offset: 53597},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1507, col: 7, offset: 53597},
										expr: &ruleRefExpr{
											pos:  position{line: 1507, col: 7, offset: 53597},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1507, col: 14, offset: 53604},
										expr: &ruleRefExpr{
											pos:  position{line: 1507, col: 15, offset: 53605},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1508, col: 7, offset: 53632},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1509, col: 7, offset: 53669},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1510, col: 7, offset: 53694},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1514, col: 1, offset: 53768},
			expr: &actionExpr{
				pos: position{line: 1515, col: 5, offset: 53806},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1515, col: 5, offset: 53806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1515, col: 5, offset: 53806},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1515, col: 16, offset: 53817},
								expr: &ruleRefExpr{
									pos:  position{line: 1515, col: 17, offset: 53818},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 5, offset: 53844},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1516, col: 11, offset: 53850},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1516, col: 11, offset: 53850},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1517, col: 11, offset: 53869},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1518, col: 12, offset: 53891},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1518, col: 12, offset: 53891},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1518, col: 12, offset: 53891},
													expr: &litMatcher{
														pos:        position{line: 1518, col: 13, offset: 53892},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1518, col: 19, offset: 53898},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1518, col: 28, offset: 53907},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1519, col: 11, offset: 53956},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1520, col: 11, offset: 53980},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1521, col: 11, offset: 54006},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1525, col: 1, offset: 54103},
			expr: &seqExpr{
				pos: position{line: 1525, col: 27, offset: 54129},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1525, col: 27, offset: 54129},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1525, col: 33, offset: 54135},
						expr: &charClassMatcher{
							pos:        position{line: 1525, col: 34, offset: 54136},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1527, col: 1, offset: 54147},
			expr: &litMatcher{
				pos:        position{line: 1527, col: 25, offset: 54171},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1529, col: 1, offset: 54178},
			expr: &actionExpr{
				pos: position{line: 1529, col: 41, offset: 54218},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1529, col: 42, offset: 54219},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1529, col: 42, offset: 54219},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1529, col: 56, offset: 54233},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1529, col: 56, offset: 54233},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1529, col: 60, offset: 54237},
									expr: &litMatcher{
										pos:        position{line: 1529, col: 61, offset: 54238},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 1538, col: 1, offset: 54504},
			expr: &actionExpr{
				pos: position{line: 1539, col: 5, offset: 54520},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 1539, col: 5, offset: 54520},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1539, col: 5, offset: 54520},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 1539, col: 12, offset: 54527},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1539, col: 12, offset: 54527},
									expr: &litMatcher{
										pos:        position{line: 1539, col: 13, offset: 54528},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1543, col: 5, offset: 54636},
							run: (*parser).callonSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 1555, col: 5, offset: 55142},
							expr: &ruleRefExpr{
								pos:  position{line: 1555, col: 5, offset: 55142},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1555, col: 12, offset: 55149},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1555, col: 19, offset: 55156},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1555, col: 36, offset: 55173},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 1579, col: 1, offset: 56004},
			expr: &actionExpr{
				pos: position{line: 1579, col: 20, offset: 56023},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1579, col: 20, offset: 56023},
					expr: &charClassMatcher{
						pos:        position{line: 1579, col: 20, offset: 56023},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 1590, col: 1, offset: 56370},
			expr: &actionExpr{
				pos: position{line: 1590, col: 20, offset: 56389},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1590, col: 20, offset: 56389},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1590, col: 20, offset: 56389},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1590, col: 29, offset: 56398},
								expr: &choiceExpr{
									pos: position{line: 1591, col: 5, offset: 56404},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1591, col: 5, offset: 56404},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1592, col: 7, offset: 56421},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1593, col: 7, offset: 56445},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1594, col: 7, offset: 56473},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1595, col: 7, offset: 56586},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1596, col: 7, offset: 56600},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1596, col: 17, offset: 56610},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 1601, col: 1, offset: 56707},
			expr: &actionExpr{
				pos: position{line: 1601, col: 27, offset: 56733},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 27, offset: 56733},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1601, col: 27, offset: 56733},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1601, col: 36, offset: 56742},
								expr: &choiceExpr{
									pos: position{line: 1602, col: 5, offset: 56748},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1602, col: 5, offset: 56748},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1603, col: 7, offset: 56765},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1604, col: 7, offset: 56793},
											name: "Quotes",
										},
										&ruleRefExpr{
											pos:  position{line: 1605, col: 7, offset: 56806},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1606, col: 7, offset: 56919},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1607, col: 7, offset: 56933},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1607, col: 17, offset: 56943},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 1612, col: 1, offset: 57043},
			expr: &actionExpr{
				pos: position{line: 1612, col: 16, offset: 57058},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 1612, col: 16, offset: 57058},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1612, col: 16, offset: 57058},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1612, col: 25, offset: 57067},
								expr: &choiceExpr{
									pos: position{line: 1613, col: 5, offset: 57073},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1613, col: 5, offset: 57073},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1614, col: 7, offset: 57090},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 1615, col: 7, offset: 57114},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1616, col: 7, offset: 57137},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1617, col: 7, offset: 57149},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 1618, col: 7, offset: 57177},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1619, col: 7, offset: 57290},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1620, col: 7, offset: 57308},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1620, col: 17, offset: 57318},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 1625, col: 1, offset: 57414},
			expr: &actionExpr{
				pos: position{line: 1625, col: 16, offset: 57429},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 1625, col: 16, offset: 57429},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1625, col: 16, offset: 57429},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1625, col: 25, offset: 57438},
								expr: &choiceExpr{
									pos: position{line: 1626, col: 5, offset: 57444},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1626, col: 5, offset: 57444},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1627, col: 7, offset: 57461},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 1628, col: 7, offset: 57479},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1629, col: 7, offset: 57592},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1630, col: 7, offset: 57606},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1630, col: 17, offset: 57616},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 1635, col: 1, offset: 57699},
			expr: &actionExpr{
				pos: position{line: 1635, col: 14, offset: 57712},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 14, offset: 57712},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1635, col: 14, offset: 57712},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1635, col: 22, offset: 57720},
								expr: &anyMatcher{
									line: 1635, col: 23, offset: 57721,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1635, col: 27, offset: 57725},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 1642, col: 1, offset: 58030},
			expr: &actionExpr{
				pos: position{line: 1642, col: 16, offset: 58045},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 1642, col: 16, offset: 58045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1642, col: 16, offset: 58045},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1642, col: 25, offset: 58054},
								expr: &ruleRefExpr{
									pos:  position{line: 1642, col: 26, offset: 58055},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1642, col: 47, offset: 58076},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 1646, col: 1, offset: 58132},
			expr: &actionExpr{
				pos: position{line: 1646, col: 23, offset: 58154},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 1646, col: 23, offset: 58154},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1646, col: 23, offset: 58154},
							expr: &ruleRefExpr{
								pos:  position{line: 1646, col: 24, offset: 58155},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 5, offset: 58163},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1648, col: 9, offset: 58181},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1648, col: 9, offset: 58181},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1649, col: 11, offset: 58202},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1650, col: 11, offset: 58218},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 1651, col: 11, offset: 58236},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1652, col: 11, offset: 58264},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1653, col: 11, offset: 58291},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1654, col: 11, offset: 58307},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1655, col: 11, offset: 58339},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1656, col: 11, offset: 58361},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1657, col: 11, offset: 58383},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1658, col: 11, offset: 58409},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1659, col: 11, offset: 58526},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 1664, col: 1, offset: 58620},
			expr: &actionExpr{
				pos: position{line: 1664, col: 16, offset: 58635},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 16, offset: 58635},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1664, col: 16, offset: 58635},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1664, col: 25, offset: 58644},
								expr: &choiceExpr{
									pos: position{line: 1665, col: 5, offset: 58650},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1665, col: 5, offset: 58650},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1666, col: 7, offset: 58667},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 1667, col: 7, offset: 58679},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1668, col: 7, offset: 58792},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1669, col: 7, offset: 58806},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1669, col: 17, offset: 58816},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 1674, col: 1, offset: 58918},
			expr: &actionExpr{
				pos: position{line: 1674, col: 22, offset: 58939},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 1674, col: 22, offset: 58939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1674, col: 22, offset: 58939},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1674, col: 31, offset: 58948},
								expr: &choiceExpr{
									pos: position{line: 1675, col: 5, offset: 58954},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1675, col: 5, offset: 58954},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1676, col: 7, offset: 58971},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 1677, col: 7, offset: 58989},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1678, col: 7, offset: 59102},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1679, col: 7, offset: 59116},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1679, col: 17, offset: 59126},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 1684, col: 1, offset: 59253},
			expr: &actionExpr{
				pos: position{line: 1684, col: 27, offset: 59279},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 1684, col: 27, offset: 59279},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1684, col: 27, offset: 59279},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1684, col: 36, offset: 59288},
								expr: &choiceExpr{
									pos: position{line: 1685, col: 5, offset: 59294},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1685, col: 5, offset: 59294},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1686, col: 7, offset: 59311},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1687, col: 7, offset: 59334},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1688, col: 7, offset: 59447},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1689, col: 7, offset: 59461},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1689, col: 17, offset: 59471},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 1693, col: 1, offset: 59527},
			expr: &actionExpr{
				pos: position{line: 1693, col: 18, offset: 59544},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 1693, col: 18, offset: 59544},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1693, col: 18, offset: 59544},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1693, col: 27, offset: 59553},
								expr: &choiceExpr{
									pos: position{line: 1694, col: 5, offset: 59559},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1694, col: 5, offset: 59559},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1695, col: 7, offset: 59576},
											name: "Callout",
										},
										&ruleRefExpr{
											pos:  position{line: 1696, col: 7, offset: 59632},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 1697, col: 7, offset: 59655},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1698, col: 7, offset: 59768},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 1699, col: 7, offset: 59782},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1699, col: 17, offset: 59792},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 1703, col: 1, offset: 59852},
			expr: &actionExpr{
				pos: position{line: 1705, col: 5, offset: 59934},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 1705, col: 5, offset: 59934},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1705, col: 5, offset: 59934},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 1708, col: 5, offset: 59994},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1709, col: 9, offset: 60012},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1709, col: 9, offset: 60012},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 1710, col: 11, offset: 60033},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1711, col: 11, offset: 60056},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1712, col: 11, offset: 60072},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1713, col: 11, offset: 60101},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1714, col: 11, offset: 60127},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1715, col: 11, offset: 60153},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1716, col: 11, offset: 60180},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1717, col: 11, offset: 60206},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1718, col: 11, offset: 60235},
										name: "IndexTerm",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1722, col: 1, offset: 60291},
			expr: &actionExpr{
				pos: position{line: 1724, col: 5, offset: 60379},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1724, col: 5, offset: 60379},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1724, col: 5, offset: 60379},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 1727, col: 5, offset: 60451},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1728, col: 9, offset: 60469},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1728, col: 9, offset: 60469},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1728, col: 33, offset: 60493},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1728, col: 57, offset: 60517},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 1733, col: 1, offset: 60577},
			expr: &actionExpr{
				pos: position{line: 1735, col: 5, offset: 60663},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 1735, col: 5, offset: 60663},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1735, col: 5, offset: 60663},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1738, col: 5, offset: 60733},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1739, col: 9, offset: 60751},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1744, col: 1, offset: 60804},
			expr: &actionExpr{
				pos: position{line: 1746, col: 5, offset: 60880},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1746, col: 5, offset: 60880},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1746, col: 5, offset: 60880},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 1749, col: 5, offset: 60940},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1750, col: 9, offset: 60958},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1750, col: 9, offset: 60958},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1751, col: 11, offset: 60980},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 1755, col: 1, offset: 61039},
			expr: &actionExpr{
				pos: position{line: 1757, col: 5, offset: 61121},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 1757, col: 5, offset: 61121},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1757, col: 5, offset: 61121},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 1760, col: 5, offset: 61187},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1761, col: 9, offset: 61205},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1766, col: 1, offset: 61255},
			expr: &actionExpr{
				pos: position{line: 1768, col: 5, offset: 61342},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 1768, col: 5, offset: 61342},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1768, col: 5, offset: 61342},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 1771, col: 5, offset: 61413},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1773, col: 9, offset: 61511},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1773, col: 9, offset: 61511},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 1773, col: 9, offset: 61511},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 1776, col: 11, offset: 61615},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 1776, col: 12, offset: 61616},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 1776, col: 12, offset: 61616},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 1776, col: 18, offset: 61622},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 1776, col: 24, offset: 61628},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1786, col: 1, offset: 61857},
			expr: &choiceExpr{
				pos: position{line: 1786, col: 11, offset: 61867},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1786, col: 11, offset: 61867},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 24, offset: 61880},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 36, offset: 61892},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 48, offset: 61904},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 61, offset: 61917},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 72, offset: 61928},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1788, col: 1, offset: 61947},
			expr: &actionExpr{
				pos: position{line: 1788, col: 15, offset: 61961},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1788, col: 15, offset: 61961},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 1792, col: 1, offset: 62023},
			expr: &litMatcher{
				pos:        position{line: 1792, col: 18, offset: 62040},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1794, col: 1, offset: 62063},
			expr: &actionExpr{
				pos: position{line: 1794, col: 14, offset: 62076},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1794, col: 14, offset: 62076},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1798, col: 1, offset: 62139},
			expr: &actionExpr{
				pos: position{line: 1798, col: 14, offset: 62152},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1798, col: 14, offset: 62152},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1802, col: 1, offset: 62216},
			expr: &actionExpr{
				pos: position{line: 1802, col: 15, offset: 62230},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1802, col: 15, offset: 62230},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1806, col: 1, offset: 62293},
			expr: &actionExpr{
				pos: position{line: 1806, col: 13, offset: 62305},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1806, col: 13, offset: 62305},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1814, col: 1, offset: 62590},
			expr: &actionExpr{
				pos: position{line: 1814, col: 22, offset: 62611},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 22, offset: 62611},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1814, col: 22, offset: 62611},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1814, col: 31, offset: 62620},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1814, col: 35, offset: 62624},
							expr: &charClassMatcher{
								pos:        position{line: 1814, col: 36, offset: 62625},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1821, col: 1, offset: 62903},
			expr: &actionExpr{
				pos: position{line: 1821, col: 18, offset: 62920},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1821, col: 18, offset: 62920},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1821, col: 19, offset: 62921},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1821, col: 19, offset: 62921},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1821, col: 27, offset: 62929},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1821, col: 37, offset: 62939},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1821, col: 45, offset: 62947},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1821, col: 55, offset: 62957},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1821, col: 63, offset: 62965},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1821, col: 72, offset: 62974},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 1828, col: 1, offset: 63133},
			expr: &actionExpr{
				pos: position{line: 1829, col: 5, offset: 63156},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 1829, col: 5, offset: 63156},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1829, col: 5, offset: 63156},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1829, col: 11, offset: 63162},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1830, col: 5, offset: 63182},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 1834, col: 5, offset: 63322},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 1835, col: 5, offset: 63332},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1835, col: 12, offset: 63339},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1836, col: 5, offset: 63360},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1836, col: 23, offset: 63378},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 1840, col: 1, offset: 63509},
			expr: &actionExpr{
				pos: position{line: 1841, col: 5, offset: 63533},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 1841, col: 5, offset: 63533},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1841, col: 5, offset: 63533},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1841, col: 11, offset: 63539},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 1842, col: 5, offset: 63559},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 1846, col: 5, offset: 63699},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1847, col: 5, offset: 63708},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1847, col: 12, offset: 63715},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 1848, col: 5, offset: 63736},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1848, col: 23, offset: 63754},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 1852, col: 1, offset: 63886},
			expr: &actionExpr{
				pos: position{line: 1852, col: 18, offset: 63903},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1852, col: 19, offset: 63904},
					expr: &charClassMatcher{
						pos:        position{line: 1852, col: 19, offset: 63904},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 1856, col: 1, offset: 63961},
			expr: &actionExpr{
				pos: position{line: 1856, col: 19, offset: 63979},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1856, col: 19, offset: 63979},
					expr: &charClassMatcher{
						pos:        position{line: 1856, col: 19, offset: 63979},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1863, col: 1, offset: 64141},
			expr: &charClassMatcher{
				pos:        position{line: 1863, col: 13, offset: 64153},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1865, col: 1, offset: 64163},
			expr: &choiceExpr{
				pos: position{line: 1865, col: 16, offset: 64178},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1865, col: 16, offset: 64178},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1865, col: 22, offset: 64184},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1865, col: 28, offset: 64190},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1865, col: 34, offset: 64196},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1865, col: 40, offset: 64202},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1865, col: 46, offset: 64208},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1867, col: 1, offset: 64214},
			expr: &actionExpr{
				pos: position{line: 1867, col: 14, offset: 64227},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1867, col: 14, offset: 64227},
					expr: &charClassMatcher{
						pos:        position{line: 1867, col: 14, offset: 64227},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1871, col: 1, offset: 64281},
			expr: &choiceExpr{
				pos: position{line: 1875, col: 5, offset: 64608},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1875, col: 5, offset: 64608},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1875, col: 5, offset: 64608},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1875, col: 5, offset: 64608},
									expr: &charClassMatcher{
										pos:        position{line: 1875, col: 5, offset: 64608},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1875, col: 15, offset: 64618},
									expr: &choiceExpr{
										pos: position{line: 1875, col: 17, offset: 64620},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1875, col: 17, offset: 64620},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1875, col: 30, offset: 64633},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1877, col: 9, offset: 64702},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1877, col: 9, offset: 64702},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1877, col: 9, offset: 64702},
									expr: &charClassMatcher{
										pos:        position{line: 1877, col: 9, offset: 64702},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1877, col: 19, offset: 64712},
									expr: &seqExpr{
										pos: position{line: 1877, col: 20, offset: 64713},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1877, col: 20, offset: 64713},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1877, col: 27, offset: 64720},
												expr: &charClassMatcher{
													pos:        position{line: 1877, col: 27, offset: 64720},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1882, col: 1, offset: 64812},
			expr: &choiceExpr{
				pos: position{line: 1886, col: 5, offset: 65005},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1886, col: 5, offset: 65005},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1886, col: 5, offset: 65005},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1886, col: 5, offset: 65005},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 1886, col: 14, offset: 65014},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 1886, col: 14, offset: 65014},
											expr: &charClassMatcher{
												pos:        position{line: 1886, col: 14, offset: 65014},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1889, col: 5, offset: 65095},
									expr: &choiceExpr{
										pos: position{line: 1889, col: 7, offset: 65097},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1889, col: 7, offset: 65097},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1889, col: 17, offset: 65107},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 1889, col: 47, offset: 65137},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1891, col: 9, offset: 65180},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1894, col: 1, offset: 65280},
			expr: &actionExpr{
				pos: position{line: 1894, col: 12, offset: 65291},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1894, col: 12, offset: 65291},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1898, col: 1, offset: 65364},
			expr: &actionExpr{
				pos: position{line: 1898, col: 17, offset: 65380},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1898, col: 17, offset: 65380},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1898, col: 22, offset: 65385},
						expr: &choiceExpr{
							pos: position{line: 1898, col: 23, offset: 65386},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1898, col: 23, offset: 65386},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 1898, col: 34, offset: 65397},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1902, col: 1, offset: 65486},
			expr: &actionExpr{
				pos: position{line: 1902, col: 13, offset: 65498},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1902, col: 13, offset: 65498},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1902, col: 13, offset: 65498},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1902, col: 20, offset: 65505},
								expr: &ruleRefExpr{
									pos:  position{line: 1902, col: 21, offset: 65506},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1902, col: 30, offset: 65515},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1902, col: 35, offset: 65520},
								expr: &choiceExpr{
									pos: position{line: 1902, col: 36, offset: 65521},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1902, col: 36, offset: 65521},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1902, col: 47, offset: 65532},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1906, col: 1, offset: 65625},
			expr: &actionExpr{
				pos: position{line: 1906, col: 23, offset: 65647},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1906, col: 23, offset: 65647},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1906, col: 23, offset: 65647},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1906, col: 31, offset: 65655},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1906, col: 39, offset: 65663},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1906, col: 44, offset: 65668},
								expr: &choiceExpr{
									pos: position{line: 1906, col: 45, offset: 65669},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1906, col: 45, offset: 65669},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 1906, col: 56, offset: 65680},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 1910, col: 1, offset: 65773},
			expr: &actionExpr{
				pos: position{line: 1910, col: 13, offset: 65785},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 1910, col: 13, offset: 65785},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1910, col: 22, offset: 65794},
						expr: &choiceExpr{
							pos: position{line: 1912, col: 5, offset: 65833},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1912, col: 5, offset: 65833},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 1912, col: 5, offset: 65833},
										expr: &charClassMatcher{
											pos:        position{line: 1912, col: 6, offset: 65834},
											val:        "[^\\r\\n[\\]\\uFFFD{&<> ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '{', '&', '<', '>', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1915, col: 7, offset: 65973},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1916, col: 7, offset: 66002},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 1917, col: 7, offset: 66025},
									run: (*parser).callonFilename10,
									expr: &litMatcher{
										pos:        position{line: 1917, col: 7, offset: 66025},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 1923, col: 1, offset: 66163},
			expr: &choiceExpr{
				pos: position{line: 1923, col: 11, offset: 66173},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1923, col: 11, offset: 66173},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1923, col: 23, offset: 66185},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1923, col: 36, offset: 66198},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1923, col: 47, offset: 66209},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1923, col: 58, offset: 66220},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 1925, col: 1, offset: 66231},
			expr: &actionExpr{
				pos: position{line: 1925, col: 7, offset: 66237},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1925, col: 7, offset: 66237},
					expr: &charClassMatcher{
						pos:        position{line: 1925, col: 7, offset: 66237},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 1929, col: 1, offset: 66370},
			expr: &actionExpr{
				pos: position{line: 1929, col: 10, offset: 66379},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 1929, col: 10, offset: 66379},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1933, col: 1, offset: 66429},
			expr: &actionExpr{
				pos: position{line: 1933, col: 11, offset: 66439},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 1933, col: 11, offset: 66439},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1933, col: 11, offset: 66439},
							expr: &litMatcher{
								pos:        position{line: 1933, col: 11, offset: 66439},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1933, col: 16, offset: 66444},
							expr: &ruleRefExpr{
								pos:  position{line: 1933, col: 16, offset: 66444},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1937, col: 1, offset: 66504},
			expr: &choiceExpr{
				pos: position{line: 1937, col: 10, offset: 66513},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1937, col: 10, offset: 66513},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1937, col: 16, offset: 66519},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1937, col: 16, offset: 66519},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1941, col: 1, offset: 66568},
			expr: &choiceExpr{
				pos: position{line: 1941, col: 12, offset: 66579},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1941, col: 12, offset: 66579},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1941, col: 19, offset: 66586},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 1941, col: 28, offset: 66595},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 1941, col: 28, offset: 66595},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1945, col: 1, offset: 66679},
			expr: &notExpr{
				pos: position{line: 1945, col: 8, offset: 66686},
				expr: &anyMatcher{
					line: 1945, col: 9, offset: 66687,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1947, col: 1, offset: 66690},
			expr: &choiceExpr{
				pos: position{line: 1947, col: 8, offset: 66697},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1947, col: 8, offset: 66697},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 1947, col: 14, offset: 66703},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock7(delimiter interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block
	return c.isValidBlockDelimiter(delimiter.(types.BlockDelimiter))

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock7(stack["delimiter"])
}

func (c *current) onDocumentFragmentElementWithinDelimitedBlock3(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentFragmentElementWithinDelimitedBlock3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentElementWithinDelimitedBlock3(stack["delimiter"])
}

func (c *current) onAttributeDeclaration3() error {
	// for attribute declarations, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonAttributeDeclaration3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration3()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	// c.globalStore.AddAttributeDeclaration(d)
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes3() error {
	// for block attributes, we always enable the 'header' substitutions
	return c.setSubstitutionPhase("header")

}

func (p *parser) callonBlockAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes3()
}

func (c *current) onBlockAttributes7(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["anchor"])
}

func (c *current) onBlockAttributes13(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue15()
}

func (c *current) onSingleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue18()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue15() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue15()
}

func (c *current) onDoubleQuotedAttributeValue18() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue18()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue21() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue7(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue7(stack["element"])
}

func (c *current) onUnquotedAttributeValue23(elements interface{}) (bool, error) {
	// post-parsing condition to verify that the value is not an empty string
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue23(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	if err := c.hasAttributeSubstitutions(); err != nil {
		return nil, err
	}
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.(types.InlineElements))

}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onCommentBlockContent1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonCommentBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent1(stack["content"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onLiteralBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal)
}

func (p *parser) callonLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockDelimiter1()
}

func (c *current) onFencedBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced)
}

func (p *parser) callonFencedBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockDelimiter1()
}

func (c *current) onListingBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing)
}

func (p *parser) callonListingBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockDelimiter1()
}

func (c *current) onExampleBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example)
}

func (p *parser) callonExampleBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockDelimiter1()
}

func (c *current) onCommentBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment)
}

func (p *parser) callonCommentBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockDelimiter1()
}

func (c *current) onQuoteBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote)
}

func (p *parser) callonQuoteBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockDelimiter1()
}

func (c *current) onSidebarBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonSidebarBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockDelimiter1()
}

func (c *current) onPassthroughBlockDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar)
}

func (p *parser) callonPassthroughBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockDelimiter1()
}

func (c *current) onDocumentTitle1(title, id interface{}) (interface{}, error) {
	return types.NewSection(0, title.(types.InlineElements), id.([]interface{}))

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatterDelimiter1() (interface{}, error) {
	return types.NewBlockDelimiter(types.FrontMatter)
}

func (p *parser) callonFrontMatterDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterDelimiter1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() error {
	// for images, we always enable the 'normal' substitutions
	return c.setSubstitutionPhase("normal")

}

func (p *parser) callonImageBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	c.unsetSubstitutionPhase()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText14(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText14(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText11(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText11(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onItalicWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonItalicWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicWord1()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText11(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText11(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText11(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteMarkedText11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText11(stack["elements"])
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13(stack["element"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return []interface{}{
		types.StringElement{Content: string(c.text)},
	}, nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(content interface{}) (interface{}, error) {
	s, _ := types.NewStringElement(string(c.text))
	return []interface{}{s}, nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["content"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename10()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
